# -*- coding: utf-8 -*-
##############################################################################
## Widget
##############################################################################
import os
import sys
import time
import requests
import threading
import json
import math
import shutil
import vtk
##############################################################################
from   PySide6                                   import QtCore
from   PySide6                                   import QtGui
from   PySide6                                   import QtWidgets
from   PySide6 . QtCore                          import *
from   PySide6 . QtGui                           import *
from   PySide6 . QtWidgets                       import *
from   AITK    . Qt6                             import *
##############################################################################
from   vtk     . qt . QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
##############################################################################
from   AITK    . Documents . JSON                import Save as SaveJson
##############################################################################
class VtkWidget ( QVTKRenderWindowInteractor , VirtualGui , AttachDock     ) :
  ############################################################################
  HavingMenu  = 1371434312
  ############################################################################
  attachNone  = Signal ( QWidget                                             )
  attachDock  = Signal ( QWidget , str , int , int                           )
  attachMdi   = Signal ( QWidget , int                                       )
  Leave       = Signal ( QWidget                                             )
  ############################################################################
  emitBustle  = Signal (                                                     )
  emitVacancy = Signal (                                                     )
  OnBusy      = Signal (                                                     )
  GoRelax     = Signal (                                                     )
  ############################################################################
  def __init__         ( self , parent = None , plan = None                ) :
    ##########################################################################
    super (                   ) . __init__ ( parent                          )
    super ( VirtualGui , self ) . __init__ (                                 )
    super ( AttachDock , self ) . __init__ (                                 )
    self . Initialize                      ( self                            )
    self . setPlanFunction                 ( plan                            )
    self . InitializeDock                  ( plan                            )
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setFunction           ( self . FunctionDocking , True             )
    ##########################################################################
    self . setAttribute          ( Qt . WA_InputMethodEnabled                )
    self . VoiceJSON =           {                                           }
    self . bgColor   = self . getSystemColor (                               )
    ##########################################################################
    self . emitBustle  . connect ( self . DoBustle                           )
    self . emitVacancy . connect ( self . DoVacancy                          )
    self . OnBusy      . connect ( self . AtBusy                             )
    self . GoRelax     . connect ( self . OnRelax                            )
    ##########################################################################
    self . PrepareRenderer       (                                           )
    ##########################################################################
    return
  ############################################################################
  def PrepareRenderer      ( self                                          ) :
    ##########################################################################
    self . rWindow    = self . GetRenderWindow (                             )
    self . renderer   = vtk  . vtkRenderer     (                             )
    self . renderer   . SetBackground          ( 1.0 , 1.0 , 1.0             )
    self . rWindow    . AddRenderer            ( self . renderer             )
    self . interactor = self . rWindow . GetInteractor (                     )
    ## self . Initialize      (                                                 )
    ##########################################################################
    return
  ############################################################################
  def ClearRenderer ( self                                                 ) :
    ##########################################################################
    if              ( self . rWindow . HasRenderer   ( self . renderer )   ) :
      ########################################################################
      self . rWindow  . RemoveRenderer ( self . renderer                     )
      self . renderer = None
    ##########################################################################
    return
  ############################################################################
  def ChangeBackgroundColor         ( self                                 ) :
    ##########################################################################
    C    = self . getSystemColor    (                                        )
    R    = C    . redF              (                                        )
    G    = C    . greenF            (                                        )
    B    = C    . blueF             (                                        )
    ##########################################################################
    self . bgColor = C
    ##########################################################################
    self . renderer . SetBackground ( R , G , B                              )
    ##########################################################################
    return
  ############################################################################
  def AssignBackgroundColor         ( self                                 ) :
    ##########################################################################
    C    = self . bgColor
    R    = C    . redF              (                                        )
    G    = C    . greenF            (                                        )
    B    = C    . blueF             (                                        )
    ##########################################################################
    self . renderer . SetBackground ( R , G , B                              )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PrepareForActions ( self                                             ) :
    return
  ############################################################################
  def focusInEvent            ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusIn ( event )                   ) :
      return
    ##########################################################################
    super ( ) . focusInEvent  ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def focusOutEvent           ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusOut ( event )                  ) :
      return
    ##########################################################################
    super ( ) . focusOutEvent ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared ( )                   ) :
      return False
    ##########################################################################
    self . setActionLabel    ( "Label" , self . windowTitle ( )              )
    self . AttachActions     ( True                                          )
    self . attachActionsTool (                                               )
    ##########################################################################
    return True
  ############################################################################
  def FocusOut        ( self                                               ) :
    return True
  ############################################################################
  def closeEvent           ( self , event                                  ) :
    ##########################################################################
    if                     ( not self . Shutdown ( )                       ) :
      ########################################################################
      event . ignore       (                                                 )
      ########################################################################
      return
    ##########################################################################
    super ( ) . closeEvent (        event                                    )
    ##########################################################################
    return
  ############################################################################
  def contextMenuEvent           ( self , event                            ) :
    ##########################################################################
    if                           ( self . Menu ( event . pos ( ) )         ) :
      event . accept             (                                           )
      return
    ##########################################################################
    super ( ) . contextMenuEvent ( event                                     )
    ##########################################################################
    return
  ############################################################################
  def resizeEvent           ( self , event                                 ) :
    ##########################################################################
    if                      ( self . Relocation ( )                        ) :
      event . accept        (                                                )
      return
    ##########################################################################
    super ( ) . resizeEvent ( event                                          )
    ##########################################################################
    return
  ############################################################################
  def showEvent           ( self , event                                   ) :
    ##########################################################################
    super ( ) . showEvent ( event                                            )
    self . Relocation     (                                                  )
    ##########################################################################
    return
  ############################################################################
  def Relocation              ( self                                       ) :
    return False
  ############################################################################
  def Shutdown          ( self                                             ) :
    ##########################################################################
    self . Leave . emit ( self                                               )
    ##########################################################################
    return True
  ############################################################################
  def AttachActions ( self , Enabled                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def DoBustle                ( self                                       ) :
    self . Bustle             (                                              )
    return
  ############################################################################
  def setBustle               ( self                                       ) :
    self . emitBustle  . emit (                                              )
    return
  ############################################################################
  def DoVacancy               ( self                                       ) :
    self . Vacancy            (                                              )
    return
  ############################################################################
  def setVacancy              ( self                                       ) :
    self . emitVacancy . emit (                                              )
    return
  ############################################################################
  def AtBusy           ( self                                              ) :
    ##########################################################################
    self . doStartBusy (                                                     )
    ##########################################################################
    return
  ############################################################################
  def OnRelax          ( self                                              ) :
    ##########################################################################
    self . doStopBusy  (                                                     )
    ##########################################################################
    return
  ############################################################################
  def PrepareMessages            ( self                                    ) :
    ##########################################################################
    IDPMSG = self . Translations [ "Docking" ] [ "None" ]
    DCKMSG = self . Translations [ "Docking" ] [ "Dock" ]
    MDIMSG = self . Translations [ "Docking" ] [ "MDI"  ]
    ##########################################################################
    self   . setLocalMessage     ( self . AttachToNone , IDPMSG              )
    self   . setLocalMessage     ( self . AttachToMdi  , MDIMSG              )
    self   . setLocalMessage     ( self . AttachToDock , DCKMSG              )
    ##########################################################################
    return
  ############################################################################
  def Visible        ( self , visible                                      ) :
    self . Visiblity (        visible                                        )
    return
  ############################################################################
  def DockIn         ( self , shown                                        ) :
    self . ShowDock  (        shown                                          )
    return
  ############################################################################
  def Docking            ( self , Main , title , area , areas              ) :
    ##########################################################################
    super ( )  . Docking (        Main , self ,  title , area , areas        )
    if                   ( self . Dock == None                             ) :
      return
    ##########################################################################
    self . Dock . visibilityChanged . connect ( self . Visible               )
    ##########################################################################
    return
  ############################################################################
  def DockingMenu                    ( self , menu                         ) :
    ##########################################################################
    canDock = self . isFunction      ( self . FunctionDocking                )
    if                               ( not canDock                         ) :
      return
    ##########################################################################
    p       = self . parentWidget    (                                       )
    S       = False
    D       = False
    M       = False
    ##########################################################################
    if                               ( p == None                           ) :
      S     = True
    else                                                                     :
      ########################################################################
      if                             ( self . isDocking ( )                ) :
        D   = True
      else                                                                   :
        M   = True
    ##########################################################################
    menu    . addSeparator           (                                       )
    ##########################################################################
    if                               (     S or D                          ) :
      msg   = self . getLocalMessage ( self . AttachToMdi                    )
      menu  . addAction              ( self . AttachToMdi  , msg             )
    ##########################################################################
    if                               (     S or M                          ) :
      msg   = self . getLocalMessage ( self . AttachToDock                   )
      menu  . addAction              ( self . AttachToDock , msg             )
    ##########################################################################
    if                               ( not S                               ) :
      msg   = self . getLocalMessage ( self . AttachToNone                   )
      menu  . addAction              ( self . AttachToNone , msg             )
    ##########################################################################
    return
  ############################################################################
  def RunDocking               ( self , menu , action                      ) :
    ##########################################################################
    at = menu . at             ( action                                      )
    ##########################################################################
    if                         ( at == self . AttachToNone                 ) :
      self . attachNone . emit ( self                                        )
      return True
    ##########################################################################
    if                         ( at == self . AttachToMdi                  ) :
      self . attachMdi  . emit ( self , self . dockingOrientation            )
      return True
    ##########################################################################
    if                         ( at == self . AttachToDock                 ) :
      self . attachDock . emit ( self                                      , \
                                 self . windowTitle ( )                    , \
                                 self . dockingPlace                       , \
                                 self . dockingPlaces                        )
      return True
    ##########################################################################
    return False
  ############################################################################
  def Menu                         ( self , pos                            ) :
    return False
  ############################################################################
  ## 清除場景內所有的角色
  ############################################################################
  def ClearActors                        ( self                            ) :
    ##########################################################################
    actors = self . renderer . GetActors (                                   )
    ##########################################################################
    for actor in actors                                                      :
      ########################################################################
      self . renderer . RemoveActor      ( actor                             )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def ImportWaveFront                        ( self , DIR , OBJ , MTL      ) :
    ##########################################################################
    CWD   = os . getcwd                      (                               )
    os    . chdir                            ( DIR                           )
    ##########################################################################
    wfobj = vtk . vtkOBJImporter             (                               )
    wfobj . SetFileName                      ( OBJ                           )
    wfobj . SetFileNameMTL                   ( MTL                           )
    ##########################################################################
    wfobj . Read                             (                               )
    wfobj . InitializeObjectBase             (                               )
    ##########################################################################
    os    . chdir                            ( CWD                           )
    ##########################################################################
    self  . ClearRenderer                    (                               )
    ##########################################################################
    self  . renderer   = wfobj . GetRenderer (                               )
    self  . AssignBackgroundColor            (                               )
    wfobj . SetRenderWindow                  ( self . rWindow                )
    ##########################################################################
    self  . rWindow    . AddRenderer         ( self . renderer               )
    self  . interactor . SetRenderWindow     ( self . rWindow                )
    ##########################################################################
    return
  ############################################################################
  def LoadZipWaveFront          ( self , PARAMETERs , ZipData              ) :
    ##########################################################################
    TMPDIR   = self . Settings  [ "ModelPath"                                ]
    CWD      = os   . getcwd    (                                            )
    ##########################################################################
    WFPATH   = PARAMETERs       [ "Directory"                                ]
    OBJ      = PARAMETERs       [ "OBJ"                                      ]
    MTL      = PARAMETERs       [ "MTL"                                      ]
    LOID     = self . LOID
    LZIP     = f"{LOID}.zip"
    TZIP     = os . path . join ( TMPDIR , LZIP                              )
    DIR      = os . path . join ( TMPDIR , WFPATH                            )
    ##########################################################################
    with open                   ( TZIP , 'wb'                         ) as f :
      f      . write            ( ZipData                                    )
    ##########################################################################
    os       . chdir            ( TMPDIR                                     )
    ##########################################################################
    if                          ( os . path . exists ( DIR )               ) :
      shutil . rmtree           ( DIR                                        )
    ##########################################################################
    shutil   . unpack_archive   ( LZIP , TMPDIR                              )
    ##########################################################################
    os       . chdir            ( CWD                                        )
    ##########################################################################
    self     . ImportWaveFront  ( DIR , OBJ , MTL                            )
    ##########################################################################
    os       . remove           ( TZIP                                       )
    shutil   . rmtree           ( DIR                                        )
    ##########################################################################
    return
  ############################################################################
  ## 匯入Wave Front OBJ角色
  ############################################################################
  def ImportBareWaveFrontActor       ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkOBJReader      (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    return actor
  ############################################################################
  ## 匯入單一Wave Front OBJ檔案
  ############################################################################
  def ImportBareWaveFront                   ( self , FILENAME              ) :
    ##########################################################################
    actor = self . ImportBareWaveFrontActor (        FILENAME                )
    self  . renderer   . AddActor           ( actor                          )
    ##########################################################################
    return
  ############################################################################
  def LoadBareWaveFront          ( self , PARAMETERs , ZipData             ) :
    ##########################################################################
    TMPDIR = self . Settings     [ "ModelPath"                               ]
    CWD    = os   . getcwd       (                                           )
    ##########################################################################
    WFPATH = PARAMETERs          [ "Directory"                               ]
    OBJ    = PARAMETERs          [ "OBJ"                                     ]
    LOID   = self . LOID
    LZIP   = f"{LOID}.zip"
    TZIP   = os . path . join    ( TMPDIR , LZIP                             )
    DIR    = os . path . join    ( TMPDIR , WFPATH                           )
    WFOBJ  = os . path . join    ( DIR    , OBJ                              )
    ##########################################################################
    with open                    ( TZIP , 'wb'                        ) as f :
      f    . write               ( ZipData                                   )
    ##########################################################################
    os     . chdir               ( TMPDIR                                    )
    shutil . unpack_archive      ( LZIP , TMPDIR                             )
    os     . chdir               ( CWD                                       )
    ##########################################################################
    self   . ImportBareWaveFront ( WFOBJ                                     )
    ##########################################################################
    os     . remove              ( TZIP                                      )
    shutil . rmtree              ( DIR                                       )
    ##########################################################################
    return
  ############################################################################
  ### 匯入OBJ檔
  ############################################################################
  def ImportOBJ ( self                                                     ) :
    ##########################################################################
    DPATH = self . Settings    [ "ModelPath"                                 ]
    ##########################################################################
    FN    = f"{DPATH}/"
    ##########################################################################
    FRS   = self . getMenuItem ( "ImportOBJFilters"                          )
    MSG   = self . getMenuItem ( "ImportOBJ"                                 )
    ##########################################################################
    F , _ = QFileDialog . getOpenFileName ( self , MSG , FN , FRS            )
    ##########################################################################
    if                         ( len ( F ) <= 0                            ) :
      return
    ##########################################################################
    self . Go                  ( self . ImportBareWaveFront , ( F , )        )
    ##########################################################################
    return
  ############################################################################
  ### 匯入OBJ/MTL檔
  ############################################################################
  def ImportOBJMTL              ( self                                     ) :
    ##########################################################################
    DPATH = self . Settings     [ "ModelPath"                                ]
    ##########################################################################
    FN    = f"{DPATH}/"
    ##########################################################################
    FRS   = self . getMenuItem  ( "ImportOBJFilters"                         )
    MSG   = self . getMenuItem  ( "ImportOBJ"                                )
    ##########################################################################
    F , _ = QFileDialog . getOpenFileName ( self , MSG , FN , FRS            )
    ##########################################################################
    if                          ( len ( F ) <= 0                           ) :
      return
    ##########################################################################
    M     = F
    M     = M . replace         ( ".obj" , ".mtl"                            )
    ##########################################################################
    DIR   = os . path . dirname ( F                                          )
    ##########################################################################
    self  . Go                  ( self . ImportWaveFront , ( DIR , F , M , ) )
    ##########################################################################
    return
  ############################################################################
  ### 匯出到OBJ目錄
  ############################################################################
  def ExportFullOBJ               ( self , DIR                             ) :
    ##########################################################################
    BASE  = os  . path . basename ( DIR                                      )
    FNAME = os  . path . join     ( DIR , BASE                               )
    ##########################################################################
    WOBJ  = vtk . vtkOBJExporter  (                                          )
    WOBJ  . SetFilePrefix         ( FNAME                                    )
    WOBJ  . SetInput              ( self . rWindow                           )
    WOBJ  . SetActiveRenderer     ( self . renderer                          )
    WOBJ  . Write                 (                                          )
    ##########################################################################
    self  . Notify                ( 5                                        )
    ##########################################################################
    return
  ############################################################################
  ### 匯出OBJ檔
  ############################################################################
  def ExportOBJ ( self                                                     ) :
    ##########################################################################
    DPATH = self . Settings            [ "ModelPath"                         ]
    DIR   = QFileDialog . getExistingDirectory                               (
              self                                                           ,
              self . getMenuItem       ( "VtkDirectory"                    ) ,
              DPATH                                                          ,
              QFileDialog . ShowDirsOnly                                     )
    ##########################################################################
    if                                 ( DIR in [ False , None ]           ) :
      return
    ##########################################################################
    if                                 ( len ( DIR ) <= 0                  ) :
      return
    ##########################################################################
    self  . Go                         ( self . ExportFullOBJ , ( DIR , )    )
    ##########################################################################
    return
  ############################################################################
  def LoadZipSTL                ( self , PARAMETERs , ZipData              ) :
    ##########################################################################
    TMPDIR   = self . Settings  [ "ModelPath"                                ]
    CWD      = os   . getcwd    (                                            )
    ##########################################################################
    WFPATH   = PARAMETERs       [ "Directory"                                ]
    STLs     = PARAMETERs       [ "STL"                                      ]
    LOID     = self . LOID
    LZIP     = f"{LOID}.zip"
    TZIP     = os . path . join ( TMPDIR , LZIP                              )
    DIR      = os . path . join ( TMPDIR , WFPATH                            )
    ##########################################################################
    with open                   ( TZIP , 'wb'                         ) as f :
      f      . write            ( ZipData                                    )
    ##########################################################################
    os       . chdir            ( TMPDIR                                     )
    ##########################################################################
    if                          ( os . path . exists ( DIR )               ) :
      shutil . rmtree           ( DIR                                        )
    ##########################################################################
    shutil   . unpack_archive   ( LZIP , TMPDIR                              )
    ##########################################################################
    os       . chdir            ( CWD                                        )
    ##########################################################################
    self     . ImportSTLs       ( DIR , STLs                                 )
    ##########################################################################
    os       . remove           ( TZIP                                       )
    shutil   . rmtree           ( DIR                                        )
    ##########################################################################
    return
  ############################################################################
  ### 匯入STL角色
  ############################################################################
  def ImportBareStlActor             ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkSTLReader      (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    return actor
  ############################################################################
  ### 匯入整群STL檔
  ############################################################################
  def ImportSTLs                        ( self , DIR , STLs                ) :
    ##########################################################################
    for STL in STLs                                                          :
      ########################################################################
      FNAME = os . path . join          ( DIR , STL                          )
      actor = self . ImportBareStlActor ( FNAME                              )
      self  . renderer . AddActor       ( actor                              )
    ##########################################################################
    return
  ############################################################################
  ### 匯入STL檔
  ############################################################################
  def ImportBareSTL                   ( self , FILENAME                    ) :
    ##########################################################################
    actor = self . ImportBareStlActor (        FILENAME                      )
    self  . renderer . AddActor       ( actor                                )
    self  . Notify                    ( 5                                    )
    ##########################################################################
    return
  ############################################################################
  ### 匯出STL檔
  ############################################################################
  def ExportBareSTL          ( self , FILENAME , actor                     ) :
    ##########################################################################
    M   = actor . GetMapper  (                                               )
    ##########################################################################
    STL = vtk . vtkSTLWriter (                                               )
    STL . SetFileTypeToASCII (                                               )
    ##########################################################################
    STL . SetFileName        ( FILENAME                                      )
    STL . SetInputData       ( M . GetInput ( )                              )
    STL . Write              (                                               )
    ##########################################################################
    return
  ############################################################################
  ### 匯出到STL目錄
  ############################################################################
  def ExportFullSTL                       ( self , DIR                     ) :
    ##########################################################################
    actors  = self . renderer . GetActors (                                  )
    CNT     = 0
    ##########################################################################
    for actor in actors                                                      :
      ########################################################################
      CNT   = CNT + 1
      FNAME = f"{DIR}/{CNT}.stl"
      ########################################################################
      self  . ExportBareSTL               ( FNAME , actor                    )
    ##########################################################################
    self    . Notify                      ( 5                                )
    ##########################################################################
    return
  ############################################################################
  ### 匯入STL檔
  ############################################################################
  def ImportSTL ( self                                                     ) :
    ##########################################################################
    DPATH = self . Settings    [ "ModelPath"                                 ]
    ##########################################################################
    FN    = f"{DPATH}/"
    ##########################################################################
    FRS   = self . getMenuItem ( "ImportSTLFilters"                          )
    MSG   = self . getMenuItem ( "ImportSTL"                                 )
    ##########################################################################
    F , _ = QFileDialog . getOpenFileName ( self , MSG , FN , FRS            )
    ##########################################################################
    if                         ( len ( F ) <= 0                            ) :
      return
    ##########################################################################
    self  . Go                 ( self . ImportBareSTL , ( F , )              )
    ##########################################################################
    return
  ############################################################################
  ### 匯出STL檔
  ############################################################################
  def ExportSTL ( self                                                     ) :
    ##########################################################################
    DPATH = self . Settings            [ "ModelPath"                         ]
    DIR   = QFileDialog . getExistingDirectory                               (
              self                                                           ,
              self . getMenuItem       ( "VtkDirectory"                    ) ,
              DPATH                                                          ,
              QFileDialog . ShowDirsOnly                                     )
    ##########################################################################
    if                                 ( DIR in [ False , None ]           ) :
      return
    ##########################################################################
    if                                 ( len ( DIR ) <= 0                  ) :
      return
    ##########################################################################
    self  . Go                         ( self . ExportFullSTL , ( DIR , )    )
    ##########################################################################
    return
  ############################################################################
  def ImportBareGLTF                 ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkGLTFReader     (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    self   . renderer . AddActor     ( actor                                 )
    ##########################################################################
    return
  ############################################################################
  ### 匯出VTK目錄
  ############################################################################
  def ExportVTK                        ( self                              ) :
    ##########################################################################
    DPATH = self . Settings            [ "ModelPath"                         ]
    DIR   = QFileDialog . getExistingDirectory                               (
              self                                                           ,
              self . getMenuItem       ( "VtkDirectory"                    ) ,
              DPATH                                                          ,
              QFileDialog . ShowDirsOnly                                     )
    ##########################################################################
    if                                 ( DIR in [ False , None ]           ) :
      return
    ##########################################################################
    if                                 ( len ( DIR ) <= 0                  ) :
      return
    ##########################################################################
    LOD   = self . LodName
    DIR   = f"{DIR}/{LOD}"
    ##########################################################################
    EVTK  = vtk . vtkJSONSceneExporter (                                     )
    EVTK  . SetFileName                ( DIR                                 )
    EVTK  . SetInput                   ( self . rWindow                      )
    EVTK  . SetActiveRenderer          ( self . renderer                     )
    EVTK  . Write                      (                                     )
    ##########################################################################
    self  . Notify                     ( 5                                   )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PrepareContent       ( self                                          ) :
    ##########################################################################
    source = vtk.vtkSphereSource()
    source . SetCenter(0, 0, 0)
    source . SetRadius(5.0)
    ##########################################################################
    ## Create a mapper
    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputConnection(source.GetOutputPort())
    ##########################################################################
    # Create an actor
    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    ##########################################################################
    self . renderer . AddActor     ( actor )
    self . renderer . ResetCamera  ( )
    ##########################################################################
    self . interactor . Initialize ( )
    self . interactor . Start      ( )
    ##########################################################################
    return
##############################################################################
