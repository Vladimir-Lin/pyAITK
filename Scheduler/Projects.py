# -*- coding: utf-8 -*-
##############################################################################
## 計畫
##############################################################################
import os
import sys
import time
import datetime
##############################################################################
import mysql . connector
from   mysql . connector              import Error
##############################################################################
import AITK
from   AITK . Database  . Query       import Query
from   AITK . Database  . Connection  import Connection
from   AITK . Database  . Columns     import Columns
##############################################################################
from   AITK . Calendars . StarDate   import StarDate as StarDate
from   AITK . Calendars . Periode    import Periode  as Periode
##############################################################################
from                    . Project    import Project  as Project
from                    . Event      import Event    as Event
from                    . Events     import Events   as Events
from                    . Task       import Task     as Task
from                    . Tasks      import Tasks    as Tasks
##############################################################################
class Projects                (                                            ) :
  ############################################################################
  def __init__                ( self                                       ) :
    ##########################################################################
    self . Listings     =     {                                              }
    self . Translations =     {                                              }
    self . Tables       =     {                                              }
    ##########################################################################
    return
  ############################################################################
  def __del__                 ( self                                       ) :
    return
  ############################################################################
  def GetProject             ( self , UUID                                 ) :
    ##########################################################################
    if                       ( UUID in self . Listings                     ) :
      return self . Listings [ UUID                                          ]
    ##########################################################################
    return None
  ############################################################################
  def GetAllTasks        ( self                                            ) :
    ##########################################################################
    TASKS       =        [                                                   ]
    ##########################################################################
    for   UUID , project in self    . Listings . items ( )                   :
      ########################################################################
      for T              in project . Tasks                                  :
        ######################################################################
        if               ( T not in TASKS                                  ) :
          ####################################################################
          TASKS . append ( T                                                 )
    ##########################################################################
    return TASKS
  ############################################################################
  def ObtainsAll            ( self , DB                                    ) :
    ##########################################################################
    PRJTAB = self . Tables  [ "Projects"                                     ]
    QQ     = f"select `uuid` from {PRJTAB} order by `id` asc ;"
    return DB . ObtainUuids ( QQ                                             )
  ############################################################################
  def load                      ( self , DB , UUIDs                        ) :
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      if                        ( UUID in self . Listings                  ) :
        self . Listings [ UUID ] . reload ( DB                               )
      else                                                                   :
        ######################################################################
        P    = Project          (                                            )
        P    . Uuid         = UUID
        P    . Tables       = self . Tables
        P    . Translations = self . Translations
        P    . load             ( DB                                         )
        ######################################################################
        self . Listings [ UUID ] = P
    ##########################################################################
    return
  ############################################################################
  def AppendProject          ( self , DB                                   ) :
    ##########################################################################
    PRJTAB = self . Tables   [ "Projects"                                    ]
    PRDTAB = self . Tables   [ "Periods"                                     ]
    ##########################################################################
    HEAD   = 5702000000000000000
    ##########################################################################
    uuid   = DB   . LastUuid ( PRJTAB , "uuid" , HEAD                        )
    DB     . AddUuid         ( PRJTAB ,  uuid  , 1                           )
    ##########################################################################
    NOW    = StarDate        (                                               )
    NOW    . Now             (                                               )
    CDT    = NOW . Stardate
    ##########################################################################
    PRD    = Periode         (                                               )
    PRID   = PRD  . GetUuid  ( DB , PRDTAB                                   )
    ##########################################################################
    PRD    . Realm    = uuid
    PRD    . Role     = 71
    PRD    . Item     = 1
    PRD    . States   = 0
    PRD    . Creation = CDT
    PRD    . Modified = CDT
    ##########################################################################
    Items  =                 [ "realm"                                     , \
                               "role"                                      , \
                               "item"                                      , \
                               "states"                                    , \
                               "creation"                                  , \
                               "modified"                                    ]
    PRD    . UpdateItems     ( DB , PRDTAB , Items                           )
    ##########################################################################
    return uuid
##############################################################################
