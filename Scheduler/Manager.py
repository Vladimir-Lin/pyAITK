# -*- coding: utf-8 -*-
##############################################################################
## 行程管理介面
##############################################################################
import os
import sys
import logging
import time
import datetime
import threading
##############################################################################
import mysql . connector
from   mysql . connector             import Error
##############################################################################
import AITK
from   AITK . Database  . Query      import Query
from   AITK . Database  . Connection import Connection
from   AITK . Database  . Columns    import Columns
##############################################################################
from   AITK . Calendars . StarDate   import StarDate as StarDate
from   AITK . Calendars . Periode    import Periode  as Periode
##############################################################################
from                    . Project    import Project  as Project
from                    . Projects   import Projects as Projects
from                    . Event      import Event    as Event
from                    . Events     import Events   as Events
from                    . Task       import Task     as Task
from                    . Tasks      import Tasks    as Tasks
##############################################################################
class Manager                 (                                            ) :
  ############################################################################
  def __init__                ( self                                       ) :
    ##########################################################################
    self . Logger        = logging . getLogger (                             )
    ##########################################################################
    self . Running       = False
    self . Working       = False
    self . Thread        = None
    ##########################################################################
    self . Translations  =                     {                             }
    self . Tables        =                     {                             }
    self . HOSTs         =                     {                             }
    self . Primary       = ""
    self . Depot         = ""
    self . DBP           = None
    self . DBT           = None
    self . PrimaryUpdate = 0
    self . DepotUpdate   = 0
    self . ProjectUpdate = 0
    ##########################################################################
    self . Projects      = Projects          (                               )
    ##########################################################################
    self . Locker        = threading . Lock  (                               )
    ##########################################################################
    return
  ############################################################################
  def __del__                 ( self                                       ) :
    return
  ############################################################################
  def __enter__             ( self                                         ) :
    return self
  ############################################################################
  def __exit__              ( self , exc_type , exc_value , traceback      ) :
    pass
  ############################################################################
  def Debug                 ( self , message , way ="info"                 ) :
    if                      ( way == "debug"                               ) :
      self . Logger . debug ( message                                        )
    elif                    ( way == "info"                                ) :
      self . Logger . info  ( message                                        )
    return
  ############################################################################
  def Lock                  ( self                                         ) :
    self . Locker . acquire (                                                )
    return
  ############################################################################
  def Unlock                ( self                                         ) :
    self . Locker . release (                                                )
    return
  ############################################################################
  def ConnectTo       ( self , DbOptions                                   ) :
    ##########################################################################
    DB   = Connection (                                                      )
    DB   . ConnectTo  ( DbOptions , ForcePure = True                         )
    ##########################################################################
    if                ( not DB . isConnected ( )                           ) :
      DB . Close      (                                                      )
      return None
    ##########################################################################
    DB   . Prepare    (                                                      )
    ##########################################################################
    return DB
  ############################################################################
  def CloseDB  ( self , DB                                                 ) :
    ##########################################################################
    if         ( DB in [ False , None ]                                    ) :
      return
    ##########################################################################
    if         ( not DB . isConnected ( )                                  ) :
      return
    ##########################################################################
    DB . Close (                                                             )
    ##########################################################################
    return
  ############################################################################
  def GetSqlProcess    ( self , DB                                         ) :
    ##########################################################################
    if                 ( not DB . isConnected ( )                          ) :
      return
    ##########################################################################
    DB . Query         ( "show processlist ;"                                )
    RR = DB . FetchAll (                                                     )
    ##########################################################################
    return
  ############################################################################
  def EnsureConnections             ( self                                 ) :
    ##########################################################################
    NOW    = StarDate               (                                        )
    ##########################################################################
    TRY    = False
    if                              ( self . DBP in [ False , None ]       ) :
      TRY  = True
    elif                            ( not self . DBP . isConnected ( )     ) :
      TRY  = True
    ##########################################################################
    if                              ( TRY                                  ) :
      ########################################################################
      HOST = self . Primary
      MSG  = f"Connecting to {HOST}"
      self . Debug                  ( MSG                                    )
      ########################################################################
      OPTS = self . HOSTs           [ HOST                                   ]
      self . DBP = self . ConnectTo ( OPTS                                   )
      ########################################################################
      NOW  . Now                    (                                        )
      self . PrimaryUpdate = NOW . Stardate
    ##########################################################################
    TRY    = False
    if                              ( self . DBT in [ False , None ]       ) :
      TRY  = True
    elif                            ( not self . DBT . isConnected ( )     ) :
      TRY  = True
    ##########################################################################
    if                              ( TRY                                  ) :
      ########################################################################
      HOST = self . Depot
      MSG  = f"Connecting to {HOST}"
      self . Debug                  ( MSG                                    )
      ########################################################################
      OPTS = self . HOSTs           [ HOST                                   ]
      self . DBT = self . ConnectTo ( OPTS                                   )
      ########################################################################
      NOW  . Now                    (                                        )
      self . DepotUpdate = NOW . Stardate
    ##########################################################################
    NOW    . Now                    (                                        )
    SDT    = NOW . Stardate
    ##########################################################################
    DT     = int                    ( SDT - self . PrimaryUpdate             )
    if                              ( DT > 300                             ) :
      ########################################################################
      self . GetSqlProcess          ( self . DBP                             )
      ########################################################################
      NOW  . Now                    (                                        )
      self . PrimaryUpdate = NOW . Stardate
    ##########################################################################
    NOW    . Now                    (                                        )
    SDT    = NOW . Stardate
    ##########################################################################
    DT     = int                    ( SDT - self . DepotUpdate               )
    if                              ( DT > 300                             ) :
      ########################################################################
      self . GetSqlProcess          ( self . DBT                             )
      ########################################################################
      NOW  . Now                    (                                        )
      self . DepotUpdate = NOW . Stardate
    ##########################################################################
    return
  ############################################################################
  def CloseConnections ( self                                              ) :
    ##########################################################################
    HOST = self . Primary
    MSG  = f"Disconnect {HOST}"
    self . Debug       ( MSG                                                 )
    ##########################################################################
    self . CloseDB     ( self . DBP                                          )
    self . DBP = None
    ##########################################################################
    HOST = self . Depot
    MSG  = f"Disconnect {HOST}"
    self . Debug       ( MSG                                                 )
    ##########################################################################
    self . CloseDB     ( self . DBT                                          )
    self . DBT = None
    ##########################################################################
    return
  ############################################################################
  def UpdateProjects      ( self                                           ) :
    ##########################################################################
    NOW  = StarDate       (                                                  )
    NOW  . Now            (                                                  )
    SDT  = NOW . Stardate
    DT   = int            ( SDT - self . ProjectUpdate                       )
    ##########################################################################
    if                    ( DT < ( 60 * 60 )                               ) :
      return
    ##########################################################################
    self . ReloadProjects (                                                  )
    ##########################################################################
    NOW  . Now            (                                                  )
    self . ProjectUpdate = NOW . Stardate
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def ReloadProjects ( self                                                ) :
    ##########################################################################
    self  . Projects . Tables       = self . Tables
    self  . Projects . Translations = self . Translations
    UUIDs = self . Projects . ObtainsAll ( self . DBP                        )
    ##########################################################################
    self  . Projects . load              ( self . DBP , UUIDs                )
    ##########################################################################
    return
  ############################################################################
  def monitor                  ( self                                      ) :
    ##########################################################################
    self   . Running = True
    self   . Working = True
    ##########################################################################
    self   . Debug             ( "Start Project Manager"                     )
    ##########################################################################
    while                      ( self . Running                            ) :
      self . EnsureConnections (                                             )
      self . UpdateProjects    (                                             )
      time . sleep             ( 0.1                                         )
    ##########################################################################
    self   . CloseConnections  (                                             )
    ##########################################################################
    self   . Debug             ( "Stop Project Manager"                      )
    self   . Working = False
    ##########################################################################
    return
  ############################################################################
  def stop                  ( self , waiting = False                       ) :
    ##########################################################################
    self . Running = False
    ##########################################################################
    if                      ( not waiting                                  ) :
      return
    ##########################################################################
    while self . Working                                                     :
      time . sleep          ( 0.01                                           )
    ##########################################################################
    return
  ############################################################################
  def start                 ( self                                         ) :
    ##########################################################################
    if                      ( self . Working                               ) :
      self . Debug          ( "Project Manager is still working now"         )
      return False
    ##########################################################################
    self . Thread = threading . Thread ( target = self . monitor             )
    self . Thread . start   (                                                )
    ##########################################################################
    return True
##############################################################################
