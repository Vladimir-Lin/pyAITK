# -*- coding: utf-8 -*-
##############################################################################
## 事件群組物件
##############################################################################
import os
import sys
import time
import datetime
##############################################################################
import mysql . connector
from   mysql . connector              import Error
##############################################################################
import AITK
from   AITK . Database  . Query       import Query
from   AITK . Database  . Connection  import Connection
from   AITK . Database  . Columns     import Columns
##############################################################################
from   AITK . Essentials . Relation   import Relation as Relation
from   AITK . Calendars  . StarDate   import StarDate as StarDate
from   AITK . Calendars  . Periode    import Periode  as Periode
##############################################################################
from                     . Event      import Event    as Event
##############################################################################
class Events                  (                                            ) :
  ############################################################################
  def __init__                ( self                                       ) :
    ##########################################################################
    self . Listings     =     {                                              }
    self . Translations =     {                                              }
    self . Tables       =     {                                              }
    self . DefaultType  = 196833
    ##########################################################################
    return
  ############################################################################
  def __del__                 ( self                                       ) :
    return
  ############################################################################
  def GetEvent               ( self , UUID                                 ) :
    ##########################################################################
    if                       ( UUID in self . Listings                     ) :
      return self . Listings [ UUID                                          ]
    ##########################################################################
    return None
  ############################################################################
  def GetAllPeriods        ( self                                          ) :
    ##########################################################################
    PERIODs       =        [                                                 ]
    ##########################################################################
    for   UUID , event in self  . Listings . items ( )                       :
      ########################################################################
      for E            in event . Periods                                    :
        ######################################################################
        if                 ( E not in PERIODs                              ) :
          ####################################################################
          PERIODs . append ( E                                               )
    ##########################################################################
    return PERIODs
  ############################################################################
  def ObtainsAll            ( self , DB                                    ) :
    ##########################################################################
    EVTTAB = self . Tables  [ "Events"                                       ]
    QQ     = f"select `uuid` from {EVTTAB} order by `id` asc ;"
    return DB . ObtainUuids ( QQ                                             )
  ############################################################################
  def Investigate         ( self , DB , PERIODs                            ) :
    ##########################################################################
    for UUID , event in self . Listings . items ( )                          :
      ########################################################################
      event . Investigate (        DB , PERIODs                              )
    ##########################################################################
    return
  ############################################################################
  def load                      ( self , DB , UUIDs                        ) :
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      if                        ( UUID in self . Listings                  ) :
        self . Listings [ UUID ] . reload ( DB                               )
      else                                                                   :
        ######################################################################
        E    = Event            (                                            )
        E    . Uuid         = UUID
        E    . Tables       = self . Tables
        E    . Translations = self . Translations
        E    . load             ( DB                                         )
        ######################################################################
        self . Listings [ UUID ] = E
    ##########################################################################
    return
  ############################################################################
  def AppendEvent            ( self , DB                                   ) :
    ##########################################################################
    EVTTAB = self . Tables   [ "Events"                                      ]
    PRDTAB = self . Tables   [ "Periods"                                     ]
    ##########################################################################
    HEAD   = 7302000000000000000
    ##########################################################################
    uuid   = DB   . LastUuid ( EVTTAB , "uuid" , HEAD                        )
    DB     . AddUuid         ( EVTTAB ,  uuid  , self . DefaultType          )
    ##########################################################################
    NOW    = StarDate        (                                               )
    NOW    . Now             (                                               )
    CDT    = NOW . Stardate
    ##########################################################################
    PRD    = Periode         (                                               )
    PRID   = PRD  . GetUuid  ( DB , PRDTAB                                   )
    ##########################################################################
    PRD    . Realm    = uuid
    PRD    . Role     = 15
    PRD    . Item     = 1
    PRD    . States   = 0
    PRD    . Creation = CDT
    PRD    . Modified = CDT
    ##########################################################################
    Items  =                 [ "realm"                                     , \
                               "role"                                      , \
                               "item"                                      , \
                               "states"                                    , \
                               "creation"                                  , \
                               "modified"                                    ]
    PRD    . UpdateItems     ( DB , PRDTAB , Items                           )
    ##########################################################################
    return uuid
##############################################################################
