# -*- coding: utf-8 -*-
##############################################################################
## çž³
##############################################################################
import os
import sys
import time
import datetime
import requests
import threading
##############################################################################
from   io                           import BytesIO
from   wand . image                 import Image
from   PIL                          import Image as Pillow
##############################################################################
import cv2
import dlib
import skimage
import numpy                                     as np
import mediapipe                                 as mp
##############################################################################
from   AITK . Essentials . Relation import Relation
from   AITK . Calendars  . StarDate import StarDate
##############################################################################
class Iris (                                                               ) :
  ############################################################################
  def __init__     ( self                                                  ) :
    ##########################################################################
    self . UUIDs = [                                                         ]
    self . NAMEs = {                                                         }
    self . LISTs = {                                                         }
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def assureString     ( self , pb                                         ) :
    ##########################################################################
    BB   = pb
    ##########################################################################
    try                                                                      :
      BB = BB . decode ( "utf-8"                                             )
    except                                                                   :
      pass
    ##########################################################################
    return BB
  ############################################################################
  def ObtainUuidsQuery ( self , EYETAB , ORDER                             ) :
    return f"select `uuid` from {EYETAB} order by `id` {ORDER} ;"
  ############################################################################
  def QuerySyntax     ( self , EYETAB , UUID                               ) :
    ##########################################################################
    QQ = f"""select `id`,`name`,`formula`,`parameter`,`R`,`G`,`B`
             from {EYETAB}
             where ( `uuid` = {UUID} ) ;"""
    ##########################################################################
    return " " . join ( QQ . split (                                       ) )
  ############################################################################
  def ColumnsToJson          ( self , RR , UUID , NAME                     ) :
    ##########################################################################
    ID = int                 ( RR [ 0                                      ] )
    NA = self . assureString ( RR [ 1                                      ] )
    FM = int                 ( RR [ 2                                      ] )
    PA = float               ( RR [ 3                                      ] )
    R  = int                 ( RR [ 4                                      ] )
    G  = int                 ( RR [ 5                                      ] )
    B  = int                 ( RR [ 6                                      ] )
    ##########################################################################
    return                   { "Id"         : ID                           , \
                               "Uuid"       : UUID                         , \
                               "Name"       : NAME                         , \
                               "Identifier" : NA                           , \
                               "Formula"    : FM                           , \
                               "Parameter"  : PA                           , \
                               "R"          : R                            , \
                               "G"          : G                            , \
                               "B"          : B                              }
  ############################################################################
  def QueryAllDetails              ( self , DB , EYETAB , UUIDs , NAMEs    ) :
    ##########################################################################
    LISTs   =                      [                                         ]
    ##########################################################################
    if                             ( len ( UUIDs ) <= 0                    ) :
      return LISTs
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      QQ    = self . QuerySyntax   ( EYETAB , UUID                           )
      DB    . Query                ( QQ                                      )
      RR    = DB . FetchOne        (                                         )
      ########################################################################
      if                           ( RR in [ False , None ]                ) :
        continue
      ########################################################################
      if                           ( 7 != len ( RR )                       ) :
        continue
      ########################################################################
      NN    = ""
      ########################################################################
      if                           ( UUID in NAMEs                         ) :
        NN  = NAMEs                [ UUID                                    ]
      ########################################################################
      J     = self . ColumnsToJson ( RR , UUID , NAMEs [ UUID ]              )
      LISTs . append               ( J                                       )
    ##########################################################################
    return LISTs
  ############################################################################
  def UpdateColor ( self , DB , EYETAB , UUID , R , G , B                  ) :
    ##########################################################################
    QQ = f"""update {EYETAB}
             set `R` = {R} ,
                 `G` = {G} ,
                 `B` = {B}
             where ( `uuid` = {UUID} ) ;"""
    ##########################################################################
    DB . Query    ( " " . join ( QQ . split (                            ) ) )
    ##########################################################################
    return
  ############################################################################
  def CrowdsJoinIris  ( self                                               , \
                        DB                                                 , \
                        RELTAB                                             , \
                        atUuid                                             , \
                        UUIDs                                              , \
                        RELATED = "Subordination"                          ) :
    ##########################################################################
    REL = Relation    (                                                      )
    REL . set         ( "first" , atUuid                                     )
    REL . setT1       ( "Eyes"                                               )
    REL . setT2       ( "People"                                             )
    REL . setRelation ( RELATED                                              )
    REL . Joins       ( DB , RELTAB , UUIDs                                  )
    ##########################################################################
    return
  ############################################################################
  def FetchPeopleIris        ( self , DB , RELTAB , PUID                   ) :
    ##########################################################################
    REL        = Relation    (                                               )
    REL        . set         ( "second" , PUID                               )
    REL        . setT1       ( "Eyes"                                        )
    REL        . setT2       ( "People"                                      )
    REL        . setRelation ( "Subordination"                               )
    return REL . GetOwners   ( DB , RELTAB                                   )
    ##########################################################################
    return
  ############################################################################
  def CountIrisPeopleTotal   ( self                                        , \
                               DB                                          , \
                               RELTAB                                      , \
                               EUID                                        , \
                               RELATE = "Subordination"                    ) :
    ##########################################################################
    REL        = Relation    (                                               )
    REL        . set         ( "first" , EUID                                )
    REL        . setT1       ( "Eyes"                                        )
    REL        . setT2       ( "People"                                      )
    REL        . setRelation ( RELATE                                        )
    ##########################################################################
    return REL . CountSecond ( DB , RELTAB                                   )
  ############################################################################
  def GalleriesJoinIris ( self , DB , RELTAB , atUuid , UUIDs              ) :
    ##########################################################################
    REL = Relation      (                                                    )
    REL . set           ( "first" , atUuid                                   )
    REL . setT1         ( "Eyes"                                             )
    REL . setT2         ( "Gallery"                                          )
    REL . setRelation   ( "Subordination"                                    )
    REL . Joins         ( DB , RELTAB , UUIDs                                )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
