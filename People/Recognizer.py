# -*- coding: utf-8 -*-
##############################################################################
## 辨識引擎
##############################################################################
import os
import sys
import time
import datetime
import requests
import threading
import json
import math
##############################################################################
import cv2
import dlib
import numpy as np
##############################################################################
import mediapipe
from   mediapipe . tasks                import python
from   mediapipe . tasks     . python   import vision
##############################################################################
from   AITK      . Calendars . StarDate import StarDate
##############################################################################
RVERSION = "2025-05-03"
##############################################################################
FaceLandmarks468Meshes =                                                     [
  ## 臉輪廓
  [ 152 ,                                                                    \
    148 , 176 , 149 , 150 , 136 , 172 ,  58 , 132 ,  93 , 234 , 127 , 162 ,  \
     21 ,  54 ,                                                              \
    103 ,  67 , 109 ,  10 , 338 , 297 , 332 ,                                \
    284 , 251 , 389 , 356 , 454 , 323 , 361 , 288 , 397 , 365 , 379 , 378 ,  \
    400 , 377 ,                                                              \
    152                                                                 ] ,  \
  ## 臉框線
  [ 175 ,                                                                    \
    171 , 140 , 170 , 169 , 135 , 138 , 215 , 177 , 137 , 227 ,  34 , 139 ,  \
     71 ,  68 ,                                                              \
    104 ,  69 , 108 , 151 , 337 , 299 , 333 ,                                \
    298 , 301 , 368 , 264 , 447 , 366 , 401 , 435 , 367 , 364 , 394 , 395 ,  \
    369 , 396 ,                                                              \
    175                                                                 ] ,  \
  ## 額線群
  [ 103 , 104                                                           ] ,  \
  [  67 ,  69                                                           ] ,  \
  [ 109 , 108                                                           ] ,  \
  [  10 , 151                                                           ] ,  \
  [ 338 , 337                                                           ] ,  \
  [ 297 , 299                                                           ] ,  \
  [ 332 , 333                                                           ] ,  \
  ## 右臉頰線(鏡射在圖片左邊)
  [  49 , 102 , 129 , 203 , 206 , 216 ,                                      \
    207 , 187 , 123 , 116 , 143                                         ] ,  \
  [ 126 , 142 ,  36 , 205 , 187 , 192                                   ] ,  \
  [  47 , 100 , 101 ,  50 , 123                                         ] ,  \
  ## 右頰線群(鏡射在圖片左邊)
  [ 148 , 171                                                           ] ,  \
  [ 176 , 140                                                           ] ,  \
  [ 149 , 170                                                           ] ,  \
  [ 150 , 169                                                           ] ,  \
  [ 136 , 135 , 214                                                     ] ,  \
  [ 172 , 138 , 192                                                     ] ,  \
  [  58 , 215 , 213                                                     ] ,  \
  [ 132 , 177 , 147                                                     ] ,  \
  [  93 , 137 , 123                                                     ] ,  \
  [ 234 , 227 , 116                                                     ] ,  \
  [ 127 ,  34 , 143                                                     ] ,  \
  [ 162 , 139                                                           ] ,  \
  [  21 ,  71                                                           ] ,  \
  [  54 ,  68                                                           ] ,  \
  [ 210 , 214 , 192 , 213 , 147 , 123                                   ] ,  \
  ## 左臉頰線(鏡射在圖片左邊)
  [ 279 , 331 , 358 , 423 , 426 , 436 ,                                      \
    427 , 411 , 352 , 345 , 372                                         ] ,  \
  [ 355 , 371 , 266 , 425 , 411 , 416                                   ] ,  \
  [ 277 , 329 , 330 , 280 , 352                                         ] ,  \
  ## 左頰線群(鏡射在圖片右邊)
  [ 377 , 396                                                           ] ,  \
  [ 400 , 369                                                           ] ,  \
  [ 378 , 395                                                           ] ,  \
  [ 379 , 394                                                           ] ,  \
  [ 365 , 364 , 434                                                     ] ,  \
  [ 397 , 367 , 416                                                     ] ,  \
  [ 288 , 435 , 433                                                     ] ,  \
  [ 361 , 401 , 376                                                     ] ,  \
  [ 323 , 366 , 352                                                     ] ,  \
  [ 454 , 447 , 345                                                     ] ,  \
  [ 356 , 264 , 372                                                     ] ,  \
  [ 389 , 368                                                           ] ,  \
  [ 251 , 301                                                           ] ,  \
  [ 284 , 298                                                           ] ,  \
  [ 430 , 434 , 416 , 433 , 376 , 352                                   ] ,  \
  ## 下巴直線
  [ 152 , 175 , 199 , 200 ,  18  , 17                                   ] ,  \
  ## 外嘴唇
  [ 291 , 375 , 321 , 405 , 314 ,  17 ,  84 , 181 ,  91 , 146 ,              \
     61 , 185 ,  40 ,  39 ,  37 ,   0 , 267 , 269 , 270 , 409 ,              \
    291                                                                 ] ,  \
  ## 內嘴唇
  [ 308 , 324 , 318 , 402 , 317 ,  14 ,  87 , 178 ,  88 ,  95 ,              \
     78 , 191 ,  80 ,  81 ,  82 ,  13 , 312 , 311 , 310 , 415 ,              \
    308                                                                 ] ,  \
  ## 右唇線(鏡射在圖片左邊)
  [  78 ,  62 ,  76 ,  61                                               ] ,  \
  ## 左唇線(鏡射在圖片右邊)
  [ 308 , 292 , 306 , 291                                               ] ,  \
  ## 上唇線
  [ 191 , 183 , 184 , 185                                               ] ,  \
  [  80 ,  42 ,  74 ,  40                                               ] ,  \
  [  81 ,  41 ,  73 ,  39                                               ] ,  \
  [  82 ,  38 ,  72 ,  37                                               ] ,  \
  [  13 ,  12 ,  11 ,   0                                               ] ,  \
  [ 312 , 268 , 302 , 267                                               ] ,  \
  [ 311 , 271 , 303 , 269                                               ] ,  \
  [ 310 , 272 , 304 , 270                                               ] ,  \
  [ 415 , 407 , 408 , 409                                               ] ,  \
  ## 上唇橫線
  [  62 , 183 ,  42 ,  41 ,  38 ,  12 , 268 , 271 , 272 , 407 , 292     ] ,  \
  [  76 , 184 ,  74 ,  73 ,  72 ,  11 , 302 , 303 , 304 , 408 , 306     ] ,  \
  ## 下唇線
  [  95 ,  96 ,  77 , 146                                               ] ,  \
  [  88 ,  89 ,  90 ,  91                                               ] ,  \
  [ 178 , 179 , 180 , 181                                               ] ,  \
  [  87 ,  86 ,  85 ,  84                                               ] ,  \
  [  14 ,  15 ,  16 ,  17                                               ] ,  \
  [ 317 , 316 , 315 , 314                                               ] ,  \
  [ 402 , 403 , 404 , 405                                               ] ,  \
  [ 318 , 319 , 320 , 321                                               ] ,  \
  [ 324 , 325 , 307 , 375                                               ] ,  \
  ## 下唇橫線
  [  62 ,  96 ,  89 , 179 ,  86 ,  15 , 316 , 403 , 319 , 325 , 292     ] ,  \
  [  76 ,  77 ,  90 , 180 ,  85 ,  16 , 315 , 404 , 320 , 307 , 306     ] ,  \
  ## 右眼(鏡射在圖片左邊)
  [ 133 , 155 , 154 , 153 , 145 , 144 , 163 ,   7 ,                          \
     33 , 246 , 161 , 160 , 159 , 158 , 157 , 173 ,                          \
    133                                                                 ] ,  \
  ## 右眼框(鏡射在圖片左邊)
  [ 243 , 112 ,  26 ,  22 ,  23 ,  24 , 110 ,  25 ,                          \
    130 , 247 ,  30 ,  29 ,  27 ,  28 ,  56 , 190 ,                          \
    243                                                                 ] ,  \
  ## 右眼窩(鏡射在圖片左邊)
  [ 244 , 233 , 232 , 231 , 230 , 229 , 228 ,  31 ,                          \
    226 , 113 , 225 , 224 , 223 , 222 , 221 , 189 ,                          \
    244                                                                 ] ,  \
  ## 右眼底線(鏡射在圖片左邊)
  [ 193 , 245 , 128 , 121 , 120 , 119 , 118 , 117 , 111 ,  35           ] ,  \
  ## 左眼(鏡射在圖片右邊)
  [ 362 , 382 , 381 , 380 , 374 , 373 , 390 , 249 ,                          \
    263 , 466 , 388 , 387 , 386 , 385 , 384 , 398 ,                          \
    362                                                                 ] ,  \
  ## 左眼框(鏡射在圖片右邊)
  [ 463 , 341 , 256 , 252 , 253 , 254 , 339 , 255 ,                          \
    359 , 467 , 260 , 259 , 257 , 258 , 286 , 414 ,                          \
    463                                                                 ] ,  \
  ## 左眼窩(鏡射在圖片右邊)
  [ 464 , 453 , 452 , 451 , 450 , 449 , 448 , 261 ,                          \
    446 , 342 , 445 , 444 , 443 , 442 , 441 , 413 ,                          \
    464                                                                 ] ,  \
  ## 左眼底線(鏡射在圖片右邊)
  [ 417 , 465 , 357 , 350 , 349 , 348 , 347 , 346 , 340 , 265           ] ,  \
  ## 右眉線(鏡射在圖片左邊)
  [   9 , 107 ,  66 , 105 ,  63 ,  70 , 156 , 143                       ] ,  \
  [   8 ,  55 ,  65 ,  52 ,  53 ,  46 , 124 ,  35                       ] ,  \
  [ 107 , 108                                                           ] ,  \
  [  66 ,  69                                                           ] ,  \
  [ 105 , 104                                                           ] ,  \
  [  63 ,  68                                                           ] ,  \
  [  70 ,  71                                                           ] ,  \
  [ 156 , 139                                                           ] ,  \
  [ 143 ,  34                                                           ] ,  \
  ## 左眉線(鏡射在圖片右邊)
  [   9 , 336 , 296 , 334 , 293 , 300 , 383 , 372                       ] ,  \
  [   8 , 285 , 295 , 282 , 283 , 276 , 353 , 265                       ] ,  \
  [ 336 , 337                                                           ] ,  \
  [ 296 , 299                                                           ] ,  \
  [ 334 , 333                                                           ] ,  \
  [ 293 , 298                                                           ] ,  \
  [ 300 , 301                                                           ] ,  \
  [ 383 , 368                                                           ] ,  \
  [ 372 , 264                                                           ] ,  \
  ## 鼻樑線
  [  10 , 151 ,   9 ,   8 , 168                                           ,  \
      6 , 197 , 195 ,   5 ,   4 ,   1 ,  19 ,  94                       ] ,  \
  ## 鼻底線
  [ 438 , 309 , 250 , 462 , 370 ,  94 , 141 , 242 ,  20 ,  79 , 218     ] ,  \
  ## 鼻尖線
  [ 457 , 459 , 458 , 461 , 354 ,  19 , 125 , 241 , 238 , 239 , 237     ] ,  \
  ## 右中鼻線(鏡射在圖片左邊)
  [ 141 , 125 ,                                                              \
     44 ,  45 ,  51 ,   3 , 196 , 122 , 193 ,  55 , 107 , 108           ] ,  \
  ## 右鼻線(鏡射在圖片左邊)
  [ 237 , 220 , 134 , 236 , 174 , 188 , 245                             ] ,  \
  ## 右底鼻線(鏡射在圖片左邊)
  [ 218 , 115 , 131 , 198 , 217 , 114 , 128                             ] ,  \
  ## 右鼻溝線(鏡射在圖片左邊)
  [   2 ,  97 ,  99 ,  75 ,  59 ,                                            \
    219 ,  48 ,  49 , 209 , 126 ,  47 , 121                             ] ,  \
  [  99 ,  60 , 166 , 219                                               ] ,  \
  [ 240 , 235 ,  64 , 102                                               ] ,  \
  ## 左中鼻線(鏡射在圖片右邊)
  [ 370 , 354 ,                                                              \
    274 , 275 , 281 , 248 , 419 , 351 , 417 , 285 , 336 , 337           ] ,  \
  ## 左鼻線(鏡射在圖片右邊)
  [ 457 , 440 , 363 , 456 , 399 , 412 , 465                             ] , \
  ## 左底鼻線(鏡射在圖片右邊)
  [ 438 , 344 , 360 , 420 , 437 , 343 , 357                             ] , \
  ## 左鼻溝線(鏡射在圖片右邊)
  [   2 , 326 , 328 , 305 , 289 ,                                            \
    439 , 278 , 279 , 429 , 355 , 277 , 350                             ] ,  \
  [ 328 , 290 , 392 , 439                                               ] ,  \
  [ 460 , 455 , 294 , 331                                               ] ,  \
  ## 人中線
  [ 287 , 410 , 322 , 391 , 393 , 164 , 167 , 165 ,  92 , 186 ,  57     ] ,  \
  [ 409 , 410 , 436                                                     ] ,  \
  [ 270 , 322 , 426                                                     ] ,  \
  [ 269 , 391 , 327                                                     ] ,  \
  [ 267 , 393 , 326                                                     ] ,  \
  [   0 , 164 ,   2                                                     ] ,  \
  [  37 , 167 ,  97                                                     ] ,  \
  [  39 , 165 ,  98                                                     ] ,  \
  [  40 ,  92 , 206                                                     ] ,  \
  [ 185 , 186 , 216                                                     ] ,  \
  [  98 , 240 ,  75                                                     ] ,  \
  [ 327 , 460 , 305                                                     ] ,  \
  ## 下唇線
  [ 287 , 273 , 335 , 406 , 313 ,  18 ,  83 , 182 , 106 ,  43 ,  57     ] ,  \
  ## 承漿穴線
  [ 432 , 422 , 424 , 418 , 421 , 200 , 201 , 194 , 204 , 202 , 212     ] ,  \
  ## 下巴線
  [ 434 , 430 , 431 , 262 , 428 , 199 , 208 ,  32 , 211 , 210 , 214     ] ,  \
  ## 下頜線群
  [ 364 , 434 , 432 , 287 , 291                                         ] ,  \
  [ 394 , 430 , 422 , 273 , 375                                         ] ,  \
  [ 395 , 431 , 424 , 335 , 321                                         ] ,  \
  [ 369 , 262 , 418 , 406 , 405                                         ] ,  \
  [ 396 , 428 , 421 , 313 , 314                                         ] ,  \
  [ 175 , 199 , 200 ,  18 ,  17                                         ] ,  \
  [ 171 , 208 , 201 ,  83 ,  84                                         ] ,  \
  [ 140 ,  32 , 194 , 182 , 181                                         ] ,  \
  [ 170 , 211 , 204 , 106 ,  91                                         ] ,  \
  [ 169 , 210 , 202 ,  43 , 146                                         ] ,  \
  [ 135 , 214 , 212 ,  57 ,  61                                         ] ,  \
  ## 右瞳(鏡射在圖片左邊)
  [ 469 , 470 , 471 , 472 , 469                                         ] ,  \
  ## 左瞳(鏡射在圖片右邊)
  [ 474 , 475 , 476 , 477 , 474                                              ]
]
##############################################################################
FaceLandmarks468Polygons =                                                   [
  ############################################################################
  ## 額頭多邊形
  ############################################################################
  [  54 , 103 , 104 ,  68                                               ] ,  \
  [  68 , 104 , 105 ,  63                                               ] ,  \
  ############################################################################
  [ 103 ,  67 ,  69 , 104                                               ] ,  \
  [ 104 ,  69 ,  66 , 105                                               ] ,  \
  ############################################################################
  [  67 , 109 , 108 ,  69                                               ] ,  \
  [  69 , 108 , 107 ,  66                                               ] ,  \
  ############################################################################
  [ 109 ,  10 , 151 , 108                                               ] ,  \
  [ 108 , 151 ,   9 , 107                                               ] ,  \
  ############################################################################
  [  10 , 338 , 337 , 151                                               ] ,  \
  [ 151 , 337 , 336 ,   9                                               ] ,  \
  ############################################################################
  [ 338 , 297 , 299 , 337                                               ] ,  \
  [ 337 , 299 , 296 , 336                                               ] ,  \
  ############################################################################
  [ 297 , 332 , 333 , 299                                               ] ,  \
  [ 299 , 333 , 334 , 296                                               ] ,  \
  ############################################################################
  [ 332 , 284 , 298 , 333                                               ] ,  \
  [ 333 , 298 , 293 , 334                                               ] ,  \
  ############################################################################
  ## 右眉上額部(鏡射在圖片左邊,由右至左)
  ############################################################################
  [ 143 , 156 , 124 ,  35                                               ] ,  \
  [ 156 ,  70 ,  46 , 124                                               ] ,  \
  [  70 ,  63 ,  53 ,  46                                               ] ,  \
  [  63 , 105 ,  52 ,  53                                               ] ,  \
  [ 105 ,  66 ,  65 ,  52                                               ] ,  \
  [  66 , 107 ,  55 ,  65                                               ] ,  \
  [ 107 ,   9 ,   8 ,  55                                               ] ,  \
  ############################################################################
  ## 左眉上額部(鏡射在圖片右邊,由右至左)
  ############################################################################
  [   9 , 336 , 285 ,   8                                               ] ,  \
  [ 336 , 296 , 295 , 285                                               ] ,  \
  [ 296 , 334 , 282 , 295                                               ] ,  \
  [ 334 , 293 , 283 , 282                                               ] ,  \
  [ 293 , 300 , 276 , 283                                               ] ,  \
  [ 300 , 383 , 353 , 276                                               ] ,  \
  [ 383 , 372 , 265 , 353                                               ] ,  \
  ############################################################################
  ## 右眼窩(鏡射在圖片左邊,順時鐘)
  ############################################################################
  [ 133 , 243 , 112 , 155                                               ] ,  \
  [ 243 , 244 , 233 , 112                                               ] ,  \
  [ 244 , 245 , 128 , 233                                               ] ,  \
  ############################################################################
  [ 155 , 112 ,  26 , 154                                               ] ,  \
  [ 112 , 233 , 232 ,  26                                               ] ,  \
  [ 233 , 128 , 121 , 232                                               ] ,  \
  ############################################################################
  [ 154 ,  26 ,  22 , 153                                               ] ,  \
  [  26 , 232 , 231 ,  22                                               ] ,  \
  [ 232 , 121 , 120 , 231                                               ] ,  \
  ############################################################################
  [ 153 ,  22 ,  23 , 145                                               ] ,  \
  [  22 , 231 , 230 ,  23                                               ] ,  \
  [ 231 , 120 , 119 , 230                                               ] ,  \
  ############################################################################
  [ 145 ,  23 ,  24 , 144                                               ] ,  \
  [  23 , 230 , 229 ,  24                                               ] ,  \
  [ 230 , 119 , 118 , 229                                               ] ,  \
  ############################################################################
  [ 144 ,  24 , 110 , 163                                               ] ,  \
  [  24 , 229 , 228 , 110                                               ] ,  \
  [ 229 , 118 , 117 , 228                                               ] ,  \
  ############################################################################
  [ 163 , 110 ,  25 ,   7                                               ] ,  \
  [ 110 , 228 ,  31 ,  25                                               ] ,  \
  [ 228 , 117 , 111 ,  31                                               ] ,  \
  ############################################################################
  [   7 ,  25 , 130 ,  33                                               ] ,  \
  [  25 ,  31 , 226 , 130                                               ] ,  \
  [  31 , 111 ,  35 , 226                                               ] ,  \
  ############################################################################
  [  33 , 130 , 247 , 246                                               ] ,  \
  [ 130 , 226 , 113 , 247                                               ] ,  \
  [ 226 ,  35 , 124 , 113                                               ] ,  \
  ############################################################################
  [ 246 , 247 ,  30 , 161                                               ] ,  \
  [ 247 , 113 , 225 ,  30                                               ] ,  \
  [ 113 , 124 ,  46 , 225                                               ] ,  \
  ############################################################################
  [ 161 ,  30 ,  29 , 160                                               ] ,  \
  [  30 , 225 , 224 ,  29                                               ] ,  \
  [ 225 ,  46 ,  53 , 224                                               ] ,  \
  ############################################################################
  [ 160 ,  29 ,  27 , 159                                               ] ,  \
  [  29 , 224 , 223 ,  27                                               ] ,  \
  [ 224 ,  53 ,  52 , 223                                               ] ,  \
  ############################################################################
  [ 159 ,  27 ,  28 , 158                                               ] ,  \
  [  27 , 223 , 222 ,  28                                               ] ,  \
  [ 223 ,  52 ,  65 , 222                                               ] ,  \
  ############################################################################
  [ 158 ,  28 ,  56 , 157                                               ] ,  \
  [  28 , 222 , 221 ,  56                                               ] ,  \
  [ 222 ,  65 ,  55 , 221                                               ] ,  \
  ############################################################################
  [ 157 ,  56 , 190 , 173                                               ] ,  \
  [  56 , 221 , 189 , 190                                               ] ,  \
  [ 221 ,  55 , 193 , 189                                               ] ,  \
  ############################################################################
  [ 173 , 190 , 243 , 133                                               ] ,  \
  [ 190 , 189 , 244 , 243                                               ] ,  \
  [ 189 , 193 , 245 , 244                                               ] ,  \
  ############################################################################
  ## 右眼窩下部(鏡射在圖片左邊,由左至右)
  ############################################################################
  [ 121 ,  47 , 100 , 120                                               ] ,  \
  [ 120 , 100 , 101 , 119                                               ] ,  \
  [ 119 , 101 ,  50 , 118                                               ] ,  \
  [ 118 ,  50 , 123 , 117                                               ] ,  \
  [ 117 , 123 , 116 , 111                                               ] ,  \
  [ 111 , 116 , 143 ,  35                                               ] ,  \
  ############################################################################
  ## 左眼窩(鏡射在圖片右邊,逆時鐘)
  ############################################################################
  [ 362 , 382 , 341 , 463                                               ] ,  \
  [ 463 , 341 , 453 , 464                                               ] ,  \
  [ 464 , 453 , 357 , 465                                               ] ,  \
  ############################################################################
  [ 382 , 381 , 256 , 341                                               ] ,  \
  [ 341 , 256 , 452 , 453                                               ] ,  \
  [ 453 , 452 , 350 , 357                                               ] ,  \
  ############################################################################
  [ 381 , 380 , 252 , 256                                               ] ,  \
  [ 256 , 252 , 451 , 452                                               ] ,  \
  [ 452 , 451 , 349 , 350                                               ] ,  \
  ############################################################################
  [ 380 , 374 , 253 , 252                                               ] ,  \
  [ 252 , 253 , 450 , 451                                               ] ,  \
  [ 451 , 450 , 348 , 349                                               ] ,  \
  ############################################################################
  [ 374 , 373 , 254 , 253                                               ] ,  \
  [ 253 , 254 , 449 , 450                                               ] ,  \
  [ 450 , 449 , 347 , 348                                               ] ,  \
  ############################################################################
  [ 373 , 390 , 339 , 254                                               ] ,  \
  [ 254 , 339 , 448 , 449                                               ] ,  \
  [ 449 , 448 , 346 , 347                                               ] ,  \
  ############################################################################
  [ 390 , 249 , 255 , 339                                               ] ,  \
  [ 339 , 255 , 261 , 448                                               ] ,  \
  [ 448 , 261 , 340 , 346                                               ] ,  \
  ############################################################################
  [ 249 , 263 , 359 , 255                                               ] ,  \
  [ 255 , 359 , 446 , 261                                               ] ,  \
  [ 261 , 446 , 265 , 340                                               ] ,  \
  ############################################################################
  [ 263 , 466 , 467 , 359                                               ] ,  \
  [ 359 , 467 , 342 , 446                                               ] ,  \
  [ 446 , 342 , 353 , 265                                               ] ,  \
  ############################################################################
  [ 466 , 388 , 260 , 467                                               ] ,  \
  [ 467 , 260 , 445 , 342                                               ] ,  \
  [ 342 , 445 , 276 , 353                                               ] ,  \
  ############################################################################
  [ 388 , 387 , 259 , 260                                               ] ,  \
  [ 260 , 259 , 444 , 445                                               ] ,  \
  [ 445 , 444 , 283 , 276                                               ] ,  \
  ############################################################################
  [ 387 , 386 , 257 , 259                                               ] ,  \
  [ 259 , 257 , 443 , 444                                               ] ,  \
  [ 444 , 443 , 282 , 283                                               ] ,  \
  ############################################################################
  [ 386 , 385 , 258 , 257                                               ] ,  \
  [ 257 , 258 , 442 , 443                                               ] ,  \
  [ 443 , 442 , 295 , 282                                               ] ,  \
  ############################################################################
  [ 385 , 384 , 286 , 258                                               ] ,  \
  [ 258 , 286 , 441 , 442                                               ] ,  \
  [ 442 , 441 , 285 , 295                                               ] ,  \
  ############################################################################
  [ 384 , 398 , 414 , 286                                               ] ,  \
  [ 286 , 414 , 413 , 441                                               ] ,  \
  [ 441 , 413 , 417 , 285                                               ] ,  \
  ############################################################################
  [ 398 , 362 , 463 , 414                                               ] ,  \
  [ 414 , 463 , 464 , 413                                               ] ,  \
  [ 413 , 464 , 465 , 417                                               ] ,  \
  ############################################################################
  ## 左眼窩下部(鏡射在圖片左邊,由右至左)
  ############################################################################
  [ 350 , 349 , 329 , 277                                               ] ,  \
  [ 349 , 348 , 330 , 329                                               ] ,  \
  [ 348 , 347 , 280 , 330                                               ] ,  \
  [ 347 , 346 , 352 , 280                                               ] ,  \
  [ 346 , 340 , 345 , 352                                               ] ,  \
  [ 340 , 265 , 372 , 345                                               ] ,  \
  ############################################################################
  ## 右側臉頰多邊形(鏡射在圖片左邊)
  ############################################################################
  [  21 ,  54 ,  68 ,  71                                               ] ,  \
  [  71 ,  68 ,  63 ,  70                                               ] ,  \
  ############################################################################
  [ 162 ,  21 ,  71 , 139                                               ] ,  \
  [ 139 ,  71 ,  70 , 156                                               ] ,  \
  ############################################################################
  [ 127 , 162 , 139 ,  34                                               ] ,  \
  [  34 , 139 , 156 , 143                                               ] ,  \
  ############################################################################
  [ 234 , 127 ,  34 , 227                                               ] ,  \
  [ 227 ,  34 , 143 , 116                                               ] ,  \
  ############################################################################
  [  93 , 234 , 227 , 137                                               ] ,  \
  [ 137 , 227 , 116 , 123                                               ] ,  \
  ############################################################################
  [ 132 ,  93 , 137 , 177                                               ] ,  \
  [ 177 , 137 , 123 , 147                                               ] ,  \
  ############################################################################
  [  58 , 132 , 177 , 215                                               ] ,  \
  [ 215 , 177 , 147 , 213                                               ] ,  \
  ############################################################################
  ## 右側臉肉多邊形(鏡射在圖片左邊,由左至右)
  ############################################################################
  [  47 , 126 , 142 , 100                                               ] ,  \
  [ 100 , 142 ,  36 , 101                                               ] ,  \
  [ 101 ,  36 , 205 ,  50                                               ] ,  \
  [  50 , 205 , 187 , 123                                               ] ,  \
  ############################################################################
  [ 126 , 209 , 142                                                     ] ,  \
  [ 142 , 209 , 129                                                     ] ,  \
  [ 129 , 209 ,  49                                                     ] ,  \
  ############################################################################
  [ 142 , 129 , 203 ,  36                                               ] ,  \
  [  36 , 203 , 206 , 205                                               ] ,  \
  [ 205 , 206 , 207 , 187                                               ] ,  \
  ############################################################################
  [ 206 , 216 , 207                                                     ] ,  \
  ############################################################################
  [  57 , 212 , 216 , 186                                               ] ,  \
  [ 212 , 214 , 207 , 216                                               ] ,  \
  [ 214 , 192 , 187 , 207                                               ] ,  \
  [ 192 , 213 , 147 , 187                                               ] ,  \
  [ 147 , 123 , 187                                                     ] ,  \
  ############################################################################
  ## 左側臉頰多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 284 , 251 , 301 , 298                                               ] ,  \
  [ 298 , 301 , 300 , 293                                               ] ,  \
  ############################################################################
  [ 251 , 389 , 368 , 301                                               ] ,  \
  [ 301 , 368 , 383 , 300                                               ] ,  \
  ############################################################################
  [ 389 , 356 , 264 , 368                                               ] ,  \
  [ 368 , 264 , 372 , 383                                               ] ,  \
  ############################################################################
  [ 356 , 454 , 447 , 264                                               ] ,  \
  [ 264 , 447 , 345 , 372                                               ] ,  \
  ############################################################################
  [ 454 , 323 , 366 , 447                                               ] ,  \
  [ 447 , 366 , 352 , 345                                               ] ,  \
  ############################################################################
  [ 323 , 361 , 401 , 366                                               ] ,  \
  [ 366 , 401 , 376 , 352                                               ] ,  \
  ############################################################################
  [ 361 , 288 , 435 , 401                                               ] ,  \
  [ 401 , 435 , 433 , 376                                               ] ,  \
  ############################################################################
  ## 左側臉肉多邊形(鏡射在圖片右邊,由右至左)
  ############################################################################
  [ 277 , 329 , 371 , 355                                               ] ,  \
  [ 329 , 330 , 266 , 371                                               ] ,  \
  [ 330 , 280 , 425 , 266                                               ] ,  \
  [ 280 , 352 , 411 , 425                                               ] ,  \
  ############################################################################
  [ 355 , 371 , 429                                                     ] ,  \
  [ 429 , 371 , 358                                                     ] ,  \
  [ 358 , 279 , 429                                                     ] ,  \
  ############################################################################
  [ 371 , 266 , 423 , 358                                               ] ,  \
  [ 266 , 425 , 426 , 423                                               ] ,  \
  [ 425 , 411 , 427 , 426                                               ] ,  \
  ############################################################################
  [ 426 , 427 , 436                                                     ] ,  \
  ############################################################################
  [ 410 , 436 , 432 , 287                                               ] ,  \
  [ 436 , 427 , 434 , 432                                               ] ,  \
  [ 427 , 411 , 416 , 434                                               ] ,  \
  [ 411 , 376 , 433 , 416                                               ] ,  \
  [ 411 , 352 , 376                                                     ] ,  \
  ############################################################################
  ## 右鼻樑部多邊形(鏡射在圖片左邊)
  ############################################################################
  [  55 ,   8 , 168 , 193                                               ] ,  \
  [ 193 , 168 ,   6 , 122                                               ] ,  \
  [ 122 ,   6 , 197 , 196                                               ] ,  \
  [ 196 , 197 , 195 ,   3                                               ] ,  \
  [   3 , 195 ,   5 ,  51                                               ] ,  \
  [  51 ,   5 ,   4 ,  45                                               ] ,  \
  [  45 ,   4 ,   1 ,  44                                               ] ,  \
  [  44 ,   1 ,  19 , 125                                               ] ,  \
  [ 125 ,  19 ,  94 , 141                                               ] ,  \
  ############################################################################
  ## 右鼻側部多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 193 , 122 , 188 , 245                                               ] ,  \
  [ 122 , 196 , 174 , 188                                               ] ,  \
  [ 196 ,   3 , 236 , 174                                               ] ,  \
  [   3 ,  51 , 134 , 236                                               ] ,  \
  [  51 ,  45 , 220 , 134                                               ] ,  \
  [  45 ,  44 , 237 , 220                                               ] ,  \
  [  44 , 125 , 241 , 237                                               ] ,  \
  [ 125 , 141 , 242 , 241                                               ] ,  \
  ############################################################################
  [ 245 , 188 , 114 , 128                                               ] ,  \
  [ 188 , 174 , 217 , 114                                               ] ,  \
  [ 174 , 236 , 198 , 217                                               ] ,  \
  [ 236 , 134 , 131 , 198                                               ] ,  \
  [ 134 , 220 , 115 , 131                                               ] ,  \
  [ 220 , 237 , 218 , 115                                               ] ,  \
  ############################################################################
  [ 237 , 239 ,  79 , 218                                               ] ,  \
  [ 237 , 241 , 238 , 239                                               ] ,  \
  [ 239 , 238 ,  20 ,  79                                               ] ,  \
  [ 241 , 242 ,  20 , 238                                               ] ,  \
  ############################################################################
  [ 121 , 128 , 114 ,  47                                               ] ,  \
  [  47 , 114 , 217 , 126                                               ] ,  \
  [ 126 , 217 , 198 , 209                                               ] ,  \
  [ 209 , 198 , 131 ,  49                                               ] ,  \
  [  49 , 131 , 115 ,  48                                               ] ,  \
  [  48 , 115 , 218 , 219                                               ] ,  \
  [ 219 , 218 ,  79 , 166                                               ] ,  \
  [ 166 ,  79 ,  20 ,  60                                               ] ,  \
  [  60 ,  20 , 242 ,  99                                               ] ,  \
  [  99 , 242 , 141 ,  97                                               ] ,  \
  [  97 , 141 ,  94 ,   2                                               ] ,  \
  ############################################################################
  ## 左鼻樑部多邊形(鏡射在圖片右邊)
  ############################################################################
  [   8 , 285 , 417 , 168                                               ] ,  \
  [ 168 , 417 , 351 ,   6                                               ] ,  \
  [   6 , 351 , 419 , 197                                               ] ,  \
  [ 197 , 419 , 248 , 195                                               ] ,  \
  [ 195 , 248 , 281 ,   5                                               ] ,  \
  [   5 , 281 , 275 ,   4                                               ] ,  \
  [   4 , 275 , 274 ,   1                                               ] ,  \
  [   1 , 274 , 354 ,  19                                               ] ,  \
  [  19 , 354 , 370 ,  94                                               ] ,  \
  ############################################################################
  ## 左鼻側部多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 417 , 465 , 412 , 351                                               ] ,  \
  [ 351 , 412 , 399 , 419                                               ] ,  \
  [ 419 , 399 , 456 , 248                                               ] ,  \
  [ 248 , 456 , 363 , 281                                               ] ,  \
  [ 281 , 363 , 440 , 275                                               ] ,  \
  [ 275 , 440 , 457 , 274                                               ] ,  \
  [ 274 , 457 , 461 , 354                                               ] ,  \
  [ 354 , 461 , 462 , 370                                               ] ,  \
  ############################################################################
  [ 465 , 357 , 343 , 412                                               ] ,  \
  [ 412 , 343 , 437 , 399                                               ] ,  \
  [ 399 , 437 , 420 , 456                                               ] ,  \
  [ 456 , 420 , 360 , 363                                               ] ,  \
  [ 363 , 360 , 344 , 440                                               ] ,  \
  [ 440 , 344 , 438 , 457                                               ] ,  \
  ############################################################################
  [ 457 , 438 , 309 , 459                                               ] ,  \
  [ 457 , 459 , 458 , 461                                               ] ,  \
  [ 459 , 309 , 250 , 458                                               ] ,  \
  [ 461 , 458 , 250 , 462                                               ] ,  \
  ############################################################################
  [ 357 , 350 , 277 , 343                                               ] ,  \
  [ 343 , 277 , 355 , 437                                               ] ,  \
  [ 437 , 355 , 429 , 420                                               ] ,  \
  [ 420 , 429 , 279 , 360                                               ] ,  \
  [ 360 , 279 , 278 , 344                                               ] ,  \
  [ 344 , 278 , 439 , 438                                               ] ,  \
  [ 438 , 439 , 392 , 309                                               ] ,  \
  [ 309 , 392 , 290 , 250                                               ] ,  \
  [ 250 , 290 , 328 , 462                                               ] ,  \
  [ 462 , 328 , 326 , 370                                               ] ,  \
  [ 370 , 326 ,   2 ,  94                                               ] ,  \
  ############################################################################
  ## 右上人中多邊形(鏡射在圖片左邊,由左至右)
  ############################################################################
  [ 164 , 167 ,  97 ,   2                                               ] ,  \
  [ 167 , 165 ,  98 ,  97                                               ] ,  \
  [ 165 , 206 , 203 ,  98                                               ] ,  \
  [ 165 ,  92 , 216 , 206                                               ] ,  \
  [  98 , 203 , 129 ,  64                                               ] ,  \
  [  97 ,  98 , 240 ,  99                                               ] ,  \
  [  99 , 240 ,  75 ,  60                                               ] ,  \
  [  98 ,  64 , 235 , 240                                               ] ,  \
  [ 240 , 235 ,  59 ,  75                                               ] ,  \
  [  60 ,  75 ,  59 , 166                                               ] ,  \
  [  59 , 235 , 219 , 166                                               ] ,  \
  [ 235 ,  64 ,  48 , 219                                               ] ,  \
  [  64 , 102 ,  49 ,  48                                               ] ,  \
  ############################################################################
  [  92 , 186 , 216                                                     ] ,  \
  [  64 , 129 , 102                                                     ] ,  \
  [ 102 , 129 ,  49                                                     ] ,  \
  ############################################################################
  ## 左上人中多邊形(鏡射在圖片右邊,由右至左)
  ############################################################################
  [ 164 ,   2 , 326 , 393                                               ] ,  \
  [ 393 , 326 , 327 , 391                                               ] ,  \
  [ 391 , 327 , 423 , 426                                               ] ,  \
  [ 391 , 426 , 436 , 322                                               ] ,  \
  [ 327 , 294 , 358 , 423                                               ] ,  \
  [ 326 , 328 , 460 , 327                                               ] ,  \
  [ 328 , 290 , 305 , 460                                               ] ,  \
  [ 327 , 460 , 455 , 294                                               ] ,  \
  [ 460 , 305 , 289 , 455                                               ] ,  \
  [ 290 , 392 , 289 , 305                                               ] ,  \
  [ 289 , 392 , 439 , 455                                               ] ,  \
  [ 455 , 439 , 278 , 294                                               ] ,  \
  [ 294 , 278 , 279 , 331                                               ] ,  \
  ############################################################################
  [ 322 , 436 , 410                                                     ] ,  \
  [ 294 , 331 , 358                                                     ] ,  \
  [ 331 , 279 , 358                                                     ] ,  \
  ############################################################################
  ## 右下人中多邊形(鏡射在圖片左邊,由左至右)
  ############################################################################
  [   0 ,  37 , 167 , 164                                               ] ,  \
  [  37 ,  39 , 165 , 167                                               ] ,  \
  [  39 ,  40 ,  92 , 165                                               ] ,  \
  [  40 , 185 , 186 ,  92                                               ] ,  \
  ############################################################################
  [ 185 ,  61 ,  57 , 186                                               ] ,  \
  ############################################################################
  ## 左下人中多邊形(鏡射在圖片右邊,由右至左)
  ############################################################################
  [   0 , 164 , 393 , 267                                               ] ,  \
  [ 267 , 393 , 391 , 269                                               ] ,  \
  [ 269 , 391 , 322 , 270                                               ] ,  \
  [ 270 , 322 , 410 , 409                                               ] ,  \
  ############################################################################
  [ 409 , 410 , 287 , 291                                               ] ,  \
  ############################################################################
  ## 右上嘴角多邊形(鏡射在圖片左邊)
  ############################################################################
  [  61 , 185 , 184 ,  76                                               ] ,  \
  [  76 , 184 , 183 ,  62                                               ] ,  \
  [  62 , 183 , 191 ,  78                                               ] ,  \
  ############################################################################
  ## 右上嘴唇多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 185 ,  40 ,  74 , 184                                               ] ,  \
  [ 184 ,  74 ,  42 , 183                                               ] ,  \
  [ 183 ,  42 ,  80 , 191                                               ] ,  \
  ############################################################################
  [  40 ,  39 ,  73 ,  74                                               ] ,  \
  [  74 ,  73 ,  41 ,  42                                               ] ,  \
  [  42 ,  41 ,  81 ,  80                                               ] ,  \
  ############################################################################
  [  39 ,  37 ,  72 ,  73                                               ] ,  \
  [  73 ,  72 ,  38 ,  41                                               ] ,  \
  [  41 ,  38 ,  82 ,  81                                               ] ,  \
  ############################################################################
  [  37 ,   0 ,  11 ,  72                                               ] ,  \
  [  72 ,  11 ,  12 ,  38                                               ] ,  \
  [  38 ,  12 ,  13 ,  82                                               ] ,  \
  ############################################################################
  ## 左上嘴唇多邊形(鏡射在圖片右邊)
  ############################################################################
  [   0 , 267 , 302 ,  11                                               ] ,  \
  [  11 , 302 , 268 ,  12                                               ] ,  \
  [  12 , 268 , 312 ,  13                                               ] ,  \
  ############################################################################
  [ 267 , 269 , 303 , 302                                               ] ,  \
  [ 302 , 303 , 271 , 268                                               ] ,  \
  [ 268 , 271 , 311 , 312                                               ] ,  \
  ############################################################################
  [ 269 , 270 , 304 , 303                                               ] ,  \
  [ 303 , 304 , 272 , 271                                               ] ,  \
  [ 271 , 272 , 310 , 311                                               ] ,  \
  ############################################################################
  [ 270 , 409 , 408 , 304                                               ] ,  \
  [ 304 , 408 , 407 , 272                                               ] ,  \
  [ 272 , 407 , 415 , 310                                               ] ,  \
  ############################################################################
  ## 左上嘴角多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 291 , 306 , 408 , 409                                               ] ,  \
  [ 306 , 292 , 407 , 408                                               ] ,  \
  [ 292 , 308 , 415 , 407                                               ] ,  \
  ############################################################################
  ## 右下嘴角多邊形(鏡射在圖片左邊)
  ############################################################################
  [  61 ,  76 ,  77 , 146                                               ] ,  \
  [  76 ,  62 ,  96 ,  77                                               ] ,  \
  [  62 ,  78 ,  95 ,  96                                               ] ,  \
  ############################################################################
  ## 右下嘴唇多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 146 ,  77 ,  90 ,  91                                               ] ,  \
  [  77 ,  96 ,  89 ,  90                                               ] ,  \
  [  96 ,  95 ,  88 ,  89                                               ] ,  \
  ############################################################################
  [  91 ,  90 , 180 , 181                                               ] ,  \
  [  90 ,  89 , 179 , 180                                               ] ,  \
  [  89 ,  88 , 178 , 179                                               ] ,  \
  ############################################################################
  [ 181 , 180 ,  85 ,  84                                               ] ,  \
  [ 180 , 179 ,  86 ,  85                                               ] ,  \
  [ 179 , 178 ,  87 ,  86                                               ] ,  \
  ############################################################################
  [  84 ,  85 ,  16 ,  17                                               ] ,  \
  [  85 ,  86 ,  15 ,  16                                               ] ,  \
  [  86 ,  87 ,  14 ,  15                                               ] ,  \
  ############################################################################
  ## 左下嘴唇多邊形(鏡射在圖片右邊)
  ############################################################################
  [  17 ,  16 , 315 , 314                                               ] ,  \
  [  16 ,  15 , 316 , 315                                               ] ,  \
  [  15 ,  14 , 317 , 316                                               ] ,  \
  ############################################################################
  [ 314 , 315 , 404 , 405                                               ] ,  \
  [ 315 , 316 , 403 , 404                                               ] ,  \
  [ 316 , 317 , 402 , 403                                               ] ,  \
  ############################################################################
  [ 405 , 404 , 320 , 321                                               ] ,  \
  [ 404 , 403 , 319 , 320                                               ] ,  \
  [ 403 , 402 , 318 , 319                                               ] ,  \
  ############################################################################
  [ 321 , 320 , 307 , 375                                               ] ,  \
  [ 320 , 319 , 325 , 307                                               ] ,  \
  [ 319 , 318 , 324 , 325                                               ] ,  \
  ############################################################################
  ## 左下嘴角多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 291 , 375 , 307 , 306                                               ] ,  \
  [ 306 , 307 , 325 , 292                                               ] ,  \
  [ 292 , 325 , 324 , 308                                               ] ,  \
  ############################################################################
  ## 右下巴多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 214 , 212 , 202 , 210                                               ] ,  \
  [ 212 ,  57 ,  43 , 202                                               ] ,  \
  [  57 ,  61 , 146 ,  43                                               ] ,  \
  ############################################################################
  [ 210 , 202 , 204 , 211                                               ] ,  \
  [ 202 ,  43 , 106 , 204                                               ] ,  \
  [  43 , 146 ,  91 , 106                                               ] ,  \
  ############################################################################
  [ 211 , 204 , 194 ,  32                                               ] ,  \
  [ 204 , 106 , 182 , 194                                               ] ,  \
  [ 106 ,  91 , 181 , 182                                               ] ,  \
  ############################################################################
  [  32 , 194 , 201 , 208                                               ] ,  \
  [ 194 , 182 ,  83 , 201                                               ] ,  \
  [ 182 , 181 ,  84 ,  83                                               ] ,  \
  ############################################################################
  [ 208 , 201 , 200 , 199                                               ] ,  \
  [ 201 ,  83 ,  18 , 200                                               ] ,  \
  [  83 ,  84 ,  17 ,  18                                               ] ,  \
  ############################################################################
  ## 左下巴多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 434 , 430 , 422 , 432                                               ] ,  \
  [ 432 , 422 , 273 , 287                                               ] ,  \
  [ 287 , 273 , 375 , 291                                               ] ,  \
  ############################################################################
  [ 430 , 431 , 424 , 422                                               ] ,  \
  [ 422 , 424 , 335 , 273                                               ] ,  \
  [ 273 , 335 , 321 , 375                                               ] ,  \
  ############################################################################
  [ 431 , 262 , 418 , 424                                               ] ,  \
  [ 424 , 418 , 406 , 335                                               ] ,  \
  [ 335 , 406 , 405 , 321                                               ] ,  \
  ############################################################################
  [ 262 , 428 , 421 , 418                                               ] ,  \
  [ 418 , 421 , 313 , 406                                               ] ,  \
  [ 406 , 313 , 314 , 405                                               ] ,  \
  ############################################################################
  [ 428 , 199 , 200 , 421                                               ] ,  \
  [ 421 , 200 ,  18 , 313                                               ] ,  \
  [ 313 ,  18 ,  17 , 314                                               ] ,  \
  ############################################################################
  ## 右下顎多邊形(鏡射在圖片左邊)
  ############################################################################
  [  58 , 215 , 138 , 172                                               ] ,  \
  [ 215 , 213 , 192 , 138                                               ] ,  \
  ############################################################################
  [ 172 , 138 , 135 , 136                                               ] ,  \
  [ 138 , 192 , 214 , 135                                               ] ,  \
  ############################################################################
  [ 136 , 135 , 169 , 150                                               ] ,  \
  [ 135 , 214 , 210 , 169                                               ] ,  \
  ############################################################################
  [ 150 , 169 , 170 , 149                                               ] ,  \
  [ 169 , 210 , 211 , 170                                               ] ,  \
  ############################################################################
  [ 149 , 170 , 140 , 176                                               ] ,  \
  [ 170 , 211 ,  32 , 140                                               ] ,  \
  ############################################################################
  [ 176 , 140 , 171 , 148                                               ] ,  \
  [ 140 ,  32 , 208 , 171                                               ] ,  \
  ############################################################################
  [ 148 , 171 , 175 , 152                                               ] ,  \
  [ 171 , 208 , 199 , 175                                               ] ,  \
  ############################################################################
  ## 左下顎多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 288 , 397 , 367 , 435                                               ] ,  \
  [ 435 , 367 , 416 , 433                                               ] ,  \
  ############################################################################
  [ 397 , 365 , 364 , 367                                               ] ,  \
  [ 367 , 364 , 434 , 416                                               ] ,  \
  ############################################################################
  [ 365 , 379 , 394 , 364                                               ] ,  \
  [ 364 , 394 , 430 , 434                                               ] ,  \
  ############################################################################
  [ 379 , 378 , 395 , 394                                               ] ,  \
  [ 394 , 395 , 431 , 430                                               ] ,  \
  ############################################################################
  [ 378 , 400 , 369 , 395                                               ] ,  \
  [ 395 , 369 , 262 , 431                                               ] ,  \
  ############################################################################
  [ 400 , 377 , 396 , 369                                               ] ,  \
  [ 369 , 396 , 428 , 262                                               ] ,  \
  ############################################################################
  [ 377 , 152 , 175 , 396                                               ] ,  \
  [ 396 , 175 , 199 , 428                                               ] ,  \
  ############################################################################
  ## 右眼(鏡射在圖片左邊)
  ############################################################################
  [ 133 , 155 , 154 , 153 , 145 , 144 , 163 ,   7 ,                          \
     33 , 246 , 161 , 160 , 159 , 158 , 157 , 173                       ] ,  \
  ############################################################################
  ## 左眼(鏡射在圖片右邊)
  ############################################################################
  [ 362 , 398 , 384 , 385 , 386 , 387 , 388 , 466 ,                          \
    263 , 249 , 390 , 373 , 374 , 380 , 381 , 382                       ] ,  \
  ############################################################################
  ## 嘴巴
  ############################################################################
  [ 308 , 324 , 318 , 402 , 317 ,  14 ,  87 , 178 ,  88 ,  95 ,              \
     78 , 191 ,  80 ,  81 ,  82 ,  13 , 312 , 311 , 310 , 415                ]
  ############################################################################
]
##############################################################################
class Recognizer (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    return
  ############################################################################
  def Initialize                        ( self , Settings                  ) :
    ##########################################################################
    self . Settings = Settings
    ##########################################################################
    self . CONF     =                   {                                    }
    ##########################################################################
    DIR             = self . Settings   [ "Data"                             ]
    ##########################################################################
    self            . PrepareAIdata     ( DIR , "HAAR"                       )
    self            . PrepareAIdata     ( DIR , "Eyes"                       )
    self            . PrepareAIdata     ( DIR , "Mouth"                      )
    self            . PrepareAIdata     ( DIR , "Landmarks"                  )
    self            . PrepareAIdata     ( DIR , "Fivemarks"                  )
    self            . PrepareAIdata     ( DIR , "Resnet"                     )
    self            . PrepareAIdata     ( DIR , "Boobs-SVM"                  )
    self            . PrepareAIdata     ( DIR , "Boobs-Cascade"              )
    self            . PrepareAIdata     ( DIR , "Boobs-Paired"               )
    self            . PrepareAIdata     ( DIR , "Boobs-Single"               )
    ##########################################################################
    HAAR            = self . CONF       [ "HAAR"                             ]
    EYES            = self . CONF       [ "Eyes"                             ]
    MOUTH           = self . CONF       [ "Mouth"                            ]
    FIVEMARKS       = self . CONF       [ "Fivemarks"                        ]
    LANDMARKS       = self . CONF       [ "Landmarks"                        ]
    RESNET          = self . CONF       [ "Resnet"                           ]
    CASCADE         = self . CONF       [ "Boobs-Cascade"                    ]
    SVM             = self . CONF       [ "Boobs-SVM"                        ]
    ##########################################################################
    FC              = cv2  . CascadeClassifier         ( HAAR                )
    EC              = cv2  . CascadeClassifier         ( EYES                )
    MC              = cv2  . CascadeClassifier         ( MOUTH               )
    FIVE            = dlib . shape_predictor           ( FIVEMARKS           )
    PREDICTOR       = dlib . shape_predictor           ( LANDMARKS           )
    FACIAL          = dlib . face_recognition_model_v1 ( RESNET              )
    CVBOOB          = cv2  . CascadeClassifier         ( CASCADE             )
    SVMBOOB         = dlib . simple_object_detector    ( SVM                 )
    ##########################################################################
    self            . Classifier    = FC
    self            . EyesDetector  = EC
    self            . MouthDetector = MC
    self            . Fivemarks     = FIVE
    self            . Predictor     = PREDICTOR
    self            . Facial        = FACIAL
    self            . CvBoob        = CVBOOB
    self            . DlibBoob      = SVMBOOB
    ##########################################################################
    CONF            = self . Settings   [ "Classifier" ] [ "File"            ]
    MAXI            = self . Settings   [ "Classifier" ] [ "Max"             ]
    self            . setClassifierPath ( CONF , MAXI                        )
    ##########################################################################
    CONF            = self . Settings   [ "Objectron"  ] [ "File"            ]
    MAXI            = self . Settings   [ "Objectron"  ] [ "Max"             ]
    THRS            = self . Settings   [ "Objectron"  ] [ "Threshold"       ]
    self            . setObjectronPath  ( CONF , MAXI , THRS                 )
    ##########################################################################
    CONF            = self . Settings   [ "Stylizers"  ] [ "Sketch"          ]
    self            . setStylizerPath   ( CONF                               )
    ##########################################################################
    self            . PreparePostures   (                                    )
    ##########################################################################
    self            . Creator = None
    ##########################################################################
    return
  ############################################################################
  def PrepareAIdata ( self , DIR , KEY                                     ) :
    ##########################################################################
    AIFILE              = self . Settings [ "AiData" ] [ KEY                 ]
    self . CONF [ KEY ] = f"{DIR}/{AIFILE}"
    ##########################################################################
    return
  ############################################################################
  def PreparePostures                            ( self                    ) :
    ##########################################################################
    self . mpPose = mediapipe . solutions . pose
    self . Pose   = self      . mpPose    . Pose (                           )
    ##########################################################################
    return
  ############################################################################
  ## 物件產生器
  ############################################################################
  def Create                ( self , Name                                  ) :
    ##########################################################################
    if                      ( self . Creator in [ False , None ]           ) :
      return None
    ##########################################################################
    return   self . Creator (        Name                                    )
  ############################################################################
  ## 取得Mediapipe影像
  ############################################################################
  def MediaPipeImage                            ( self , FILENAME          ) :
    return mediapipe . Image . create_from_file (        FILENAME            )
  ############################################################################
  ## CV影像轉Mediapipe
  ############################################################################
  def CvToMediaPipeImage     ( self , image                                ) :
    return mediapipe . Image ( image_format = mediapipe . ImageFormat . SRGB , data = image )
  ############################################################################
  ## 指定物件偵測參數
  ############################################################################
  def setObjectronPath ( self                                              , \
                         detection                                         , \
                         MAXITEMS  = 5000                                  , \
                         THRESHOLD = 0.5                                   ) :
    ##########################################################################
    ObjectDetector        = mediapipe . tasks . vision . ObjectDetector
    ObjectDetectorOptions = mediapipe . tasks . vision . ObjectDetectorOptions
    VisionRunningMode     = mediapipe . tasks . vision . RunningMode
    ##########################################################################
    try                                                                      :
      ########################################################################
      with open        ( detection , "rb" ) as mpFile                        :
        BUFF = mpFile . read (                                               )
      ########################################################################
    except                                                                   :
      return
    ##########################################################################
    self . Tron           = None
    self . DetectionPath  = detection
    ## self . TronOpts       = mediapipe . tasks . BaseOptions ( model_asset_path = detection )
    self . TronOpts       = mediapipe . tasks . BaseOptions ( model_asset_buffer = BUFF )
    ##########################################################################
    OPTS                  = ObjectDetectorOptions                          ( \
                              base_options    = self . TronOpts            , \
                              max_results     = MAXITEMS                   , \
                              score_threshold = THRESHOLD                  , \
                              running_mode    = VisionRunningMode . IMAGE    )
    ##########################################################################
    self . Tron      = ObjectDetector . create_from_options ( OPTS           )
    ##########################################################################
    return
  ############################################################################
  ## 執行物件偵測
  ############################################################################
  def ObjectDetection ( self                                               , \
                        IMAGE                                              , \
                        Probability = 0.1                                  ) :
    ##########################################################################
    ITEMs  =          [                                                      ]
    RESULT = self . Tron . detect ( IMAGE                                    )
    ##########################################################################
    for OBJ in RESULT . detections                                           :
      ########################################################################
      F = False
      J = { "Box"        : { }                                             , \
            "Categories" : [ ]                                               }
      ########################################################################
      J [ "Box" ] [ "X" ] = int ( OBJ . bounding_box . origin_x              )
      J [ "Box" ] [ "Y" ] = int ( OBJ . bounding_box . origin_y              )
      J [ "Box" ] [ "W" ] = int ( OBJ . bounding_box . width                 )
      J [ "Box" ] [ "H" ] = int ( OBJ . bounding_box . height                )
      ########################################################################
      for item in OBJ . categories                                           :
        ######################################################################
        IDX = -1
        NAM = ""
        PRT = 0.0
        CAX = ""
        ######################################################################
        if ( item . index         not in [ False , None                  ] ) :
          ####################################################################
          IDX = int ( item . index )
        ######################################################################
        if ( item . display_name  not in [ False , None                  ] ) :
          ####################################################################
          NAM = item . display_name
        ######################################################################
        if ( item . score         not in [ False , None                  ] ) :
          ####################################################################
          PRT = float ( item . score )
        ######################################################################
        if ( item . category_name not in [ False , None                  ] ) :
          ####################################################################
          CAX = item . category_name
        ######################################################################
        K = { "Id"          : IDX                                          , \
              "Name"        : NAM                                          , \
              "Probability" : PRT                                          , \
              "Category"    : CAX                                            }
        ######################################################################
        J [ "Categories" ] . append ( K                                      )
        ######################################################################
        if ( PRT >= Probability                                            ) :
          ####################################################################
          F = True
      ########################################################################
      if               ( F                                                 ) :
        ######################################################################
        ITEMs . append ( J                                                   )
    ##########################################################################
    return ITEMs
  ############################################################################
  ## 指定圖像分類參數
  ############################################################################
  def setClassifierPath ( self , classifier , MAXITEMS = 5000              ) :
    ##########################################################################
    ImageClassifier        = mediapipe . tasks . vision . ImageClassifier
    ImageClassifierOptions = mediapipe . tasks . vision . ImageClassifierOptions
    VisionRunningMode      = mediapipe . tasks . vision . RunningMode
    ##########################################################################
    try                                                                      :
      ########################################################################
      with open         ( classifier , "rb" ) as mpFile                      :
        BUFF = mpFile . read (                                               )
      ########################################################################
    except                                                                   :
      return
    ##########################################################################
    self . Catalog         = None
    self . ClassifierPath  = classifier
    self . BaseOpts        = mediapipe . tasks . BaseOptions ( model_asset_buffer = BUFF )
    ##########################################################################
    OPTS                   = ImageClassifierOptions                        ( \
                               base_options = self . BaseOpts              , \
                               max_results  = MAXITEMS                     , \
                               running_mode = VisionRunningMode . IMAGE      )
    ##########################################################################
    self . Catalog = ImageClassifier . create_from_options ( OPTS            )
    ##########################################################################
    return
  ############################################################################
  ## 執行圖像分類
  ############################################################################
  def Classification ( self                                                , \
                       IMAGE                                               , \
                       Probability = 0.00001                               ) :
    ##########################################################################
    if               ( self . Catalog in [ False , None                  ] ) :
      return         [                                                       ]
    ##########################################################################
    ITEMs  =         [                                                       ]
    ##########################################################################
    RESULT = self . Catalog . classify ( IMAGE                               )
    ##########################################################################
    for Scope in RESULT . classifications                                    :
      ########################################################################
      for item in Scope . categories                                         :
        ######################################################################
        if ( item . score < Probability                                    ) :
          continue
        ######################################################################
        J = { "Id"          : int   ( item . index )                       , \
              "Name"        : item . display_name                          , \
              "Probability" : float ( item . score )                       , \
              "Category"    : item . category_name                           }
        ######################################################################
        ITEMs . append ( J                                                   )
    ##########################################################################
    return ITEMs
  ############################################################################
  ## 集中分類名稱
  ############################################################################
  def toCategories   ( self , ITEMs                                        ) :
    ##########################################################################
    NAMEs   =        [                                                       ]
    ##########################################################################
    for item in ITEMs                                                        :
      ########################################################################
      NAMEs . append ( item [ "Category"                                   ] )
    ##########################################################################
    return NAMEs
  ############################################################################
  ## 指定物件偵測參數
  ############################################################################
  def setStylizerPath ( self , StylePath                                   ) :
    ##########################################################################
    FaceStylizer        = mediapipe . tasks . vision . FaceStylizer
    FaceStylizerOptions = mediapipe . tasks . vision . FaceStylizerOptions
    ##########################################################################
    try                                                                      :
      ########################################################################
      with open       ( StylePath , "rb" ) as mpFile                         :
        BUFF = mpFile . read (                                               )
      ########################################################################
    except                                                                   :
      return
    ##########################################################################
    self . Stylizer     = None
    self . StylePath    = StylePath
    ## self . StyleOpts    = mediapipe . tasks . BaseOptions ( model_asset_path = StylePath )
    self . StyleOpts    = mediapipe . tasks . BaseOptions ( model_asset_buffer = BUFF )
    ##########################################################################
    OPTS                = FaceStylizerOptions                              ( \
                          base_options    = self . StyleOpts                 )
    ##########################################################################
    self . Stylizer     = FaceStylizer . create_from_options ( OPTS          )
    ##########################################################################
    return
  ############################################################################
  def Stylization                    ( self , IMAGE                        ) :
    return self . Stylizer . stylize (        IMAGE                          )
  ############################################################################
  def CreateRectangle ( self , x , y , w , h                               ) :
    ##########################################################################
    R    = int ( x ) + int ( w     ) - 1
    B    = int ( y ) + int ( h     ) - 1
    CX   = int ( x ) + int ( w / 2 )
    CY   = int ( y ) + int ( h / 2 )
    ##########################################################################
    RECT =            { "X"     : int   ( x   )                            , \
                        "Y"     : int   ( y   )                            , \
                        "W"     : int   ( w   )                            , \
                        "H"     : int   ( h   )                            , \
                        "R"     : int   ( R   )                            , \
                        "B"     : int   ( B   )                            , \
                        "CX"    : int   ( CX  )                            , \
                        "CY"    : int   ( CY  )                            , \
                        "Angle" : float ( 0.0 )                              }
    ##########################################################################
    return RECT
  ############################################################################
  def CreateRectangleByJR         ( self , RT                              ) :
    ##########################################################################
    x = RT                        [ "X"                                      ]
    y = RT                        [ "Y"                                      ]
    w = RT                        [ "W"                                      ]
    h = RT                        [ "H"                                      ]
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def RectangleToString ( self , RT                                        ) :
    ##########################################################################
    X = RT              [ "X"                                                ]
    Y = RT              [ "Y"                                                ]
    W = RT              [ "W"                                                ]
    H = RT              [ "H"                                                ]
    ##########################################################################
    return f"{X} {Y} {W} {H}"
  ############################################################################
  def RectanglesToStrings ( self , RECTs                                   ) :
    ##########################################################################
    RS   =                [                                                  ]
    ##########################################################################
    for R in RECTs                                                           :
      RS . append         ( self . RectangleToString ( R )                   )
    ##########################################################################
    return RS
  ############################################################################
  def RectToXYWH ( self , rect                                             ) :
    ##########################################################################
    x = rect     [ "X"                                                       ]
    y = rect     [ "Y"                                                       ]
    w = rect     [ "W"                                                       ]
    h = rect     [ "H"                                                       ]
    ##########################################################################
    return       ( x , y , w , h ,                                           )
  ############################################################################
  def NegativeXY      ( self , PT                                          ) :
    ##########################################################################
    PT [ "X" ] = - PT [ "X"                                                  ]
    PT [ "Y" ] = - PT [ "Y"                                                  ]
    ##########################################################################
    return PT
  ############################################################################
  def ShiftRectangle ( self , PT , RT                                      ) :
    ##########################################################################
    PX         = PT  [ "X"                                                   ]
    PY         = PT  [ "Y"                                                   ]
    ##########################################################################
    XX         = RT  [ "X"                                                   ]
    YY         = RT  [ "Y"                                                   ]
    ##########################################################################
    RT [ "X" ] = XX + PX
    RT [ "Y" ] = YY + PY
    ##########################################################################
    return RT
  ############################################################################
  def CvToRectangle               ( self , rect                            ) :
    ##########################################################################
    x = int                       ( rect [ 0                               ] )
    y = int                       ( rect [ 1                               ] )
    w = int                       ( rect [ 2                               ] )
    h = int                       ( rect [ 3                               ] )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def DlibToRectangle             ( self , rect                            ) :
    ##########################################################################
    x = rect . left               (                                          )
    y = rect . top                (                                          )
    w = rect . width              (                                          )
    h = rect . height             (                                          )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToDlibRectangle       ( self , rect                                  ) :
    ##########################################################################
    x = rect                [ "X"                                            ]
    y = rect                [ "Y"                                            ]
    r = rect                [ "R"                                            ]
    b = rect                [ "B"                                            ]
    ##########################################################################
    return dlib . rectangle ( left = x , top = y , right = r , bottom = b    )
  ############################################################################
  def CvToRectangles               ( self , RECTs                          ) :
    ##########################################################################
    LISTs   =                      [                                         ]
    ##########################################################################
    if                             ( len ( RECTs ) <= 0                    ) :
      return LISTs
    ##########################################################################
    for R in RECTs                                                           :
      ########################################################################
      CRV   = self . CvToRectangle ( R                                       )
      LISTs . append               ( CRV                                     )
    ##########################################################################
    return LISTs
  ############################################################################
  def ParseCoordinate ( self , KEYs , ITEM , W , H                         ) :
    ##########################################################################
    X = int           ( KEYs . landmark [ ITEM ] . x * W                     )
    Y = int           ( KEYs . landmark [ ITEM ] . y * H                     )
    ##########################################################################
    return            { "X" : X , "Y" : Y                                    }
  ############################################################################
  def LandmarkToNpArray ( self , LMS , major , minor = ""                  ) :
    ##########################################################################
    if                  ( len ( major ) <= 0                               ) :
      return            [                                                    ]
    ##########################################################################
    if                  ( len ( minor ) <= 0                               ) :
      ########################################################################
      F = LMS           [ major                                              ]
      ########################################################################
    else                                                                     :
      ########################################################################
      F = LMS           [ major ] [ minor                                    ]
    ##########################################################################
    return np . array   ( F , dtype = np . int32                             )
  ############################################################################
  def GetBodyKeyPoints ( self , Image , W , H                              ) :
    ##########################################################################
    J     =            { "Body"  : { "Exists" : False                    } , \
                         "Box"   : { "X" : 0                               , \
                                     "Y" : 0                               , \
                                     "W" : W                               , \
                                     "H" : H                             } , \
                         "Nose"  : { }                                     , \
                         "Left"  : { }                                     , \
                         "Right" : { }                                       }
    ##########################################################################
    MPX   = self . mpPose . PoseLandmark
    KPS   = self . Pose   . process (        Image                           )
    KPL   = KPS  . pose_landmarks
    ##########################################################################
    if                              ( KPL in [ False , None              ] ) :
      return J
    ##########################################################################
    J [ "Nose"                  ] = self . ParseCoordinate ( KPL , MPX . NOSE             , W , H )
    ##########################################################################
    J [ "Left"  ] [ "Ankle"     ] = self . ParseCoordinate ( KPL , MPX . LEFT_ANKLE       , W , H )
    J [ "Left"  ] [ "Ear"       ] = self . ParseCoordinate ( KPL , MPX . LEFT_EAR         , W , H )
    J [ "Left"  ] [ "Elbow"     ] = self . ParseCoordinate ( KPL , MPX . LEFT_ELBOW       , W , H )
    J [ "Left"  ] [ "Eye"       ] = self . ParseCoordinate ( KPL , MPX . LEFT_EYE         , W , H )
    J [ "Left"  ] [ "EyeInner"  ] = self . ParseCoordinate ( KPL , MPX . LEFT_EYE_INNER   , W , H )
    J [ "Left"  ] [ "EyeOuter"  ] = self . ParseCoordinate ( KPL , MPX . LEFT_EYE_OUTER   , W , H )
    J [ "Left"  ] [ "FootIndex" ] = self . ParseCoordinate ( KPL , MPX . LEFT_FOOT_INDEX  , W , H )
    J [ "Left"  ] [ "Heel"      ] = self . ParseCoordinate ( KPL , MPX . LEFT_HEEL        , W , H )
    J [ "Left"  ] [ "Hip"       ] = self . ParseCoordinate ( KPL , MPX . LEFT_HIP         , W , H )
    J [ "Left"  ] [ "Index"     ] = self . ParseCoordinate ( KPL , MPX . LEFT_INDEX       , W , H )
    J [ "Left"  ] [ "Knee"      ] = self . ParseCoordinate ( KPL , MPX . LEFT_KNEE        , W , H )
    J [ "Left"  ] [ "Mouth"     ] = self . ParseCoordinate ( KPL , MPX . MOUTH_LEFT       , W , H )
    J [ "Left"  ] [ "Pinky"     ] = self . ParseCoordinate ( KPL , MPX . LEFT_PINKY       , W , H )
    J [ "Left"  ] [ "Shoulder"  ] = self . ParseCoordinate ( KPL , MPX . LEFT_SHOULDER    , W , H )
    J [ "Left"  ] [ "Thumb"     ] = self . ParseCoordinate ( KPL , MPX . LEFT_THUMB       , W , H )
    J [ "Left"  ] [ "Wrist"     ] = self . ParseCoordinate ( KPL , MPX . LEFT_WRIST       , W , H )
    ##########################################################################
    J [ "Right" ] [ "Ankle"     ] = self . ParseCoordinate ( KPL , MPX . RIGHT_ANKLE      , W , H )
    J [ "Right" ] [ "Ear"       ] = self . ParseCoordinate ( KPL , MPX . RIGHT_EAR        , W , H )
    J [ "Right" ] [ "Elbow"     ] = self . ParseCoordinate ( KPL , MPX . RIGHT_ELBOW      , W , H )
    J [ "Right" ] [ "Eye"       ] = self . ParseCoordinate ( KPL , MPX . RIGHT_EYE        , W , H )
    J [ "Right" ] [ "EyeInner"  ] = self . ParseCoordinate ( KPL , MPX . RIGHT_EYE_INNER  , W , H )
    J [ "Right" ] [ "EyeOuter"  ] = self . ParseCoordinate ( KPL , MPX . RIGHT_EYE_OUTER  , W , H )
    J [ "Right" ] [ "FootIndex" ] = self . ParseCoordinate ( KPL , MPX . RIGHT_FOOT_INDEX , W , H )
    J [ "Right" ] [ "Heel"      ] = self . ParseCoordinate ( KPL , MPX . RIGHT_HEEL       , W , H )
    J [ "Right" ] [ "Hip"       ] = self . ParseCoordinate ( KPL , MPX . RIGHT_HIP        , W , H )
    J [ "Right" ] [ "Index"     ] = self . ParseCoordinate ( KPL , MPX . RIGHT_INDEX      , W , H )
    J [ "Right" ] [ "Knee"      ] = self . ParseCoordinate ( KPL , MPX . RIGHT_KNEE       , W , H )
    J [ "Right" ] [ "Mouth"     ] = self . ParseCoordinate ( KPL , MPX . MOUTH_RIGHT      , W , H )
    J [ "Right" ] [ "Pinky"     ] = self . ParseCoordinate ( KPL , MPX . RIGHT_PINKY      , W , H )
    J [ "Right" ] [ "Shoulder"  ] = self . ParseCoordinate ( KPL , MPX . RIGHT_SHOULDER   , W , H )
    J [ "Right" ] [ "Thumb"     ] = self . ParseCoordinate ( KPL , MPX . RIGHT_THUMB      , W , H )
    J [ "Right" ] [ "Wrist"     ] = self . ParseCoordinate ( KPL , MPX . RIGHT_WRIST      , W , H )
    ##########################################################################
    J [ "Body"  ] [ "Exists"    ] = True
    ##########################################################################
    return J
  ############################################################################
  def isRectInRect ( self , A , B                                          ) :
    ##########################################################################
    AX = A         [ "X"                                                     ]
    AR = A         [ "R"                                                     ]
    BX = B         [ "X"                                                     ]
    BR = B         [ "R"                                                     ]
    ##########################################################################
    if             ( AX > BX                                               ) :
      return False
    ##########################################################################
    if             ( AR < BX                                               ) :
      return False
    ##########################################################################
    if             ( AX > BR                                               ) :
      return False
    ##########################################################################
    if             ( AR < BR                                               ) :
      return False
    ##########################################################################
    AY = A         [ "Y"                                                     ]
    AB = A         [ "B"                                                     ]
    BY = B         [ "Y"                                                     ]
    BB = B         [ "B"                                                     ]
    ##########################################################################
    if             ( AY > BY                                               ) :
      return False
    ##########################################################################
    if             ( AB < BY                                               ) :
      return False
    ##########################################################################
    if             ( AY > BB                                               ) :
      return False
    ##########################################################################
    if             ( AB < BB                                               ) :
      return False
    ##########################################################################
    return   True
  ############################################################################
  def hasRectsInRect ( self , RECT , RECTs                                 ) :
    ##########################################################################
    for R in RECTs                                                           :
      if             ( self . isRectInRect ( RECT , R )                    ) :
        return True
    ##########################################################################
    return     False
  ############################################################################
  def countRectsInRect ( self , RECT , RECTs                               ) :
    ##########################################################################
    CNT     = 0
    ##########################################################################
    for R in RECTs                                                           :
      if               ( self . isRectInRect ( RECT , R )                  ) :
        CNT = int      ( CNT + 1                                             )
    ##########################################################################
    return CNT
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def ClassifierToFaces ( self                                             , \
                          gray                                             , \
                          scale     = 1.05                                 , \
                          neighbors = 5                                    , \
                          minsize   = ( 32 , 32 )                          ) :
    ##########################################################################
    FACEs   =         [                                                      ]
    ##########################################################################
    try                                                                      :
      ########################################################################
      FACEs = self . Classifier . detectMultiScale                           (
               gray                                                        , \
               scaleFactor  = scale                                        , \
               minNeighbors = neighbors                                    , \
               minSize      = minsize                                        )
      ########################################################################
    except                                                                   :
      pass
    ##########################################################################
    return FACEs
  ############################################################################
  def ClassifierToEyes ( self                                              , \
                         gray                                              , \
                         scale     = 1.1                                   , \
                         neighbors = 10                                    , \
                         minsize   = ( 15 , 10 )                           ) :
    ##########################################################################
    EYEs   =           [                                                     ]
    ##########################################################################
    try                                                                      :
      ########################################################################
      EYEs = self . EyesDetector . detectMultiScale                          (
               gray                                                        , \
               scaleFactor  = scale                                        , \
               minNeighbors = neighbors                                    , \
               minSize      = minsize                                        )
      ########################################################################
    except                                                                   :
      pass
    ##########################################################################
    return EYEs
  ############################################################################
  def ClassifierToMouthes ( self                                           , \
                            gray                                           , \
                            scale     = 1.1                                , \
                            neighbors = 10                                 , \
                            minsize   = ( 15 , 10 )                        ) :
    ##########################################################################
    MOUTHes   =           [                                                  ]
    ##########################################################################
    try                                                                      :
      ########################################################################
      MOUTHes = self . MouthDetector . detectMultiScale                      (
                  gray                                                     , \
                  scaleFactor  = scale                                     , \
                  minNeighbors = neighbors                                 , \
                  minSize      = minsize                                     )
      ########################################################################
    except                                                                   :
      pass
    ##########################################################################
    return MOUTHes
  ############################################################################
  def ClassifierToBoobs ( self                                             , \
                          gray                                             , \
                          scale     = 1.05                                 , \
                          neighbors = 5                                    , \
                          minsize   = ( 32 , 32 )                          ) :
    ##########################################################################
    BOOBs   =           [                                                    ]
    ##########################################################################
    try                                                                      :
      ########################################################################
      BOOBs = self . CvBoob . detectMultiScale                               (
                gray                                                       , \
                scaleFactor  = scale                                       , \
                minNeighbors = neighbors                                   , \
                minSize      = minsize                                     , \
                flags        = cv2 . CASCADE_SCALE_IMAGE                     )
      ########################################################################
    except                                                                   :
      pass
    ##########################################################################
    return BOOBs
  ############################################################################
  def DoClassifierToFaces            ( self , GRAY , OPTs                  ) :
    ##########################################################################
    FACEs = self . ClassifierToFaces ( GRAY                                  )
    ##########################################################################
    return self . CvToRectangles     ( FACEs                                 )
  ############################################################################
  def DoClassifierToEyes            ( self , GRAY , OPTs                   ) :
    ##########################################################################
    FACEs = self . ClassifierToEyes ( GRAY                                   )
    ##########################################################################
    return self . CvToRectangles    ( FACEs                                  )
  ############################################################################
  def DoClassifierToMouthes            ( self , GRAY , OPTs                ) :
    ##########################################################################
    FACEs = self . ClassifierToMouthes ( GRAY                                )
    ##########################################################################
    return self . CvToRectangles       ( FACEs                               )
  ############################################################################
  def DoClassifierToBoobs            ( self , GRAY , OPTs                  ) :
    ##########################################################################
    FACEs = self . ClassifierToBoobs ( GRAY                                  )
    ##########################################################################
    return self . CvToRectangles     ( FACEs                                 )
  ############################################################################
  def DoDlibToBoobs                  ( self , RGB , OPTs                   ) :
    ##########################################################################
    LISTs   =                        [                                       ]
    try                                                                      :
      ########################################################################
      BOOBs = self . DlibBoob        (        RGB                            )
      ########################################################################
    except                                                                   :
      return LISTs
    ##########################################################################
    if                               ( BOOBs in [ False , None           ] ) :
      return LISTs
    ##########################################################################
    CNT     = len                    ( BOOBs                                 )
    ##########################################################################
    if                               ( CNT <= 0                            ) :
      return LISTs
    ##########################################################################
    for id in range                  ( 0 , CNT                             ) :
      ########################################################################
      CRV   = self . DlibToRectangle ( BOOBs [ id ]                          )
      ########################################################################
      LISTs . append                 ( CRV                                   )
    ##########################################################################
    return LISTs
  ############################################################################
  def FoundObjectDescription ( self , IT                                   ) :
    ##########################################################################
    if                       ( "Probability" not in IT                     ) :
      return ""
    ##########################################################################
    if                       ( "Category"    not in IT                     ) :
      return ""
    ##########################################################################
    NAME = IT                [ "Category"                                    ]
    PROB = IT                [ "Probability"                                 ]
    ##########################################################################
    return f"{NAME} : {PROB}"
  ############################################################################
  def ReportClassifications ( self , ITEMs , addLog                        ) :
    ##########################################################################
    if                      ( len ( ITEMs ) <= 0                           ) :
      return
    ##########################################################################
    LISTs     =             [                                                ]
    ##########################################################################
    for IT in ITEMs                                                          :
      ########################################################################
      TEXT    = self . FoundObjectDescription ( IT                           )
      ########################################################################
      if                    ( len ( TEXT ) > 0                             ) :
        LISTs . append      ( TEXT                                           )
    ##########################################################################
    if                      ( len ( LISTs ) <= 0                           ) :
      return
    ##########################################################################
    addLog                  ("\n" . join ( LISTs )                           )
    ##########################################################################
    return
  ############################################################################
  def ReportObjects                ( self , ITEMs , addLog                 ) :
    ##########################################################################
    if                             ( len ( ITEMs ) <= 0                    ) :
      return
    ##########################################################################
    LISTs  =                       [                                         ]
    ##########################################################################
    for IC in ITEMs                                                          :
      ########################################################################
      if                           ( "Categories" not in IC                ) :
        continue
      ########################################################################
      ITs  = IC                    [ "Categories"                            ]
      self . ReportClassifications ( ITs , addLog                            )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  def CollectThings       ( self , DESC                                    ) :
    ##########################################################################
    THINGs       =        [                                                  ]
    ##########################################################################
    if                    ( "Classification" in DESC                       ) :
      ########################################################################
      for IT in DESC      [ "Classification"                               ] :
        ######################################################################
        if                ( "Category" not in IT                           ) :
          continue
        ######################################################################
        THING    = IT     [ "Category"                                       ]
        ######################################################################
        if                ( THING in THINGs                                ) :
          continue
        ######################################################################
        THINGs   . append ( THING                                            )
    ##########################################################################
    if                    ( "Objects" in DESC                              ) :
      ########################################################################
      for IC in DESC      [ "Objects"                                      ] :
        ######################################################################
        if                ( "Categories" not in IC                         ) :
          continue
        ######################################################################
        for IT in IC      [ "Categories"                                   ] :
          ####################################################################
          if              ( "Category" not in IT                           ) :
            continue
          ####################################################################
          THING  = IT     [ "Category"                                       ]
          ####################################################################
          if              ( THING in THINGs                                ) :
            continue
          ####################################################################
          THINGs . append ( THING                                            )
    ##########################################################################
    DESC [ "Things" ] = THINGs
    ##########################################################################
    return DESC
  ############################################################################
  ############################################################################
  ############################################################################
  def CalculateMeanColor ( self , PIC                                      ) :
    ##########################################################################
    M = cv2 . mean       ( PIC . toOpenCV (                                ) )
    ##########################################################################
    return               { "Model" : "RGB"                                 , \
                           "Value" : "Double"                              , \
                           "R"     : M [ 2 ]                               , \
                           "G"     : M [ 1 ]                               , \
                           "B"     : M [ 0 ]                                 }
  ############################################################################
  def ConvertRGBtoHSV  ( self , RGB                                        ) :
    ##########################################################################
    R = int            ( RGB [ "R"                                         ] )
    G = int            ( RGB [ "G"                                         ] )
    B = int            ( RGB [ "B"                                         ] )
    I = np  . array    ( [ [ [ B , G , R ] ] ] , dtype = np . uint8          )
    M = cv2 . cvtColor ( I , cv2 . COLOR_BGR2HSV                             )
    ##########################################################################
    H = int            ( M [ 0 ] [ 0 ] [ 0                                 ] )
    S = int            ( M [ 0 ] [ 0 ] [ 1                                 ] )
    V = int            ( M [ 0 ] [ 0 ] [ 2                                 ] )
    ##########################################################################
    return             { "Model" : "HSV"                                   , \
                         "Value" : "UInt8"                                 , \
                         "H"     : H                                       , \
                         "S"     : S                                       , \
                         "V"     : V                                         }
  ############################################################################
  def ConvertHSVtoRGB  ( self , HSV                                         ) :
    ##########################################################################
    H = int            ( HSV [ "H"                                         ] )
    S = int            ( HSV [ "S"                                         ] )
    V = int            ( HSV [ "V"                                         ] )
    I = np  . array    ( [ [ [ H , S , V ] ] ] , dtype = np . uint8          )
    M = cv2 . cvtColor ( I , cv2 . COLOR_HSV2BGR                             )
    ##########################################################################
    B = int            ( M [ 0 ] [ 0 ] [ 0                                 ] )
    G = int            ( M [ 0 ] [ 0 ] [ 1                                 ] )
    R = int            ( M [ 0 ] [ 0 ] [ 2                                 ] )
    ##########################################################################
    return             { "Model" : "RGB"                                   , \
                         "Value" : "UInt8"                                 , \
                         "R"     : R                                       , \
                         "G"     : G                                       , \
                         "B"     : B                                         }
  ############################################################################
  def ConvertRGBtoYUV  ( self , RGB                                        ) :
    ##########################################################################
    R = int            ( RGB [ "R"                                         ] )
    G = int            ( RGB [ "G"                                         ] )
    B = int            ( RGB [ "B"                                         ] )
    I = np  . array    ( [ [ [ B , G , R ] ] ] , dtype = np . uint8          )
    M = cv2 . cvtColor ( I , cv2 . COLOR_BGR2YUV                             )
    ##########################################################################
    Y = int            ( M [ 0 ] [ 0 ] [ 0                                 ] )
    U = int            ( M [ 0 ] [ 0 ] [ 1                                 ] )
    V = int            ( M [ 0 ] [ 0 ] [ 2                                 ] )
    ##########################################################################
    return             { "Model" : "YUV"                                   , \
                         "Value" : "UInt8"                                 , \
                         "Y"     : Y                                       , \
                         "U"     : U                                       , \
                         "V"     : V                                         }
  ############################################################################
  def ConvertYUVtoRGB  ( self , YUV                                        ) :
    ##########################################################################
    Y = int            ( YUV [ "Y"                                         ] )
    U = int            ( YUV [ "U"                                         ] )
    V = int            ( YUV [ "V"                                         ] )
    I = np  . array    ( [ [ [ Y , U , V ] ] ] , dtype = np . uint8          )
    M = cv2 . cvtColor ( I , cv2 . COLOR_YUV2BGR                             )
    ##########################################################################
    B = int            ( M [ 0 ] [ 0 ] [ 0                                 ] )
    G = int            ( M [ 0 ] [ 0 ] [ 1                                 ] )
    R = int            ( M [ 0 ] [ 0 ] [ 2                                 ] )
    ##########################################################################
    return             { "Model" : "RGB"                                   , \
                         "Value" : "UInt8"                                 , \
                         "R"     : R                                       , \
                         "G"     : G                                       , \
                         "B"     : B                                         }
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def DoExtractFaceFeatures         ( self , PIC , OPTs = { }              ) :
    ##########################################################################
    IMG    = PIC  . toOpenCV        (                                        )
    GRAY   = cv2  . cvtColor        ( IMG , cv2 . COLOR_BGR2GRAY             )
    RGB    = cv2  . cvtColor        ( IMG , cv2 . COLOR_BGR2RGB              )
    WW     = PIC  . Width           (                                        )
    HH     = PIC  . Height          (                                        )
    FR     = self . CreateRectangle ( 0 , 0 , WW , HH                        )
    RT     = self . ToDlibRectangle ( FR                                     )
    ##########################################################################
    try                                                                      :
      ########################################################################
      shp  = self . Predictor       ( GRAY , RT                              )
      desc = self . Facial . compute_face_descriptor ( RGB , shp             )
      FF   = np . array             ( desc                                   )
      ########################################################################
    except                                                                   :
      ########################################################################
      return                        { "Ready" : False                        }
    ##########################################################################
    t      = 0.0
    LL     =                        [                                        ]
    ##########################################################################
    for i in range                  ( 0 , 128                              ) :
      ########################################################################
      v    = FF                     [ i                                      ]
      LL   . append                 ( v                                      )
      t   += float                  ( v * v                                  )
    ##########################################################################
    return                          { "Ready"    : True                    , \
                                      "Weights"  : t                       , \
                                      "Features" : LL                        }
  ############################################################################
  def DoDetectSimpleBody           ( self , PIC , OPTs = { }               ) :
    ##########################################################################
    IMG = PIC . toOpenCV           (                                         )
    RGB = cv2 . cvtColor           ( IMG , cv2 . COLOR_BGR2RGB               )
    WW  = PIC . Width              (                                         )
    HH  = PIC . Height             (                                         )
    ##########################################################################
    return self . GetBodyKeyPoints ( RGB , WW , HH                           )
  ############################################################################
  def DoDetectSimpleFaces             ( self , PIC , OPTs = { }            ) :
    ##########################################################################
    IMG  = PIC  . toOpenCV            (                                      )
    GRAY = cv2  . cvtColor            ( IMG , cv2 . COLOR_BGR2GRAY           )
    ##########################################################################
    return self . DoClassifierToFaces ( GRAY , OPTs                          )
  ############################################################################
  def DoDetectSimpleFaceParts             ( self , PIC , OPTs = {        } ) :
    ##########################################################################
    IMG    = PIC  . toOpenCV              (                                  )
    GRAY   = cv2  . cvtColor              ( IMG , cv2 . COLOR_BGR2GRAY       )
    ##########################################################################
    FACEs  = self . DoClassifierToFaces   ( GRAY , OPTs                      )
    EYEs   = self . DoClassifierToEyes    ( GRAY , OPTs                      )
    MOUTHs = self . DoClassifierToMouthes ( GRAY , OPTs                      )
    ##########################################################################
    return                                { "Faces"   : FACEs              , \
                                            "Eyes"    : EYEs               , \
                                            "Mouthes" : MOUTHs               }
  ############################################################################
  def DecodeDlib68Landmarks ( self , shape                                 ) :
    ##########################################################################
    Landmarks =             { "Points"    :                 [          ]   , \
                              "Rectangle" :                 {          }   , \
                              "Quality"   : int             ( 0        )   , \
                              "Shape"     :                 [          ]   , \
                              "Eyes"      : { "Right"     : [          ]   , \
                                              "RightRect" : {          }   , \
                                              "Left"      : [          ]   , \
                                              "LeftRect"  : {          } } , \
                              "Eyebrow"   : { "Right"     : [          ]   , \
                                              "RightRect" : {          }   , \
                                              "Left"      : [          ]   , \
                                              "LeftRect"  : {          } } , \
                              "Nose"      : { "Bridge"    : [          ]   , \
                                              "Exact"     : True           , \
                                              "Angle"     : 270.0          , \
                                              "Rotate"    :   0.0          , \
                                              "Nostril"   : [          ] } , \
                              "Mouth"     : { "Outer"     : [          ]   , \
                                              "OuterRect" : {          }   , \
                                              "Inner"     : [          ]   , \
                                              "InnerRect" : {          } }   }
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    try                                                                      :
      ########################################################################
      for i in range        ( 0 , 68                                       ) :
        ######################################################################
        x     = shape.part  ( i ) . x
        y     = shape.part  ( i ) . y
        ######################################################################
        if                  ( x < XL                                       ) :
          XL  = x
        ######################################################################
        if                  ( x > XR                                       ) :
          XR  = x
        ######################################################################
        if                  ( y < YT                                       ) :
          YT  = y
        ######################################################################
        if                  ( y > YB                                       ) :
          YB  = y
        ######################################################################
        Landmarks [ "Points" ] . append ( [ x , y ]                          )
      ########################################################################
    except                                                                   :
      ########################################################################
      return                ( False , {                                  } , )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Rectangle" ] = RT
    ##########################################################################
    ## 臉型
    ##########################################################################
    for i in range          ( 0 , 17                                       ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]          [ i                        ]
      Landmarks             [ "Shape"  ] . append ( p                        )
    ##########################################################################
    ## 計算原始臉型數據品質
    ##########################################################################
    LP        = Landmarks   [ "Shape"  ] [  0 ] [ 0                          ]
    RP        = Landmarks   [ "Shape"  ] [ 16 ] [ 0                          ]
    Quality   = int         ( RP - LP                                        )
    ##########################################################################
    if                      ( Quality < 0                                  ) :
      Quality = 0 - Quality
    ##########################################################################
    Landmarks [ "Quality"  ] = Quality
    ##########################################################################
    ## 右眉(在左邊)
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    for i in range          ( 17 , 22                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points"  ]                       [ i          ]
      ########################################################################
      x       = p           [ 0                                              ]
      y       = p           [ 0                                              ]
      ########################################################################
      if                    ( x < XL                                       ) :
        XL    = x
      ########################################################################
      if                    ( x > XR                                       ) :
        XR    = x
      ########################################################################
      if                    ( y < YT                                       ) :
        YT    = y
      ########################################################################
      if                    ( y > YB                                       ) :
        YB    = y
      ########################################################################
      Landmarks             [ "Eyebrow" ] [ "Right"  ] . append ( p          )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Eyebrow" ] [ "RightRect" ] = RT
    ##########################################################################
    ## 左眉(在右邊)
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    for i in range          ( 22 , 27                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points"  ]                       [ i          ]
      ########################################################################
      x       = p           [ 0                                              ]
      y       = p           [ 0                                              ]
      ########################################################################
      if                    ( x < XL                                       ) :
        XL    = x
      ########################################################################
      if                    ( x > XR                                       ) :
        XR    = x
      ########################################################################
      if                    ( y < YT                                       ) :
        YT    = y
      ########################################################################
      if                    ( y > YB                                       ) :
        YB    = y
      ########################################################################
      Landmarks             [ "Eyebrow" ] [ "Left"   ] . append ( p          )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Eyebrow" ] [ "LeftRect" ] = RT
    ##########################################################################
    ## 鼻樑
    ##########################################################################
    for i in range          ( 27 , 31                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]                        [ i          ]
      Landmarks             [ "Nose"   ] [ "Bridge"  ] . append ( p          )
    ##########################################################################
    ## 鼻孔部
    ##########################################################################
    for i in range          ( 31 , 36                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]                        [ i          ]
      Landmarks             [ "Nose"   ] [ "Nostril" ] . append ( p          )
    ##########################################################################
    ## 右眼(在左邊)
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    for i in range          ( 36 , 42                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]                        [ i          ]
      ########################################################################
      x       = p           [ 0                                              ]
      y       = p           [ 0                                              ]
      ########################################################################
      if                    ( x < XL                                       ) :
        XL    = x
      ########################################################################
      if                    ( x > XR                                       ) :
        XR    = x
      ########################################################################
      if                    ( y < YT                                       ) :
        YT    = y
      ########################################################################
      if                    ( y > YB                                       ) :
        YB    = y
      ########################################################################
      Landmarks             [ "Eyes"   ] [ "Right"   ] . append ( p          )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Eyes" ] [ "RightRect" ] = RT
    ##########################################################################
    ## 左眼(在右邊)
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    for i in range          ( 42 , 48                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]                        [ i          ]
      ########################################################################
      x       = p           [ 0                                              ]
      y       = p           [ 0                                              ]
      ########################################################################
      if                    ( x < XL                                       ) :
        XL    = x
      ########################################################################
      if                    ( x > XR                                       ) :
        XR    = x
      ########################################################################
      if                    ( y < YT                                       ) :
        YT    = y
      ########################################################################
      if                    ( y > YB                                       ) :
        YB    = y
      ########################################################################
      Landmarks             [ "Eyes"   ] [ "Left"    ] . append ( p          )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Eyes" ] [ "LeftRect" ] = RT
    ##########################################################################
    ## 外嘴唇
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    for i in range          ( 48 , 60                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]                        [ i          ]
      ########################################################################
      x       = p           [ 0                                              ]
      y       = p           [ 0                                              ]
      ########################################################################
      if                    ( x < XL                                       ) :
        XL    = x
      ########################################################################
      if                    ( x > XR                                       ) :
        XR    = x
      ########################################################################
      if                    ( y < YT                                       ) :
        YT    = y
      ########################################################################
      if                    ( y > YB                                       ) :
        YB    = y
      ########################################################################
      Landmarks             [ "Mouth"  ] [ "Outer"   ] . append ( p          )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Eyes" ] [ "OuterRect" ] = RT
    ##########################################################################
    ## 內嘴唇
    ##########################################################################
    XL        =  100000000000000.0
    XR        = -100000000000000.0
    YT        =  100000000000000.0
    YB        = -100000000000000.0
    ##########################################################################
    for i in range          ( 60 , 68                                      ) :
      ########################################################################
      p       = Landmarks   [ "Points" ]                        [ i          ]
      ########################################################################
      x       = p           [ 0                                              ]
      y       = p           [ 0                                              ]
      ########################################################################
      if                    ( x < XL                                       ) :
        XL    = x
      ########################################################################
      if                    ( x > XR                                       ) :
        XR    = x
      ########################################################################
      if                    ( y < YT                                       ) :
        YT    = y
      ########################################################################
      if                    ( y > YB                                       ) :
        YB    = y
      ########################################################################
      Landmarks             [ "Mouth"  ] [ "Inner"   ] . append ( p          )
    ##########################################################################
    SW        = int         ( XR - XL + 1                                    )
    SH        = int         ( YB - YT + 1                                    )
    RT        = self . CreateRectangle ( XL , YT , SW , SH                   )
    ##########################################################################
    Landmarks [ "Eyes" ] [ "InnerRect" ] = RT
    ##########################################################################
    T         = Landmarks   [ "Nose" ] [ "Bridge" ] [ 0                      ]
    ## B         = Landmarks   [ "Nose" ] [ "Bridge" ] [ 1                      ]
    B         = Landmarks   [ "Nose" ] [ "Bridge" ] [ 3                      ]
    dX        = int         ( T [ 0 ] - B [ 0 ]                              )
    dY        = int         ( T [ 1 ] - B [ 1 ]                              )
    ##########################################################################
    r         = np.degrees  ( np . arctan2 ( dY , dX ) ) + 540.0
    k         = int         ( r / 360                                        )
    r         = r -         ( k * 360                                        )
    ANGLE     =             ( 360.0 - r                                      )
    ROTA      =             ( ANGLE - 270.0                                  )
    ##########################################################################
    Landmarks [ "Nose" ] [ "Angle"  ] = ANGLE
    Landmarks [ "Nose" ] [ "Rotate" ] = ROTA
    ##########################################################################
    return                  ( True , Landmarks ,                             )
  ############################################################################
  def DoDetectFaceLandmarks                ( self , PIC , OPTs = {       } ) :
    ##########################################################################
    IMG     = PIC  . toOpenCV              (                                 )
    GRAY    = cv2  . cvtColor              ( IMG , cv2 . COLOR_BGR2GRAY      )
    ##########################################################################
    FACEs   = self . DoClassifierToFaces   ( GRAY , OPTs                     )
    FCNT    = len                          ( FACEs                           )
    ##########################################################################
    if                                     ( 1 != FCNT                     ) :
      return                               { "Found" : False                 }
    ##########################################################################
    DR      = self . ToDlibRectangle       ( FACEs [ 0                     ] )
    shape   = self . Predictor             ( GRAY  , DR                      )
    OK , LM = self . DecodeDlib68Landmarks ( shape                           )
    ##########################################################################
    if                                     ( not OK                        ) :
      return                               { "Found" : False                 }
    ##########################################################################
    return                                 { "Found"     : True            , \
                                             "Landmarks" : LM                }
  ############################################################################
  def ScaleMeshPoints ( self , WW , HH , PTs                               ) :
    ##########################################################################
    ZTs   =           [                                                      ]
    ##########################################################################
    for P in PTs                                                             :
      ########################################################################
      XX  = P         [ "X"                                                  ]
      YY  = P         [ "Y"                                                  ]
      ZZ  = P         [ "Z"                                                  ]
      ########################################################################
      PX  = float     ( XX * WW                                              )
      PY  = float     ( YY * HH                                              )
      ########################################################################
      ZTs . append    ( { "X" : PX , "Y" : PY , "Z" : ZZ }                   )
    ##########################################################################
    return ZTs
  ############################################################################
  def RectangleMeshPoints ( self , RT , PTs                                ) :
    ##########################################################################
    ZTs   =               [                                                  ]
    ##########################################################################
    BX    = RT            [ "X"                                              ]
    BY    = RT            [ "Y"                                              ]
    SW    = RT            [ "W"                                              ]
    SH    = RT            [ "H"                                              ]
    ##########################################################################
    for P in PTs                                                             :
      ########################################################################
      XX  = P             [ "X"                                              ]
      YY  = P             [ "Y"                                              ]
      ZZ  = P             [ "Z"                                              ]
      ########################################################################
      SX  = float         ( XX * SW                                          )
      SY  = float         ( YY * SH                                          )
      ########################################################################
      SX  = float         ( SX + BX                                          )
      SY  = float         ( SY + BY                                          )
      ########################################################################
      ZTs . append        ( { "X" : SX , "Y" : SY , "Z" : ZZ }               )
    ##########################################################################
    return ZTs
  ############################################################################
  def DoDetectFaceMeshes              ( self , PIC , OPTs = { }            ) :
    ##########################################################################
    if                                ( "Region" not in OPTs               ) :
      return                          { "Ready" : False                      }
    ##########################################################################
    if                                ( "Screen" not in OPTs               ) :
      return                          { "Ready" : False                      }
    ##########################################################################
    STATIC          = True
    FACEs           = 1
    REFINE          = True
    MinConfidence   = 0.5
    ##########################################################################
    if                                ( "Static"     in OPTs               ) :
      STATIC        = OPTs            [ "Static"                             ]
    ##########################################################################
    if                                ( "Faces"      in OPTs               ) :
      FACEs         = OPTs            [ "Faces"                              ]
    ##########################################################################
    if                                ( "Refine"     in OPTs               ) :
      REFINE        = OPTs            [ "Refine"                             ]
    ##########################################################################
    if                                ( "Confidence" in OPTs               ) :
      MinConfidence = OPTs            [ "Confidence"                         ]
    ##########################################################################
    IMG             = PIC . toOpenCV  (                                      )
    RGB             = cv2 . cvtColor  ( IMG , cv2 . COLOR_BGR2RGB            )
    WW              = PIC . Width     (                                      )
    HH              = PIC . Height    (                                      )
    ##########################################################################
    FM              = mediapipe . solutions . face_mesh
    FD              = FM . FaceMesh                                        ( \
                        static_image_mode        = STATIC                  , \
                        max_num_faces            = FACEs                   , \
                        refine_landmarks         = REFINE                  , \
                        min_detection_confidence = MinConfidence             )
    ##########################################################################
    try                                                                      :
      ########################################################################
      RR            = FD . process    ( RGB                                  )
      ########################################################################
    except                                                                   :
      return                          { "Ready" : False                      }
    ##########################################################################
    if                                ( not RR . multi_face_landmarks      ) :
      return                          { "Ready" : False                      }
    ##########################################################################
    CNT             = len             ( RR . multi_face_landmarks            )
    ##########################################################################
    if                                ( 1 != CNT                           ) :
      return                          { "Ready" : False                      }
    ##########################################################################
    BX              = OPTs            [ "Screen" ] [ "X"                     ]
    BY              = OPTs            [ "Screen" ] [ "Y"                     ]
    SW              = OPTs            [ "Screen" ] [ "W"                     ]
    SH              = OPTs            [ "Screen" ] [ "H"                     ]
    ##########################################################################
    LL              =                 [                                      ]
    PL              =                 [                                      ]
    SL              =                 [                                      ]
    ##########################################################################
    for F in RR . multi_face_landmarks                                       :
      ########################################################################
      for P in F . landmark                                                  :
        ######################################################################
        XX          = float           ( P  . x                               )
        YY          = float           ( P  . y                               )
        ZZ          = float           ( P  . z                               )
        ######################################################################
        PX          = float           ( XX * WW                              )
        PY          = float           ( YY * HH                              )
        ######################################################################
        SX          = float           ( XX * SW                              )
        SY          = float           ( YY * SH                              )
        ######################################################################
        SX          = float           ( SX + BX                              )
        SY          = float           ( SY + BY                              )
        ######################################################################
        LL          . append          ( { "X" : XX , "Y" : YY , "Z" : ZZ }   )
        PL          . append          ( { "X" : PX , "Y" : PY , "Z" : ZZ }   )
        SL          . append          ( { "X" : SX , "Y" : SY , "Z" : ZZ }   )
    ##########################################################################
    if                                ( len ( LL ) <= 0                    ) :
      return                          { "Ready" : False                      }
    ##########################################################################
    return                            { "Ready"    : True                  , \
                                        "Width"    : WW                    , \
                                        "Height"   : HH                    , \
                                        "X"        : BX                    , \
                                        "Y"        : BY                    , \
                                        "SW"       : SW                    , \
                                        "SH"       : SH                    , \
                                        "Region"   : OPTs [ "Region" ]     , \
                                        "Screen"   : OPTs [ "Screen" ]     , \
                                        "Original" : LL                    , \
                                        "Pixels"   : PL                    , \
                                        "Draws"    : SL                      }
  ############################################################################
  def DoDetectSimpleBoobs             ( self , PIC , OPTs = { }            ) :
    ##########################################################################
    IMG  = PIC  . toOpenCV            (                                      )
    GRAY = cv2  . cvtColor            ( IMG , cv2 . COLOR_BGR2GRAY           )
    ##########################################################################
    return self . DoClassifierToBoobs ( GRAY , OPTs                          )
  ############################################################################
  def DoDetectSimpleDlibBoobs   ( self , PIC , OPTs = { }                  ) :
    ##########################################################################
    IMG  = PIC  . toOpenCV      (                                            )
    IRGB = cv2  . cvtColor      ( IMG , cv2 . COLOR_BGR2RGB                  )
    ##########################################################################
    return self . DoDlibToBoobs ( IRGB , OPTs                                )
  ############################################################################
  def DoDetectAllBoobs                   ( self , PIC , OPTs = { }         ) :
    ##########################################################################
    IMG     = PIC  . toOpenCV            (                                   )
    GRAY    = cv2  . cvtColor            ( IMG , cv2 . COLOR_BGR2GRAY        )
    IRGB    = cv2  . cvtColor            ( IMG , cv2 . COLOR_BGR2RGB         )
    ##########################################################################
    BOOBs   = self . DoClassifierToBoobs ( GRAY , OPTs                       )
    BOOBz   = self . DoDlibToBoobs       ( IRGB , OPTs                       )
    ##########################################################################
    for B in BOOBz                                                           :
      BOOBs . append                     ( B                                 )
    ##########################################################################
    return BOOBs
  ############################################################################
  def DoBasicDescription                  ( self , PIC , INFO , OPTs       ) :
    ##########################################################################
    global RVERSION
    ##########################################################################
    J      =                              { "Information" : INFO             }
    IMG    = PIC  . toOpenCV              (                                  )
    GRAY   = cv2  . cvtColor              ( IMG , cv2 . COLOR_BGR2GRAY       )
    IRGB   = cv2  . cvtColor              ( IMG , cv2 . COLOR_BGR2RGB        )
    MRGB   = self . CvToMediaPipeImage    ( IRGB                             )
    ##########################################################################
    WW     = PIC  . Width                 (                                  )
    HH     = PIC  . Height                (                                  )
    ##########################################################################
    FACEs  = self . DoClassifierToFaces   ( GRAY , OPTs                      )
    EYEs   = self . DoClassifierToEyes    ( GRAY , OPTs                      )
    MOUTHs = self . DoClassifierToMouthes ( GRAY , OPTs                      )
    BOOBs  = self . DoClassifierToBoobs   ( GRAY , OPTs                      )
    BOOBz  = self . DoDlibToBoobs         ( IRGB , OPTs                      )
    ##########################################################################
    D      =                              { "Faces"      :               {   \
                                              "Total"    : len ( FACEs   ) , \
                                              "Listings" :       FACEs   } , \
                                            "Eyes"       :               {   \
                                              "Total"    : len ( EYEs    ) , \
                                              "Listings" :       EYEs    } , \
                                            "Mouthes"    :               {   \
                                              "Total"    : len ( MOUTHs  ) , \
                                              "Listings" :       MOUTHs  } , \
                                            "Boobs"      :               {   \
                                              "Total"    : len ( BOOBs   ) , \
                                              "Listings" :       BOOBs   } , \
                                            "DlibBoobs"  :               {   \
                                              "Total"    : len ( BOOBz   ) , \
                                              "Listings" :       BOOBz   }   }
    ##########################################################################
    BODYs  = self . GetBodyKeyPoints      ( IRGB , WW , HH                   )
    ##########################################################################
    CTRIG  = self . Settings [ "Classifier" ] [ "Probability"                ]
    OTRIG  = self . Settings [ "Objectron"  ] [ "Probability"                ]
    ##########################################################################
    ITEMs  = self . Classification        ( MRGB , CTRIG                     )
    OBJs   = self . ObjectDetection       ( MRGB , OTRIG                     )
    ##########################################################################
    NOW    = StarDate                     (                                  )
    NOW    . Now                          (                                  )
    CDT    = NOW . Stardate
    ##########################################################################
    B      =                              { "Classification" : ITEMs       , \
                                            "Objects"        : OBJs        , \
                                            "Skeletons"      : BODYs       , \
                                            "Body"           : D             }
    B      = self . CollectThings         ( B                                )
    ##########################################################################
    J      =                              { "Foundation"     : True        , \
                                            "Version"        : RVERSION    , \
                                            "Timestamp"      : CDT         , \
                                            "Description"    : B             }
    ##########################################################################
    return J
  ############################################################################
  def hasFaces         ( self , INFO                                       ) :
    ##########################################################################
    if                 ( INFO in [ False , None ]                          ) :
      return False
    ##########################################################################
    if                 ( "Description" not in INFO                         ) :
      return False
    ##########################################################################
    JJJ   = INFO       [ "Description"                                       ]
    if                 ( "Body"        not in JJJ                          ) :
      return False
    ##########################################################################
    JJJ   = JJJ        [ "Body"                                              ]
    if                 ( "Faces"       not in JJJ                          ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Faces"                                             ]
    if                 ( "Total"       not in KKK                          ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Mouthes"                                           ]
    if                 ( "Total"       not in KKK                          ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Eyes"                                              ]
    if                 ( "Total"       not in KKK                          ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Faces"                                             ]
    TOTAL = KKK        [ "Total"                                             ]
    ##########################################################################
    if                 ( TOTAL <= 0                                        ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Mouthes"                                           ]
    TOTAL = KKK        [ "Total"                                             ]
    ##########################################################################
    if                 ( TOTAL <= 0                                        ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Eyes"                                              ]
    TOTAL = KKK        [ "Total"                                             ]
    ##########################################################################
    if                 ( TOTAL <= 0                                        ) :
      return False
    ##########################################################################
    KKK   = JJJ        [ "Faces"                                             ]
    FACEs = KKK        [ "Listings"                                          ]
    ##########################################################################
    KKK   = JJJ        [ "Mouthes"                                           ]
    MOUTH = KKK        [ "Listings"                                          ]
    ##########################################################################
    KKK   = JJJ        [ "Eyes"                                              ]
    EYEs  = KKK        [ "Listings"                                          ]
    ##########################################################################
    for F in FACEs                                                           :
      ########################################################################
      W   = F          [ "W"                                                 ]
      H   = F          [ "H"                                                 ]
      ########################################################################
      if               ( W < 128                                           ) :
        continue
      ########################################################################
      if               ( H < 128                                           ) :
        continue
      ########################################################################
      MM  = self . hasRectsInRect   ( F , MOUTH                              )
      ########################################################################
      if               ( not MM                                            ) :
        return False
      ########################################################################
      EE  = self . countRectsInRect ( F , EYEs                               )
      ########################################################################
      if               ( EE < 2                                            ) :
        return False
      ########################################################################
      return   True
    ##########################################################################
    return     False
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
