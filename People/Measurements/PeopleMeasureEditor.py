# -*- coding: utf-8 -*-
##############################################################################
## PeopleMeasureEditor
## 人物詳細資訊
##############################################################################
import os
import sys
import time
import requests
import threading
import json
##############################################################################
from   PySide6                         import QtCore
from   PySide6                         import QtGui
from   PySide6                         import QtWidgets
from   PySide6 . QtCore                import *
from   PySide6 . QtGui                 import *
from   PySide6 . QtWidgets             import *
from   AITK    . Qt6                   import *
##############################################################################
from   AITK    . Essentials . Relation import Relation
from   AITK    . Calendars  . StarDate import StarDate
from   AITK    . Calendars  . Periode  import Periode
from   AITK    . People     . People   import People as PeopleItem
##############################################################################
class PeopleMeasureEditor ( TreeDock                                       ) :
  ############################################################################
  HavingMenu    = 1371434312
  ############################################################################
  emitNamesShow = Signal  (                                                  )
  emitAllNames  = Signal  ( list                                             )
  emitLog       = Signal  ( str                                              )
  ############################################################################
  def __init__            ( self , parent = None , plan = None             ) :
    ##########################################################################
    super ( ) . __init__  (        parent        , plan                      )
    ##########################################################################
    self . ClassTag           = "PeopleMeasureEditor"
    self . FetchTableKey      = self . ClassTag
    self . PeopleUuid         = 0
    ##########################################################################
    self . PEOPLE             = PeopleItem (                                 )
    self . MEASURE            = {                                            }
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . LeftDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setColumnCount          ( 4                                       )
    self . setColumnHidden         ( 3 , True                                )
    ##########################################################################
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    self . MountClicked            ( 2                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ExtendedSelection"                     )
    ##########################################################################
    self . emitNamesShow . connect ( self . show                             )
    self . emitAllNames  . connect ( self . refresh                          )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setAcceptDrops          ( False                                   )
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . NoDragDrop          )
    ##########################################################################
    self . setMinimumSize          ( 80 , 80                                 )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 400 , 640 )                       )
  ############################################################################
  def PrepareForActions             ( self                                 ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def AttachActions   ( self         ,                          Enabled    ) :
    ##########################################################################
    self . LinkAction ( "Refresh"    , self . restart         , Enabled      )
    self . LinkAction ( "Copy"       , self . CopyToClipboard , Enabled      )
    self . LinkAction ( "Select"     , self . SelectOne       , Enabled      )
    self . LinkAction ( "SelectAll"  , self . SelectAll       , Enabled      )
    self . LinkAction ( "SelectNone" , self . SelectNone      , Enabled      )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                     ( self                                   ) :
    return self . defaultFocusIn  (                                          )
  ############################################################################
  def FocusOut                    ( self                                   ) :
    return self . defaultFocusOut (                                          )
  ############################################################################
  def Shutdown               ( self                                        ) :
    ##########################################################################
    self . StayAlive   = False
    self . LoopRunning = False
    ##########################################################################
    if                       ( self . isThreadRunning (                  ) ) :
      return False
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . detachActionsTool (                                               )
    self . LinkVoice         ( None                                          )
    ##########################################################################
    self . Leave . emit      ( self                                          )
    ##########################################################################
    return True
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def twiceClicked              ( self , item , column                     ) :
    ##########################################################################
    ## if                          ( column in [ 0 , 1 ]                      ) :
    ##   ########################################################################
    ##   line = self . setLineEdit ( item                                     , \
    ##                               column                                   , \
    ##                               "editingFinished"                        , \
    ##                               self . nameChanged                         )
    ##   line . setFocus           ( Qt . TabFocusReason                        )
    ##########################################################################
    ## self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def ObtainsInformation ( self , DB                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def PrepareItem           ( self , JSON , BRUSH                          ) :
    ##########################################################################
    ## UXID = str              ( UUID                                           )
    ## IT   = QTreeWidgetItem  (                                                )
    ## IT   . setText          ( 0 , NAME                                       )
    ## IT   . setToolTip       ( 0 , UXID                                       )
    ## IT   . setData          ( 0 , Qt . UserRole , UUID                       )
    ##########################################################################
    ## IT   . setText          ( 1 , ID                                         )
    ## IT   . setTextAlignment ( 2 , Qt . AlignRight                            )
    ## IT   . setTextAlignment ( 3 , Qt . AlignRight                            )
    ##########################################################################
    for COL in              [ 0 , 1 , 2 , 3 , 4                            ] :
      ########################################################################
      IT . setBackground    ( COL , BRUSH                                    )
    ##########################################################################
    return IT
  ############################################################################
  def RenameItem        ( self                                             ) :
    ##########################################################################
    self . goRenameItem ( 1                                                  )
    ##########################################################################
    return
  ############################################################################
  def RefreshToolTip          ( self , Total                               ) :
    ##########################################################################
    ## FMT  = self . getMenuItem ( "DisplayTotal"                               )
    ## MSG  = FMT  . format      ( Total                                        )
    ## self . setToolTip         ( MSG                                          )
    ##########################################################################
    return
  ############################################################################
  def refresh                     ( self , LISTs                           ) :
    ##########################################################################
    self   . clear                (                                          )
    self   . setEnabled           ( False                                    )
    ##########################################################################
    ## CNT    = 0
    ## MOD    = len                  ( self . TreeBrushes                       )
    ##########################################################################
    ## UUIDs  = JSON                 [ "UUIDs"                                  ]
    ## IDFs   = JSON                 [ "Identifiers"                            ]
    ## NAMEs  = JSON                 [ "NAMEs"                                  ]
    ##########################################################################
    ## for U in UUIDs                                                           :
    ##   ########################################################################
    ##   IT   = self . PrepareItem   ( U                                      , \
    ##                                 NAMEs [ U ]                            , \
    ##                                 IDFs  [ U ]                            , \
    ##                                 self . TreeBrushes [ CNT ]               )
    ##   self . addTopLevelItem      ( IT                                       )
    ##   ########################################################################
    ##   CNT  = int                  ( int ( CNT + 1 ) % MOD                    )
    ##########################################################################
    ## self   . RefreshToolTip       ( len ( UUIDs )                            )
    self   . setEnabled           ( True                                     )
    self   . emitNamesShow . emit (                                          )
    ##########################################################################
    return
  ############################################################################
  def loading                          ( self                              ) :
    ##########################################################################
    DB       = self . ConnectDB        (                                     )
    if                                 ( DB == None                        ) :
      self   . emitNamesShow . emit    (                                     )
      return
    ##########################################################################
    self     . Notify                  ( 3                                   )
    ##########################################################################
    FMT      = self . Translations     [ "UI::StartLoading"                  ]
    MSG      = FMT . format            ( self . windowTitle ( )              )
    self     . ShowStatus              ( MSG                                 )
    self     . OnBusy  . emit          (                                     )
    self     . setBustle               (                                     )
    ##########################################################################
    self     . ObtainsInformation      ( DB                                  )
    ##########################################################################
    ITEMs    = self . Translations     [ self . ClassTag ] [ "MeasureItems"  ]
    LISTs    =                         [                                     ]
    ##########################################################################
    self     . setVacancy              (                                     )
    self     . GoRelax . emit          (                                     )
    self     . ShowStatus              ( ""                                  )
    DB       . Close                   (                                     )
    ##########################################################################
    self     . emitAllNames . emit     ( LISTs                               )
    ##########################################################################
    return
  ############################################################################
  def StartupPeople ( self , uuid                                          ) :
    ##########################################################################
    self . PeopleUuid = uuid
    ##########################################################################
    self . startup  (                                                        )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( self . ClassTag , 3                              )
    ##########################################################################
    self . LoopRunning = False
    ##########################################################################
    return
  ############################################################################
  def CopyToClipboard        ( self                                        ) :
    ##########################################################################
    self . DoCopyToClipboard (                                               )
    ##########################################################################
    return
  ############################################################################
  def CommandParser ( self , language , message , timestamp                ) :
    ##########################################################################
    TRX = self . Translations
    ##########################################################################
    if ( self . WithinCommand ( language , "UI::SelectAll"    , message )  ) :
      return        { "Match" : True , "Message" : TRX [ "UI::SelectAll" ]   }
    ##########################################################################
    if ( self . WithinCommand ( language , "UI::SelectNone"   , message )  ) :
      return        { "Match" : True , "Message" : TRX [ "UI::SelectAll" ]   }
    ##########################################################################
    return          { "Match" : False                                        }
  ############################################################################
  def ColumnsMenu                    ( self , mm                           ) :
    return self . DefaultColumnsMenu (        mm , 1                         )
  ############################################################################
  def RunColumnsMenu               ( self , at                             ) :
    ##########################################################################
    if                             ( at >= 9001 ) and ( at <= 9004 )         :
      ########################################################################
      col  = at - 9000
      hid  = self . isColumnHidden ( col                                     )
      self . setColumnHidden       ( col , not hid                           )
      ########################################################################
      if                           ( ( at in [ 9002 , 9003 ] ) and ( hid ) ) :
        ######################################################################
        self . restart             (                                         )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def Menu                            ( self , pos                         ) :
    ##########################################################################
    if                                ( not self . isPrepared ( )          ) :
      return False
    ##########################################################################
    doMenu = self . isFunction        ( self . HavingMenu                    )
    if                                ( not doMenu                         ) :
      return False
    ##########################################################################
    self   . Notify                   ( 0                                    )
    ##########################################################################
    items , atItem , uuid = self . GetMenuDetails ( 0                        )
    ##########################################################################
    mm     = MenuManager              ( self                                 )
    ##########################################################################
    TRX    = self . Translations
    ##########################################################################
    mm     = self . AmountIndexMenu   ( mm , True                            )
    self   . AppendRefreshAction      ( mm , 1001                            )
    self   . AppendRenameAction       ( mm , 1002                            )
    mm     . addSeparator             (                                      )
    ##########################################################################
    self   . ColumnsMenu              ( mm                                   )
    self   . LocalityMenu             ( mm                                   )
    self   . DockingMenu              ( mm                                   )
    ##########################################################################
    self   . AtMenu = True
    ##########################################################################
    mm     . setFont                  ( self    . menuFont ( )               )
    aa     = mm . exec_               ( QCursor . pos      ( )               )
    at     = mm . at                  ( aa                                   )
    ##########################################################################
    self   . AtMenu = False
    ##########################################################################
    OKAY   = self . RunAmountIndexMenu ( at                                  )
    ##########################################################################
    if                                ( OKAY                               ) :
      ########################################################################
      self . restart                  (                                      )
      ########################################################################
      return True
    ##########################################################################
    if                                ( self . RunDocking   ( mm , aa )    ) :
      return True
    ##########################################################################
    if                                ( self . HandleLocalityMenu ( at )   ) :
      ########################################################################
      self . restart                  (                                      )
      ########################################################################
      return True
    ##########################################################################
    if                                ( self . RunColumnsMenu     ( at )   ) :
      return True
    ##########################################################################
    OKAY   = self . RunGroupsMenu     ( at , atItem                          )
    if                                ( OKAY                               ) :
      return True
    ##########################################################################
    if                                ( at == 1001                         ) :
      ########################################################################
      self . restart                  (                                      )
      ########################################################################
      return True
    ##########################################################################
    if                                ( at == 1002                         ) :
      self . RenameItem               (                                      )
      return True
    ##########################################################################
    return True
##############################################################################
