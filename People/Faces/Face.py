# -*- coding: utf-8 -*-
##############################################################################
## 人臉
##############################################################################
import os
import sys
import time
import datetime
import logging
import requests
import threading
import gettext
import binascii
import hashlib
import base64
import glob
import math
##############################################################################
from   io           import BytesIO
from   wand . image import Image
from   PIL          import Image as Pillow
##############################################################################
import cv2
import dlib
import skimage
import numpy                     as np
import mediapipe                 as mp
##############################################################################
FaceLandmarks468Meshes =                                                     [
  ## 臉輪廓
  [ 152 ,                                                                    \
    148 , 176 , 149 , 150 , 136 , 172 ,  58 , 132 ,  93 , 234 , 127 , 162 ,  \
     21 ,  54 ,                                                              \
    103 ,  67 , 109 ,  10 , 338 , 297 , 332 ,                                \
    284 , 251 , 389 , 356 , 454 , 323 , 361 , 288 , 397 , 365 , 379 , 378 ,  \
    400 , 377 ,                                                              \
    152                                                                 ] ,  \
  ## 臉框線
  [ 175 ,                                                                    \
    171 , 140 , 170 , 169 , 135 , 138 , 215 , 177 , 137 , 227 ,  34 , 139 ,  \
     71 ,  68 ,                                                              \
    104 ,  69 , 108 , 151 , 337 , 299 , 333 ,                                \
    298 , 301 , 368 , 264 , 447 , 366 , 401 , 435 , 367 , 364 , 394 , 395 ,  \
    369 , 396 ,                                                              \
    175                                                                 ] ,  \
  ## 額線群
  [ 103 , 104                                                           ] ,  \
  [  67 ,  69                                                           ] ,  \
  [ 109 , 108                                                           ] ,  \
  [  10 , 151                                                           ] ,  \
  [ 338 , 337                                                           ] ,  \
  [ 297 , 299                                                           ] ,  \
  [ 332 , 333                                                           ] ,  \
  ## 右臉頰線(鏡射在圖片左邊)
  [  49 , 102 , 129 , 203 , 206 , 216 ,                                      \
    207 , 187 , 123 , 116 , 143                                         ] ,  \
  [ 126 , 142 ,  36 , 205 , 187 , 192                                   ] ,  \
  [  47 , 100 , 101 ,  50 , 123                                         ] ,  \
  ## 右頰線群(鏡射在圖片左邊)
  [ 148 , 171                                                           ] ,  \
  [ 176 , 140                                                           ] ,  \
  [ 149 , 170                                                           ] ,  \
  [ 150 , 169                                                           ] ,  \
  [ 136 , 135 , 214                                                     ] ,  \
  [ 172 , 138 , 192                                                     ] ,  \
  [  58 , 215 , 213                                                     ] ,  \
  [ 132 , 177 , 147                                                     ] ,  \
  [  93 , 137 , 123                                                     ] ,  \
  [ 234 , 227 , 116                                                     ] ,  \
  [ 127 ,  34 , 143                                                     ] ,  \
  [ 162 , 139                                                           ] ,  \
  [  21 ,  71                                                           ] ,  \
  [  54 ,  68                                                           ] ,  \
  [ 210 , 214 , 192 , 213 , 147 , 123                                   ] ,  \
  ## 左臉頰線(鏡射在圖片左邊)
  [ 279 , 331 , 358 , 423 , 426 , 436 ,                                      \
    427 , 411 , 352 , 345 , 372                                         ] ,  \
  [ 355 , 371 , 266 , 425 , 411 , 416                                   ] ,  \
  [ 277 , 329 , 330 , 280 , 352                                         ] ,  \
  ## 左頰線群(鏡射在圖片右邊)
  [ 377 , 396                                                           ] ,  \
  [ 400 , 369                                                           ] ,  \
  [ 378 , 395                                                           ] ,  \
  [ 379 , 394                                                           ] ,  \
  [ 365 , 364 , 434                                                     ] ,  \
  [ 397 , 367 , 416                                                     ] ,  \
  [ 288 , 435 , 433                                                     ] ,  \
  [ 361 , 401 , 376                                                     ] ,  \
  [ 323 , 366 , 352                                                     ] ,  \
  [ 454 , 447 , 345                                                     ] ,  \
  [ 356 , 264 , 372                                                     ] ,  \
  [ 389 , 368                                                           ] ,  \
  [ 251 , 301                                                           ] ,  \
  [ 284 , 298                                                           ] ,  \
  [ 430 , 434 , 416 , 433 , 376 , 352                                   ] ,  \
  ## 下巴直線
  [ 152 , 175 , 199 , 200 ,  18  , 17                                   ] ,  \
  ## 外嘴唇
  [ 291 , 375 , 321 , 405 , 314 ,  17 ,  84 , 181 ,  91 , 146 ,              \
     61 , 185 ,  40 ,  39 ,  37 ,   0 , 267 , 269 , 270 , 409 ,              \
    291                                                                 ] ,  \
  ## 內嘴唇
  [ 308 , 324 , 318 , 402 , 317 ,  14 ,  87 , 178 ,  88 ,  95 ,              \
     78 , 191 ,  80 ,  81 ,  82 ,  13 , 312 , 311 , 310 , 415 ,              \
    308                                                                 ] ,  \
  ## 右唇線(鏡射在圖片左邊)
  [  78 ,  62 ,  76 ,  61                                               ] ,  \
  ## 左唇線(鏡射在圖片右邊)
  [ 308 , 292 , 306 , 291                                               ] ,  \
  ## 上唇線
  [ 191 , 183 , 184 , 185                                               ] ,  \
  [  80 ,  42 ,  74 ,  40                                               ] ,  \
  [  81 ,  41 ,  73 ,  39                                               ] ,  \
  [  82 ,  38 ,  72 ,  37                                               ] ,  \
  [  13 ,  12 ,  11 ,   0                                               ] ,  \
  [ 312 , 268 , 302 , 267                                               ] ,  \
  [ 311 , 271 , 303 , 269                                               ] ,  \
  [ 310 , 272 , 304 , 270                                               ] ,  \
  [ 415 , 407 , 408 , 409                                               ] ,  \
  ## 上唇橫線
  [  62 , 183 ,  42 ,  41 ,  38 ,  12 , 268 , 271 , 272 , 407 , 292     ] ,  \
  [  76 , 184 ,  74 ,  73 ,  72 ,  11 , 302 , 303 , 304 , 408 , 306     ] ,  \
  ## 下唇線
  [  95 ,  96 ,  77 , 146                                               ] ,  \
  [  88 ,  89 ,  90 ,  91                                               ] ,  \
  [ 178 , 179 , 180 , 181                                               ] ,  \
  [  87 ,  86 ,  85 ,  84                                               ] ,  \
  [  14 ,  15 ,  16 ,  17                                               ] ,  \
  [ 317 , 316 , 315 , 314                                               ] ,  \
  [ 402 , 403 , 404 , 405                                               ] ,  \
  [ 318 , 319 , 320 , 321                                               ] ,  \
  [ 324 , 325 , 307 , 375                                               ] ,  \
  ## 下唇橫線
  [  62 ,  96 ,  89 , 179 ,  86 ,  15 , 316 , 403 , 319 , 325 , 292     ] ,  \
  [  76 ,  77 ,  90 , 180 ,  85 ,  16 , 315 , 404 , 320 , 307 , 306     ] ,  \
  ## 右眼(鏡射在圖片左邊)
  [ 133 , 155 , 154 , 153 , 145 , 144 , 163 ,   7 ,                          \
     33 , 246 , 161 , 160 , 159 , 158 , 157 , 173 ,                          \
    133                                                                 ] ,  \
  ## 右眼框(鏡射在圖片左邊)
  [ 243 , 112 ,  26 ,  22 ,  23 ,  24 , 110 ,  25 ,                          \
    130 , 247 ,  30 ,  29 ,  27 ,  28 ,  56 , 190 ,                          \
    243                                                                 ] ,  \
  ## 右眼窩(鏡射在圖片左邊)
  [ 244 , 233 , 232 , 231 , 230 , 229 , 228 ,  31 ,                          \
    226 , 113 , 225 , 224 , 223 , 222 , 221 , 189 ,                          \
    244                                                                 ] ,  \
  ## 右眼底線(鏡射在圖片左邊)
  [ 193 , 245 , 128 , 121 , 120 , 119 , 118 , 117 , 111 ,  35           ] ,  \
  ## 左眼(鏡射在圖片右邊)
  [ 362 , 382 , 381 , 380 , 374 , 373 , 390 , 249 ,                          \
    263 , 466 , 388 , 387 , 386 , 385 , 384 , 398 ,                          \
    362                                                                 ] ,  \
  ## 左眼框(鏡射在圖片右邊)
  [ 463 , 341 , 256 , 252 , 253 , 254 , 339 , 255 ,                          \
    359 , 467 , 260 , 259 , 257 , 258 , 286 , 414 ,                          \
    463                                                                 ] ,  \
  ## 左眼窩(鏡射在圖片右邊)
  [ 464 , 453 , 452 , 451 , 450 , 449 , 448 , 261 ,                          \
    446 , 342 , 445 , 444 , 443 , 442 , 441 , 413 ,                          \
    464                                                                 ] ,  \
  ## 左眼底線(鏡射在圖片右邊)
  [ 417 , 465 , 357 , 350 , 349 , 348 , 347 , 346 , 340 , 265           ] ,  \
  ## 右眉線(鏡射在圖片左邊)
  [   9 , 107 ,  66 , 105 ,  63 ,  70 , 156 , 143                       ] ,  \
  [   8 ,  55 ,  65 ,  52 ,  53 ,  46 , 124 ,  35                       ] ,  \
  [ 107 , 108                                                           ] ,  \
  [  66 ,  69                                                           ] ,  \
  [ 105 , 104                                                           ] ,  \
  [  63 ,  68                                                           ] ,  \
  [  70 ,  71                                                           ] ,  \
  [ 156 , 139                                                           ] ,  \
  [ 143 ,  34                                                           ] ,  \
  ## 左眉線(鏡射在圖片右邊)
  [   9 , 336 , 296 , 334 , 293 , 300 , 383 , 372                       ] ,  \
  [   8 , 285 , 295 , 282 , 283 , 276 , 353 , 265                       ] ,  \
  [ 336 , 337                                                           ] ,  \
  [ 296 , 299                                                           ] ,  \
  [ 334 , 333                                                           ] ,  \
  [ 293 , 298                                                           ] ,  \
  [ 300 , 301                                                           ] ,  \
  [ 383 , 368                                                           ] ,  \
  [ 372 , 264                                                           ] ,  \
  ## 鼻樑線
  [  10 , 151 ,   9 ,   8 , 168                                           ,  \
      6 , 197 , 195 ,   5 ,   4 ,   1 ,  19 ,  94                       ] ,  \
  ## 鼻底線
  [ 438 , 309 , 250 , 462 , 370 ,  94 , 141 , 242 ,  20 ,  79 , 218     ] ,  \
  ## 鼻尖線
  [ 457 , 459 , 458 , 461 , 354 ,  19 , 125 , 241 , 238 , 239 , 237     ] ,  \
  ## 右中鼻線(鏡射在圖片左邊)
  [ 141 , 125 ,                                                              \
     44 ,  45 ,  51 ,   3 , 196 , 122 , 193 ,  55 , 107 , 108           ] ,  \
  ## 右鼻線(鏡射在圖片左邊)
  [ 237 , 220 , 134 , 236 , 174 , 188 , 245                             ] ,  \
  ## 右底鼻線(鏡射在圖片左邊)
  [ 218 , 115 , 131 , 198 , 217 , 114 , 128                             ] ,  \
  ## 右鼻溝線(鏡射在圖片左邊)
  [   2 ,  97 ,  99 ,  75 ,  59 ,                                            \
    219 ,  48 ,  49 , 209 , 126 ,  47 , 121                             ] ,  \
  [  99 ,  60 , 166 , 219                                               ] ,  \
  [ 240 , 235 ,  64 , 102                                               ] ,  \
  ## 左中鼻線(鏡射在圖片右邊)
  [ 370 , 354 ,                                                              \
    274 , 275 , 281 , 248 , 419 , 351 , 417 , 285 , 336 , 337           ] ,  \
  ## 左鼻線(鏡射在圖片右邊)
  [ 457 , 440 , 363 , 456 , 399 , 412 , 465                             ] , \
  ## 左底鼻線(鏡射在圖片右邊)
  [ 438 , 344 , 360 , 420 , 437 , 343 , 357                             ] , \
  ## 左鼻溝線(鏡射在圖片右邊)
  [   2 , 326 , 328 , 305 , 289 ,                                            \
    439 , 278 , 279 , 429 , 355 , 277 , 350                             ] ,  \
  [ 328 , 290 , 392 , 439                                               ] ,  \
  [ 460 , 455 , 294 , 331                                               ] ,  \
  ## 人中線
  [ 287 , 410 , 322 , 391 , 393 , 164 , 167 , 165 ,  92 , 186 ,  57     ] ,  \
  [ 409 , 410 , 436                                                     ] ,  \
  [ 270 , 322 , 426                                                     ] ,  \
  [ 269 , 391 , 327                                                     ] ,  \
  [ 267 , 393 , 326                                                     ] ,  \
  [   0 , 164 ,   2                                                     ] ,  \
  [  37 , 167 ,  97                                                     ] ,  \
  [  39 , 165 ,  98                                                     ] ,  \
  [  40 ,  92 , 206                                                     ] ,  \
  [ 185 , 186 , 216                                                     ] ,  \
  [  98 , 240 ,  75                                                     ] ,  \
  [ 327 , 460 , 305                                                     ] ,  \
  ## 下唇線
  [ 287 , 273 , 335 , 406 , 313 ,  18 ,  83 , 182 , 106 ,  43 ,  57     ] ,  \
  ## 承漿穴線
  [ 432 , 422 , 424 , 418 , 421 , 200 , 201 , 194 , 204 , 202 , 212     ] ,  \
  ## 下巴線
  [ 434 , 430 , 431 , 262 , 428 , 199 , 208 ,  32 , 211 , 210 , 214     ] ,  \
  ## 下頜線群
  [ 364 , 434 , 432 , 287 , 291                                         ] ,  \
  [ 394 , 430 , 422 , 273 , 375                                         ] ,  \
  [ 395 , 431 , 424 , 335 , 321                                         ] ,  \
  [ 369 , 262 , 418 , 406 , 405                                         ] ,  \
  [ 396 , 428 , 421 , 313 , 314                                         ] ,  \
  [ 175 , 199 , 200 ,  18 ,  17                                         ] ,  \
  [ 171 , 208 , 201 ,  83 ,  84                                         ] ,  \
  [ 140 ,  32 , 194 , 182 , 181                                         ] ,  \
  [ 170 , 211 , 204 , 106 ,  91                                         ] ,  \
  [ 169 , 210 , 202 ,  43 , 146                                         ] ,  \
  [ 135 , 214 , 212 ,  57 ,  61                                         ] ,  \
  ## 右瞳(鏡射在圖片左邊)
  [ 469 , 470 , 471 , 472 , 469                                         ] ,  \
  ## 左瞳(鏡射在圖片右邊)
  [ 474 , 475 , 476 , 477 , 474                                              ]
]
##############################################################################
FaceLandmarks468Polygons =                                                   [
  ############################################################################
  ## 額頭多邊形
  ############################################################################
  [  54 , 103 , 104 ,  68                                               ] ,  \
  [  68 , 104 , 105 ,  63                                               ] ,  \
  ############################################################################
  [ 103 ,  67 ,  69 , 104                                               ] ,  \
  [ 104 ,  69 ,  66 , 105                                               ] ,  \
  ############################################################################
  [  67 , 109 , 108 ,  69                                               ] ,  \
  [  69 , 108 , 107 ,  66                                               ] ,  \
  ############################################################################
  [ 109 ,  10 , 151 , 108                                               ] ,  \
  [ 108 , 151 ,   9 , 107                                               ] ,  \
  ############################################################################
  [  10 , 338 , 337 , 151                                               ] ,  \
  [ 151 , 337 , 336 ,   9                                               ] ,  \
  ############################################################################
  [ 338 , 297 , 299 , 337                                               ] ,  \
  [ 337 , 299 , 296 , 336                                               ] ,  \
  ############################################################################
  [ 297 , 332 , 333 , 299                                               ] ,  \
  [ 299 , 333 , 334 , 296                                               ] ,  \
  ############################################################################
  [ 332 , 284 , 298 , 333                                               ] ,  \
  [ 333 , 298 , 293 , 334                                               ] ,  \
  ############################################################################
  ## 右眉上額部(鏡射在圖片左邊,由右至左)
  ############################################################################
  [ 143 , 156 , 124 ,  35                                               ] ,  \
  [ 156 ,  70 ,  46 , 124                                               ] ,  \
  [  70 ,  63 ,  53 ,  46                                               ] ,  \
  [  63 , 105 ,  52 ,  53                                               ] ,  \
  [ 105 ,  66 ,  65 ,  52                                               ] ,  \
  [  66 , 107 ,  55 ,  65                                               ] ,  \
  [ 107 ,   9 ,   8 ,  55                                               ] ,  \
  ############################################################################
  ## 左眉上額部(鏡射在圖片右邊,由右至左)
  ############################################################################
  [   9 , 336 , 285 ,   8                                               ] ,  \
  [ 336 , 296 , 295 , 285                                               ] ,  \
  [ 296 , 334 , 282 , 295                                               ] ,  \
  [ 334 , 293 , 283 , 282                                               ] ,  \
  [ 293 , 300 , 276 , 283                                               ] ,  \
  [ 300 , 383 , 353 , 276                                               ] ,  \
  [ 383 , 372 , 265 , 353                                               ] ,  \
  ############################################################################
  ## 右眼窩(鏡射在圖片左邊,順時鐘)
  ############################################################################
  [ 133 , 243 , 112 , 155                                               ] ,  \
  [ 243 , 244 , 233 , 112                                               ] ,  \
  [ 244 , 245 , 128 , 233                                               ] ,  \
  ############################################################################
  [ 155 , 112 ,  26 , 154                                               ] ,  \
  [ 112 , 233 , 232 ,  26                                               ] ,  \
  [ 233 , 128 , 121 , 232                                               ] ,  \
  ############################################################################
  [ 154 ,  26 ,  22 , 153                                               ] ,  \
  [  26 , 232 , 231 ,  22                                               ] ,  \
  [ 232 , 121 , 120 , 231                                               ] ,  \
  ############################################################################
  [ 153 ,  22 ,  23 , 145                                               ] ,  \
  [  22 , 231 , 230 ,  23                                               ] ,  \
  [ 231 , 120 , 119 , 230                                               ] ,  \
  ############################################################################
  [ 145 ,  23 ,  24 , 144                                               ] ,  \
  [  23 , 230 , 229 ,  24                                               ] ,  \
  [ 230 , 119 , 118 , 229                                               ] ,  \
  ############################################################################
  [ 144 ,  24 , 110 , 163                                               ] ,  \
  [  24 , 229 , 228 , 110                                               ] ,  \
  [ 229 , 118 , 117 , 228                                               ] ,  \
  ############################################################################
  [ 163 , 110 ,  25 ,   7                                               ] ,  \
  [ 110 , 228 ,  31 ,  25                                               ] ,  \
  [ 228 , 117 , 111 ,  31                                               ] ,  \
  ############################################################################
  [   7 ,  25 , 130 ,  33                                               ] ,  \
  [  25 ,  31 , 226 , 130                                               ] ,  \
  [  31 , 111 ,  35 , 226                                               ] ,  \
  ############################################################################
  [  33 , 130 , 247 , 246                                               ] ,  \
  [ 130 , 226 , 113 , 247                                               ] ,  \
  [ 226 ,  35 , 124 , 113                                               ] ,  \
  ############################################################################
  [ 246 , 247 ,  30 , 161                                               ] ,  \
  [ 247 , 113 , 225 ,  30                                               ] ,  \
  [ 113 , 124 ,  46 , 225                                               ] ,  \
  ############################################################################
  [ 161 ,  30 ,  29 , 160                                               ] ,  \
  [  30 , 225 , 224 ,  29                                               ] ,  \
  [ 225 ,  46 ,  53 , 224                                               ] ,  \
  ############################################################################
  [ 160 ,  29 ,  27 , 159                                               ] ,  \
  [  29 , 224 , 223 ,  27                                               ] ,  \
  [ 224 ,  53 ,  52 , 223                                               ] ,  \
  ############################################################################
  [ 159 ,  27 ,  28 , 158                                               ] ,  \
  [  27 , 223 , 222 ,  28                                               ] ,  \
  [ 223 ,  52 ,  65 , 222                                               ] ,  \
  ############################################################################
  [ 158 ,  28 ,  56 , 157                                               ] ,  \
  [  28 , 222 , 221 ,  56                                               ] ,  \
  [ 222 ,  65 ,  55 , 221                                               ] ,  \
  ############################################################################
  [ 157 ,  56 , 190 , 173                                               ] ,  \
  [  56 , 221 , 189 , 190                                               ] ,  \
  [ 221 ,  55 , 193 , 189                                               ] ,  \
  ############################################################################
  [ 173 , 190 , 243 , 133                                               ] ,  \
  [ 190 , 189 , 244 , 243                                               ] ,  \
  [ 189 , 193 , 245 , 244                                               ] ,  \
  ############################################################################
  ## 右眼窩下部(鏡射在圖片左邊,由左至右)
  ############################################################################
  [ 121 ,  47 , 100 , 120                                               ] ,  \
  [ 120 , 100 , 101 , 119                                               ] ,  \
  [ 119 , 101 ,  50 , 118                                               ] ,  \
  [ 118 ,  50 , 123 , 117                                               ] ,  \
  [ 117 , 123 , 116 , 111                                               ] ,  \
  [ 111 , 116 , 143 ,  35                                               ] ,  \
  ############################################################################
  ## 左眼窩(鏡射在圖片右邊,逆時鐘)
  ############################################################################
  [ 362 , 382 , 341 , 463                                               ] ,  \
  [ 463 , 341 , 453 , 464                                               ] ,  \
  [ 464 , 453 , 357 , 465                                               ] ,  \
  ############################################################################
  [ 382 , 381 , 256 , 341                                               ] ,  \
  [ 341 , 256 , 452 , 453                                               ] ,  \
  [ 453 , 452 , 350 , 357                                               ] ,  \
  ############################################################################
  [ 381 , 380 , 252 , 256                                               ] ,  \
  [ 256 , 252 , 451 , 452                                               ] ,  \
  [ 452 , 451 , 349 , 350                                               ] ,  \
  ############################################################################
  [ 380 , 374 , 253 , 252                                               ] ,  \
  [ 252 , 253 , 450 , 451                                               ] ,  \
  [ 451 , 450 , 348 , 349                                               ] ,  \
  ############################################################################
  [ 374 , 373 , 254 , 253                                               ] ,  \
  [ 253 , 254 , 449 , 450                                               ] ,  \
  [ 450 , 449 , 347 , 348                                               ] ,  \
  ############################################################################
  [ 373 , 390 , 339 , 254                                               ] ,  \
  [ 254 , 339 , 448 , 449                                               ] ,  \
  [ 449 , 448 , 346 , 347                                               ] ,  \
  ############################################################################
  [ 390 , 249 , 255 , 339                                               ] ,  \
  [ 339 , 255 , 261 , 448                                               ] ,  \
  [ 448 , 261 , 340 , 346                                               ] ,  \
  ############################################################################
  [ 249 , 263 , 359 , 255                                               ] ,  \
  [ 255 , 359 , 446 , 261                                               ] ,  \
  [ 261 , 446 , 265 , 340                                               ] ,  \
  ############################################################################
  [ 263 , 466 , 467 , 359                                               ] ,  \
  [ 359 , 467 , 342 , 446                                               ] ,  \
  [ 446 , 342 , 353 , 265                                               ] ,  \
  ############################################################################
  [ 466 , 388 , 260 , 467                                               ] ,  \
  [ 467 , 260 , 445 , 342                                               ] ,  \
  [ 342 , 445 , 276 , 353                                               ] ,  \
  ############################################################################
  [ 388 , 387 , 259 , 260                                               ] ,  \
  [ 260 , 259 , 444 , 445                                               ] ,  \
  [ 445 , 444 , 283 , 276                                               ] ,  \
  ############################################################################
  [ 387 , 386 , 257 , 259                                               ] ,  \
  [ 259 , 257 , 443 , 444                                               ] ,  \
  [ 444 , 443 , 282 , 283                                               ] ,  \
  ############################################################################
  [ 386 , 385 , 258 , 257                                               ] ,  \
  [ 257 , 258 , 442 , 443                                               ] ,  \
  [ 443 , 442 , 295 , 282                                               ] ,  \
  ############################################################################
  [ 385 , 384 , 286 , 258                                               ] ,  \
  [ 258 , 286 , 441 , 442                                               ] ,  \
  [ 442 , 441 , 285 , 295                                               ] ,  \
  ############################################################################
  [ 384 , 398 , 414 , 286                                               ] ,  \
  [ 286 , 414 , 413 , 441                                               ] ,  \
  [ 441 , 413 , 417 , 285                                               ] ,  \
  ############################################################################
  [ 398 , 362 , 463 , 414                                               ] ,  \
  [ 414 , 463 , 464 , 413                                               ] ,  \
  [ 413 , 464 , 465 , 417                                               ] ,  \
  ############################################################################
  ## 左眼窩下部(鏡射在圖片左邊,由右至左)
  ############################################################################
  [ 350 , 349 , 329 , 277                                               ] ,  \
  [ 349 , 348 , 330 , 329                                               ] ,  \
  [ 348 , 347 , 280 , 330                                               ] ,  \
  [ 347 , 346 , 352 , 280                                               ] ,  \
  [ 346 , 340 , 345 , 352                                               ] ,  \
  [ 340 , 265 , 372 , 345                                               ] ,  \
  ############################################################################
  ## 右側臉頰多邊形(鏡射在圖片左邊)
  ############################################################################
  [  21 ,  54 ,  68 ,  71                                               ] ,  \
  [  71 ,  68 ,  63 ,  70                                               ] ,  \
  ############################################################################
  [ 162 ,  21 ,  71 , 139                                               ] ,  \
  [ 139 ,  71 ,  70 , 156                                               ] ,  \
  ############################################################################
  [ 127 , 162 , 139 ,  34                                               ] ,  \
  [  34 , 139 , 156 , 143                                               ] ,  \
  ############################################################################
  [ 234 , 127 ,  34 , 227                                               ] ,  \
  [ 227 ,  34 , 143 , 116                                               ] ,  \
  ############################################################################
  [  93 , 234 , 227 , 137                                               ] ,  \
  [ 137 , 227 , 116 , 123                                               ] ,  \
  ############################################################################
  [ 132 ,  93 , 137 , 177                                               ] ,  \
  [ 177 , 137 , 123 , 147                                               ] ,  \
  ############################################################################
  [  58 , 132 , 177 , 215                                               ] ,  \
  [ 215 , 177 , 147 , 213                                               ] ,  \
  ############################################################################
  ## 右側臉肉多邊形(鏡射在圖片左邊,由左至右)
  ############################################################################
  [  47 , 126 , 142 , 100                                               ] ,  \
  [ 100 , 142 ,  36 , 101                                               ] ,  \
  [ 101 ,  36 , 205 ,  50                                               ] ,  \
  [  50 , 205 , 187 , 123                                               ] ,  \
  ############################################################################
  [ 126 , 209 , 142                                                     ] ,  \
  [ 142 , 209 , 129                                                     ] ,  \
  [ 129 , 209 ,  49                                                     ] ,  \
  ############################################################################
  [ 142 , 129 , 203 ,  36                                               ] ,  \
  [  36 , 203 , 206 , 205                                               ] ,  \
  [ 205 , 206 , 207 , 187                                               ] ,  \
  ############################################################################
  [ 206 , 216 , 207                                                     ] ,  \
  ############################################################################
  [  57 , 212 , 216 , 186                                               ] ,  \
  [ 212 , 214 , 207 , 216                                               ] ,  \
  [ 214 , 192 , 187 , 207                                               ] ,  \
  [ 192 , 213 , 147 , 187                                               ] ,  \
  [ 147 , 123 , 187                                                     ] ,  \
  ############################################################################
  ## 左側臉頰多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 284 , 251 , 301 , 298                                               ] ,  \
  [ 298 , 301 , 300 , 293                                               ] ,  \
  ############################################################################
  [ 251 , 389 , 368 , 301                                               ] ,  \
  [ 301 , 368 , 383 , 300                                               ] ,  \
  ############################################################################
  [ 389 , 356 , 264 , 368                                               ] ,  \
  [ 368 , 264 , 372 , 383                                               ] ,  \
  ############################################################################
  [ 356 , 454 , 447 , 264                                               ] ,  \
  [ 264 , 447 , 345 , 372                                               ] ,  \
  ############################################################################
  [ 454 , 323 , 366 , 447                                               ] ,  \
  [ 447 , 366 , 352 , 345                                               ] ,  \
  ############################################################################
  [ 323 , 361 , 401 , 366                                               ] ,  \
  [ 366 , 401 , 376 , 352                                               ] ,  \
  ############################################################################
  [ 361 , 288 , 435 , 401                                               ] ,  \
  [ 401 , 435 , 433 , 376                                               ] ,  \
  ############################################################################
  ## 左側臉肉多邊形(鏡射在圖片右邊,由右至左)
  ############################################################################
  [ 277 , 329 , 371 , 355                                               ] ,  \
  [ 329 , 330 , 266 , 371                                               ] ,  \
  [ 330 , 280 , 425 , 266                                               ] ,  \
  [ 280 , 352 , 411 , 425                                               ] ,  \
  ############################################################################
  [ 355 , 371 , 429                                                     ] ,  \
  [ 429 , 371 , 358                                                     ] ,  \
  [ 358 , 279 , 429                                                     ] ,  \
  ############################################################################
  [ 371 , 266 , 423 , 358                                               ] ,  \
  [ 266 , 425 , 426 , 423                                               ] ,  \
  [ 425 , 411 , 427 , 426                                               ] ,  \
  ############################################################################
  [ 426 , 427 , 436                                                     ] ,  \
  ############################################################################
  [ 410 , 436 , 432 , 287                                               ] ,  \
  [ 436 , 427 , 434 , 432                                               ] ,  \
  [ 427 , 411 , 416 , 434                                               ] ,  \
  [ 411 , 376 , 433 , 416                                               ] ,  \
  [ 411 , 352 , 376                                                     ] ,  \
  ############################################################################
  ## 右鼻樑部多邊形(鏡射在圖片左邊)
  ############################################################################
  [  55 ,   8 , 168 , 193                                               ] ,  \
  [ 193 , 168 ,   6 , 122                                               ] ,  \
  [ 122 ,   6 , 197 , 196                                               ] ,  \
  [ 196 , 197 , 195 ,   3                                               ] ,  \
  [   3 , 195 ,   5 ,  51                                               ] ,  \
  [  51 ,   5 ,   4 ,  45                                               ] ,  \
  [  45 ,   4 ,   1 ,  44                                               ] ,  \
  [  44 ,   1 ,  19 , 125                                               ] ,  \
  [ 125 ,  19 ,  94 , 141                                               ] ,  \
  ############################################################################
  ## 右鼻側部多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 193 , 122 , 188 , 245                                               ] ,  \
  [ 122 , 196 , 174 , 188                                               ] ,  \
  [ 196 ,   3 , 236 , 174                                               ] ,  \
  [   3 ,  51 , 134 , 236                                               ] ,  \
  [  51 ,  45 , 220 , 134                                               ] ,  \
  [  45 ,  44 , 237 , 220                                               ] ,  \
  [  44 , 125 , 241 , 237                                               ] ,  \
  [ 125 , 141 , 242 , 241                                               ] ,  \
  ############################################################################
  [ 245 , 188 , 114 , 128                                               ] ,  \
  [ 188 , 174 , 217 , 114                                               ] ,  \
  [ 174 , 236 , 198 , 217                                               ] ,  \
  [ 236 , 134 , 131 , 198                                               ] ,  \
  [ 134 , 220 , 115 , 131                                               ] ,  \
  [ 220 , 237 , 218 , 115                                               ] ,  \
  ############################################################################
  [ 237 , 239 ,  79 , 218                                               ] ,  \
  [ 237 , 241 , 238 , 239                                               ] ,  \
  [ 239 , 238 ,  20 ,  79                                               ] ,  \
  [ 241 , 242 ,  20 , 238                                               ] ,  \
  ############################################################################
  [ 121 , 128 , 114 ,  47                                               ] ,  \
  [  47 , 114 , 217 , 126                                               ] ,  \
  [ 126 , 217 , 198 , 209                                               ] ,  \
  [ 209 , 198 , 131 ,  49                                               ] ,  \
  [  49 , 131 , 115 ,  48                                               ] ,  \
  [  48 , 115 , 218 , 219                                               ] ,  \
  [ 219 , 218 ,  79 , 166                                               ] ,  \
  [ 166 ,  79 ,  20 ,  60                                               ] ,  \
  [  60 ,  20 , 242 ,  99                                               ] ,  \
  [  99 , 242 , 141 ,  97                                               ] ,  \
  [  97 , 141 ,  94 ,   2                                               ] ,  \
  ############################################################################
  ## 左鼻樑部多邊形(鏡射在圖片右邊) 
  ############################################################################
  [   8 , 285 , 417 , 168                                               ] ,  \
  [ 168 , 417 , 351 ,   6                                               ] ,  \
  [   6 , 351 , 419 , 197                                               ] ,  \
  [ 197 , 419 , 248 , 195                                               ] ,  \
  [ 195 , 248 , 281 ,   5                                               ] ,  \
  [   5 , 281 , 275 ,   4                                               ] ,  \
  [   4 , 275 , 274 ,   1                                               ] ,  \
  [   1 , 274 , 354 ,  19                                               ] ,  \
  [  19 , 354 , 370 ,  94                                               ] ,  \
  ############################################################################
  ## 左鼻側部多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 417 , 465 , 412 , 351                                               ] ,  \
  [ 351 , 412 , 399 , 419                                               ] ,  \
  [ 419 , 399 , 456 , 248                                               ] ,  \
  [ 248 , 456 , 363 , 281                                               ] ,  \
  [ 281 , 363 , 440 , 275                                               ] ,  \
  [ 275 , 440 , 457 , 274                                               ] ,  \
  [ 274 , 457 , 461 , 354                                               ] ,  \
  [ 354 , 461 , 462 , 370                                               ] ,  \
  ############################################################################
  [ 465 , 357 , 343 , 412                                               ] ,  \
  [ 412 , 343 , 437 , 399                                               ] ,  \
  [ 399 , 437 , 420 , 456                                               ] ,  \
  [ 456 , 420 , 360 , 363                                               ] ,  \
  [ 363 , 360 , 344 , 440                                               ] ,  \
  [ 440 , 344 , 438 , 457                                               ] ,  \
  ############################################################################
  [ 457 , 438 , 309 , 459                                               ] ,  \
  [ 457 , 459 , 458 , 461                                               ] ,  \
  [ 459 , 309 , 250 , 458                                               ] ,  \
  [ 461 , 458 , 250 , 462                                               ] ,  \
  ############################################################################
  [ 357 , 350 , 277 , 343                                               ] ,  \
  [ 343 , 277 , 355 , 437                                               ] ,  \
  [ 437 , 355 , 429 , 420                                               ] ,  \
  [ 420 , 429 , 279 , 360                                               ] ,  \
  [ 360 , 279 , 278 , 344                                               ] ,  \
  [ 344 , 278 , 439 , 438                                               ] ,  \
  [ 438 , 439 , 392 , 309                                               ] ,  \
  [ 309 , 392 , 290 , 250                                               ] ,  \
  [ 250 , 290 , 328 , 462                                               ] ,  \
  [ 462 , 328 , 326 , 370                                               ] ,  \
  [ 370 , 326 ,   2 ,  94                                               ] ,  \
  ############################################################################
  ## 右上人中多邊形(鏡射在圖片左邊,由左至右)
  ############################################################################
  [ 164 , 167 ,  97 ,   2                                               ] ,  \
  [ 167 , 165 ,  98 ,  97                                               ] ,  \
  [ 165 , 206 , 203 ,  98                                               ] ,  \
  [ 165 ,  92 , 216 , 206                                               ] ,  \
  [  98 , 203 , 129 ,  64                                               ] ,  \
  [  97 ,  98 , 240 ,  99                                               ] ,  \
  [  99 , 240 ,  75 ,  60                                               ] ,  \
  [  98 ,  64 , 235 , 240                                               ] ,  \
  [ 240 , 235 ,  59 ,  75                                               ] ,  \
  [  60 ,  75 ,  59 , 166                                               ] ,  \
  [  59 , 235 , 219 , 166                                               ] ,  \
  [ 235 ,  64 ,  48 , 219                                               ] ,  \
  [  64 , 102 ,  49 ,  48                                               ] ,  \
  ############################################################################
  [  92 , 186 , 216                                                     ] ,  \
  [  64 , 129 , 102                                                     ] ,  \
  [ 102 , 129 ,  49                                                     ] ,  \
  ############################################################################
  ## 左上人中多邊形(鏡射在圖片右邊,由右至左)
  ############################################################################
  [ 164 ,   2 , 326 , 393                                               ] ,  \
  [ 393 , 326 , 327 , 391                                               ] ,  \
  [ 391 , 327 , 423 , 426                                               ] ,  \
  [ 391 , 426 , 436 , 322                                               ] ,  \
  [ 327 , 294 , 358 , 423                                               ] ,  \
  [ 326 , 328 , 460 , 327                                               ] ,  \
  [ 328 , 290 , 305 , 460                                               ] ,  \
  [ 327 , 460 , 455 , 294                                               ] ,  \
  [ 460 , 305 , 289 , 455                                               ] ,  \
  [ 290 , 392 , 289 , 305                                               ] ,  \
  [ 289 , 392 , 439 , 455                                               ] ,  \
  [ 455 , 439 , 278 , 294                                               ] ,  \
  [ 294 , 278 , 279 , 331                                               ] ,  \
  ############################################################################
  [ 322 , 436 , 410                                                     ] ,  \
  [ 294 , 331 , 358                                                     ] ,  \
  [ 331 , 279 , 358                                                     ] ,  \
  ############################################################################
  ## 右下人中多邊形(鏡射在圖片左邊,由左至右)
  ############################################################################
  [   0 ,  37 , 167 , 164                                               ] ,  \
  [  37 ,  39 , 165 , 167                                               ] ,  \
  [  39 ,  40 ,  92 , 165                                               ] ,  \
  [  40 , 185 , 186 ,  92                                               ] ,  \
  ############################################################################
  [ 185 ,  61 ,  57 , 186                                               ] ,  \
  ############################################################################
  ## 左下人中多邊形(鏡射在圖片右邊,由右至左)
  ############################################################################
  [   0 , 164 , 393 , 267                                               ] ,  \
  [ 267 , 393 , 391 , 269                                               ] ,  \
  [ 269 , 391 , 322 , 270                                               ] ,  \
  [ 270 , 322 , 410 , 409                                               ] ,  \
  ############################################################################
  [ 409 , 410 , 287 , 291                                               ] ,  \
  ############################################################################
  ## 右上嘴角多邊形(鏡射在圖片左邊)
  ############################################################################
  [  61 , 185 , 184 ,  76                                               ] ,  \
  [  76 , 184 , 183 ,  62                                               ] ,  \
  [  62 , 183 , 191 ,  78                                               ] ,  \
  ############################################################################
  ## 右上嘴唇多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 185 ,  40 ,  74 , 184                                               ] ,  \
  [ 184 ,  74 ,  42 , 183                                               ] ,  \
  [ 183 ,  42 ,  80 , 191                                               ] ,  \
  ############################################################################
  [  40 ,  39 ,  73 ,  74                                               ] ,  \
  [  74 ,  73 ,  41 ,  42                                               ] ,  \
  [  42 ,  41 ,  81 ,  80                                               ] ,  \
  ############################################################################
  [  39 ,  37 ,  72 ,  73                                               ] ,  \
  [  73 ,  72 ,  38 ,  41                                               ] ,  \
  [  41 ,  38 ,  82 ,  81                                               ] ,  \
  ############################################################################
  [  37 ,   0 ,  11 ,  72                                               ] ,  \
  [  72 ,  11 ,  12 ,  38                                               ] ,  \
  [  38 ,  12 ,  13 ,  82                                               ] ,  \
  ############################################################################
  ## 左上嘴唇多邊形(鏡射在圖片右邊)
  ############################################################################
  [   0 , 267 , 302 ,  11                                               ] ,  \
  [  11 , 302 , 268 ,  12                                               ] ,  \
  [  12 , 268 , 312 ,  13                                               ] ,  \
  ############################################################################
  [ 267 , 269 , 303 , 302                                               ] ,  \
  [ 302 , 303 , 271 , 268                                               ] ,  \
  [ 268 , 271 , 311 , 312                                               ] ,  \
  ############################################################################
  [ 269 , 270 , 304 , 303                                               ] ,  \
  [ 303 , 304 , 272 , 271                                               ] ,  \
  [ 271 , 272 , 310 , 311                                               ] ,  \
  ############################################################################
  [ 270 , 409 , 408 , 304                                               ] ,  \
  [ 304 , 408 , 407 , 272                                               ] ,  \
  [ 272 , 407 , 415 , 310                                               ] ,  \
  ############################################################################
  ## 左上嘴角多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 291 , 306 , 408 , 409                                               ] ,  \
  [ 306 , 292 , 407 , 408                                               ] ,  \
  [ 292 , 308 , 415 , 407                                               ] ,  \
  ############################################################################
  ## 右下嘴角多邊形(鏡射在圖片左邊)
  ############################################################################
  [  61 ,  76 ,  77 , 146                                               ] ,  \
  [  76 ,  62 ,  96 ,  77                                               ] ,  \
  [  62 ,  78 ,  95 ,  96                                               ] ,  \
  ############################################################################
  ## 右下嘴唇多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 146 ,  77 ,  90 ,  91                                               ] ,  \
  [  77 ,  96 ,  89 ,  90                                               ] ,  \
  [  96 ,  95 ,  88 ,  89                                               ] ,  \
  ############################################################################
  [  91 ,  90 , 180 , 181                                               ] ,  \
  [  90 ,  89 , 179 , 180                                               ] ,  \
  [  89 ,  88 , 178 , 179                                               ] ,  \
  ############################################################################
  [ 181 , 180 ,  85 ,  84                                               ] ,  \
  [ 180 , 179 ,  86 ,  85                                               ] ,  \
  [ 179 , 178 ,  87 ,  86                                               ] ,  \
  ############################################################################
  [  84 ,  85 ,  16 ,  17                                               ] ,  \
  [  85 ,  86 ,  15 ,  16                                               ] ,  \
  [  86 ,  87 ,  14 ,  15                                               ] ,  \
  ############################################################################
  ## 左下嘴唇多邊形(鏡射在圖片右邊)
  ############################################################################
  [  17 ,  16 , 315 , 314                                               ] ,  \
  [  16 ,  15 , 316 , 315                                               ] ,  \
  [  15 ,  14 , 317 , 316                                               ] ,  \
  ############################################################################
  [ 314 , 315 , 404 , 405                                               ] ,  \
  [ 315 , 316 , 403 , 404                                               ] ,  \
  [ 316 , 317 , 402 , 403                                               ] ,  \
  ############################################################################
  [ 405 , 404 , 320 , 321                                               ] ,  \
  [ 404 , 403 , 319 , 320                                               ] ,  \
  [ 403 , 402 , 318 , 319                                               ] ,  \
  ############################################################################
  [ 321 , 320 , 307 , 375                                               ] ,  \
  [ 320 , 319 , 325 , 307                                               ] ,  \
  [ 319 , 318 , 324 , 325                                               ] ,  \
  ############################################################################
  ## 左下嘴角多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 291 , 375 , 307 , 306                                               ] ,  \
  [ 306 , 307 , 325 , 292                                               ] ,  \
  [ 292 , 325 , 324 , 308                                               ] ,  \
  ############################################################################
  ## 右下巴多邊形(鏡射在圖片左邊)
  ############################################################################
  [ 214 , 212 , 202 , 210                                               ] ,  \
  [ 212 ,  57 ,  43 , 202                                               ] ,  \
  [  57 ,  61 , 146 ,  43                                               ] ,  \
  ############################################################################
  [ 210 , 202 , 204 , 211                                               ] ,  \
  [ 202 ,  43 , 106 , 204                                               ] ,  \
  [  43 , 146 ,  91 , 106                                               ] ,  \
  ############################################################################
  [ 211 , 204 , 194 ,  32                                               ] ,  \
  [ 204 , 106 , 182 , 194                                               ] ,  \
  [ 106 ,  91 , 181 , 182                                               ] ,  \
  ############################################################################
  [  32 , 194 , 201 , 208                                               ] ,  \
  [ 194 , 182 ,  83 , 201                                               ] ,  \
  [ 182 , 181 ,  84 ,  83                                               ] ,  \
  ############################################################################
  [ 208 , 201 , 200 , 199                                               ] ,  \
  [ 201 ,  83 ,  18 , 200                                               ] ,  \
  [  83 ,  84 ,  17 ,  18                                               ] ,  \
  ############################################################################
  ## 左下巴多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 434 , 430 , 422 , 432                                               ] ,  \
  [ 432 , 422 , 273 , 287                                               ] ,  \
  [ 287 , 273 , 375 , 291                                               ] ,  \
  ############################################################################
  [ 430 , 431 , 424 , 422                                               ] ,  \
  [ 422 , 424 , 335 , 273                                               ] ,  \
  [ 273 , 335 , 321 , 375                                               ] ,  \
  ############################################################################
  [ 431 , 262 , 418 , 424                                               ] ,  \
  [ 424 , 418 , 406 , 335                                               ] ,  \
  [ 335 , 406 , 405 , 321                                               ] ,  \
  ############################################################################
  [ 262 , 428 , 421 , 418                                               ] ,  \
  [ 418 , 421 , 313 , 406                                               ] ,  \
  [ 406 , 313 , 314 , 405                                               ] ,  \
  ############################################################################
  [ 428 , 199 , 200 , 421                                               ] ,  \
  [ 421 , 200 ,  18 , 313                                               ] ,  \
  [ 313 ,  18 ,  17 , 314                                               ] ,  \
  ############################################################################
  ## 右下顎多邊形(鏡射在圖片左邊)
  ############################################################################
  [  58 , 215 , 138 , 172                                               ] ,  \
  [ 215 , 213 , 192 , 138                                               ] ,  \
  ############################################################################
  [ 172 , 138 , 135 , 136                                               ] ,  \
  [ 138 , 192 , 214 , 135                                               ] ,  \
  ############################################################################
  [ 136 , 135 , 169 , 150                                               ] ,  \
  [ 135 , 214 , 210 , 169                                               ] ,  \
  ############################################################################
  [ 150 , 169 , 170 , 149                                               ] ,  \
  [ 169 , 210 , 211 , 170                                               ] ,  \
  ############################################################################
  [ 149 , 170 , 140 , 176                                               ] ,  \
  [ 170 , 211 ,  32 , 140                                               ] ,  \
  ############################################################################
  [ 176 , 140 , 171 , 148                                               ] ,  \
  [ 140 ,  32 , 208 , 171                                               ] ,  \
  ############################################################################
  [ 148 , 171 , 175 , 152                                               ] ,  \
  [ 171 , 208 , 199 , 175                                               ] ,  \
  ############################################################################
  ## 左下顎多邊形(鏡射在圖片右邊)
  ############################################################################
  [ 288 , 397 , 367 , 435                                               ] ,  \
  [ 435 , 367 , 416 , 433                                               ] ,  \
  ############################################################################
  [ 397 , 365 , 364 , 367                                               ] ,  \
  [ 367 , 364 , 434 , 416                                               ] ,  \
  ############################################################################
  [ 365 , 379 , 394 , 364                                               ] ,  \
  [ 364 , 394 , 430 , 434                                               ] ,  \
  ############################################################################
  [ 379 , 378 , 395 , 394                                               ] ,  \
  [ 394 , 395 , 431 , 430                                               ] ,  \
  ############################################################################
  [ 378 , 400 , 369 , 395                                               ] ,  \
  [ 395 , 369 , 262 , 431                                               ] ,  \
  ############################################################################
  [ 400 , 377 , 396 , 369                                               ] ,  \
  [ 369 , 396 , 428 , 262                                               ] ,  \
  ############################################################################
  [ 377 , 152 , 175 , 396                                               ] ,  \
  [ 396 , 175 , 199 , 428                                               ] ,  \
  ############################################################################
  ## 右眼(鏡射在圖片左邊)
  ############################################################################
  [ 133 , 155 , 154 , 153 , 145 , 144 , 163 ,   7 ,                          \
     33 , 246 , 161 , 160 , 159 , 158 , 157 , 173                       ] ,  \
  ############################################################################
  ## 左眼(鏡射在圖片右邊)
  ############################################################################
  [ 362 , 398 , 384 , 385 , 386 , 387 , 388 , 466 ,                          \
    263 , 249 , 390 , 373 , 374 , 380 , 381 , 382                       ] ,  \
  ############################################################################
  ## 嘴巴
  ############################################################################
  [ 308 , 324 , 318 , 402 , 317 ,  14 ,  87 , 178 ,  88 ,  95 ,              \
     78 , 191 ,  80 ,  81 ,  82 ,  13 , 312 , 311 , 310 , 415                ]
  ############################################################################
]
##############################################################################
class Face        (                                                        ) :
  ############################################################################
  def __init__    ( self                                                   ) :
    ##########################################################################
    self . Full       = self . CreateRectangle ( 0 , 0 , 0 , 0               )
    self . Rectangle  = self . CreateRectangle ( 0 , 0 , 0 , 0               )
    self . Degree     = 0.0
    self . Weights    = 0.0
    self . NoseBridge = 0.0
    self . Quality    = 0
    self . Features   =   [                                                  ]
    self . EmptyLandmarks (                                                  )
    ##########################################################################
    self . Classifier    = None
    self . EyesDetector  = None
    self . MouthDetector = None
    self . DlibDetector  = None
    self . CnnDetector   = None
    self . Fivemarks     = None
    self . Predictor     = None
    self . Facial        = None
    ##########################################################################
    return
  ############################################################################
  def __del__     ( self                                                   ) :
    pass
  ############################################################################
  def FromAnother      ( self , face                                       ) :
    ##########################################################################
    self . Classifier    = face . Classifier
    self . EyesDetector  = face . EyesDetector
    self . MouthDetector = face . MouthDetector
    self . DlibDetector  = face . DlibDetector
    self . CnnDetector   = face . CnnDetector
    self . Fivemarks     = face . Fivemarks
    self . Predictor     = face . Predictor
    self . Facial        = face . Facial
    ##########################################################################
    return
  ############################################################################
  def EmptyLandmarks   ( self                                              ) :
    ##########################################################################
    self . FaceBrief = { "Points"     : [ ]                                , \
                         "Nose"       : [ ]                                , \
                         "Center"     : [ ]                                , \
                         "Eyes"       : { "Right" : { "Left"   : [ ]       , \
                                                      "Center" : [ ]       , \
                                                      "Right"  : [ ]     } , \
                                          "Left"  : { "Left"   : [ ]       , \
                                                      "Center" : [ ]       , \
                                                      "Right"  : [ ]     } } }
    self . Landmarks = { "Points"   : [ ]                                  , \
                         "Shape"    : [ ]                                  , \
                         "Eyes"     : { "Right"   : [ ]                    , \
                                        "Left"    : [ ]                  } , \
                         "Eyebrow"  : { "Right"   : [ ]                    , \
                                        "Left"    : [ ]                  } , \
                         "Nose"     : { "Bridge"  : [ ]                    , \
                                        "Nostril" : [ ]                  } , \
                         "Mouth"    : { "Outer"   : [ ]                    , \
                                        "Inner"   : [ ]                    } }
    ##########################################################################
    return
  ############################################################################
  def setDegree       ( self , degree                                      ) :
    self . Degree = degree
    return
  ############################################################################
  def CreateRectangle ( self , x , y , w , h                               ) :
    ##########################################################################
    R    = x + w - 1
    B    = y + h - 1
    CX   = x + int ( w / 2 )
    CY   = y + int ( h / 2 )
    ##########################################################################
    RECT =            { "X"     : x                                          ,
                        "Y"     : y                                          ,
                        "W"     : w                                          ,
                        "H"     : h                                          ,
                        "R"     : R                                          ,
                        "B"     : B                                          ,
                        "CX"    : CX                                         ,
                        "CY"    : CY                                         ,
                        "Angle" : 0.0                                        }
    ##########################################################################
    return RECT
  ############################################################################
  def RectangleToXYWH             ( self , rect                            ) :
    ##########################################################################
    x = rect                      [ "X"                                      ]
    y = rect                      [ "Y"                                      ]
    w = rect                      [ "W"                                      ]
    h = rect                      [ "H"                                      ]
    ##########################################################################
    return x , y , w , h
  ############################################################################
  def RectangleFromOpenCV         ( self , rect                            ) :
    ##########################################################################
    x = rect                      [ 0                                        ]
    y = rect                      [ 1                                        ]
    w = rect                      [ 2                                        ]
    h = rect                      [ 3                                        ]
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ScaleRectangle              ( self , rect , ratio                    ) :
    ##########################################################################
    x  = rect                     [ "X"                                      ]
    y  = rect                     [ "Y"                                      ]
    w  = rect                     [ "W"                                      ]
    h  = rect                     [ "H"                                      ]
    CX = rect                     [ "CX"                                     ]
    CY = rect                     [ "CY"                                     ]
    ##########################################################################
    WW = int                      ( w * ratio                                )
    HH = int                      ( h * ratio                                )
    ##########################################################################
    x  = CX - int                 ( WW / 2                                   )
    y  = CY - int                 ( HH / 2                                   )
    w  = WW
    h  = HH
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def RestraintRectangle          ( self , Outer , Inner                   ) :
    ##########################################################################
    X1   = Outer                  [ "X"                                      ]
    Y1   = Outer                  [ "Y"                                      ]
    R1   = Outer                  [ "R"                                      ]
    B1   = Outer                  [ "B"                                      ]
    ##########################################################################
    X2   = Inner                  [ "X"                                      ]
    Y2   = Inner                  [ "Y"                                      ]
    R2   = Inner                  [ "R"                                      ]
    B2   = Inner                  [ "B"                                      ]
    ##########################################################################
    if                            ( X2 < X1                                ) :
      X2 = X1
    if                            ( Y2 < Y1                                ) :
      Y2 = Y1
    if                            ( R2 > R1                                ) :
      R2 = R1
    if                            ( B2 > B1                                ) :
      B2 = B1
    ##########################################################################
    x    = X2
    y    = Y2
    w    = int                    ( R2 - X2 + 1                              )
    h    = int                    ( B2 - Y2 + 1                              )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToSquareRectangle           ( self , rect                            ) :
    ##########################################################################
    CX   = rect                   [ "CX"                                     ]
    CY   = rect                   [ "CY"                                     ]
    WW   = rect                   [ "W"                                      ]
    HH   = rect                   [ "H"                                      ]
    ##########################################################################
    if                            ( WW > HH                                ) :
      HH = WW
    else                                                                     :
      WW = HH
    ##########################################################################
    x    = CX - int               ( WW / 2                                   )
    y    = CY - int               ( HH / 2                                   )
    w    = WW
    h    = HH
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def MultiplyRectangle           ( self , rect , ratio                    ) :
    ##########################################################################
    XX = rect                     [ "X"                                      ]
    YY = rect                     [ "Y"                                      ]
    WW = rect                     [ "W"                                      ]
    HH = rect                     [ "H"                                      ]
    ##########################################################################
    x  = int                      ( XX * ratio                               )
    y  = int                      ( YY * ratio                               )
    w  = int                      ( WW * ratio                               )
    h  = int                      ( HH * ratio                               )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToDlibRectangle       ( self , rect                                  ) :
    ##########################################################################
    x = rect                [ "X"                                            ]
    y = rect                [ "Y"                                            ]
    r = rect                [ "R"                                            ]
    b = rect                [ "B"                                            ]
    ##########################################################################
    return dlib . rectangle ( left = x , top = y , right = r , bottom = b    )
  ############################################################################
  def setFull                            ( self  , width , height          ) :
    ##########################################################################
    self . Full = self . CreateRectangle ( 0 , 0 , width , height            )
    ##########################################################################
    return self . Full
  ############################################################################
  def setRectangle          ( self , rect                                  ) :
    ##########################################################################
    self . Rectangle = rect
    ##########################################################################
    return self . Rectangle
  ############################################################################
  def setRectangleFromOpenCV ( self , rect                                 ) :
    ##########################################################################
    self . Rectangle = self . RectangleFromOpenCV ( rect                     )
    ##########################################################################
    return self . Rectangle
  ############################################################################
  def WithinRadius          ( self , A , B , Radius                        ) :
    ##########################################################################
    R2 = Radius * Radius
    dX = A [ "CX" ] - B [ "CX" ]
    dY = A [ "CY" ] - B [ "CY" ]
    D2 = ( dX * dX ) + ( dY * dY )
    ##########################################################################
    return                  ( D2 < R2                                        )
  ############################################################################
  def CollectFaceBrief      ( self                                         ) :
    ##########################################################################
    PTS  = self . FaceBrief [ "Points"                                       ]
    if                      ( len ( PTS ) != 5                             ) :
      return
    ##########################################################################
    self . FaceBrief [ "Nose" ] = PTS [ 4 ]
    ##########################################################################
    self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Left"   ] = PTS [ 0 ]
    self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Right"  ] = PTS [ 1 ]
    ##########################################################################
    X    = int ( int ( PTS [ 0 ] [ 0 ] + PTS [ 1 ] [ 0 ] ) / 2 )
    Y    = int ( int ( PTS [ 0 ] [ 1 ] + PTS [ 1 ] [ 1 ] ) / 2 )
    L    = [ X , Y ]
    self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Center" ] = L
    ##########################################################################
    self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Left"   ] = PTS [ 3 ]
    self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Right"  ] = PTS [ 2 ]
    ##########################################################################
    X    = int ( int ( PTS [ 2 ] [ 0 ] + PTS [ 3 ] [ 0 ] ) / 2 )
    Y    = int ( int ( PTS [ 2 ] [ 1 ] + PTS [ 3 ] [ 1 ] ) / 2 )
    R    = [ X , Y ]
    self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Center" ] = R
    ##########################################################################
    X    = int ( int ( L [ 0 ] + R [ 0 ] ) / 2 )
    Y    = int ( int ( L [ 1 ] + R [ 1 ] ) / 2 )
    C    = [ X , Y ]
    self . FaceBrief [ "Center" ] = C
    ##########################################################################
    return
  ############################################################################
  def CollectLandmarkParts ( self                                          ) :
    ##########################################################################
    ## 臉型
    ##########################################################################
    for i in range         ( 0 , 17                                        ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Shape" ] . append ( p                              )
    ##########################################################################
    ## 計算原始臉型數據品質
    ##########################################################################
    LP               = self . Landmarks [ "Shape" ] [  0 ] [ 0 ]
    RP               = self . Landmarks [ "Shape" ] [ 16 ] [ 0 ]
    self   . Quality = int ( RP - LP                                         )
    if                     ( self . Quality < 0                            ) :
      self . Quality = - self . Quality
    ##########################################################################
    ## 右眉(在左邊)
    ##########################################################################
    for i in range         ( 17 , 22                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyebrow" ] [ "Right" ] . append ( p                )
    ##########################################################################
    ## 左眉(在右邊)
    ##########################################################################
    for i in range         ( 22 , 27                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyebrow" ] [ "Left"  ] . append ( p                )
    ##########################################################################
    ## 鼻樑
    ##########################################################################
    for i in range         ( 27 , 31                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Nose" ] [ "Bridge"  ] . append ( p                 )
    ##########################################################################
    ## 鼻孔部
    ##########################################################################
    for i in range         ( 31 , 36                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Nose" ] [ "Nostril" ] . append ( p                 )
    ##########################################################################
    ## 右眼(在左邊)
    ##########################################################################
    for i in range         ( 36 , 42                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyes" ] [ "Right" ] . append ( p                   )
    ##########################################################################
    ## 左眼(在右邊)
    ##########################################################################
    for i in range         ( 42 , 48                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyes" ] [ "Left"  ] . append ( p                   )
    ##########################################################################
    ## 外嘴唇
    ##########################################################################
    for i in range         ( 48 , 60                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Mouth" ] [ "Outer" ] . append ( p                  )
    ##########################################################################
    ## 內嘴唇
    ##########################################################################
    for i in range         ( 60 , 68                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Mouth" ] [ "Inner" ] . append ( p                  )
    ##########################################################################
    return
  ############################################################################
  def ImportDlibLandmarks  ( self , shape , points = 68                    ) :
    ##########################################################################
    self . EmptyLandmarks  (                                                 )
    ##########################################################################
    if                     ( points ==  5                                  ) :
      ########################################################################
      for i in range       ( 0 , 5                                        ) :
        ######################################################################
        p    =             [ shape . part ( i ) . x , shape . part ( i ) . y ]
        self . FaceBrief [ "Points" ] . append ( p                           )
      ########################################################################
      self   . CollectFaceBrief (                                            )
      ########################################################################
      return
    ##########################################################################
    if                     ( points != 68                                  ) :
      return
    ##########################################################################
    for i in range         ( 0 , 68                                        ) :
      ######################################################################
      p    =               [ shape . part ( i ) . x , shape . part ( i ) . y ]
      self . Landmarks [ "Points" ] . append ( p                             )
    ##########################################################################
    self . CollectLandmarkParts (                                            )
    ##########################################################################
    return
  ############################################################################
  def AssignLandmarks           ( self , base , points                     ) :
    ##########################################################################
    XB     = base               [ 0                                          ]
    YB     = base               [ 1                                          ]
    ##########################################################################
    self   . EmptyLandmarks     (                                            )
    ##########################################################################
    for v in points                                                          :
      ########################################################################
      p    =                    [ XB + v [ 0 ] , YB + v [ 1 ]                ]
      ########################################################################
      self . Landmarks [ "Points" ] . append ( p                             )
    ##########################################################################
    self . CollectLandmarkParts (                                            )
    ##########################################################################
    return
  ############################################################################
  def GetLandmark ( self , major , minor = ""                              ) :
    ##########################################################################
    if            ( len ( major ) <= 0                                     ) :
      return      [                                                          ]
    ##########################################################################
    if            ( len ( minor ) <= 0                                     ) :
      return self . Landmarks [ major ]
    ##########################################################################
    return self   . Landmarks [ major ] [ minor ]
  ############################################################################
  def LandmarkToNpArray     ( self , major , minor = ""                    ) :
    F =  self . GetLandmark (        major , minor                           )
    return np . array       ( F , dtype = np.int32                           )
  ############################################################################
  def LandmarksToFace             ( self                                   ) :
    ##########################################################################
    x = -1
    y = -1
    r = -1
    b = -1
    ##########################################################################
    for p in self . Landmarks [ "Points" ]                                   :
      ########################################################################
      XX = p [ 0 ]
      YY = p [ 1 ]
      ########################################################################
      if ( x < 0 ) :
        x = XX
      elif ( x > XX ) :
        x = XX
      ########################################################################
      if ( y < 0 ) :
        y = YY
      elif ( y > YY ) :
        y = YY
      ########################################################################
      if ( r < 0 ) :
        r = XX
      elif ( r < XX ) :
        r = XX
      ########################################################################
      if ( b < 0 ) :
        b = YY
      elif ( b < YY ) :
        b = YY
    ##########################################################################
    WW  = ( r - x + 1 )
    HH  = ( b - y + 1 )
    ##########################################################################
    cx  = x + int ( WW / 2 )
    WW  = int ( WW * 11 / 10 )
    x   = cx - int ( WW / 2 )
    r   = x + WW
    ##########################################################################
    ZZ  = int ( HH * 11 / 10 )
    b   = y + ZZ
    y   = y - HH
    ##########################################################################
    WX  = self . Full [ "W" ]
    HX  = self . Full [ "H" ]
    ##########################################################################
    if ( x < 0 ) :
      x = 0
    ##########################################################################
    if ( r >= WX ) :
      r = WX - 1
    ##########################################################################
    if ( y < 0 ) :
      y = 0
    ##########################################################################
    if ( b >= HX ) :
      b = HX - 1
    ##########################################################################
    w   = int ( r - x + 1 )
    h   = int ( b - y + 1 )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToFullFaceRectangle          ( self                                  ) :
    ##########################################################################
    SS = self . LandmarksToFace    (                                         )
    QQ = self . ToSquareRectangle  ( SS                                      )
    SS = self . RestraintRectangle ( self . Full , QQ                        )
    ##########################################################################
    return SS
  ############################################################################
  def ToEnhanceFaceRectangle       ( self , rect , ratio                   ) :
    ##########################################################################
    R = self . ScaleRectangle      (        rect , ratio                     )
    Q = self . ToSquareRectangle   ( R                                       )
    S = self . RestraintRectangle  ( self . Full , Q                         )
    ##########################################################################
    return S
  ############################################################################
  def ToFaceDescriptor              ( self , image , rectangle             ) :
    ##########################################################################
    try                                                                      :
      shape      = self . Predictor ( image , rectangle                      )
      descriptor = self . Facial . compute_face_descriptor ( image , shape   )
    except                                                                   :
      return                        [                                        ]
    return np . array               ( descriptor                             )
  ############################################################################
  def FaceAlignDegree               ( self                                 ) :
    ##########################################################################
    LEC = self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Center" ]
    REC = self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Center" ]
    ##########################################################################
    dX  = int                       ( REC [ 0 ] - LEC [ 0 ]                  )
    dY  = int                       ( REC [ 1 ] - LEC [ 1 ]                  )
    ##########################################################################
    r   = np . degrees              ( np . arctan2 ( dY , dX ) ) + 540
    k   = int                       ( r / 360                                )
    r   = r -                       ( k * 360                                )
    ##########################################################################
    return                          ( 360.0 - r                              )
  ############################################################################
  def GetRotationDegree            ( self , gray                           ) :
    ##########################################################################
    rect  = self . ToDlibRectangle ( self  . Rectangle                       )
    shape = self . Fivemarks       ( gray  , rect                            )
    self  . ImportDlibLandmarks    ( shape , 5                               )
    ##########################################################################
    return self. FaceAlignDegree   (                                         )
  ############################################################################
  def GetNoseAngle                 ( self                                  ) :
    ##########################################################################
    T   = self . Landmarks [ "Nose" ] [ "Bridge" ] [ 0 ]
    B   = self . Landmarks [ "Nose" ] [ "Bridge" ] [ 1 ]
    dX  = int                      ( T [ 0 ] - B [ 0 ]                       )
    dY  = int                      ( T [ 1 ] - B [ 1 ]                       )
    ##########################################################################
    r   = np . degrees             ( np . arctan2 ( dY , dX ) ) + 540
    k   = int                      ( r / 360                                 )
    r   = r -                      ( k * 360                                 )
    ##########################################################################
    return                         ( 360.0 - r                               )
  ############################################################################
  def ToFaces                      ( self                                  , \
                                     gray                                  , \
                                     scale     = 1.05                      , \
                                     neighbors = 5                         , \
                                     minsize   = ( 32 , 32 )               ) :
    return self . Classifier . detectMultiScale                              (
             gray                                                          , \
             scaleFactor  = scale                                          , \
             minNeighbors = neighbors                                      , \
             minSize      = minsize                                          )
  ############################################################################
  def ToEyes                       ( self                                  , \
                                     gray                                  , \
                                     scale     = 1.1                       , \
                                     neighbors = 10                        , \
                                     minsize   = ( 15 , 10 )               ) :
    return self . EyesDetector . detectMultiScale                            (
             gray                                                          , \
             scaleFactor  = scale                                          , \
             minNeighbors = neighbors                                      , \
             minSize      = minsize                                          )
  ############################################################################
  def ToMouthes                    ( self                                  , \
                                     gray                                  , \
                                     scale     = 1.1                       , \
                                     neighbors = 10                        , \
                                     minsize   = ( 15 , 10 )               ) :
    return self . MouthDetector . detectMultiScale                           (
             gray                                                          , \
             scaleFactor  = scale                                          , \
             minNeighbors = neighbors                                      , \
             minSize      = minsize                                          )
  ############################################################################
  def FilterAccurateFaces              ( self                              , \
                                         gray                              , \
                                         minRect = ( 48 , 48 )             ) :
    ##########################################################################
    Faces     =                        [                                     ]
    ##########################################################################
    F         = self . ToFaces         ( gray                                )
    if                                 ( len ( F ) <= 0                    ) :
      return Faces
    ##########################################################################
    for ( x , y , w , h ) in F                                               :
      ########################################################################
      if                               ( w < minRect [ 0 ]                 ) :
        continue
      ########################################################################
      if                               ( h < minRect [ 1 ]                 ) :
        continue
      ########################################################################
      ROI     = gray                   [ y:y+h , x:x+w                       ]
      ########################################################################
      eyes    = self . ToEyes          ( ROI                                 )
      if                               ( len ( eyes    ) < 2               ) :
        continue
      ########################################################################
      mouthes = self . ToMouthes       ( ROI                                 )
      if                               ( len ( mouthes ) < 1               ) :
        continue
      ########################################################################
      R       = self . CreateRectangle ( x , y , w , h                       )
      Faces   . append                 ( R                                   )
    ##########################################################################
    return Faces
  ############################################################################
  def FeatureWeights                ( self                                 ) :
    ##########################################################################
    t    = 0
    for i in range ( 0 , 128 ) :
      v  = self  . Features [ i ]
      t += ( v * v )
    ##########################################################################
    self . Weights = t
    ##########################################################################
    return
  ############################################################################
  def ToFeatures                    ( self , image , gray                  ) :
    ##########################################################################
    FR    = self . Rectangle
    ##########################################################################
    DR    = self . ToDlibRectangle  ( FR                                     )
    shape = self . Predictor        ( gray  , DR                             )
    self  . ImportDlibLandmarks     ( shape , 68                             )
    v     = self . ToFaceDescriptor ( image , DR                             )
    ##########################################################################
    self  . Features = v
    ##########################################################################
    return v
  ############################################################################
  def AppendFaceRegion      ( self , DB , TABLE , Region , PICTURE , OWNER ) :
    ##########################################################################
    x        = Region       [ "X"                                            ]
    y        = Region       [ "Y"                                            ]
    width    = Region       [ "W"                                            ]
    height   = Region       [ "H"                                            ]
    right    = Region       [ "R"                                            ]
    bottom   = Region       [ "B"                                            ]
    cx       = Region       [ "CX"                                           ]
    cy       = Region       [ "CY"                                           ]
    angle    = Region       [ "Angle"                                        ]
    ##########################################################################
    HEAD     = 5100000000000000000
    UUID     = DB . LastUuid ( TABLE , "uuid" , HEAD                         )
    QQ       = f"""insert into {TABLE}
                   ( `uuid` ,
                     `picture` ,
                     `owner` ,
                     `x` ,
                     `y` ,
                     `width` ,
                     `height` ,
                     `right` ,
                     `bottom` ,
                     `cx` ,
                     `cy` ,
                     `rotation` )
                     values
                     ( {UUID} ,
                       {PICTURE} ,
                       {OWNER} ,
                       {x} ,
                       {y} ,
                       {width} ,
                       {height} ,
                       {right} ,
                       {bottom} ,
                       {cx} ,
                       {cy} ,
                       {angle} ) ;"""
    QQ = " " . join ( QQ . split ( ) )
    DB       . Query         ( QQ                                            )
    ##########################################################################
    return UUID
  ############################################################################
  def AppendFaceFeatures ( self , DB , TABLE , PICTURE , OWNER , FACE      ) :
    ##########################################################################
    weights = self . Weights
    nose    = self . NoseBridge
    quality = self . Quality
    FS      = " , " . join ( str(x) for x in self . Features )
    ##########################################################################
    KU      = [ ]
    for i in range ( 1 , 129 ) :
      V     = "{:03d}".format(i)
      K     = f"`f{V}`"
      KU    . append ( K )
    KS      = " , " . join ( KU )
    ##########################################################################
    HEAD     = 8100000000000000000
    UUID     = DB . LastUuid ( TABLE , "uuid" , HEAD                         )
    ##########################################################################
    QQ       = f"""insert into {TABLE}
                   ( `uuid` ,
                     `picture` ,
                     `owner` ,
                     `face` ,
                     `quality` ,
                     `weights` ,
                     `nose` ,
                     {KS} )
                     values
                     ( {UUID} ,
                       {PICTURE} ,
                       {OWNER} ,
                       {FACE} ,
                       {quality} ,
                       {weights} ,
                       {nose} ,
                       {FS} ) ;"""
    QQ = " " . join ( QQ . split ( ) )
    DB       . Query ( QQ )
    ##########################################################################
    return UUID
  ############################################################################
  def AssurePictureAnalyzLevel ( self , DB , TABLE , PICTURE , LEVEL       ) :
    ##########################################################################
    QQ = f"""insert into {TABLE}
             ( `uuid` , `type` ,`name` , `value` )
             values
             ( {PICTURE} , 52 , 'Face-Features' , {LEVEL} ) ;"""
    QQ = " " . join            ( QQ . split ( )                              )
    DB . Query                 ( QQ                                          )
    ##########################################################################
    return
  ############################################################################
  def GetNearestFacialMatching ( self                                      , \
                                 DB                                        , \
                                 TABLE                                     , \
                                 ITEMs                                     , \
                                 euclideanDist                             , \
                                 weightDiff     = 100                      , \
                                 noseDiff       = 10.0                     , \
                                 OPTIONS        = "order by `v` asc"       ) :
    ##########################################################################
    ed     = float ( euclideanDist ) / 10000.0
    wf     = float ( weightDiff    ) / 10000.0
    nf     = noseDiff
    wv     = self . Weights
    nv     = self . NoseBridge
    ##########################################################################
    FQQ    = f"""select `uuid` from {TABLE}
                 where ( `used` = 1 )
                 and ( abs ( `nose` - {nv} ) < {nf} )
                 and ( abs ( `weights` - {wv} ) < {wf} )"""
    FQQ    = " " . join ( FQQ . split ( )                                    )
    ##########################################################################
    FIT    =            [                                                    ]
    for i in range ( 1 , 129 )                                               :
      ########################################################################
      F    = self . Features [ i - 1 ]
      V    = "{:03d}".format(i)
      K    = f"`f{V}`"
      S    = f"pow( {K} - ( {F} ) , 2 )"
      ########################################################################
      FIT  . append ( S                                                      )
    ##########################################################################
    FQI    = " + " . join ( FIT )
    FQX    = f"( {FQI} )"
    ##########################################################################
    QQ     = f"""select {FQX} as `v` , {ITEMs} from {TABLE}
                 where ( `uuid` in ( {FQQ} ) )
                 and ( {FQX} < {ed} )
                 {OPTIONS} ;"""
    QQ     = " " . join  ( QQ . split ( )                                    )
    ##########################################################################
    DB . Query           ( QQ                                                )
    ##########################################################################
    return DB . FetchAll (                                                   )
  ############################################################################
  def Detect468Landmarks ( self                                            , \
                           Image                                           , \
                           Width                                           , \
                           Height                                          , \
                           BaseX                                           , \
                           BaseY                                           , \
                           ScreenWidth                                     , \
                           ScreenHeight                                    , \
                           STATIC        = True                            , \
                           FACEs         = 1                               , \
                           REFINE        = True                            , \
                           MinConfidence = 0.5                             ) :
    ##########################################################################
    FM = mp . solutions . face_mesh
    FD = FM . FaceMesh   ( static_image_mode        = STATIC               , \
                           max_num_faces            = FACEs                , \
                           refine_landmarks         = REFINE               , \
                           min_detection_confidence = MinConfidence          )
    RR = FD . process    ( Image                                             )
    ##########################################################################
    if                   ( not RR . multi_face_landmarks                   ) :
      return             { "Ready" : False                                   }
    ##########################################################################
    PW = Width
    PH = Height
    SW = ScreenWidth
    SH = ScreenHeight
    LL =                 [                                                   ]
    PL =                 [                                                   ]
    SL =                 [                                                   ]
    ##########################################################################
    for F in RR . multi_face_landmarks                                       :
      ########################################################################
      for P in F . landmark                                                  :
        ######################################################################
        XX = P . x
        YY = P . y
        ZZ = P . z
        ######################################################################
        PX = XX * PW
        PY = YY * PH
        ######################################################################
        SX = XX * SW
        SY = YY * SH
        ######################################################################
        SX = SX + BaseX
        SY = SY + BaseY
        ######################################################################
        LL . append      ( { "X" : XX , "Y" : YY , "Z" : ZZ }                )
        PL . append      ( { "X" : PX , "Y" : PY , "Z" : ZZ }                )
        SL . append      ( { "X" : SX , "Y" : SY , "Z" : ZZ }                )
    ##########################################################################
    if                   ( len ( LL ) <= 0                                 ) :
      return             { "Ready" : False                                   }
    ##########################################################################
    return               { "Ready"    : True                               , \
                           "Width"    : Width                              , \
                           "Height"   : Height                             , \
                           "X"        : BaseX                              , \
                           "Y"        : BaseY                              , \
                           "SW"       : ScreenWidth                        , \
                           "SH"       : ScreenHeight                       , \
                           "Original" : LL                                 , \
                           "Pixels"   : PL                                 , \
                           "Draws"    : SL                                   }
  ############################################################################
  def Face468Mesh     ( self                                               ) :
    ##########################################################################
    global FaceLandmarks468Meshes
    ##########################################################################
    return FaceLandmarks468Meshes
  ############################################################################
  def Face468Polygons ( self                                               ) :
    ##########################################################################
    global FaceLandmarks468Polygons
    ##########################################################################
    return FaceLandmarks468Polygons
  ############################################################################
  def GetSin          ( self , Degree                                      ) :
    return math . sin ( math . pi * Degree / 180.0                           )
  ############################################################################
  def GetCos          ( self , Degree                                      ) :
    return math . cos ( math . pi * Degree / 180.0                           )
  ############################################################################
  def GetRotateXY     ( self , X , Y , sinV , cosV                         ) :
    ##########################################################################
    XF = float        ( X                                                    )
    YF = float        ( Y                                                    )
    XP = float        ( float ( XF * cosV ) - float ( YF * sinV )            )
    YP = float        ( float ( XF * sinV ) + float ( YF * cosV )           )
    ##########################################################################
    return X , Y
  ############################################################################
  def GetRectCorner              ( self , WW , HH , sinV , cosV            ) :
    ##########################################################################
    MinX = 0
    MinY = 0
    ##########################################################################
    XA , YA = self . GetRotateXY ( WW ,  0 , sinV , cosV                     )
    ##########################################################################
    if                           ( XA < MinX                               ) :
      MinX = XA
    ##########################################################################
    if                           ( YA < MinY                               ) :
      MinY = YA
    ##########################################################################
    XA , YA = self . GetRotateXY (  0 ,  HH , sinV , cosV                     )
    ##########################################################################
    if                           ( XA < MinX                               ) :
      MinX = XA
    ##########################################################################
    if                           ( YA < MinY                               ) :
      MinY = YA
    ##########################################################################
    XA , YA = self . GetRotateXY ( WW , HH , sinV , cosV                     )
    ##########################################################################
    if                           ( XA < MinX                               ) :
      MinX = XA
    ##########################################################################
    if                           ( YA < MinY                               ) :
      MinY = YA
    ##########################################################################
    return MinX , MinY
  ############################################################################
  def GetRectRange               ( self , XP , YP , WP , HP , sinV , cosV  ) :
    ##########################################################################
    MinX = 0
    MinY = 0
    ##########################################################################
    XA , YA = self . GetRotateXY ( XP      , YP , sinV , cosV                )
    ##########################################################################
    MinX = XA
    MinY = YA
    MaxX = XA
    MaxY = YA
    ##########################################################################
    XA , YA = self . GetRotateXY ( XP + WP , YP      , sinV , cosV           )
    ##########################################################################
    if                           ( XA < MinX                               ) :
      MinX = XA
    ##########################################################################
    if                           ( YA < MinY                               ) :
      MinY = YA
    ##########################################################################
    if                           ( XA > MaxX                               ) :
      MaxX = XA
    ##########################################################################
    if                           ( YA > MaxY                               ) :
      MaxY = YA
    ##########################################################################
    XA , YA = self . GetRotateXY ( XP      , YP + HP , sinV , cosV           )
    ##########################################################################
    if                           ( XA < MinX                               ) :
      MinX = XA
    ##########################################################################
    if                           ( YA < MinY                               ) :
      MinY = YA
    ##########################################################################
    if                           ( XA > MaxX                               ) :
      MaxX = XA
    ##########################################################################
    if                           ( YA > MaxY                               ) :
      MaxY = YA
    ##########################################################################
    XA , YA = self . GetRotateXY ( XP + WP , YP + HP , sinV , cosV           )
    ##########################################################################
    if                           ( XA < MinX                               ) :
      MinX = XA
    ##########################################################################
    if                           ( YA < MinY                               ) :
      MinY = YA
    ##########################################################################
    if                           ( XA > MaxX                               ) :
      MaxX = XA
    ##########################################################################
    if                           ( YA > MaxY                               ) :
      MaxY = YA
    ##########################################################################
    return MinX , MinY , float ( MaxX - MinX ) , float ( MaxY - MinY )
  ############################################################################
  def RotateArea         ( self                                            , \
                           WW                                              , \
                           HH                                              , \
                           XP                                              , \
                           YP                                              , \
                           WP                                              , \
                           HP                                              , \
                           Degree                                          ) :
    ##########################################################################
    sinV = self . GetSin ( Degree                                            )
    cosV = self . GetCos ( Degree                                            )
    ##########################################################################
    MinX , MinY = self . GetRectCorner ( WW , HH , sinV , cosV               )
    CX , CY , CW , CH = self . GetRectRange ( XP , YP , WP , HP , sinV , cosV )
    ##########################################################################
    return int ( CX - MinX ) , int ( CY - MinY ) , int ( CW ) , int ( CH )
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
