# -*- coding: utf-8 -*-
##############################################################################
## 附記元件
##############################################################################
import os
import sys
import time
import datetime
##############################################################################
import mysql . connector
from   mysql . connector              import Error
##############################################################################
import AITK
from   AITK . Database  . Query       import Query
from   AITK . Database  . Connection  import Connection
from   AITK . Database  . Columns     import Columns
##############################################################################
## 附記元件
##############################################################################
class Notes  ( Columns                                                     ) :
  ############################################################################
  def __init__                          ( self                             ) :
    ##########################################################################
    super ( Columns , self ) . __init__ (                                    )
    self                     . Clear    (                                    )
    ##########################################################################
    return
  ############################################################################
  def __del__  ( self )                                                      :
    pass
  ############################################################################
  def Clear          ( self                                                ) :
    ##########################################################################
    self . Columns = [                                                       ]
    self . Id      = -1
    self . Uuid    =  0
    self . Name    =  ""
    self . Prefer  =  0
    self . Note    =  ""
    self . Title   =  ""
    self . Comment =  ""
    self . Extra   =  ""
    self . ltime   =  0
    ##########################################################################
    return
  ############################################################################
  def assign ( self , item                                                 ) :
    ##########################################################################
    self . Columns = item . Columns
    self . Id      = item . Id
    self . Uuid    = item . Uuid
    self . Name    = item . Name
    self . Prefer  = item . Prefer
    self . Note    = item . Note
    self . Title   = item . Title
    self . Comment = item . Comment
    self . Extra   = item . Extra
    self . ltime   = item . ltime
    ##########################################################################
    return
  ############################################################################
  def set            ( self , item , value                                 ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"      == a                                      ) :
      self . Id      = value
    ##########################################################################
    if               ( "uuid"    == a                                      ) :
      self . Uuid    = int ( value                                           )
    ##########################################################################
    if               ( "name"    == a                                      ) :
      self . Name    = str ( value                                           )
    ##########################################################################
    if               ( "prefer"  == a                                      ) :
      self . Prefer  = int ( value                                           )
    ##########################################################################
    if               ( "note"    == a                                      ) :
      self . Note    = str ( value                                           )
    ##########################################################################
    if               ( "title"   == a                                      ) :
      self . Title   = str ( value                                           )
    ##########################################################################
    if               ( "comment" == a                                      ) :
      self . Comment = str ( value                                           )
    ##########################################################################
    if               ( "extra"   == a                                      ) :
      self . Extra   = str ( value                                           )
    ##########################################################################
    if               ( "ltime"   == a                                      ) :
      self . ltime   =       value
    ##########################################################################
    return
  ############################################################################
  def get            ( self , item                                         ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"      == a                                      ) :
      return self . Id
    ##########################################################################
    if               ( "uuid"    == a                                      ) :
      return self . Uuid
    ##########################################################################
    if               ( "name"    == a                                      ) :
      return self . Name
    ##########################################################################
    if               ( "prefer"  == a                                      ) :
      return self . Prefer
    ##########################################################################
    if               ( "note"    == a                                      ) :
      return self . Note
    ##########################################################################
    if               ( "title"   == a                                      ) :
      return self . Title
    ##########################################################################
    if               ( "comment" == a                                      ) :
      return self . Comment
    ##########################################################################
    if               ( "extra"   == a                                      ) :
      return self . Extra
    ##########################################################################
    if               ( "ltime"   == a                                      ) :
      return self . ltime
    ##########################################################################
    return ""
  ############################################################################
  def tableItems ( self )                                                    :
    return [ "id"                                                            ,
             "uuid"                                                          ,
             "name"                                                          ,
             "prefer"                                                        ,
             "note"                                                          ,
             "title"                                                         ,
             "comment"                                                       ,
             "extra"                                                         ,
             "ltime"                                                         ]
  ############################################################################
  def pair ( self , item )                                                   :
    ##########################################################################
    v = self . get ( item )
    ##########################################################################
    return f"`{item}` = {v}"
  ############################################################################
  def valueItems ( self                                                    ) :
    return [ "uuid"                                                          ,
             "name"                                                          ,
             "prefer"                                                        ,
             "note"                                                          ,
             "title"                                                         ,
             "comment"                                                       ,
             "extra"                                                         ]
  ############################################################################
  def setOwner        ( self , UUID , NAME                                 ) :
    ##########################################################################
    self . Uuid =              UUID
    self . Name = str (               NAME                                   )
    ##########################################################################
    return
  ############################################################################
  def WhereClause     ( self , PREFER = ""                                 ) :
    ##########################################################################
    P    = str        (        PREFER                                        )
    W    = ""
    U    = self . Uuid
    N    = str        ( self . Name                                          )
    ##########################################################################
    if                ( len ( P ) > 0                                      ) :
      W  =  f""" where `uuid` = {U} and `name` = '{N}' and `prefer` = {P} ;"""
    else                                                                     :
      W  =  f""" where `uuid` = {U} and `name` = '{N}' order by `prefer` desc limit 0,1 ;"""
    ##########################################################################
    return W
  ############################################################################
  def Select                ( self , TABLE , PREFER = ""                   ) :
    ##########################################################################
    WC = self . WhereClause ( PREFER                                         )
    ##########################################################################
    return f"select `note` from {TABLE}{WC}"
  ############################################################################
  def WhereExtraClause ( self , PREFER = ""                                ) :
    ##########################################################################
    P    = str         (        PREFER                                       )
    W    = ""
    U    = self . Uuid
    N    = str        ( self . Name                                          )
    E    = str        ( self . Extra                                         )
    ##########################################################################
    if                ( len ( P ) > 0                                      ) :
      W  =  f""" where `uuid` = {U} and `name` = '{N}' and `extra` = '{E}' and `prefer` = {P} ;"""
    else                                                                     :
      W  =  f""" where `uuid` = {U} and `name` = '{N}' and `extra` = '{E}' order by `prefer` desc limit 0,1 ;"""
    ##########################################################################
    return W
  ############################################################################
  def SelectExtra                ( self , TABLE , PREFER = ""              ) :
    ##########################################################################
    WC = self . WhereExtraClause ( PREFER                                    )
    ##########################################################################
    return f"select `note` from {TABLE}{WC}"
  ############################################################################
  def Delete                ( self , TABLE , PREFER = ""                   ) :
    ##########################################################################
    WC = self . WhereClause ( PREFER                                         )
    ##########################################################################
    return f"delete from {TABLE}{WC}"
  ############################################################################
  def Insert                ( self , DB , TABLE                            ) :
    ##########################################################################
    CUID   = self . Uuid
    NAME   = self . Name
    PREFER = self . Prefer
    NOTE   = self . Note
    EXTRA  = self . Extra
    ##########################################################################
    QQ     = f"""insert into {TABLE}
                 (`uuid`,`name`,`prefer`,`note`,`extra` ) values
                 ( {CUID} , '{NAME}' , {PREFER} , %s , %s ) ;"""
    QQ     = " " . join     ( QQ . split ( )                                 )
    VAL    =                ( NOTE , EXTRA ,                                 )
    ##########################################################################
    return DB . QueryValues ( QQ , VAL                                       )
  ############################################################################
  def UpdateNote            ( self , DB , TABLE                            ) :
    ##########################################################################
    CUID   = self . Uuid
    NAME   = self . Name
    PREFER = self . Prefer
    EXTRA  = self . Extra
    NOTE   = self . Note
    ##########################################################################
    if                      ( len ( EXTRA ) <= 0                           ) :
      ########################################################################
      QQ   = f"""update {TABLE}
                 set `note` = %s
                 where ( `uuid` = {CUID} )
                 and ( `name` = '{NAME}' )
                 and ( `prefer` = {PREFER} ) ;"""
      ########################################################################
    else                                                                     :
      ########################################################################
      QQ   = f"""update {TABLE}
                 set `note` = %s
                 where ( `uuid` = {CUID} )
                 and ( `name` = '{NAME}' )
                 and ( `extra` = '{EXTRA}' )
                 and ( `prefer` = {PREFER} ) ;"""
    ##########################################################################
    QQ     = " " . join     ( QQ . split ( )                                 )
    VAL    =                ( NOTE ,                                         )
    ##########################################################################
    return DB . QueryValues ( QQ , VAL                                       )
  ############################################################################
  def UpdateColumn          ( self , DB , TABLE , COLUMN , VALUE           ) :
    ##########################################################################
    CUID   = self . Uuid
    NAME   = self . Name
    PREFER = self . Prefer
    ##########################################################################
    QQ     = f"""update {TABLE}
                 set `{COLUMN}` = %s
                 where ( `uuid` = {CUID} )
                 and ( `name` = '{NAME}' )
                 and ( `prefer` = {PREFER} ) ;"""
    ##########################################################################
    QQ     = " " . join     ( QQ . split ( )                                 )
    VAL    =                ( VALUE ,                                        )
    ##########################################################################
    return DB . QueryValues ( QQ , VAL                                       )
  ############################################################################
  def Obtains                             ( self                             ,
                                            DB                               ,
                                            TABLE                            ,
                                            PREFER = ""                    ) :
    ##########################################################################
    self . Note = ""
    ##########################################################################
    if                                    ( len ( self . Extra ) <= 0      ) :
      ########################################################################
      QQ   = self . Select                ( TABLE , PREFER                   )
      ########################################################################
    else                                                                     :
      ########################################################################
      QQ   = self . SelectExtra           ( TABLE , PREFER                   )
    ##########################################################################
    DB   . Query                          ( QQ                               )
    RR   = DB   . FetchAll                (                                  )
    ##########################################################################
    if                                    ( RR in [ None , False ]         ) :
      return self . Note
    ##########################################################################
    if                                    ( len ( RR ) <= 0                ) :
      return self . Note
    ##########################################################################
    if                                    ( len ( RR [ 0 ] ) <= 0          ) :
      return self . Note
    ##########################################################################
    self . Note = self . assureItemString ( RR [ 0 ] [ 0                   ] )
    ##########################################################################
    return self   . Note
  ############################################################################
  def ObtainsAll         ( self , DB , TABLE , PREFER = ""                 ) :
    ##########################################################################
    self . Note    = ""
    self . Title   = ""
    self . Comment = ""
    self . Extra   = ""
    ##########################################################################
    WH             = self . WhereClause ( PREFER                             )
    QQ             = f"select `note`,`title`,`comment`,`extra` from {TABLE} {WH}"
    DB   . Query         ( QQ                                                )
    RR   = DB . FetchOne (                                                   )
    ##########################################################################
    if                   ( RR == None                                      ) :
      return self  . Note
    if                   ( len ( RR ) <= 0                                 ) :
      return self  . Note
    ##########################################################################
    self           . Note    = self . assureItemString ( RR [ 0            ] )
    self           . Title   = self . assureItemString ( RR [ 1            ] )
    self           . Comment = self . assureItemString ( RR [ 2            ] )
    self           . Extra   = self . assureItemString ( RR [ 3            ] )
    ##########################################################################
    return self    . Note
  ############################################################################
  def ObtainByOwner        ( self , DB , TABLE , UUID , NAME , PREFER = "" ) :
    ##########################################################################
    self . setOwner        (                     UUID , NAME                 )
    ##########################################################################
    return self . Obtains  (        DB , TABLE ,               PREFER        )
  ############################################################################
  def ObtainIDs             ( self                                           ,
                              DB                                             ,
                              TABLE                                          ,
                              ITEM  = "id"                                   ,
                              ORDER = "asc"                                ) :
    ##########################################################################
    U  = self . Uuid
    N  = self . Name
    ##########################################################################
    QQ = f"""select `{ITEM}` from {TABLE}
             where ( `uuid` = {U} )
             and ( `name` = '{N}' )
             order by `prefer` {ORDER} ;"""
    QQ = " " . join         ( QQ . split ( )                                 )
    ##########################################################################
    return DB . ObtainUuids ( QQ                                             )
  ############################################################################
  def ObtainStrings         ( self , DB , TABLE ,          ORDER = "asc"   ) :
    return self . ObtainIDs (        DB , TABLE , "note" , ORDER             )
  ############################################################################
  def ObtainMaps                     ( self , DB , TABLE , ORDER = "asc"   ) :
    ##########################################################################
    IDs    =                         {                                       }
    U      = self . Uuid
    N      = self . Name
    ##########################################################################
    QQ     = f"""select `note`,`prefer` from {TABLE}
              where ( `uuid` = {U} ) and ( `name` = 'N' )
              order by `prefer` {ORDER} ;"""
    QQ     = " " . join              ( QQ . split ( )                        )
    DB     . Query                   ( QQ                                    )
    RR     = DB  . FetchAll          (                                       )
    ##########################################################################
    if                               ( RR == None                          ) :
      return IDs
    if                               ( len ( RR ) <= 0                     ) :
      return IDs
    ##########################################################################
    for p in RR                                                              :
      ########################################################################
      NOTE = self . assureItemString ( p [ 0                               ] )
      ID   = int                     ( p [ 1                               ] )
      ########################################################################
      IDs [ ID ] = NOTE
    ##########################################################################
    return IDs
  ############################################################################
  def ObtainsLastest      ( self , DB , TABLE                              ) :
    ##########################################################################
    self . Prefer = -1
    U    = self . Uuid
    N    = self . Name
    ##########################################################################
    QQ   = f"""select `prefer` from {TABLE}
               where ( `uuid` = {U} )
               and ( `name` = '{N}' )
               order by `prefer` desc limit 0,1 ;"""
    ##########################################################################
    QQ   = " " . join     ( QQ . split ( )                                   )
    DB   . Query          ( QQ                                               )
    ##########################################################################
    RR   = DB . FetchOne  (                                                  )
    ##########################################################################
    if ( ( RR not in [ False ,  None ] ) and ( len ( RR ) > 0 ) )            :
      ########################################################################
      self . Prefer = int ( RR [ 0                                         ] )
    ##########################################################################
    return self . Prefer
  ############################################################################
  def assureNote            ( self , DB , TABLE                            ) :
    ##########################################################################
    self . Prefer = 0
    DB   . Query            ( self . Delete ( TABLE , self . Prefer        ) )
    ##########################################################################
    return self . Insert    (        DB , TABLE                              )
  ############################################################################
  def appendNote            ( self , DB , TABLE                            ) :
    ##########################################################################
    self . ObtainsLastest   (        DB , TABLE                              )
    self . Prefer = self . Prefer + 1
    ##########################################################################
    return self . Insert    ( DB , TABLE                                     )
  ############################################################################
  def Editing               ( self , DB , TABLE                            ) :
    ##########################################################################
    if                      ( self . Prefer < 0                            ) :
      ########################################################################
      if                    ( len ( self . Note ) > 0                      ) :
        self . appendNote   ( DB , TABLE                                     )
      ########################################################################
    else                                                                     :
      ########################################################################
      if                    ( len ( self . Note ) > 0                      ) :
        self . UpdateNote   ( DB , TABLE                                     )
      else                                                                   :
        DB   . Query        ( self . Delete ( TABLE )                        )
    ##########################################################################
    return
  ############################################################################
  def Ordering              ( self , DB , TABLE , IDs                      ) :
    ##########################################################################
    if                      ( len ( IDs ) <= 0                             ) :
      return False
    ##########################################################################
    CC     = 0
    ##########################################################################
    for ID in IDs                                                            :
      ########################################################################
      QQ   = f"update {TABLE} set `prefer` = {CC} where ( `id` = {ID} ) ;"
      DB   . Query          ( QQ                                             )
      CC   = CC + 1
    ##########################################################################
    return True
  ############################################################################
  def Organize              ( self , DB , TABLE                            ) :
    ##########################################################################
    IDs  = self . ObtainIDs (        DB , TABLE                              )
    self . Ordering         (        DB , TABLE , IDs                        )
    ##########################################################################
    return
  ############################################################################
  def RemovePrefers      ( self , DB , TABLE , PREFERs                     ) :
    ##########################################################################
    LISTS = " , " . join ( PREFERs                                           )
    UUID  = self . Uuid
    KEY   = self . Name
    ##########################################################################
    QQ    = f"""delete from {TABLE}
                where ( `uuid` = {UUID} )
                  and ( `name` = '{KEY}' )
                  and ( `prefer` in ( {LISTS} ) ) ;"""
    ##########################################################################
    QQ    = " " . join   ( QQ . split ( )                                    )
    DB    . Query        ( QQ                                                )
    ##########################################################################
    return
##############################################################################
