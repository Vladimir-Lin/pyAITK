# -*- coding: utf-8 -*-
##############################################################################
## Episode
## 影集
##############################################################################
import os
import sys
import time
import threading
import json
import shutil
import glob
##############################################################################
import pathlib
from   pathlib                       import Path
##############################################################################
import AITK
##############################################################################
from   AITK . Essentials . Relation  import Relation                        as Relation
from   AITK . Calendars  . StarDate  import StarDate                        as StarDate
from   AITK . Calendars  . Periode   import Periode                         as Periode
from   AITK . Documents  . JSON      import Load                            as LoadJson
from   AITK . Documents  . JSON      import Save                            as SaveJson
##############################################################################
from   AITK . Pictures   . Picture   import Picture                         as PictureItem
from   AITK . Pictures   . Gallery   import Gallery                         as GalleryItem
##############################################################################
from   AITK . Videos     . Utilities import SilentRun                       as SilentRun
from   AITK . Videos     . Utilities import M3UtoFilms                      as M3UtoFilms
from   AITK . Videos     . Utilities import MergeCoverPosters               as MergeCoverPosters
from   AITK . Videos     . Utilities import GetFilmsInCurrentDirectory      as GetFilmsInCurrentDirectory
from   AITK . Videos     . Utilities import GetImagesInCurrentDirectory     as GetImagesInCurrentDirectory
from   AITK . Videos     . Utilities import GetAssInCurrentDirectory        as GetAssInCurrentDirectory
from   AITK . Videos     . Utilities import GetSubfoldersInCurrentDirectory as GetSubfoldersInCurrentDirectory
##############################################################################
class Episode    (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def Clear                   ( self                                       ) :
    ##########################################################################
    self . Album            = {                                              }
    self . Settings         = {                                              }
    self . Translations     = {                                              }
    self . Messages         = {                                              }
    self . Tables           = {                                              }
    self . CoverOpts        = { "Base"       : 3800700000000000001                   , \
                                "Prefer"     : 0                                     , \
                                "Master"     : "`cios`.`pictures_covers`"            , \
                                "Depot"      : "`cios`.`pictures_depot_covers`"      , \
                                "Thumb"      : "`cios`.`thumbs_covers`"              , \
                                "ThumbDepot" : "`cios`.`thumbs_depot_covers`"        , \
                                "Hash"       : "`cios`.`pictureproperties_hash`"     , \
                                "Histogram"  : "`cios`.`pictureproperties_statistics`" }
    self . AlbumCoverTables = { "Pictures"          : "`cios`.`pictureorders`"            , \
                                "Information"       : "`cios`.`pictures_covers`"          , \
                                "Depot"             : "`cios`.`pictures_depot_covers`"    , \
                                "Galleries"         : "`cios`.`galleries`"                , \
                                "Contours"          : "`cios`.`contours`"                 , \
                                "Parameters"        : "`cios`.`parameters`"               , \
                                "Variables"         : "`cios`.`variables`"                , \
                                "Names"             : "`cios`.`names_others`"             , \
                                "NamesEditing"      : "`appellations`.`names_others_0013`" , \
                                "Notes"             : "`cios`.`notes_materials`"          , \
                                "ThumbsInformation" : "`cios`.`thumbs_covers`"            , \
                                "Thumb"             : "`cios`.`thumbs_depot_covers`"      , \
                                "Relation"          : "`cios`.`relations`"                , \
                                "RelationPeople"    : "`cios`.`relations_people`"         , \
                                "RelationPictures"  : "`cios`.`relations_pictures`"       , \
                                "RelationVideos"    : "`affiliations`.`relations_videos_0003`" , \
                                "RelationCovers"    : "`affiliations`.`relations_videos_0007`" , \
                                "PictureHash"       : "`cios`.`pictureproperties_hash`"   , \
                                "PictureStatistics" : "`cios`.`pictureproperties_statistics`" , \
                                "BaseUuid"          : "3800700000000000001"                 }
    self . PeopleViewTables = { "People"            : "`leagues`.`people_av`"             , \
                                "Parameters"        : "`cios`.`parameters`"               , \
                                "Variables"         : "`cios`.`variables`"                , \
                                "Names"             : "`cios`.`names`"                    , \
                                "NamesEditing"      : "`appellations`.`names_people`"     , \
                                "Notes"             : "`cios`.`notes_descriptions`"       , \
                                "Information"       : "`cios`.`pictures`"                 , \
                                "Depot"             : "`cios`.`picturedepot`"             , \
                                "ThumbsInformation" : "`cios`.`thumbs`"                   , \
                                "Thumb"             : "`cios`.`thumbdepot`"               , \
                                "FaceRegions"       : "`cios`.`faceregions`"              , \
                                "FaceRecognitions"  : "`cios`.`facerecognitions`"         , \
                                "Relation"          : "`cios`.`relations`"                , \
                                "RelationPeople"    : "`affiliations`.`relations_videos`" , \
                                "RelationPictures"  : "`cios`.`relations_pictures`"         }
    self . Uuid             = 0
    self . LogFunc          = None
    self . Filename         = ""
    self . DIR              = ""
    self . TZ               = "Asia/Taipei"
    ##########################################################################
    return
  ############################################################################
  def LOG          ( self , MSG                                            ) :
    ##########################################################################
    if             ( self . LogFunc in [ False , None ]                    ) :
      return
    ##########################################################################
    self . LogFunc (        MSG                                              )
    ##########################################################################
    return
  ############################################################################
  def getMessage           ( self , KEY                                    ) :
    ##########################################################################
    if                     ( KEY not in self . Messages                    ) :
      return ""
    ##########################################################################
    return self . Messages [        KEY                                      ]
  ############################################################################
  def logMessage            ( self , KEY                                   ) :
    ##########################################################################
    MSG = self . getMessage ( KEY                                            )
    ##########################################################################
    if                      ( len ( MSG ) <= 0                             ) :
      return
    ##########################################################################
    return self . LOG       ( MSG                                            )
  ############################################################################
  def toString             ( self , pb                                     ) :
    ##########################################################################
    BB   = pb
    ##########################################################################
    try                                                                      :
      BB = BB . decode     ( "utf-8"                                         )
    except                                                                   :
      pass
    ##########################################################################
    return BB
  ############################################################################
  def LoadFromFile                 ( self                                  ) :
    ##########################################################################
    self . Album    = LoadJson     ( self . Filename                         )
    ##########################################################################
    if                             ( "Album" in self . Album               ) :
      ########################################################################
      VXID          = self . Album [ "Album"                                 ]
      ########################################################################
      if                           ( 19 == len ( VXID )                    ) :
        ######################################################################
        self . Uuid = int          ( VXID                                    )
    ##########################################################################
    return
  ############################################################################
  def SaveToFile             ( self                                        ) :
    ##########################################################################
    N = StarDate             (                                               )
    N . Now                  (                                               )
    C = N . toDateTimeString ( self . TZ , " " , "%Y-%m-%d" , "%H:%M:%S"     )
    ##########################################################################
    self . Album [ "Modification" ] = C
    self . Album [ "Updated"      ] = N . Stardate
    ##########################################################################
    SaveJson                 ( self . Filename , self . Album                )
    ##########################################################################
    return
  ############################################################################
  def Exists ( self , KEY                                                  ) :
    return   ( KEY in self . Album                                           )
  ############################################################################
  def isCover ( self                                                       ) :
    return    ( len ( self . Album [ "Images" ] [ "Cover" ] ) > 0            )
  ############################################################################
  def CoverFile ( self                                                     ) :
    ##########################################################################
    D = self . DIR
    C = self . Album [ "Images" ] [ "Cover"                                  ]
    ##########################################################################
    return f"{D}/images/{C}"
  ############################################################################
  def Establish                    ( self , DB                             ) :
    ##########################################################################
    if                             ( self . Uuid > 0                       ) :
      ########################################################################
      self . EstablishFromDatabase (        DB                               )
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    if ( "Default" not in self . Album [ "Names" ]                         ) :
      ########################################################################
      DNAME = os . path . basename ( self . DIR                              )
      ########################################################################
      self  . Album [ "Names" ] [ "Default" ] = DNAME
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self   . ScanAlbumImages       (                                         )
    self   . ScanAlbumClips        (                                         )
    self   . ScanAlbumDPs          (                                         )
    self   . ScanAlbumFeatures     (                                         )
    self   . ScanAlbumDocuments    (                                         )
    self   . ScanAlbumTranslations (                                         )
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self   . SaveToFile            (                                         )
    ##########################################################################
    self   . logMessage            ( "EstablishCompleted"                    )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumImages                       ( self                         ) :
    ##########################################################################
    self  . logMessage                      ( "ScanAlbumImages..."           )
    ##########################################################################
    PDR   = self . DIR
    PWD   = f"{PDR}/images"
    ##########################################################################
    CWD   = os . getcwd                     (                                )
    os    . chdir                           ( PWD                            )
    ##########################################################################
    FILEs = GetImagesInCurrentDirectory     (                                )
    DIRs  = GetSubfoldersInCurrentDirectory (                                )
    ##########################################################################
    self  . Album [ "Images" ] [ "Folder"      ] = FILEs
    self  . Album [ "Images" ] [ "Directories" ] = DIRs
    ##########################################################################
    if                                  ( len ( FILEs ) > 0                ) :
      if                                ( "Cover.jpg" not in FILEs         ) :
        ######################################################################
        ADE = ""
        ######################################################################
        for F in FILEs                                                       :
          ####################################################################
          if                            ( F . endswith ( "h.jpg"         ) ) :
            ADE = F
          elif                          ( F . endswith ( "bh.jpg"        ) ) :
            ADE = F
        ######################################################################
        if                              ( len ( ADE ) > 0                  ) :
          ####################################################################
          MergeCoverPosters             ( f"{PWD}/{F}"                       )
          FILEs = GetImagesInCurrentDirectory (                              )
          self  . Album [ "Images" ] [ "Folder" ] = FILEs
          ####################################################################
          self  . logMessage            ( "CreateAlbumCover"                 )
    ##########################################################################
    if ( "Cover" not in self  . Album [ "Images" ] )                         :
      ########################################################################
      if                                ( len ( FILEs ) > 0                ) :
        ######################################################################
        if                              ( "Cover.jpg" in FILEs             ) :
          ####################################################################
          self  . Album [ "Images" ] [ "Cover" ] = "Cover.jpg"
          ####################################################################
        else                                                                 :
          ####################################################################
          CIMG  = ""
          ####################################################################
          for F in FILEs                                                     :
            ##################################################################
            if ( ( "bh.jpg" not in F ) and ( "h.jpg" in F ) )                :
              CIMG = F
          ####################################################################
          if ( len ( CIMG ) > 0                                            ) :
            ##################################################################
            self . Album [ "Images" ] [ "Cover" ] = CIMG
    ##########################################################################
    self  . Album [ "Images" ] [ "Subfolders" ] = {                          }
    ##########################################################################
    for D in DIRs                                                            :
      ########################################################################
      F   = f"{PDF}/{D}"
      ########################################################################
      os  . chdir                           ( F                              )
      ########################################################################
      IMG = GetImagesInCurrentDirectory     (                                )
      self  . Album [ "Images" ] [ "Subfolders" ] [ D ] = IMG
    ##########################################################################
    os    . chdir                           ( CWD                            )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumClips                        ( self                         ) :
    ##########################################################################
    self  . logMessage                      ( "ScanAlbumClips..."            )
    ##########################################################################
    PWD   = self . DIR
    PWD   = f"{PWD}/videos"
    ##########################################################################
    CWD   = os . getcwd                     (                                )
    os    . chdir                           ( PWD                            )
    ##########################################################################
    FILEs = GetFilmsInCurrentDirectory      (                                )
    DIRs  = GetSubfoldersInCurrentDirectory (                                )
    ##########################################################################
    self  . Album [ "Videos" ] [ "Clips"       ] = FILEs
    self  . Album [ "Videos" ] [ "Directories" ] = DIRs
    self  . Album [ "Videos" ] [ "Subfolders"  ] = {                         }
    ##########################################################################
    for D in DIRs                                                            :
      ########################################################################
      F   = f"{PWD}/{D}"
      M3U = f"{F}/Album.m3u"
      SPs =                                 [                                ]
      ########################################################################
      os  . chdir                           ( D                              )
      ########################################################################
      FILEs = GetFilmsInCurrentDirectory    (                                )
      M3UPF = Path                          ( M3U                            )
      ########################################################################
      if                                    ( M3UPF . is_file (          ) ) :
        ######################################################################
        SPs = M3UtoFilms                    ( M3U , False                    )
      ########################################################################
      FVs   =                               { "Clips" : FILEs              , \
                                              "Order" : SPs                  }
      ########################################################################
      self  . Album [ "Videos" ] [ "Subfolders" ] [ D ] = FVs
    ##########################################################################
    os    . chdir                           ( CWD                            )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumDPs                        ( self                           ) :
    ##########################################################################
    self  . logMessage                    ( "ScanDPs..."                     )
    ##########################################################################
    PWD   = self . DIR
    PWD   = f"{PWD}/DP"
    DPs   =                               [                                  ]
    ##########################################################################
    CWD   = os . getcwd                   (                                  )
    os    . chdir                         ( PWD                              )
    ##########################################################################
    FILEs = GetFilmsInCurrentDirectory    (                                  )
    ##########################################################################
    M3U   = f"{PWD}/DP.m3u"
    M3UPF = Path                          ( M3U                              )
    ##########################################################################
    if                                    ( M3UPF . is_file (            ) ) :
      ########################################################################
      DPs = M3UtoFilms                    ( M3U , False                      )
    ##########################################################################
    self  . Album [ "Videos" ] [ "DP" ] = { "Clips" : FILEs                , \
                                            "Order" : DPs                    }
    ##########################################################################
    os    . chdir                         ( CWD                              )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumFeatures ( self                                             ) :
    ##########################################################################
    self . logMessage   ( "ScanFeatures..."                                  )
    ##########################################################################
    PWD   = self . DIR
    PWD   = f"{PWD}/Features"
    DPs   =                               [                                  ]
    ##########################################################################
    CWD   = os . getcwd                   (                                  )
    os    . chdir                         ( PWD                              )
    ##########################################################################
    FILEs = GetFilmsInCurrentDirectory    (                                  )
    ##########################################################################
    os    . chdir                         ( CWD                              )
    ##########################################################################
    M3U   = f"{PWD}/Features.m3u"
    M3UPF = Path                          ( M3U                              )
    ##########################################################################
    if                                    ( M3UPF . is_file (            ) ) :
      ########################################################################
      DPs = M3UtoFilms                    ( M3U , False                      )
    ##########################################################################
    self  . Album [ "Videos" ] [ "Features" ] = { "Clips" : FILEs          , \
                                                  "Order" : DPs              }
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumDocuments ( self                                            ) :
    ##########################################################################
    self . logMessage    ( "ScanDocuments..."                                )
    ##########################################################################
    DDD  = self . DIR
    ##########################################################################
    ## 影集片段描述
    ##########################################################################
    FFF  = "scripts/Chapters.txt"
    SSS  = f"{DDD}/{FFF}"
    ##########################################################################
    PPP  = Path          ( SSS                                               )
    ##########################################################################
    if                   ( PPP . is_file (                               ) ) :
      ########################################################################
      self . Album [ "Documents" ] [ "Chapters" ] = FFF
    ##########################################################################
    ## 影集整體描述
    ##########################################################################
    FFF  = "subtitles/Description.txt"
    SSS  = f"{DDD}/{FFF}"
    ##########################################################################
    PPP  = Path          ( SSS                                               )
    ##########################################################################
    if                   ( PPP . is_file (                               ) ) :
      ########################################################################
      self . Album [ "Documents" ] [ "Description" ] = FFF
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumTranslations                ( self                          ) :
    ##########################################################################
    self . logMessage                      ( "ScanTranslations..."           )
    ##########################################################################
    PWD  = self . DIR
    PWD  = f"{PWD}/subtitles"
    ##########################################################################
    CWD  = os . getcwd                     (                                 )
    os   . chdir                           ( PWD                             )
    ##########################################################################
    DIRs = GetSubfoldersInCurrentDirectory (                                 )
    ##########################################################################
    self . Album [ "Translations" ] [ "Directories" ] = DIRs
    ##########################################################################
    for D in DIRs                                                            :
      ########################################################################
      F  = f"{PWD}/{D}"
      ########################################################################
      os . chdir                           ( F                               )
      AV = GetAssInCurrentDirectory        (                                 )
      ########################################################################
      self . Album [ "Translations" ] [ D ] = { "Subtitles" : AV             }
    ##########################################################################
    os   . chdir                           ( CWD                             )
    ##########################################################################
    return
  ############################################################################
  def EstablishFromDatabase     ( self , DB                                ) :
    ##########################################################################
    self . GetNamesFromDatabase (        DB                                  )
    self . ScanAlbumIdentifiers (        DB                                  )
    self . ScanAlbumVendors     (        DB                                  )
    self . ScanAlbumLinks       (        DB                                  )
    ##########################################################################
    self . Album [ "Edited" ] = True
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def GetEntityNamesFromDatabase ( self , DB , NAMTAB , UUID               ) :
    ##########################################################################
    NDBS   =                     {                                           }
    LCS    =                     [                                           ]
    ##########################################################################
    QQ     = f"""select `locality` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                 group by `locality` asc ;"""
    QQ     = " " . join          ( QQ . split (                            ) )
    DB     . Query               ( QQ                                        )
    RR     = DB . FetchAll       (                                           )
    ##########################################################################
    if                           ( RR in [ False , None ]                  ) :
      return                     {                                           }
    ##########################################################################
    for R in RR                                                              :
      ########################################################################
      LC   = int                 ( R [ 0                                   ] )
      ########################################################################
      QQ   = f"""select `name` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                   and ( `locality` = {LC} )
                 order by `priority` asc ;"""
      QQ   = " " . join          ( QQ . split (                            ) )
      DB   . Query               ( QQ                                        )
      NN   = DB . FetchAll       (                                           )
      ########################################################################
      if                         ( NN in [ False , None ]                  ) :
        return
      ########################################################################
      NS   =                     [                                           ]
      ########################################################################
      for N in NN                                                            :
        ######################################################################
        S  = self . toString     ( N [ 0                                   ] )
        ######################################################################
        if                       ( len ( S ) <= 0                          ) :
          continue
        ######################################################################
        NS . append              ( S                                         )
      ########################################################################
      if                         ( len ( NS ) <= 0                         ) :
        continue
      ########################################################################
      LCS  . append               ( LC                                       )
      NDBS [ f"{LC}" ] = NS
    ##########################################################################
    NDBS [ "Localities" ] = LCS
    ##########################################################################
    return NDBS
  ############################################################################
  def GetNamesFromDatabase   ( self , DB                                   ) :
    ##########################################################################
    self   . logMessage      ( "GetNames..."                                 )
    ##########################################################################
    VASTAB = self . Tables   [ "VideoAlbums" ] [ "Subordination"             ]
    NAMTAB = VASTAB          [ "NamesEditing"                                ]
    NDBS   = self . GetEntityNamesFromDatabase ( DB , NAMTAB , self . Uuid   )
    self . Album [ "Names" ] [ "Database" ] = NDBS
    ##########################################################################
    return
  ############################################################################
  def GetNamesForEntity      ( self , DB , UUID , NAMTAB                   ) :
    ##########################################################################
    NDBS   =                 {                                               }
    LCS    =                 [                                               ]
    ##########################################################################
    QQ     = f"""select `locality` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                 group by `locality` asc ;"""
    QQ     = " " . join      ( QQ . split (                                ) )
    DB     . Query           ( QQ                                            )
    RR     = DB . FetchAll   (                                               )
    ##########################################################################
    if                       ( RR in [ False , None ]                      ) :
      return
    ##########################################################################
    for R in RR                                                              :
      ########################################################################
      LC   = int             ( R [ 0                                       ] )
      ########################################################################
      QQ   = f"""select `name` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                   and ( `locality` = {LC} )
                 order by `priority` asc ;"""
      QQ   = " " . join      ( QQ . split (                                ) )
      DB   . Query           ( QQ                                            )
      NN   = DB . FetchAll   (                                               )
      ########################################################################
      if                     ( NN in [ False , None ]                      ) :
        return
      ########################################################################
      NS   =                 [                                               ]
      ########################################################################
      for N in NN                                                            :
        ######################################################################
        S  = self . toString ( N [ 0                                       ] )
        ######################################################################
        if                   ( len ( S ) <= 0                              ) :
          continue
        ######################################################################
        NS . append          ( S                                             )
      ########################################################################
      if                     ( len ( NS ) <= 0                             ) :
        continue
      ########################################################################
      LCS . append           ( LC                                            )
      NDBS [ f"{LC}" ] = NS
    ##########################################################################
    NDBS [ "Localities" ] = LCS
    ##########################################################################
    self . Album [ "Names" ] [ f"{UUID}" ] = NDBS
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumIdentifiers   ( self , DB                                   ) :
    ##########################################################################
    self   . logMessage      ( "ScanIdentifiers..."                          )
    ##########################################################################
    IDFTAB = self . Tables   [ "IdentifierListings" ] [ "Identifiers"        ]
    UUID   = self . Uuid
    ##########################################################################
    QQ     = f"""select `name` from {IDFTAB}
                 where ( `uuid` = {UUID} )
                   and ( `type` = 76 )
                 group by `id` asc ;"""
    QQ     = " " . join      ( QQ . split (                                ) )
    DB     . Query           ( QQ                                            )
    RR     = DB . FetchAll   (                                               )
    ##########################################################################
    if                       ( RR in [ False , None ]                      ) :
      ########################################################################
      self . Album [ "Identifiers" ] = [                                     ]
      ########################################################################
      return
    ##########################################################################
    LCS    =                 [                                               ]
    ##########################################################################
    for R in RR                                                              :
      ########################################################################
      LC   = self . toString ( R [ 0                                       ] )
      ########################################################################
      if                     ( len ( LC ) <= 0                             ) :
        continue
      ########################################################################
      LCS . append           ( LC                                            )
    ##########################################################################
    self . Album [ "Identifiers" ] = LCS
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumVendors         ( self , DB                                 ) :
    ##########################################################################
    self   . logMessage        ( "ScanVendors..."                            )
    ##########################################################################
    RELTAB = self . Tables     [ "OrganizationListings" ] [ "RelationVideos" ]
    UUID   = self . Uuid
    ##########################################################################
    QQ     = f"""select `first` from {RELTAB}
                 where ( `second` = {UUID} )
                   and ( `t1` = 38 )
                   and ( `t2` = 76 )
                   and ( `relation` = 1 )
                 group by `first` asc ;"""
    UUIDs  = DB . ObtainUuids  ( " " . join ( QQ . split (               ) ) )
    ##########################################################################
    if                         ( len ( UUIDs ) <= 0                        ) :
      self . Album [ "Vendors" ] = [                                         ]
      return
    ##########################################################################
    NAMTAB = self . Tables     [ "OrganizationListings" ] [ "NamesEditing"   ]
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      self . GetNamesForEntity ( DB , U , NAMTAB                             )
    ##########################################################################
    self . Album [ "Vendors" ] = UUIDs
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumLinks           ( self , DB                                 ) :
    ##########################################################################
    self   . logMessage        ( "ScanLinks..."                              )
    ##########################################################################
    LINKs  =                   { "IAFD"           : False                  , \
                                 "AdultDvdEmpire" : False                  , \
                                 "Private"        : False                  , \
                                 "21Sextury"      : False                  , \
                                 "DDF"            : False                  , \
                                 "LegalPorno"     : False                  , \
                                 "Dorcel"         : False                  , \
                                 "Webpages"       : [                      ] }
    UUID   = self . Uuid
    ##########################################################################
    RELTAB = "`affiliations`.`relations_people_0014`"
    WEBTAB = "`cios`.`webpages`"
    ##########################################################################
    QQ     = f"""select `second` from {RELTAB}
                 where ( `first` = {UUID} )
                   and ( `t1` = 76 )
                   and ( `t2` = 208 )
                   and ( `relation` = 10 )
                 order by `id` asc ;"""
    UUIDs  = DB . ObtainUuids  ( " " . join ( QQ . split (               ) ) )
    ##########################################################################
    LINKs [ "Webpages" ] = UUIDs
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      QQ   = f"select `name` from {WEBTAB} where ( `uuid` = {U} ) ;"
      DB   . Query             ( QQ                                          )
      RR   = DB . FetchOne     (                                             )
      ########################################################################
      if                       ( RR in [ False , None ]                    ) :
        continue
      ########################################################################
      if                       ( len ( RR ) != 1                           ) :
        continue
      ########################################################################
      URL  = self . toString   ( RR [ 0                                    ] )
      ########################################################################
      if                       ( len ( URL ) <= 0                          ) :
        continue
      ########################################################################
      LINKs [ f"{U}" ] = URL
      ########################################################################
      LURL = URL . lower       (                                             )
      ########################################################################
      if                       ( "iafd.com" in LURL                        ) :
        ######################################################################
        LINKs [ "IAFD" ] = True
        ######################################################################
        continue
      ########################################################################
      if ( "https://www.adultdvdempire.com/" in LURL                       ) :
        ######################################################################
        LINKs [ "AdultDvdEmpire" ] = True
        ######################################################################
        continue
      ########################################################################
      if                       ( "private.com" in LURL                     ) :
        ######################################################################
        LINKs [ "Private" ] = True
        ######################################################################
        continue
      ########################################################################
      if                       ( "21sextury.com" in LURL              ) :
        ######################################################################
        LINKs [ "21Sextury" ] = True
        ######################################################################
        continue
      ########################################################################
      if                       ( "ddfnetwork.com" in LURL                  ) :
        ######################################################################
        LINKs [ "DDF" ] = True
        ######################################################################
        continue
      ########################################################################
      if                       ( "legalporn0.com" in LURL                  ) :
        ######################################################################
        LINKs [ "LegalPorno" ] = True
        ######################################################################
        continue
      ########################################################################
      if                       ( "analvids.com" in LURL                    ) :
        ######################################################################
        LINKs [ "LegalPorno" ] = True
        ######################################################################
        continue
    ##########################################################################
    self   . Album [ "Links" ] [ "Album" ] = LINKs
    ##########################################################################
    return
  ############################################################################
  def GetImageLinksFromDatabase ( self , DB , PCID , JS                    ) :
    ##########################################################################
    RELTAB = "`affiliations`.`relations_pictures_0015`"
    WEBTAB = "`cios`.`webpages`"
    ##########################################################################
    QQ     = f"""select `second` from {RELTAB}
                 where ( `first` = {PCID} )
                   and ( `t1` = 9 )
                   and ( `t2` = 208 )
                   and ( `relation` = 1 )
                 order by `id` asc ;"""
    UUIDs  = DB . ObtainUuids   ( " " . join ( QQ . split (              ) ) )
    ##########################################################################
    JS [ "Webpages" ] = UUIDs
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      QQ   = f"select `name` from {WEBTAB} where ( `uuid` = {U} ) ;"
      DB   . Query              ( QQ                                         )
      RR   = DB . FetchOne      (                                            )
      ########################################################################
      if                        ( RR in [ False , None ]                   ) :
        continue
      ########################################################################
      if                        ( len ( RR ) != 1                          ) :
        continue
      ########################################################################
      URL  = self . toString    ( RR [ 0                                   ] )
      ########################################################################
      if                        ( len ( URL ) <= 0                         ) :
        continue
      ########################################################################
      JS [ f"{U}" ] = URL
    ##########################################################################
    return JS
  ############################################################################
  def SyncCoversFromDatabase         ( self , DB                           ) :
    ##########################################################################
    self      . logMessage           ( "PullCovers..."                       )
    ##########################################################################
    PUIDs     =                      [                                       ]
    ##########################################################################
    if   ( "Database" in self . Album [ "Images"                         ] ) :
      ########################################################################
      if ( "Pictures" in self . Album [ "Images" ] [ "Database"          ] ) :
        ######################################################################
        PUIDs = self . Album [ "Images" ] [ "Database" ] [ "Pictures"        ]
      ########################################################################
      else                                                                   :
        ######################################################################
        IMGs  =                      { "Cover"    : 0                      , \
                                       "Pictures" : [                      ] }
        self  . Album [ "Images" ] [ "Database" ] = IMGs
    ##########################################################################
    VUID      = self . Uuid
    DDIR      = self . DIR
    TABs      = self . AlbumCoverTables
    ##########################################################################
    VIDTAB    = TABs                 [ "RelationVideos"                      ]
    PICTAB    = TABs                 [ "Information"                         ]
    DOPTAB    = TABs                 [ "Depot"                               ]
    ##########################################################################
    REL       = Relation             (                                       )
    ##########################################################################
    REL       . set                  ( "first"  , VUID                       )
    REL       . setT1                ( "Album"                               )
    REL       . setT2                ( "Picture"                             )
    REL       . setRelation          ( "Subordination"                       )
    ##########################################################################
    PCIDs     = REL . Subordination  ( DB , VIDTAB                           )
    ##########################################################################
    for PCID in PCIDs                                                        :
      ########################################################################
      if                             ( PCID in PUIDs                       ) :
        continue
      ########################################################################
      PIC     = PictureItem          (                                       )
      ########################################################################
      PXID    = f"{PCID}"
      PIC     . UUID = PCID
      SUFFIX  = ""
      ########################################################################
      INFO    = PIC . GetInformation ( DB , PICTAB , PCID                    )
      if                             ( INFO in [ False , None ]            ) :
        continue
      ########################################################################
      SUFFIX  = INFO                 [ "Suffix"                              ]
      ########################################################################
      if                             ( len ( SUFFIX ) <= 0                 ) :
        continue
      ########################################################################
      FCID    = f"{PCID}.{SUFFIX}"
      FNAM    = f"{DDIR}/images/{FCID}"
      PIC     . Export               ( DB , DOPTAB , FNAM                    )
      PUIDs   . append               ( PCID                                  )
      ########################################################################
      PAKI    =                      { "Information" :   INFO              , \
                                       "Files"       : [ FCID              ] }
      PAKI    = self . GetImageLinksFromDatabase ( DB , PCID , PAKI          )
      self    . Album [ "Images" ] [ "Database" ] [ PXID ] = PAKI
      self    . Album [ "Images" ] [ "Folder" ] . append ( FCID              )
      ########################################################################
      MSG     = self . getMessage    ( "ExportCoverToFile"                   )
      MSG     = MSG  . replace       ( "$(FILE)" , FCID                      )
      self    . LOG                  ( MSG                                   )
    ##########################################################################
    self      . Album [ "Images" ] [ "Database" ] [ "Pictures" ] = PUIDs
    ##########################################################################
    return
  ############################################################################
  def SyncCoversToDatabase ( self , DB                                     ) :
    ##########################################################################
    self . logMessage      ( "SyncCovers..."                                 )
    ##########################################################################
    if                     ( "Images" not in self . Album                  ) :
      return
    ##########################################################################
    if                     ( "Folder" not in self . Album [ "Images" ]     ) :
      return
    ##########################################################################
    FOLDERs = self . Album [ "Images" ] [ "Folder"                           ]
    COVER   = self . Album [ "Images" ] [ "Cover"                            ]
    ##########################################################################
    if                     ( len ( FOLDERs ) <= 0                          ) :
      return
    ##########################################################################
    if                     ( len ( COVER ) > 0                             ) :
      if                   ( COVER not in FOLDERs                          ) :
        return
    ##########################################################################
    VUID    = self . Uuid
    DDIR    = self . DIR
    OPTS    = self . CoverOpts
    TABs    = self . AlbumCoverTables
    ##########################################################################
    PICTAB  = OPTS         [ "Master"                                        ]
    VIDTAB  = TABs         [ "RelationVideos"                                ]
    CVRTAB  = TABs         [ "RelationCovers"                                ]
    PUIDs   =              [                                                 ]
    IMGs    =              { "Cover"    : 0                                , \
                             "Pictures" : [                                ] }
    ##########################################################################
    for F in FOLDERs                                                         :
      ########################################################################
      IFILE = f"{DDIR}/images/{F}"
      ########################################################################
      if                   ( not Path ( IFILE ) . is_file (              ) ) :
        continue
      ########################################################################
      PIC   = PictureItem  (                                                 )
      OKAY  = PIC . Load   (             IFILE                               )
      ########################################################################
      if                   ( not OKAY                                      ) :
        continue
      ########################################################################
      PIC   . PrepareForDB (                                                 )
      PIC   . ImportDB     ( DB , OPTS                                       )
      PUID  = int          ( PIC . UUID                                      )
      ########################################################################
      if                   ( PUID <= 0                                     ) :
        continue
      ########################################################################
      PINF  = PIC  . GetInformation ( DB , PICTAB , PUID                     )
      PXID  = f"{PUID}"
      MSG   = self . getMessage     ( "ImportCoverToDB"                      )
      MSG   = MSG  . replace        ( "$(FILE)" , F                          )
      MSG   = MSG  . replace        ( "$(UUID)" , f"{PUID}"                  )
      self  . LOG                   ( MSG                                    )
      ########################################################################
      REL   = Relation     (                                                 )
      ########################################################################
      REL   . set          ( "first"  , VUID                                 )
      REL   . set          ( "second" , PUID                                 )
      REL   . setT1        ( "Album"                                         )
      REL   . setT2        ( "Picture"                                       )
      REL   . setRelation  ( "Subordination"                                 )
      DB    . LockWrites   ( [ VIDTAB                                      ] )
      REL   . Join         ( DB , VIDTAB                                     )
      DB    . UnlockTables (                                                 )
      ########################################################################
      if                   ( F == COVER                                    ) :
        ######################################################################
        REL . setRelation  ( "Using"                                         )
        DB  . LockWrites   ( [ CVRTAB                                      ] )
        REL . Assure       ( DB , CVRTAB                                     )
        DB  . UnlockTables (                                                 )
        ######################################################################
        IMGs [ "Cover" ] = PUID
      ########################################################################
      if                   ( PUID not in PUIDs                             ) :
        ######################################################################
        PUIDs . append     ( PUID                                            )
        ######################################################################
        PAKI  =            { "Information" : PINF                          , \
                             "Files"       : [                             ] }
        PAKI  = self . GetImageLinksFromDatabase ( DB , PUID , PAKI          )
        IMGs [ PXID ] = PAKI
      ########################################################################
      if                   ( F not in IMGs [ PXID ] [ "Files" ]            ) :
        ######################################################################
        IMGs [ PXID ] [ "Files" ] . append ( F                               )
    ##########################################################################
    IMGs         [ "Pictures"              ] = PUIDs
    self . Album [ "Images" ] [ "Database" ] = IMGs
    ##########################################################################
    return
  ############################################################################
  def SyncActorsFromDatabase         ( self , DB                           ) :
    ##########################################################################
    self   . logMessage              ( "PullActors..."                       )
    ##########################################################################
    RELTAB = self . PeopleViewTables [ "RelationPeople"                      ]
    NAMTAB = self . PeopleViewTables [ "NamesEditing"                        ]
    VUID   = self . Uuid
    DDIR   = self . DIR
    self   . Album [ "Roles" ] =     {                                       }
    ##########################################################################
    QQ     = f"""select `first` from {RELTAB}
                 where ( `second` = {VUID} )
                   and ( `t1` = 7 )
                   and ( `t2` = 76 )
                   and ( `relation` = 1 )
                 order by `reverse` asc ;"""
    PUIDs  = DB . ObtainUuids        ( " " . join ( QQ . split (         ) ) )
    ##########################################################################
    if                               ( len ( PUIDs ) <= 0                  ) :
      return
    ##########################################################################
    CNT    = 0
    ##########################################################################
    DB     . LockWrites              ( [ RELTAB                            ] )
    for PUID in PUIDs                                                        :
      ########################################################################
      QQ   = f"""update {RELTAB}
                 set `reverse` = {CNT}
                 where ( `first` = {PUID} )
                   and ( `second` = {VUID} )
                   and ( `t1` = 7 )
                   and ( `t2` = 76 )
                   and ( `relation` = 1 ) ;"""
      DB   . Query                   ( " " . join ( QQ . split (         ) ) )
      ########################################################################
      CNT  = CNT + 1
    ##########################################################################
    DB     . UnlockTables            (                                       )
    ##########################################################################
    self   . Album [ "Roles" ] [ "Actors" ] = PUIDs
    ##########################################################################
    for PUID in PUIDs                                                        :
      ########################################################################
      PXID = f"{PUID}"
      NDBS = self . GetEntityNamesFromDatabase ( DB , NAMTAB , PUID          )
      ########################################################################
      self . Album [ "Roles" ] [ PXID ] = NDBS
      ########################################################################
      SDIR =                         [ "images" , "faces" , "data" , "test"  ]
      FDIR = f"{DDIR}/roles/{PXID}"
      FJSN = f"{FDIR}/actor.json"
      ########################################################################
      if                             ( not Path ( FDIR ) . is_dir  (     ) ) :
        ######################################################################
        os . mkdir                   ( FDIR                                  )
        ######################################################################
        for S in SDIR                                                        :
          ####################################################################
          K = f"{FDIR}/{S}"
          ####################################################################
          if                         ( not Path ( K    ) . is_dir  (     ) ) :
            ##################################################################
            os . mkdir               ( K                                     )
      ########################################################################
      if                             ( not Path ( FJSN ) . is_file (     ) ) :
        ######################################################################
        PJ =                         { "People" : PUID                     , \
                                       "Names"  : NDBS                       }
        ######################################################################
        SaveJson                     ( FJSN , PJ                             )
      ########################################################################
      MSG  = self . getMessage       ( "CreateActorInfos"                    )
      MSG  = MSG  . replace          ( "$(UUID)" , PXID                      )
      self . LOG                     ( MSG                                   )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
