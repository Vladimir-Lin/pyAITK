# -*- coding: utf-8 -*-
##############################################################################
## Episode
## 影集
##############################################################################
import os
import sys
import time
import threading
import json
import shutil
import glob
##############################################################################
import pathlib
from   pathlib                     import Path
##############################################################################
import AITK
##############################################################################
from   AITK . Calendars . StarDate import StarDate as StarDate
from   AITK . Documents . JSON     import Load     as LoadJson
from   AITK . Documents . JSON     import Save     as SaveJson
##############################################################################
class Episode    (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def Clear               ( self                                           ) :
    ##########################################################################
    self . Album        = {                                                  }
    self . Settings     = {                                                  }
    self . Translations = {                                                  }
    self . Messages     = {                                                  }
    self . Tables       = {                                                  }
    self . Uuid         = 0
    self . LogFunc      = None
    self . Filename     = ""
    self . DIR          = ""
    self . TZ           = "Asia/Taipei"
    ##########################################################################
    return
  ############################################################################
  def LOG          ( self , MSG                                            ) :
    ##########################################################################
    if             ( self . LogFunc in [ False , None ]                    ) :
      return
    ##########################################################################
    self . LogFunc (        MSG                                              )
    ##########################################################################
    return
  ############################################################################
  def getMessage           ( self , KEY                                    ) :
    ##########################################################################
    if                     ( KEY not in self . Messages                    ) :
      return ""
    ##########################################################################
    return self . Messages [        KEY                                      ]
  ############################################################################
  def logMessage            ( self , KEY                                   ) :
    ##########################################################################
    MSG = self . getMessage ( KEY                                            )
    ##########################################################################
    if                      ( len ( MSG ) <= 0                             ) :
      return
    ##########################################################################
    return self . LOG       ( MSG                                            )
  ############################################################################
  def toString             ( self , pb                                     ) :
    ##########################################################################
    BB   = pb
    ##########################################################################
    try                                                                      :
      BB = BB . decode     ( "utf-8"                                         )
    except                                                                   :
      pass
    ##########################################################################
    return BB
  ############################################################################
  def LoadFromFile                 ( self                                  ) :
    ##########################################################################
    self . Album    = LoadJson     ( self . Filename                         )
    ##########################################################################
    if                             ( "Album" in self . Album               ) :
      ########################################################################
      VXID          = self . Album [ "Album"                                 ]
      ########################################################################
      if                           ( 19 == len ( VXID )                    ) :
        ######################################################################
        self . Uuid = int          ( VXID                                    )
    ##########################################################################
    return
  ############################################################################
  def SaveToFile             ( self                                        ) :
    ##########################################################################
    N = StarDate             (                                               )
    N . Now                  (                                               )
    C = N . toDateTimeString ( self . TZ , " " , "%Y-%m-%d" , "%H:%M:%S"     )
    ##########################################################################
    self . Album [ "Modification" ] = C
    self . Album [ "Updated"      ] = N . Stardate
    ##########################################################################
    SaveJson                 ( self . Filename , self . Album                )
    ##########################################################################
    return
  ############################################################################
  def Exists ( self , KEY                                                  ) :
    return   ( KEY in self . Album                                           )
  ############################################################################
  def Establish                    ( self , DB                             ) :
    ##########################################################################
    if                             ( self . Uuid > 0                       ) :
      ########################################################################
      self . EstablishFromDatabase (        DB                               )
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    if ( "Default" not in self . Album [ "Names" ]                         ) :
      ########################################################################
      DNAME = os . path . basename ( self . DIR                              )
      ########################################################################
      self  . Album [ "Names" ] [ "Default" ] = DNAME
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self   . SaveToFile            (                                         )
    ##########################################################################
    return
  ############################################################################
  def EstablishFromDatabase     ( self , DB                                ) :
    ##########################################################################
    self . GetNamesFromDatabase (        DB                                  )
    ##########################################################################
    self . Album [ "Edited" ] = True
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def GetNamesFromDatabase   ( self , DB                                   ) :
    ##########################################################################
    self   . logMessage      ( "GetNames..."                                 )
    ##########################################################################
    VASTAB = self . Tables   [ "VideoAlbums" ] [ "Subordination"             ]
    NAMTAB = VASTAB          [ "NamesEditing"                                ]
    UUID   = self . Uuid
    NDBS   =                 {                                               }
    LCS    =                 [                                               ]
    ##########################################################################
    QQ     = f"""select `locality` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                 group by `locality` asc ;"""
    QQ     = " " . join      ( QQ . split (                                ) )
    DB     . Query           ( QQ                                            )
    RR     = DB . FetchAll   (                                               )
    ##########################################################################
    if                       ( RR in [ False , None ]                      ) :
      return
    ##########################################################################
    for R in RR                                                              :
      ########################################################################
      LC   = int             ( R [ 0                                       ] )
      ########################################################################
      QQ   = f"""select `name` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                   and ( `locality` = {LC} )
                 order by `priority` asc ;"""
      QQ   = " " . join      ( QQ . split (                                ) )
      DB   . Query           ( QQ                                            )
      NN   = DB . FetchAll   (                                               )
      ########################################################################
      if                     ( NN in [ False , None ]                      ) :
        return
      ########################################################################
      NS   =                 [                                               ]
      ########################################################################
      for N in NN                                                            :
        ######################################################################
        S  = self . toString ( N [ 0                                       ] )
        ######################################################################
        if                   ( len ( S ) <= 0                              ) :
          continue
        ######################################################################
        NS . append          ( S                                             )
      ########################################################################
      if                     ( len ( NS ) <= 0                             ) :
        continue
      ########################################################################
      LCS . append           ( LC                                            )
      NDBS [ f"{LC}" ] = NS
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    NDBS [ "Localities" ] = LCS
    self . Album [ "Names" ] [ "Database" ] = NDBS
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ############################################################################
##############################################################################
