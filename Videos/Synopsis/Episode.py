# -*- coding: utf-8 -*-
##############################################################################
## Episode
## 影集
##############################################################################
import os
import sys
import time
import threading
import json
import shutil
import glob
##############################################################################
import pathlib
from   pathlib                      import Path
##############################################################################
import AITK
##############################################################################
from   AITK . Calendars . StarDate  import StarDate                        as StarDate
from   AITK . Documents . JSON      import Load                            as LoadJson
from   AITK . Documents . JSON      import Save                            as SaveJson
##############################################################################
from   AITK . Videos    . Utilities import SilentRun                       as SilentRun
from   AITK . Videos    . Utilities import M3UtoFilms                      as M3UtoFilms
from   AITK . Videos    . Utilities import GetFilmsInCurrentDirectory      as GetFilmsInCurrentDirectory
from   AITK . Videos    . Utilities import GetImagesInCurrentDirectory     as GetImagesInCurrentDirectory
from   AITK . Videos    . Utilities import GetAssInCurrentDirectory        as GetAssInCurrentDirectory
from   AITK . Videos    . Utilities import GetSubfoldersInCurrentDirectory as GetSubfoldersInCurrentDirectory
##############################################################################
class Episode    (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def Clear               ( self                                           ) :
    ##########################################################################
    self . Album        = {                                                  }
    self . Settings     = {                                                  }
    self . Translations = {                                                  }
    self . Messages     = {                                                  }
    self . Tables       = {                                                  }
    self . Uuid         = 0
    self . LogFunc      = None
    self . Filename     = ""
    self . DIR          = ""
    self . TZ           = "Asia/Taipei"
    ##########################################################################
    return
  ############################################################################
  def LOG          ( self , MSG                                            ) :
    ##########################################################################
    if             ( self . LogFunc in [ False , None ]                    ) :
      return
    ##########################################################################
    self . LogFunc (        MSG                                              )
    ##########################################################################
    return
  ############################################################################
  def getMessage           ( self , KEY                                    ) :
    ##########################################################################
    if                     ( KEY not in self . Messages                    ) :
      return ""
    ##########################################################################
    return self . Messages [        KEY                                      ]
  ############################################################################
  def logMessage            ( self , KEY                                   ) :
    ##########################################################################
    MSG = self . getMessage ( KEY                                            )
    ##########################################################################
    if                      ( len ( MSG ) <= 0                             ) :
      return
    ##########################################################################
    return self . LOG       ( MSG                                            )
  ############################################################################
  def toString             ( self , pb                                     ) :
    ##########################################################################
    BB   = pb
    ##########################################################################
    try                                                                      :
      BB = BB . decode     ( "utf-8"                                         )
    except                                                                   :
      pass
    ##########################################################################
    return BB
  ############################################################################
  def LoadFromFile                 ( self                                  ) :
    ##########################################################################
    self . Album    = LoadJson     ( self . Filename                         )
    ##########################################################################
    if                             ( "Album" in self . Album               ) :
      ########################################################################
      VXID          = self . Album [ "Album"                                 ]
      ########################################################################
      if                           ( 19 == len ( VXID )                    ) :
        ######################################################################
        self . Uuid = int          ( VXID                                    )
    ##########################################################################
    return
  ############################################################################
  def SaveToFile             ( self                                        ) :
    ##########################################################################
    N = StarDate             (                                               )
    N . Now                  (                                               )
    C = N . toDateTimeString ( self . TZ , " " , "%Y-%m-%d" , "%H:%M:%S"     )
    ##########################################################################
    self . Album [ "Modification" ] = C
    self . Album [ "Updated"      ] = N . Stardate
    ##########################################################################
    SaveJson                 ( self . Filename , self . Album                )
    ##########################################################################
    return
  ############################################################################
  def Exists ( self , KEY                                                  ) :
    return   ( KEY in self . Album                                           )
  ############################################################################
  def Establish                    ( self , DB                             ) :
    ##########################################################################
    if                             ( self . Uuid > 0                       ) :
      ########################################################################
      self . EstablishFromDatabase (        DB                               )
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    if ( "Default" not in self . Album [ "Names" ]                         ) :
      ########################################################################
      DNAME = os . path . basename ( self . DIR                              )
      ########################################################################
      self  . Album [ "Names" ] [ "Default" ] = DNAME
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self   . ScanAlbumImages       (                                         )
    self   . ScanAlbumClips        (                                         )
    self   . ScanAlbumDPs          (                                         )
    self   . ScanAlbumFeatures     (                                         )
    self   . ScanAlbumTranslations (                                         )
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self   . SaveToFile            (                                         )
    ##########################################################################
    self   . logMessage            ( "EstablishCompleted"                    )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumImages                       ( self                         ) :
    ##########################################################################
    self  . logMessage                      ( "ScanAlbumImages..."           )
    ##########################################################################
    PDR   = self . DIR
    PWD   = f"{PDR}/images"
    ##########################################################################
    CWD   = os . getcwd                     (                                )
    os    . chdir                           ( PWD                            )
    ##########################################################################
    FILEs = GetImagesInCurrentDirectory     (                                )
    DIRs  = GetSubfoldersInCurrentDirectory (                                )
    ##########################################################################
    self  . Album [ "Images" ] [ "Folder"      ] = FILEs
    self  . Album [ "Images" ] [ "Directories" ] = DIRs
    ##########################################################################
    if ( "Cover" not in self  . Album [ "Images" ] )                         :
      ########################################################################
      if                                ( len ( FILEs ) > 0                ) :
        ######################################################################
        if                              ( "Cover.jpg" in FILEs             ) :
          ####################################################################
          self  . Album [ "Images" ] [ "Cover" ] = "Cover.jpg"
          ####################################################################
        else                                                                 :
          ####################################################################
          CIMG  = ""
          ####################################################################
          for F in FILEs                                                     :
            ##################################################################
            if ( ( "bh.jpg" not in F ) and ( "h.jpg" in F ) )                :
              CIMG = F
          ####################################################################
          if ( len ( CIMG ) > 0                                            ) :
            ##################################################################
            self . Album [ "Images" ] [ "Cover" ] = CIMG
    ##########################################################################
    self  . Album [ "Images" ] [ "Subfolders" ] = {                          }
    ##########################################################################
    for D in DIRs                                                            :
      ########################################################################
      F   = f"{PDF}/{D}"
      ########################################################################
      os  . chdir                           ( F                              )
      ########################################################################
      IMG = GetImagesInCurrentDirectory     (                                )
      self  . Album [ "Images" ] [ "Subfolders" ] [ D ] = IMG
    ##########################################################################
    os    . chdir                           ( CWD                            )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumClips                        ( self                         ) :
    ##########################################################################
    self  . logMessage                      ( "ScanAlbumClips..."            )
    ##########################################################################
    PWD   = self . DIR
    PWD   = f"{PWD}/videos"
    ##########################################################################
    CWD   = os . getcwd                     (                                )
    os    . chdir                           ( PWD                            )
    ##########################################################################
    FILEs = GetFilmsInCurrentDirectory      (                                )
    DIRs  = GetSubfoldersInCurrentDirectory (                                )
    ##########################################################################
    self  . Album [ "Videos" ] [ "Clips"       ] = FILEs
    self  . Album [ "Videos" ] [ "Directories" ] = DIRs
    self  . Album [ "Videos" ] [ "Subfolders"  ] = {                         }
    ##########################################################################
    for D in DIRs                                                            :
      ########################################################################
      F   = f"{PWD}/{D}"
      M3U = f"{F}/Album.m3u"
      SPs =                                 [                                ]
      ########################################################################
      os  . chdir                           ( D                              )
      ########################################################################
      FILEs = GetFilmsInCurrentDirectory    (                                )
      M3UPF = Path                          ( M3U                            )
      ########################################################################
      if                                    ( M3UPF . is_file (          ) ) :
        ######################################################################
        SPs = M3UtoFilms                    ( M3U , False                    )
      ########################################################################
      FVs   =                               { "Clips" : FILEs              , \
                                              "Order" : SPs                  }
      ########################################################################
      self  . Album [ "Videos" ] [ "Subfolders" ] [ D ] = FVs
    ##########################################################################
    os    . chdir                           ( CWD                            )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumDPs                        ( self                           ) :
    ##########################################################################
    self  . logMessage                    ( "ScanDPs..."                     )
    ##########################################################################
    PWD   = self . DIR
    PWD   = f"{PWD}/DP"
    DPs   =                               [                                  ]
    ##########################################################################
    CWD   = os . getcwd                   (                                  )
    os    . chdir                         ( PWD                              )
    ##########################################################################
    FILEs = GetFilmsInCurrentDirectory    (                                  )
    ##########################################################################
    M3U   = f"{PWD}/DP.m3u"
    M3UPF = Path                          ( M3U                              )
    ##########################################################################
    if                                    ( M3UPF . is_file (            ) ) :
      ########################################################################
      DPs = M3UtoFilms                    ( M3U , False                      )
    ##########################################################################
    self  . Album [ "Videos" ] [ "DP" ] = { "Clips" : FILEs                , \
                                            "Order" : DPs                    }
    ##########################################################################
    os    . chdir                         ( CWD                              )
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumFeatures ( self                                             ) :
    ##########################################################################
    self . logMessage   ( "ScanFeatures..."                                  )
    ##########################################################################
    PWD   = self . DIR
    PWD   = f"{PWD}/Features"
    DPs   =                               [                                  ]
    ##########################################################################
    CWD   = os . getcwd                   (                                  )
    os    . chdir                         ( PWD                              )
    ##########################################################################
    FILEs = GetFilmsInCurrentDirectory    (                                  )
    ##########################################################################
    os    . chdir                         ( CWD                              )
    ##########################################################################
    M3U   = f"{PWD}/Features.m3u"
    M3UPF = Path                          ( M3U                              )
    ##########################################################################
    if                                    ( M3UPF . is_file (            ) ) :
      ########################################################################
      DPs = M3UtoFilms                    ( M3U , False                      )
    ##########################################################################
    self  . Album [ "Videos" ] [ "Features" ] = { "Clips" : FILEs          , \
                                                  "Order" : DPs              }
    ##########################################################################
    return
  ############################################################################
  def ScanAlbumTranslations                ( self                          ) :
    ##########################################################################
    self . logMessage                      ( "ScanTranslations..."           )
    ##########################################################################
    PWD  = self . DIR
    PWD  = f"{PWD}/subtitles"
    ##########################################################################
    CWD  = os . getcwd                     (                                 )
    os   . chdir                           ( PWD                             )
    ##########################################################################
    DIRs = GetSubfoldersInCurrentDirectory (                                 )
    ##########################################################################
    self . Album [ "Translations" ] [ "Directories" ] = DIRs
    ##########################################################################
    for D in DIRs                                                            :
      ########################################################################
      F  = f"{PWD}/{D}"
      ########################################################################
      os . chdir                           ( F                               )
      AV = GetAssInCurrentDirectory        (                                 )
      ########################################################################
      self . Album [ "Translations" ] [ D ] = { "Subtitles" : AV             }
    ##########################################################################
    os   . chdir                           ( CWD                             )
    ##########################################################################
    return
  ############################################################################
  def EstablishFromDatabase     ( self , DB                                ) :
    ##########################################################################
    self . GetNamesFromDatabase (        DB                                  )
    ##########################################################################
    self . Album [ "Edited" ] = True
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def GetNamesFromDatabase   ( self , DB                                   ) :
    ##########################################################################
    self   . logMessage      ( "GetNames..."                                 )
    ##########################################################################
    VASTAB = self . Tables   [ "VideoAlbums" ] [ "Subordination"             ]
    NAMTAB = VASTAB          [ "NamesEditing"                                ]
    UUID   = self . Uuid
    NDBS   =                 {                                               }
    LCS    =                 [                                               ]
    ##########################################################################
    QQ     = f"""select `locality` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                 group by `locality` asc ;"""
    QQ     = " " . join      ( QQ . split (                                ) )
    DB     . Query           ( QQ                                            )
    RR     = DB . FetchAll   (                                               )
    ##########################################################################
    if                       ( RR in [ False , None ]                      ) :
      return
    ##########################################################################
    for R in RR                                                              :
      ########################################################################
      LC   = int             ( R [ 0                                       ] )
      ########################################################################
      QQ   = f"""select `name` from {NAMTAB}
                 where ( `uuid` = {UUID} )
                   and ( `locality` = {LC} )
                 order by `priority` asc ;"""
      QQ   = " " . join      ( QQ . split (                                ) )
      DB   . Query           ( QQ                                            )
      NN   = DB . FetchAll   (                                               )
      ########################################################################
      if                     ( NN in [ False , None ]                      ) :
        return
      ########################################################################
      NS   =                 [                                               ]
      ########################################################################
      for N in NN                                                            :
        ######################################################################
        S  = self . toString ( N [ 0                                       ] )
        ######################################################################
        if                   ( len ( S ) <= 0                              ) :
          continue
        ######################################################################
        NS . append          ( S                                             )
      ########################################################################
      if                     ( len ( NS ) <= 0                             ) :
        continue
      ########################################################################
      LCS . append           ( LC                                            )
      NDBS [ f"{LC}" ] = NS
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    NDBS [ "Localities" ] = LCS
    self . Album [ "Names" ] [ "Database" ] = NDBS
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ############################################################################
##############################################################################
