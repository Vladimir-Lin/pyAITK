# -*- coding: utf-8 -*-
##############################################################################
## Descriptive
## 場景描述
##############################################################################
import os
import sys
import time
import datetime
import AITK
##############################################################################
class Anchor     (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear            ( self                                              ) :
    ##########################################################################
    self . Timestamp = -1
    self . Action    = 0
    self . States    = 0
    self . NAMEs     = {                                                     }
    ##########################################################################
    return
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Timestamp" : self . Timestamp                              , \
               "Action"    : self . Action                                 , \
               "States"    : self . States                                 , \
               "Names"     : self . NAMEs                                  , \
               "Options"   : {                                             } }
  ############################################################################
  def setJson                 ( self , JSON                                ) :
    ##########################################################################
    if                        ( "Timestamp" in JSON                        ) :
      self . Timestamp = int  ( JSON [ "Timestamp"                         ] )
    ##########################################################################
    if                        ( "Action"    in JSON                        ) :
      self . Action    = int  ( JSON [ "Action"                            ] )
    ##########################################################################
    if                        ( "States"    in JSON                        ) :
      self . States    = int  ( JSON [ "States"                            ] )
    ##########################################################################
    if                        ( "Names"     in JSON                        ) :
      self . NAMEs     = JSON [ "Names"                                      ]
    ##########################################################################
    return
  ############################################################################
  def setTimestamp         ( self , ts                                     ) :
    ##########################################################################
    self . Timestamp = int (        ts                                       )
    ##########################################################################
    return
  ############################################################################
  def getTimestamp ( self , baseTime = 0                                   ) :
    return int     ( int ( baseTime ) + self . Timestamp                     )
  ############################################################################
  def setAction         ( self , action                                    ) :
    ##########################################################################
    self . Action = int (        action                                      )
    ##########################################################################
    return
  ############################################################################
  def setStates         ( self , states                                    ) :
    ##########################################################################
    self . States = int (        states                                      )
    ##########################################################################
    return
  ############################################################################
  def setContext ( self , Locality , Context ) :
    ##########################################################################
    self . NAMEs [ f"{Locality}" ] = f"{Context}"
    ##########################################################################
    return
  ############################################################################
  def getContext          ( self , Locality                                ) :
    ##########################################################################
    KEY = str             ( Locality                                         )
    ##########################################################################
    if                    ( KEY in self . NAMEs                            ) :
      return self . NAMEs [ KEY                                              ]
    ##########################################################################
    return ""
  ############################################################################
  def Replace                ( self , fromTime , asTime                    ) :
    ##########################################################################
    if                       ( int ( fromTime ) == self . Timestamp        ) :
      self . Timestamp = int ( asTime                                        )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
class Segment  (                                                           ) :
  ############################################################################
  def __init__ ( self                                                      ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear         ( self                                                 ) :
    ##########################################################################
    self . Start  = 0
    self . Finish = 0
    self . Action = 0
    self . States = 0
    self . NAMEs  = {                                                        }
    ##########################################################################
    return
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Start"   : self . Start                                    , \
               "Finish"  : self . Finish                                   , \
               "Action"  : self . Action                                   , \
               "States"  : self . States                                   , \
               "Names"   : self . NAMEs                                    , \
               "Options" : {                                               } }
  ############################################################################
  def setJson              ( self , JSON                                   ) :
    ##########################################################################
    if                     ( "Start"  in JSON                              ) :
      self . Start  = int  ( JSON [ "Start"                                ] )
    ##########################################################################
    if                     ( "Finish" in JSON                              ) :
      self . Finish = int  ( JSON [ "Finish"                               ] )
    ##########################################################################
    if                     ( "Action" in JSON                              ) :
      self . Action = int  ( JSON [ "Action"                               ] )
    ##########################################################################
    if                     ( "States" in JSON                              ) :
      self . States = int  ( JSON [ "States"                               ] )
    ##########################################################################
    if                     ( "Names"  in JSON                              ) :
      self . NAMEs  = JSON [ "Names"                                         ]
    ##########################################################################
    return
  ############################################################################
  def setStart         ( self , ts                                         ) :
    ##########################################################################
    self . Start = int (        ts                                           )
    ##########################################################################
    return
  ############################################################################
  def setFinish         ( self , ts                                        ) :
    ##########################################################################
    self . Finish = int (        ts                                          )
    ##########################################################################
    return
  ############################################################################
  def getStart ( self , baseTime = 0                                       ) :
    return int ( int ( baseTime ) + self . Start                             )
  ############################################################################
  def getFinish ( self , baseTime = 0                                      ) :
    return int  ( int ( baseTime ) + self . Finish                           )
  ############################################################################
  def setAction         ( self , action                                    ) :
    ##########################################################################
    self . Action = int (        action                                      )
    ##########################################################################
    return
  ############################################################################
  def setStates         ( self , states                                    ) :
    ##########################################################################
    self . States = int (        states                                      )
    ##########################################################################
    return
  ############################################################################
  def setContext ( self , Locality , Context ) :
    ##########################################################################
    self . NAMEs [ f"{Locality}" ] = f"{Context}"
    ##########################################################################
    return
  ############################################################################
  def getContext          ( self , Locality                                ) :
    ##########################################################################
    KEY = str             ( Locality                                         )
    ##########################################################################
    if                    ( KEY in self . NAMEs                            ) :
      return self . NAMEs [ KEY                                              ]
    ##########################################################################
    return ""
  ############################################################################
  def Replace             ( self , fromTime , asTime                       ) :
    ##########################################################################
    if                    ( int ( fromTime ) == self . Start               ) :
      self . Start  = int ( asTime                                           )
    ##########################################################################
    if                    ( int ( fromTime ) == self . Finish              ) :
      self . Finish = int ( asTime                                           )
    ##########################################################################
    return
  ############################################################################
  def Contains ( self , ts                                                 ) :
    ##########################################################################
    if         ( ts == self . Start                                        ) :
      return True
    ##########################################################################
    if         ( ts == self . Finish                                       ) :
      return True
    ##########################################################################
    return   False
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
class Descriptive (                                                        ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear             ( self                                             ) :
    ##########################################################################
    self . BaseTime   = 0
    self . Duration   = 0
    self . Locality   = 1001
    ##########################################################################
    self . TIMESTAMPs = [                                                    ]
    self . CONTEXTs   = {                                                    }
    self . SEGMENTs   = [                                                    ]
    ##########################################################################
    return
  ############################################################################
  def shiftTime ( self , T                                                 ) :
    return int  ( int ( T ) + self . BaseTime                                )
  ############################################################################
  def realTime ( self , T                                                  ) :
    return int ( int ( T ) - self . BaseTime                                 )
  ############################################################################
  def setLocality ( self , locality                                        ) :
    ##########################################################################
    self . Locality = locality
    ##########################################################################
    return
  ############################################################################
  def toJson          ( self                                               ) :
    ##########################################################################
    CT              = {                                                      }
    SG              = [                                                      ]
    ##########################################################################
    for T in self . TIMESTAMPs                                               :
      ########################################################################
      CT [ f"{T}" ] = self . CONTEXTs [ T ] . toJson (                       )
    ##########################################################################
    for S in self . SEGMENTs                                                 :
      ########################################################################
      SG            . append                         ( S . toJson (        ) )
    ##########################################################################
    return            { "Timestamps" : self . TIMESTAMPs                   , \
                        "Contexts"   : CT                                  , \
                        "Segments"   : SG                                    }
  ############################################################################
  def setJson                     ( self , JSON                            ) :
    ##########################################################################
    if                            ( "Timestamps" in JSON                   ) :
      ########################################################################
      self . TIMESTAMPs = JSON    [ "Timestamps"                             ]
    ##########################################################################
    if                            ( "Contexts" in JSON                     ) :
      ########################################################################
      self . CONTEXTs   =         {                                          }
      ########################################################################
      for T in TIMESTAMPs                                                    :
        ######################################################################
        A               = Anchor  (                                          )
        A               . setJson ( JSON [ "Contexts" ] [ f"{T}" ]           )
        self . CONTEXTs           [ T                                        ]
    ##########################################################################
    if                            ( "Segments" in JSON                     ) :
      ########################################################################
      for S in JSON               [ "Segments"                             ] :
        ######################################################################
        SG              = Segment (                                          )
        SG              . setJson ( S                                        )
        self . SEGMENTs . append  ( SG                                       )
    ##########################################################################
    return
  ############################################################################
  def toScenario ( self                                                    ) :
    return       { "BaseTime"    : self . BaseTime                         , \
                   "Duration"    : self . Duration                         , \
                   "Description" : self . toJson (                         ) }
  ############################################################################
  def setScenario            ( self , JSON                                 ) :
    ##########################################################################
    self   . Clear           (                                               )
    ##########################################################################
    if                       ( "BaseTime"    in JSON                       ) :
      self . BaseTime = int  ( JSON [ "BaseTime"                           ] )
    ##########################################################################
    if                       ( "Duration"    in JSON                       ) :
      self . Duration = int  ( JSON [ "Duration"                           ] )
    ##########################################################################
    if                       ( "Description" in JSON                       ) :
      self . setJson         ( JSON [ "Description"                        ] )
    ##########################################################################
    return
  ############################################################################
  def Replace               ( self , fromTime , asTime                     ) :
    ##########################################################################
    if                      ( fromTime not in self . TIMESTAMPs            ) :
      return
    ##########################################################################
    V     =                 [                                                ]
    ##########################################################################
    for T in self . TIMESTAMPs                                               :
      ########################################################################
      if                    ( fromTime != T                                ) :
        V . append          ( T                                              )
    ##########################################################################
    V     . append          ( asTime                                         )
    V     . sort            (                                                )
    ##########################################################################
    self  . TIMESTAMPs = V
    ##########################################################################
    KV    = self . CONTEXTs [ fromTime                                       ]
    self  . CONTEXTs . pop  ( fromTime , None                                )
    ##########################################################################
    KV    . Replace         ( fromTime , asTime                              )
    self  . CONTEXTs [ asTime ] = KV
    ##########################################################################
    for S in self . SEGMENTs                                                 :
      S   . Replace         ( fromTime , asTime                              )
    ##########################################################################
    return
  ############################################################################
  def setContext ( self , ts , message                                     ) :
    ##########################################################################
    if           ( ts not in self . TIMESTAMPs                             ) :
      return
    ##########################################################################
    if           ( ts not in self . CONTEXTs                               ) :
      return
    ##########################################################################
    self . CONTEXTs [ ts ] . setContext ( self . Locality , message          )
    ##########################################################################
    return
  ############################################################################
  def getContext ( self , ts                                               ) :
    ##########################################################################
    if           ( ts not in self . TIMESTAMPs                             ) :
      return ""
    ##########################################################################
    if           ( ts not in self . CONTEXTs                               ) :
      return ""
    ##########################################################################
    return self . CONTEXTs [ ts ] . getContext ( self . Locality             )
  ############################################################################
  def addItem                  ( self , ts , text                          ) :
    ##########################################################################
    if                         ( ts in self . TIMESTAMPs                   ) :
      return
    ##########################################################################
    AC = Anchor                (                                             )
    AC . setTimestamp          ( ts                                          )
    AC . setContext            ( self . Locality , text                      )
    ##########################################################################
    self . CONTEXTs [ ts ] = AC
    ##########################################################################
    self . TIMESTAMPs . append ( ts                                          )
    self . TIMESTAMPs . sort   (                                             )
    ##########################################################################
    return
  ############################################################################
  def deleteItem          ( self , ts                                      ) :
    ##########################################################################
    if                    ( ts not in self . TIMESTAMPs                    ) :
      return
    ##########################################################################
    SG     =              [                                                  ]
    ##########################################################################
    for S in self . SEGMENTs                                                 :
      ########################################################################
      if                  ( not S . Contains ( ts                        ) ) :
        ######################################################################
        SG . append       ( S                                                )
    ##########################################################################
    self   . SEGMENTs = SG
    ##########################################################################
    try                                                                      :
      del self . CONTEXTs [ ts                                               ]
    except                                                                   :
      pass
    ##########################################################################
    TT     =              [                                                  ]
    ##########################################################################
    for T in self . TIMESTAMPs                                               :
      ########################################################################
      if                  ( ts != T                                        ) :
        TT . append       ( T                                                )
    ##########################################################################
    TT     . sort         (                                                  )
    self   . TIMESTAMPs = TT
    ##########################################################################
    return
  ############################################################################
  def itemJson ( self  , ts                                                ) :
    ##########################################################################
    if         ( ts not in self . TIMESTAMPs                               ) :
      return   ( False , {                                                 } )
    ##########################################################################
    if         ( ts not in self . CONTEXTs                                 ) :
      return   ( False , {                                                 } )
    ##########################################################################
    JJ             = self . CONTEXTs  [ ts ] . toJson     (                  )
    JJ [ "Name"  ] = self . CONTEXTs  [ ts ] . getContext ( self . Locality  )
    JJ [ "Shift" ] = self . shiftTime ( ts                                   )
    ##########################################################################
    return     ( True  , JJ ,                                                )
  ############################################################################
  def LastestTimestamp ( self , TimeGap                                    ) :
    ##########################################################################
    if                 ( len ( self . TIMESTAMPs ) <= 0                    ) :
      return 0
    ##########################################################################
    return int         ( self . TIMESTAMPs [ -1 ] + TimeGap                  )
  ############################################################################
##############################################################################
