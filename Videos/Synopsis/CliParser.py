# -*- coding: utf-8 -*-
##############################################################################
## CLI Parser
## 命令列解譯器
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import vlc
import math
import cv2
##############################################################################
import pathlib
from   pathlib                           import Path
##############################################################################
import AITK
##############################################################################
from   AITK . Database  . Query          import Query
from   AITK . Database  . Connection     import Connection
from   AITK . Database  . Pair           import Pair
from   AITK . Database  . Columns        import Columns
##############################################################################
from   AITK . Calendars . StarDate       import StarDate       as StarDate
##############################################################################
from   AITK . Documents . JSON           import Load           as LoadJson
from   AITK . Documents . JSON           import Save           as SaveJson
from   AITK . Documents . Name           import Name           as NameItem
from   AITK . Documents . Name           import Naming         as Naming
from   AITK . Documents . ParameterQuery import ParameterQuery as ParameterQuery
from   AITK . Documents . Variables      import Variables      as VariableItem
##############################################################################
class CliParser  (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def Clear               ( self                                           ) :
    ##########################################################################
    self . CLI          = {                                                  }
    self . Settings     = {                                                  }
    self . Translations = {                                                  }
    self . Tables       = {                                                  }
    self . DbConf       = {                                                  }
    self . Logger       = None
    self . Execution    = None
    ##########################################################################
    return
  ############################################################################
  def LOG         ( self , message                                         ) :
    ##########################################################################
    if            ( self . Logger in [ False , None ]                      ) :
      return
    ##########################################################################
    self . Logger (        message                                           )
    ##########################################################################
    return
  ############################################################################
  def Load                ( self , Filename                                ) :
    ##########################################################################
    self . CLI = LoadJson (        Filename                                  )
    ##########################################################################
    return
  ############################################################################
  def Save   ( self , Filename                                             ) :
    ##########################################################################
    CLIF                           = self . CLI
    CLIF [ "Episode" ] [ "Found" ] = [                                       ]
    CLIF [ "Action"              ] = ""
    ##########################################################################
    SaveJson (        Filename , CLIF                                        )
    ##########################################################################
    return
  ############################################################################
  def Run            ( self                                                ) :
    ##########################################################################
    if               ( self . Execution in [ False , None ]                ) :
      return
    ##########################################################################
    self . Execution (                                                       )
    ##########################################################################
    return
  ############################################################################
  def PurgeCommand  ( self , cmd                                           ) :
    ##########################################################################
    C = cmd
    C = C . replace ( "\r" , ""                                              )
    C = C . replace ( "\n" , ""                                              )
    ##########################################################################
    return C
  ############################################################################
  def StripCommand    ( self , cmd , prefix                                ) :
    ##########################################################################
    PLEN = len        ( prefix                                               )
    AT   = cmd . find ( prefix                                               )
    ##########################################################################
    if                ( AT < 0                                             ) :
      return ""
    ##########################################################################
    S    = cmd        [ AT + PLEN :                                          ]
    S    = S . lstrip (                                                      )
    S    = S . rstrip (                                                      )
    ##########################################################################
    return S
  ############################################################################
  def ObtainsVariantTables   ( self                                        , \
                               DB                                          , \
                               VARTAB                                      , \
                               UUID                                        , \
                               TYPE                                        , \
                               NAME                                        , \
                               JSON                                        ) :
    ##########################################################################
    VARI   = VariableItem    (                                               )
    VARI   . Uuid = UUID
    VARI   . Type = TYPE
    VARI   . Name = NAME
    ##########################################################################
    BODY   = VARI . GetValue ( DB , VARTAB                                   )
    if                       ( BODY in [ False , None ]                    ) :
      return JSON
    ##########################################################################
    try                                                                      :
      BODY = BODY . decode   ( "utf-8"                                       )
    except                                                                   :
      pass
    ##########################################################################
    if                       ( len ( BODY ) <= 0                           ) :
      return JSON
    ##########################################################################
    try                                                                      :
      J    = json . loads    ( BODY                                          )
    except                                                                   :
      return JSON
    ##########################################################################
    ## JS     = JSON
    ## JK     = J . keys        (                                               )
    ##########################################################################
    ## for T in JK                                                              :
    ##   ########################################################################
    ##   JS [ T ] = J           [ T                                             ]
    ##########################################################################
    ## return JS
    ##########################################################################
    return J
  ############################################################################
  def hasScope                   ( self                                    ) :
    ##########################################################################
    if                           ( "Scope" not in self . CLI               ) :
      ########################################################################
      M    = self . Translations [ "CMD::NoScope"                            ]
      self . LOG                 ( M                                         )
      ########################################################################
      return False
    ##########################################################################
    return   True
  ############################################################################
  def decodeScope                ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Scope"                         ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    if                           ( T < 2                                   ) :
      ########################################################################
      if                         ( "Scope" in self . CLI                   ) :
        ######################################################################
        S  = self . CLI          [ "Scope"                                   ]
        M  = self . Translations [ "CMD::CurrentScope:"                      ]
        R  = f"{M}{S}"
        ######################################################################
        self . LOG               ( R                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    S      = sequences           [ 1                                         ]
    S      = S . lower           (                                           )
    TM     = self . Translations [ "CMD::Scope::Key::Film"                   ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = "Film"
      ########################################################################
      if                         ( "Film"    not in self . CLI             ) :
        ######################################################################
        self . CLI [ "Film"    ] = {                                         }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Film"                        ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    TM     = self . Translations [ "CMD::Scope::Key::Episode"                ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = "Episode"
      ########################################################################
      if                         ( "Episode" not in self . CLI             ) :
        ######################################################################
        self . CLI [ "Episode" ] = { "First"     : 0                       , \
                                     "T1"        : 158                     , \
                                     "Second"    : 0                       , \
                                     "T2"        : 76                      , \
                                     "Relation"  : 1                       , \
                                     "Name"      : ""                      , \
                                     "Names"     : [ ]                     , \
                                     "Languages" : [ 1001 , 1002 , 1006 ]    }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Episode"                     ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    TM     = self . Translations [ "CMD::Scope::Key::People"                 ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = "People"
      ########################################################################
      if                         ( "People" not in self . CLI              ) :
        ######################################################################
        self . CLI [ "People"  ] = {                                         }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::People"                      ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    TM     = self . Translations [ "CMD::Scope::Key::Crowd"                  ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = "Crowd"
      ########################################################################
      if                         ( "Crowd"  not in self . CLI              ) :
        ######################################################################
        self . CLI [ "Crowd"   ] = {                                         }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Crowd"                       ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = "Galleries"
      ########################################################################
      if                         ( "Galleries"  not in self . CLI          ) :
        ######################################################################
        self . CLI [ "Galleries" ] = {                                       }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Galleries"                   ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = "Organization"
      ########################################################################
      if                         ( "Organization"  not in self . CLI       ) :
        ######################################################################
        self . CLI [ "Organization" ] = {                                    }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Organization"                ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    return                       ( False , False ,                           )
  ############################################################################
  def decodeName                 ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Name"                          ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    Scope  = self . CLI          [ "Scope"                                   ]
    ##########################################################################
    if                           ( T < 2                                   ) :
      ########################################################################
      if                         ( "Name" not in self . CLI [ Scope ]      ) :
        return                   ( False , False ,                           )
      ########################################################################
      MSG  = self . Translations [ "CMD::Name::Current"                      ]
      NAME = self . CLI [ Scope ] [ "Name"                                   ]
      M    = f"{MSG}{NAME}"
      ########################################################################
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( False , False ,                           )
    ##########################################################################
    NAME   = self . StripCommand (        cmd , sequences [ 0 ]              )
    ##########################################################################
    if                           ( len ( NAME ) <= 0                       ) :
      return
    ##########################################################################
    self   . CLI [ Scope ] [ "Name" ] = NAME
    ##########################################################################
    MSG    = self . Translations [ "CMD::Name::Assign"                       ]
    M      = f"{MSG}{NAME}"
    self   . LOG                 ( M                                         )
    ##########################################################################
    return                       ( True  , False ,                           )
  ############################################################################
  def decodeNames                ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Names"                         ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    Scope  = self . CLI          [ "Scope"                                   ]
    ##########################################################################
    if                           ( T < 2                                   ) :
      ########################################################################
      if                         ( "Names" not in self . CLI [ Scope ]     ) :
        return                   ( False , False ,                           )
      ########################################################################
      MSG  = self . Translations [ "CMD::Names::Current"                     ]
      NS   = self . CLI [ Scope ] [ "Names"                                  ]
      ########################################################################
      if                         ( len ( NS ) <= 0                         ) :
        return                   ( False , False ,                           )
      ########################################################################
      M    = "\n" . join         ( NS                                        )
      ########################################################################
      self . LOG                 ( f"{MSG}\n{M}"                             )
      ########################################################################
      return                     ( False , False ,                           )
    ##########################################################################
    NAME   = self . StripCommand (        cmd , sequences [ 0 ]              )
    ##########################################################################
    if                           ( len ( NAME ) <= 0                       ) :
      return
    ##########################################################################
    if                           ( "Names" not in self . CLI [ Scope ]     ) :
      ########################################################################
      self . CLI [ Scope ] [ "Names" ] = [                                   ]
    ##########################################################################
    self   . CLI [ Scope ] [ "Names" ] . append ( NAME                       )
    ##########################################################################
    MSG    = self . Translations [ "CMD::Names::Append"                      ]
    M      = f"{MSG}{NAME}"
    self   . LOG                 ( NAME                                      )
    ##########################################################################
    return                       ( True  , False ,                           )
  ############################################################################
  def decodeLanguages            ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Languages"                     ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    Scope  = self . CLI          [ "Scope"                                   ]
    ##########################################################################
    if                           ( T < 2                                   ) :
      ########################################################################
      if                         ( "Languages" not in self . CLI [ Scope ] ) :
        return                   ( False , False ,                           )
      ########################################################################
      MSG  = self . Translations [ "CMD::Languages::Current"                 ]
      LS   = self . CLI [ Scope ] [ "Languages"                              ]
      ########################################################################
      if                         ( len ( LS ) <= 0                         ) :
        return                   ( False , False ,                           )
      ########################################################################
      NS   =                     [ MSG                                       ]
      for LID in LS                                                          :
        ######################################################################
        NS . append              ( f"{LID}"                                  )
      ########################################################################
      M    = " " . join          ( NS                                        )
      ########################################################################
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( False , False ,                           )
    ##########################################################################
    self . CLI [ Scope ] [ "Languages" ] = [                                 ]
    ##########################################################################
    ENID   = self . Translations [ "CMD::Languages::English"                 ]
    TWID   = self . Translations [ "CMD::Languages::Chinese"                 ]
    JPID   = self . Translations [ "CMD::Languages::Japanese"                ]
    ##########################################################################
    for L in sequences                                                       :
      ########################################################################
      S    = L . lower           (                                           )
      ########################################################################
      if                         ( S in ENID                               ) :
        self . CLI [ Scope ] [ "Languages" ] . append ( 1001                 )
      ########################################################################
      if                         ( S in TWID                               ) :
        self . CLI [ Scope ] [ "Languages" ] . append ( 1002                 )
      ########################################################################
      if                         ( S in JPID                               ) :
        self . CLI [ Scope ] [ "Languages" ] . append ( 1006                 )
    ##########################################################################
    return                       ( True  , False ,                           )
  ############################################################################
  def LookForEpisodeTables ( self                                          ) :
    ##########################################################################
    KEY    = "Episode"
    TABLEs = self . Tables [ "VideoAlbums" ] [ "Subordination"               ]
    ##########################################################################
    self   . CLI [ KEY ] [ "Tables" ] = TABLEs
    ##########################################################################
    DB     = Connection    (                                                 )
    ##########################################################################
    if                     ( not DB . ConnectTo ( self . DbConf )          ) :
      ########################################################################
      self . LOG           ( json . dumps  ( TABLEs )                        )
      ########################################################################
      return
    ##########################################################################
    DB     . Prepare       (                                                 )
    ##########################################################################
    VARTAB = self . Tables [ "VariantTables" ] [ "Variables"                 ]
    ##########################################################################
    SCOPE  = "ViewAlbums"
    F      = self . CLI    [ KEY ] [ "First"    ]
    T1     = self . CLI    [ KEY ] [ "T1"       ]
    R      = self . CLI    [ KEY ] [ "Relation" ]
    ##########################################################################
    TABLEs = self . ObtainsVariantTables ( DB                              , \
                                           VARTAB                          , \
                                           str ( F )                       , \
                                           T1                              , \
                                           SCOPE                           , \
                                           TABLEs                            )
    ##########################################################################
    self   . CLI [ "Episode" ] [ "Tables" ] = TABLEs
    ##########################################################################
    DB     . Close         (                                                 )
    ##########################################################################
    self   . LOG           ( json . dumps  ( TABLEs )                        )
    ##########################################################################
    return
  ############################################################################
  def FindEpisodeByName     ( self                                         ) :
    ##########################################################################
    KEY     = "Episode"
    TABLEs  = self . CLI    [ KEY ] [ "Tables"                               ]
    ##########################################################################
    self    . CLI           [ "Action" ] = ""
    self    . CLI           [ KEY ] [ "Found" ] = [                          ]
    ##########################################################################
    DB      = Connection    (                                                )
    ##########################################################################
    if                      ( not DB . ConnectTo ( self . DbConf )         ) :
      return
    ##########################################################################
    DB      . Prepare       (                                                )
    ##########################################################################
    NAMTAB  = TABLEs        [ "NamesVideo"                                   ]
    NAMTAB  = TABLEs        [ "NamesEditing"                                 ]
    RELTAB  = TABLEs        [ "RelationVideos"                               ]
    ##########################################################################
    LANGz   =               [                                                ]
    LANGs   = self . CLI    [ KEY ] [ "Languages"                            ]
    ##########################################################################
    for L in LANGs                                                           :
      LANGz . append        ( f"{L}"                                         )
    ##########################################################################
    LANGx   = " , " . join  ( LANGz                                          )
    ##########################################################################
    NAME    = self . CLI    [ KEY ] [ "Name"                                 ]
    UUID    = self . CLI    [ KEY ] [ "First"                                ]
    T1      = self . CLI    [ KEY ] [ "T1"                                   ]
    R       = self . CLI    [ KEY ] [ "Relation"                             ]
    ##########################################################################
    HMSG    = self . Translations [ "CMD::Episode::Search:"                  ]
    MLOG    = f"{HMSG}{NAME}"
    self    . LOG           ( MLOG                                           )
    ##########################################################################
    LNAME   = NAME . lower  (                                                )
    ZNAME   = f"%{LNAME}%"
    ##########################################################################
    VQ      = f"""select `second` from {RELTAB}
                 where ( `t1` = {T1} )
                   and ( `relation` = {R} )
                   and ( `first` = {UUID} )"""
    QQ      = f"""select `uuid` from {NAMTAB}
                  where ( `locality` in ( {LANGx} ) )
                    and ( `uuid` in ( {VQ} ) )
                    and ( lower ( convert ( `name` using utf8 ) ) like %s )
                  group by `uuid` asc ;"""
    ##########################################################################
    QQ      = " " . join    ( QQ . split ( )                                 )
    ##########################################################################
    self    . LOG           ( QQ                                             )
    ##########################################################################
    DB      . QueryValues   ( QQ , ( ZNAME , )                               )
    ALL     = DB . FetchAll (                                                )
    ##########################################################################
    DB      . Close         (                                                )
    ##########################################################################
    if                      ( ALL in [ False , None ]                      ) :
      return
    ##########################################################################
    MSG     = self . Translations [ "CMD::Episode::Found"                    ]
    UUIDs   =               [                                                ]
    UUIDz   =               [ MSG                                            ]
    ##########################################################################
    for R in ALL                                                             :
      ########################################################################
      U     = int           ( R [ 0                                        ] )
      UUIDs . append        ( U                                              )
      UUIDz . append        ( f"{U}"                                         )
    ##########################################################################
    if                      ( len ( UUIDs ) <= 0                           ) :
      ########################################################################
      MSG   = self . Translations [ "CMD::Episode::NotFound"                 ]
      self  . LOG           ( MSG                                            )
      ########################################################################
      return
    ##########################################################################
    MSG     = "\n" . join   ( UUIDz                                          )
    self    . LOG           ( MSG                                            )
    ##########################################################################
    self    . CLI           [ "Action" ] = "FindEpisodeByName"
    self    . CLI           [ KEY ] [ "Found" ] = UUIDs
    ##########################################################################
    self    . Run           (                                                )
    ##########################################################################
    return
  ############################################################################
  def decodeCatalogue            ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Catalogue"                     ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    Scope  = self . CLI          [ "Scope"                                   ]
    ERR    = False
    ##########################################################################
    if                           ( T < 4                                   ) :
      ########################################################################
      ERR  = True
    ##########################################################################
    if                           ( not ERR                                 ) :
      ########################################################################
      if                         ( 19 != len ( sequences [ 3 ] )           ) :
        ######################################################################
        ERR = True
    ##########################################################################
    if                           ( ERR                                     ) :
      ########################################################################
      MSG  = self . Translations [ "CMD::Catalogue::Current"                 ]
      F    = self . CLI [ Scope ] [ "First"    ]
      T1   = self . CLI [ Scope ] [ "T1"       ]
      R    = self . CLI [ Scope ] [ "Relation" ]
      ########################################################################
      M    = f"{MSG}{F} ( Subordination : {R} , {T1} )"
      ########################################################################
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( False , False ,                           )
    ##########################################################################
    R      = int                 ( sequences [ 1                           ] )
    T1     = int                 ( sequences [ 2                           ] )
    F      = int                 ( sequences [ 3                           ] )
    ##########################################################################
    self . CLI [ Scope ] [ "First"    ] = F
    self . CLI [ Scope ] [ "T1"       ] = T1
    self . CLI [ Scope ] [ "Relation" ] = R
    ##########################################################################
    if                           ( Scope in [ "Episode" ]                  ) :
      ########################################################################
      threading . Thread         ( target = self . LookForEpisodeTables    ) \
                . start          (                                           )
    ##########################################################################
    return                       ( True , False ,                            )
  ############################################################################
  def decodeSearch               ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Search"                        ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    Scope  = self . CLI          [ "Scope"                                   ]
    ##########################################################################
    if                           ( Scope in [ "Episode" ]                  ) :
      ########################################################################
      threading . Thread         ( target = self . FindEpisodeByName       ) \
                . start          (                                           )
    ##########################################################################
    return                       ( True , False ,                            )
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def Decode                       ( self , cmd , sequences                ) :
    ##########################################################################
    M , A = self . decodeScope     (        cmd , sequences                  )
    ##########################################################################
    if                             ( M                                     ) :
      return A
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    if                             ( not self . hasScope (               ) ) :
      return
    ##########################################################################
    M , A = self . decodeName      (        cmd , sequences                  )
    ##########################################################################
    if                             ( M                                     ) :
      return A
    ##########################################################################
    M , A = self . decodeNames     (        cmd , sequences                  )
    ##########################################################################
    if                             ( M                                     ) :
      return A
    ##########################################################################
    M , A = self . decodeLanguages (        cmd , sequences                  )
    ##########################################################################
    if                             ( M                                     ) :
      return A
    ##########################################################################
    M , A = self . decodeCatalogue (        cmd , sequences                  )
    ##########################################################################
    if                             ( M                                     ) :
      return A
    ##########################################################################
    M , A = self . decodeSearch    (        cmd , sequences                  )
    ##########################################################################
    if                             ( M                                     ) :
      return A
    ##########################################################################
    return False
  ############################################################################
  def Interpret             ( self , cmd                                   ) :
    ##########################################################################
    C = self . PurgeCommand (        cmd                                     )
    ##########################################################################
    if                      ( len ( C ) <= 0                               ) :
      return False
    ##########################################################################
    L = C . split           ( " "                                            )
    T = len                 ( L                                              )
    ##########################################################################
    if                      ( T <= 0                                       ) :
      return False
    ##########################################################################
    return self . Decode    ( C , L                                          )
##############################################################################
