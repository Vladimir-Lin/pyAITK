# -*- coding: utf-8 -*-
##############################################################################
## CLI Parser
## 命令列解譯器
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import vlc
import math
import cv2
##############################################################################
import pathlib
from   pathlib                       import Path
##############################################################################
import AITK
##############################################################################
from   AITK . Database  . Query      import Query
from   AITK . Database  . Connection import Connection
from   AITK . Database  . Pair       import Pair
from   AITK . Database  . Columns    import Columns
##############################################################################
from   AITK . Calendars . StarDate   import StarDate as StarDate
from   AITK . Documents . JSON       import Load     as LoadJson
from   AITK . Documents . JSON       import Save     as SaveJson
##############################################################################
class CliParser  (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . Clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def Clear               ( self                                           ) :
    ##########################################################################
    self . CLI          = {                                                  }
    self . Settings     = {                                                  }
    self . Translations = {                                                  }
    self . DbConf       = {                                                  }
    self . Logger       = None
    self . Execution    = None
    ##########################################################################
    return
  ############################################################################
  def LOG         ( self , message                                         ) :
    ##########################################################################
    if            ( self . Logger in [ False , None ]                      ) :
      return
    ##########################################################################
    self . Logger (        message                                           )
    ##########################################################################
    return
  ############################################################################
  def Load                ( self , Filename                                ) :
    ##########################################################################
    self . CLI = LoadJson (        Filename                                  )
    ##########################################################################
    return
  ############################################################################
  def Save   ( self , Filename                                             ) :
    ##########################################################################
    SaveJson (        Filename , self . CLI                                  )
    ##########################################################################
    return
  ############################################################################
  def Run            ( self                                                ) :
    ##########################################################################
    if               ( self . Execution in [ False , None ]                ) :
      return
    ##########################################################################
    self . Execution (                                                       )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PurgeCommand  ( self , cmd                                           ) :
    ##########################################################################
    C = cmd
    C = C . replace ( "\r" , ""                                              )
    C = C . replace ( "\n" , ""                                              )
    ##########################################################################
    return C
  ############################################################################
  ############################################################################
  ############################################################################
  def hasScope                   ( self                                    ) :
    ##########################################################################
    if                           ( "Scope" not in self . CLI               ) :
      ########################################################################
      M    = self . Translations [ "CMD::NoScope"                            ]
      self . LOG                 ( M                                         )
      ########################################################################
      return False
    ##########################################################################
    return   True
  ############################################################################
  def decodeScope                ( self , cmd , sequences                  ) :
    ##########################################################################
    TM     = self . Translations [ "CMD::Key::Scope"                         ]
    T      = len                 ( sequences                                 )
    anchor = sequences           [ 0                                         ]
    anchor = anchor . lower      (                                           )
    ##########################################################################
    if                           ( anchor not in TM                        ) :
      return                     ( False , False ,                           )
    ##########################################################################
    if                           ( T < 2                                   ) :
      ########################################################################
      if                         ( "Scope" in self . CLI                   ) :
        ######################################################################
        S  = self . CLI          [ "Scope"                                   ]
        M  = self . Translations [ "CMD::CurrentScope:"                      ]
        R  = f"{M}{S}"
        ######################################################################
        self . LOG               ( R                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    S      = sequences           [ 1                                         ]
    S      = S . lower           (                                           )
    TM     = self . Translations [ "CMD::Scope::Key::Film"                   ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = S
      ########################################################################
      if                         ( "Film"    not in self . CLI             ) :
        ######################################################################
        self . CLI [ "Film"    ] = {                                         }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Film"                        ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    TM     = self . Translations [ "CMD::Scope::Key::Episode"                ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = S
      ########################################################################
      if                         ( "Episode" not in self . CLI             ) :
        ######################################################################
        self . CLI [ "Episode" ] = { "First"     : 0                       , \
                                     "T1"        : 158                     , \
                                     "Second"    : 0                       , \
                                     "T2"        : 76                      , \
                                     "Relation"  : 1                       , \
                                     "Name"      : ""                      , \
                                     "Names"     : [ ]                     , \
                                     "Languages" : [ 1001 , 1002 , 1006 ]    }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Episode"                     ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    TM     = self . Translations [ "CMD::Scope::Key::People"                 ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = S
      ########################################################################
      if                         ( "People" not in self . CLI              ) :
        ######################################################################
        self . CLI [ "People"  ] = {                                         }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::People"                      ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    TM     = self . Translations [ "CMD::Scope::Key::Crowd"                  ]
    ##########################################################################
    if                           ( S in TM                                 ) :
      ########################################################################
      self   . CLI [ "Scope"   ] = S
      ########################################################################
      if                         ( "Crowd"  not in self . CLI              ) :
        ######################################################################
        self . CLI [ "Crowd"   ] = {                                         }
      ########################################################################
      M    = self . Translations [ "CMD::Scope::Crowd"                       ]
      self . LOG                 ( M                                         )
      ########################################################################
      return                     ( True  , False ,                           )
    ##########################################################################
    return                       ( False , False ,                           )
  ############################################################################
  ############################################################################
  def Decode                   ( self , cmd , sequences                    ) :
    ##########################################################################
    M , A = self . decodeScope (        cmd , sequences                      )
    ##########################################################################
    if                         ( M                                         ) :
      return A
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    if                         ( not self . hasScope (                   ) ) :
      return
    ##########################################################################
    self . LOG ( "Decoding" )
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return False
  ############################################################################
  def Interpret             ( self , cmd                                   ) :
    ##########################################################################
    C = self . PurgeCommand (        cmd                                     )
    ##########################################################################
    if                      ( len ( C ) <= 0                               ) :
      return False
    ##########################################################################
    L = C . split           ( " "                                            )
    T = len                 ( L                                              )
    ##########################################################################
    if                      ( T <= 0                                       ) :
      return False
    ##########################################################################
    return self . Decode    ( C , L                                          )
##############################################################################
