# -*- coding: utf-8 -*-
##############################################################################
## EpisodeEditor
## 影集編輯
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import vlc
import math
import cv2
##############################################################################
import pathlib
from   pathlib                               import Path
##############################################################################
import AITK
##############################################################################
from   AITK    . Calendars . StarDate        import StarDate            as StarDate
from   AITK    . Documents . JSON            import Load                as LoadJson
from   AITK    . Documents . JSON            import Save                as SaveJson
##############################################################################
from   PySide6                               import QtCore
from   PySide6                               import QtGui
from   PySide6                               import QtWidgets
from   PySide6 . QtCore                      import *
from   PySide6 . QtGui                       import *
from   PySide6 . QtWidgets                   import *
from   AITK    . Qt6                         import *
##############################################################################
from   AITK    . Qt6    . MenuManager        import MenuManager         as MenuManager
from   AITK    . Qt6    . AttachDock         import AttachDock          as AttachDock
from   AITK    . Qt6    . Widget             import Widget              as Widget
##############################################################################
from   AITK    . Videos . Utilities          import SilentRun           as SilentRun
##############################################################################
from                    . Episode            import Episode             as Episode
##############################################################################
from                    . UiEpisodeEstablish import Ui_EpisodeEstablish as Ui_EpisodeEstablish
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
class EpisodeEditor       ( ScrollArea                                     ) :
  ############################################################################
  emitEstablish = Signal  (                                                  )
  emitEditing   = Signal  (                                                  )
  emitLog       = Signal  ( str                                              )
  Leave         = Signal  ( QWidget                                          )
  ############################################################################
  def           __init__  ( self , parent = None , plan = None             ) :
    ##########################################################################
    super ( ) . __init__  (        parent        , plan                      )
    self      . Configure (                                                  )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 640 , 480 )                       )
  ############################################################################
  def Configure                      ( self                                ) :
    ##########################################################################
    self          . setMinimumHeight ( 60                                    )
    ##########################################################################
    self . ALBUM  = Episode          (                                       )
    self . ALBUM  . LogFunc = self . addLog
    self . Method = "Nothing"
    ##########################################################################
    self . EstablishWidget = None
    self . EditingWidget   = None
    ##########################################################################
    self . emitEstablish   . connect ( self . DoEstablish                    )
    self . emitEditing     . connect ( self . DoEditing                      )
    ##########################################################################
    return
  ############################################################################
  def addLog              ( self , MSG                                     ) :
    ##########################################################################
    self . emitLog . emit (        MSG                                       )
    ##########################################################################
    return
  ############################################################################
  def logMessage             ( self , KEY                                  ) :
    ##########################################################################
    MSG = self . getMenuItem ( KEY                                           )
    ##########################################################################
    if                       ( len ( MSG ) <= 0                            ) :
      return
    ##########################################################################
    return self . addLog     ( MSG                                           )
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def DoEstablish ( self                                                   ) :
    ##########################################################################
    ## self . EstablishWidget      = QWidget ( self . cwidget                   )
    self . EstablishWidget      = QWidget (                                  )
    self . EstablishWidget . ui = Ui_EpisodeEstablish (                      )
    self . EstablishWidget . ui . setupUi ( self . EstablishWidget           )
    self . EstablishWidget . ui . Scanning . hide (                          )
    self . EstablishWidget . ui . Start . clicked . connect ( self . DoEstablishAlbum )
    self . EstablishWidget . ui . Close . clicked . connect ( self . CloseThis        )
    ##########################################################################
    ## self . vlayout         . addWidget    ( self . EstablishWidget           )
    self . setWidget ( self . EstablishWidget                                )
    self . setWidgetResizable ( True )
    ## self . EstablishWidget . move         ( 0 , 0                            )
    ## self . EstablishWidget . show         (                                  )
    ##########################################################################
    self . Method    = "Establish"
    ##########################################################################
    return
  ############################################################################
  def EstablishAlbum            ( self                                     ) :
    ##########################################################################
    HNAME  = self . DB          [ "hostname"                                 ]
    CDMSG  = self . getMenuItem ( "ConnectDB"                                )
    MSG    = f"{CDMSG}{HNAME}"
    self   . addLog             ( MSG                                        )
    ##########################################################################
    self . ALBUM . Settings     = self . Settings
    self . ALBUM . Translations = self . Translations
    self . ALBUM . Messages     = self . Translations [ "Episode"            ]
    self . ALBUM . Tables       = self . Tables
    ##########################################################################
    self   . LoopRunning = False
    ##########################################################################
    DB     = self . ConnectDB   (                                            )
    if                          ( DB == None                               ) :
      self . LoopRunning = True
      return
    ##########################################################################
    self   . ALBUM . Establish  ( DB                                         )
    ##########################################################################
    DB     . Close              (                                            )
    ##########################################################################
    self   . LoopRunning = True
    ##########################################################################
    self   . Notify             ( 5                                          )
    self   . emitEditing . emit (                                            )
    ##########################################################################
    return
  ############################################################################
  def DoEstablishAlbum ( self                                              ) :
    ##########################################################################
    self . EstablishWidget . ui . Start    . hide (                          )
    self . EstablishWidget . ui . Close    . hide (                          )
    self . EstablishWidget . ui . NotReady . hide (                          )
    self . EstablishWidget . ui . Scanning . show (                          )
    ##########################################################################
    self . Go          ( self . EstablishAlbum                               )
    ##########################################################################
    return
  ############################################################################
  def NormalAlbum ( self                                                   ) :
    ##########################################################################
    ## self . cwidget   = QWidget        (                                      )
    ## self . vlayout   = QVBoxLayout    ( self . cwidget                       )
    ## self . cwidget . setMinimumWidth  ( 480                                  )
    ## self . cwidget . setMinimumHeight ( 120                                  )
    ## self           . setMinimumWidth  ( 480                                  )
    ## self . setWidget                  ( self . cwidget                       )
    ##########################################################################
    return
  ############################################################################
  def DoEditing            ( self                                          ) :
    ##########################################################################
    self  . logMessage     ( "OpenEpisodeDetails"                            )
    ##########################################################################
    self  . Method = "Editing"
    TITLE = self . ALBUM . Album [ "Names" ] [ "Default"                     ]
    ##########################################################################
    self  . setWindowTitle ( TITLE                                           )
    ##########################################################################
    self . EditingWidget = QWidget (                                         )
    self . EditingWidget . setMinimumHeight ( 600                            )
    ##########################################################################
    TCW  = 640
    TCH  = 360
    self . EditingWidget . Cover = QToolButton ( self  . EditingWidget       )
    self . EditingWidget . Cover . setGeometry ( QRect ( 0 , 0 , TCW , TCH ) )
    ##########################################################################
    if                              ( self . ALBUM . isCover (           ) ) :
      ########################################################################
      CF  = self . ALBUM . CoverFile (                                       )
      CIM = QImage                  ( CF                                     )
      ########################################################################
      if                            ( CIM . width  ( ) > TCW               ) :
        ######################################################################
        TTH = int ( int ( TCW * CIM . height ( ) ) / CIM . width (         ) )
        CIM = CIM . scaled          ( TCW , TTH , Qt . KeepAspectRatio       )
      ########################################################################
      if                            ( CIM . height ( ) > TCH               ) :
        ######################################################################
        TTW = int ( int ( TCH * CIM . width ( ) ) / CIM . height (         ) )
        CIM = CIM . scaled          ( TTW , TCH , Qt . KeepAspectRatio       )
      ########################################################################
      if                            ( CIM . width  ( ) > TCW               ) :
        ######################################################################
        TTH = int ( int ( TCW * CIM . height ( ) ) / CIM . width (         ) )
        CIM = CIM . scaled          ( TCW , TTH , Qt . KeepAspectRatio       )
      ########################################################################
      PIX   = QPixmap               (                                        )
      if                            ( PIX . convertFromImage( CIM        ) ) :
        ######################################################################
        ICN = QIcon                 ( PIX                                    )
        self  . EditingWidget . Cover . setIconSize ( CIM . size (         ) )
        self  . EditingWidget . Cover . setIcon     ( ICN                    )
      ########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self . setWidget          ( self . EditingWidget                         )
    self . setWidgetResizable ( True                                         )
    ##########################################################################
    return
  ############################################################################
  def RefreshJson                 ( self                                   ) :
    ##########################################################################
    self . ALBUM . LoadFromFile   (                                          )
    ##########################################################################
    if                            ( not self . ALBUM . Exists ( "Version") ) :
      return
    if                            ( not self . ALBUM . Exists ( "Edited" ) ) :
      return
    ##########################################################################
    EDITED = self . ALBUM . Album [ "Edited"                                 ]
    ##########################################################################
    if                            ( not EDITED                             ) :
      ########################################################################
      self . emitEstablish . emit (                                          )
      ########################################################################
      return
    ##########################################################################
    self   . emitEditing   . emit (                                          )
    ##########################################################################
    return
  ############################################################################
  def startup ( self , JsonFile , DIR                                      ) :
    ##########################################################################
    self . ALBUM . Filename = JsonFile
    self . ALBUM . DIR      = DIR
    ##########################################################################
    self . Go ( self . RefreshJson                                           )
    ##########################################################################
    return
  ############################################################################
  def CloseThis         ( self                                             ) :
    ##########################################################################
    self . Leave . emit ( self                                               )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
