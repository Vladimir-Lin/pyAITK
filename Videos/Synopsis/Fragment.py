# -*- coding: utf-8 -*-
##############################################################################
## Fragment
## 影片段落
##############################################################################
import os
import sys
import getopt
import time
import datetime
import requests
import threading
##############################################################################
import mysql . connector
from   mysql . connector                   import Error
##############################################################################
import AITK
from   AITK  . Database   . Query          import Query
from   AITK  . Database   . Connection     import Connection
from   AITK  . Database   . Pair           import Pair
from   AITK  . Database   . Columns        import Columns
##############################################################################
from   AITK  . Documents  . ParameterQuery import ParameterQuery as ParameterQuery
from   AITK  . Essentials . Relation       import Relation       as Relation
##############################################################################
FRAGREL           = "`cios`.`relations_videos`"
FRAGNAM           = "`appellations`.`names_others_0016`"
FragmentShortType = 213
FragmentLongType  = 1100000000000000213
FragmentTypeName  = "vFragment"
##############################################################################
class Fragment           ( Columns                                         ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    self      . Clear    (                                                   )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear              ( self                                            ) :
    ##########################################################################
    self . Columns     = [                                                   ]
    self . Id          =  -1
    self . Uuid        =   0
    self . Used        =   1
    self . States      =   0
    self . Description = {                                                   }
    self . ltime       =   0
    ##########################################################################
    self . PeopleUuid =   0
    ##########################################################################
    return
  ############################################################################
  def assign ( self , item                                                 ) :
    ##########################################################################
    self . Columns     = item . Columns
    self . Id          = item . Id
    self . Uuid        = item . Uuid
    self . Used        = item . Used
    self . States      = item . States
    self . Description = item . Description
    self . ltime       = item . ltime
    ##########################################################################
    return
  ############################################################################
  def set            ( self , item , value                                 ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"          == a                                  ) :
      self . Id        = value
    ##########################################################################
    elif             ( "uuid"        == a                                  ) :
      self . Uuid      = value
    ##########################################################################
    elif             ( "used"        == a                                  ) :
      self . Used     = value
    ##########################################################################
    elif             ( "states"      == a                                  ) :
      self . States      = value
    ##########################################################################
    elif             ( "description" == a                                  ) :
      ########################################################################
      if             ( isinstance ( value , dict                         ) ) :
        ######################################################################
        self . Description   = value
        ######################################################################
      elif           ( isinstance ( value , str                          ) ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          self . Description = json . loads ( value                          )
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif           ( isinstance ( value , bytearray                    ) ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          BODY = value . decode ( "utf-8"                                    )
          self . Description = json . loads ( BODY                           )
          ####################################################################
        except                                                               :
          pass
    ##########################################################################
    elif             ( "ltime"     == a                                    ) :
      self . ltime     = value
    ##########################################################################
    return
  ############################################################################
  def get            ( self , item                                         ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"          == a                                  ) :
      return self . Id
    ##########################################################################
    if               ( "uuid"        == a                                  ) :
      return self . Uuid
    ##########################################################################
    if               ( "used"        == a                                  ) :
      return self . Used
    ##########################################################################
    if               ( "states"      == a                                  ) :
      return self . States
    ##########################################################################
    if               ( "description" == a                                  ) :
      return self . Description
    ##########################################################################
    if               ( "ltime"       == a                                  ) :
      return self . ltime
    ##########################################################################
    return ""
  ############################################################################
  def tableItems        ( self                                             ) :
    return [ "id"                                                            ,
             "uuid"                                                          ,
             "used"                                                          ,
             "states"                                                        ,
             "description"                                                   ,
             "ltime"                                                         ]
  ############################################################################
  def pair              ( self , item                                      ) :
    v = self . get      (        item                                        )
    return f"`{item}` = {v}"
  ############################################################################
  def valueItems        ( self                                             ) :
    return [ "used"                                                          ,
             "states"                                                        ,
             "description"                                                   ]
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Id"          : self . Id                                   , \
               "Uuid"        : self . Uuid                                 , \
               "Used"        : self . Used                                 , \
               "States"      : self . States                               , \
               "Description" : self . Description                            }
  ############################################################################
  def CountFirstTotal   ( self , DB , REL , TABLE , RELTAB , UsedOptions   ) :
    ##########################################################################
    UQ   = " , " . join ( str(x) for x in UsedOptions                        )
    UUID = REL . get    ( "second"                                           )
    T1   = REL . get    ( "t1"                                               )
    T2   = REL . get    ( "t2"                                               )
    RR   = REL . get    ( "relation"                                         )
    ##########################################################################
    MQ   = f"""select `uuid` from {TABLE} where ( `used` in ( {UQ} ) )"""
    QQ   = f"""select count(`first`) from {RELTAB}
               where ( `second` = {UUID} )
                 and ( `t1` = {T1} )
                 and ( `t2` = {T2} )
                 and ( `relation` = {RR} )
                 and ( `first` in ( {MQ} ) ) ;"""
    ##########################################################################
    return DB . GetOne  ( " " . join ( QQ . split ( ) ) , 0                  )
  ############################################################################
  def CountSecondTotal  ( self , DB , REL , TABLE , RELTAB , UsedOptions   ) :
    ##########################################################################
    UQ   = " , " . join ( str(x) for x in UsedOptions                        )
    UUID = REL . get    ( "first"                                            )
    T1   = REL . get    ( "t1"                                               )
    T2   = REL . get    ( "t2"                                               )
    RR   = REL . get    ( "relation"                                         )
    ##########################################################################
    MQ   = f"""select `uuid` from {TABLE} where ( `used` in ( {UQ} ) )"""
    QQ   = f"""select count(`second`) from {RELTAB}
               where ( `first` = {UUID} )
                 and ( `t1` = {T1} )
                 and ( `t2` = {T2} )
                 and ( `relation` = {RR} )
                 and ( `second` in ( {MQ} ) ) ;"""
    ##########################################################################
    return DB . GetOne  ( " " . join ( QQ . split ( ) ) , 0                  )
  ############################################################################
  def CountTotal       ( self , DB , TABLE , UsedOptions                   ) :
    ##########################################################################
    UQ = " , " . join  ( str(x) for x in UsedOptions                         )
    QQ = f"""select count(*) from {TABLE} where ( `used` in ( {UQ} ) ) ;"""
    ##########################################################################
    return DB . GetOne ( " " . join ( QQ . split ( ) ) , 0                   )
  ############################################################################
  def SqlDataToJson               ( self , RR                              ) :
    ##########################################################################
    if                            ( 5 != len ( RR )                        ) :
      return                      ( False , { } ,                            )
    ##########################################################################
    S   = self . assureItemString ( RR [ 4                                 ] )
    D   =                         {                                          }
    ##########################################################################
    try                                                                      :
      ########################################################################
      D = json . loads            ( S                                        )
      ########################################################################
    except                                                                   :
      pass
    ##########################################################################
    J   =                         { "Id"          : int ( RR [ 0       ] ) , \
                                    "Uuid"        : int ( RR [ 1       ] ) , \
                                    "Name"        : ""                     , \
                                    "Used"        : int ( RR [ 2       ] ) , \
                                    "States"      : int ( RR [ 3       ] ) , \
                                    "Description" : D                        }
    ##########################################################################
    return                        ( True  , J ,                              )
  ############################################################################
  def SqlDataToJsonListings          ( self , RR                           ) :
    ##########################################################################
    if                               ( RR in [ False , None              ] ) :
      return                         [                                       ]
    ##########################################################################
    if                               ( len ( RR ) <= 0                     ) :
      return                         [                                       ]
    ##########################################################################
    LISTs     =                      [                                       ]
    ##########################################################################
    for R in RR                                                              :
      ########################################################################
      A , J   = self . SqlDataToJson ( R                                     )
      ########################################################################
      if                             ( A                                   ) :
        LISTs . append               ( J                                     )
    ##########################################################################
    return LISTs
  ############################################################################
  def FetchListsByFirst                 ( self                             , \
                                          DB                               , \
                                          FRGTAB                           , \
                                          RELTAB                           , \
                                          REL                              , \
                                          UsedOptions                      , \
                                          StartId                          , \
                                          Amount                           , \
                                          SortOrder                        ) :
    ##########################################################################
    COL   = "`id`,`uuid`,`used`,`states`,`description`"
    UQ    = " , " . join                ( str(x) for x in UsedOptions        )
    UUID  = REL . get                   ( "first"                            )
    T1    = REL . get                   ( "t1"                               )
    T2    = REL . get                   ( "t2"                               )
    RR    = REL . get                   ( "relation"                         )
    ##########################################################################
    MQ    = f"""select `uuid` from {FRGTAB} where ( `used` in ( {UQ} ) )"""
    QQ    = f"""select `second` from {RELTAB}
               where ( `first` = {UUID} )
                 and ( `t1` = {T1} )
                 and ( `t2` = {T2} )
                 and ( `relation` = {RR} )
                 and ( `second` in ( {MQ} ) )
                 order by `position` {SortOrder}
                 limit {StartId} , {Amount} ;"""
    ##########################################################################
    UUIDs = DB . ObtainUuids            ( " " . join ( QQ . split (      ) ) )
    ##########################################################################
    RR    =                             [                                    ]
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      QQ  = f"""select {COL} from {FRGTAB} where ( `uuid` = {U} ) ;"""
      DB  . Query                       ( " " . join ( QQ . split (      ) ) )
      R   = DB . FetchOne               (                                    )
      RR  . append                      ( R                                  )
    ##########################################################################
    return self . SqlDataToJsonListings ( RR                                 )
  ############################################################################
  def FetchListsBySecond                ( self                             , \
                                          DB                               , \
                                          FRGTAB                           , \
                                          RELTAB                           , \
                                          REL                              , \
                                          UsedOptions                      , \
                                          StartId                          , \
                                          Amount                           , \
                                          SortOrder                        ) :
    ##########################################################################
    COL   = "`id`,`uuid`,`used`,`states`,`description`"
    UQ    = " , " . join                ( str(x) for x in UsedOptions        )
    UUID  = REL . get                   ( "second"                           )
    T1    = REL . get                   ( "t1"                               )
    T2    = REL . get                   ( "t2"                               )
    RR    = REL . get                   ( "relation"                         )
    ##########################################################################
    MQ    = f"""select `uuid` from {FRGTAB} where ( `used` in ( {UQ} ) )"""
    QQ    = f"""select `first` from {RELTAB}
               where ( `second` = {UUID} )
                 and ( `t1` = {T1} )
                 and ( `t2` = {T2} )
                 and ( `relation` = {RR} )
                 and ( `first` in ( {MQ} ) )
                 order by `reverse` {SortOrder}
                 limit {StartId} , {Amount} ;"""
    ##########################################################################
    UUIDs = DB . ObtainUuids            ( " " . join ( QQ . split (      ) ) )
    ##########################################################################
    RR    =                             [                                    ]
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      QQ  = f"""select {COL} from {FRGTAB} where ( `uuid` = {U} ) ;"""
      DB  . Query                       ( " " . join ( QQ . split (      ) ) )
      R   = DB . FetchOne               (                                    )
      RR  . append                      ( R                                  )
    ##########################################################################
    return self . SqlDataToJsonListings ( RR                                 )
  ############################################################################
  def FetchLists                        ( self                             , \
                                          DB                               , \
                                          FRGTAB                           , \
                                          OPTs                             , \
                                          StartId                          , \
                                          Amount                           , \
                                          SortOrder                        ) :
    ##########################################################################
    UQ  = " , " . join                  ( str(x) for x in OPTs               )
    COL = "`id`,`uuid`,`used`,`states`,`description`"
    QQ  = f"""select {COL} from {FRGTAB}
               where ( `used` in ( {UQ} ) )
               order by `id` {SortOrder}
               limit {StartId} , {Amount} ;"""
    DB  . Query                         ( " " . join ( QQ . split (      ) ) )
    RR  = DB . FetchAll                 (                                    )
    ##########################################################################
    return self . SqlDataToJsonListings ( RR                                 )
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
