# -*- coding: utf-8 -*-
##############################################################################
## 影片工具
##############################################################################
import os
import sys
import time
import datetime
import logging
import requests
import threading
import gettext
import binascii
import hashlib
import base64
import tempfile
import shutil
import glob
import json
import ffmpeg
import vlc
##############################################################################
from   random                               import seed
from   random                               import randint
from   random                               import randrange
##############################################################################
import urllib
import urllib . parse
from   urllib                               import parse
##############################################################################
import pathlib
from   pathlib                              import Path
##############################################################################
from   io                                   import BytesIO
from   wand   . image                       import Image
from   PIL                                  import Image          as Pillow
##############################################################################
import AITK
##############################################################################
from   AITK   . Database   . Query          import Query
from   AITK   . Database   . Connection     import Connection
from   AITK   . Database   . Pair           import Pair
from   AITK   . Database   . Columns        import Columns
##############################################################################
from   AITK   . Documents  . JSON           import Load           as LoadJson
from   AITK   . Documents  . JSON           import Save           as SaveJson
from   AITK   . Documents  . Name           import Name           as NameItem
from   AITK   . Documents  . Name           import Naming         as Naming
from   AITK   . Documents  . Notes          import Notes          as NoteItem
from   AITK   . Documents  . Variables      import Variables      as VariableItem
from   AITK   . Documents  . ParameterQuery import ParameterQuery as ParameterQuery
##############################################################################
from   AITK   . Calendars  . StarDate       import StarDate       as StarDate
from   AITK   . Calendars  . Periode        import Periode        as Periode
from   AITK   . Essentials . Relation       import Relation       as Relation
##############################################################################
ALBUMVERSION = "2024-12-01-04-21"
##############################################################################
def FileStringToWindowsCommand ( FILENAME                                  ) :
  ############################################################################
  F = FILENAME
  F = F . replace              ( "/"  , "\\"                                 )
  F = F . replace              ( "\\" , "\\\\"                               )
  F = F . replace              ( "\"" , "\\\""                               )
  ############################################################################
  return f"\"{F}\""
##############################################################################
def FileStringToWindowsFile ( FILENAME                                     ) :
  ############################################################################
  F = FILENAME
  F = F . replace            ( "\\" , "/"                                    )
  F = F . replace            ( " "  , "\ "                                   )
  F = F . replace            ( "\"" , "\\\""                                 )
  ############################################################################
  return F
##############################################################################
def M3UtoFilms                    ( M3U                                    ) :
  ############################################################################
  TEXT      = ""
  with open                       ( M3U , "rb" ) as F                        :
    TEXT    = F . read            (                                          )
  ############################################################################
  if                              ( len ( TEXT ) <= 0                      ) :
    return                        [                                          ]
  ############################################################################
  LM        = TEXT . find         ( b'# Playlist created by'                 )
  ############################################################################
  if                              ( LM > 0                                 ) :
    ##########################################################################
    TEXT    = TEXT                [ LM :                                     ]
    LM      = TEXT . find         ( b'\n'                                    )
    ##########################################################################
    if                            ( LM > 0                                 ) :
      TEXT  = TEXT                [ LM + 1 :                                 ]
  ############################################################################
  BODY      = TEXT . decode       ( "utf-8"                                  )
  if                              ( len ( BODY ) <= 0                      ) :
    return                        [                                          ]
  ############################################################################
  MDIR      = os . path . dirname ( os . path . realpath ( M3U )             )
  MDIR      = MDIR . replace      ( "\\" , "/"                               )
  ############################################################################
  LISTs     = BODY . split        ( "\n"                                     )
  FILMs     =                     [                                          ]
  ############################################################################
  for F in LISTs                                                             :
    ##########################################################################
    K       = F
    K       = K . replace         ( "\r" , ""                                )
    K       = K . replace         ( "\n" , ""                                )
    ##########################################################################
    if                            ( len ( K ) <= 0                         ) :
      continue
    ##########################################################################
    if                            ( "#" == K [ 0 : 1 ]                     ) :
      continue
    ##########################################################################
    if                            ( ( "/" in F ) or ( "\\" in F )          ) :
      ########################################################################
      T     = F
      ########################################################################
    else                                                                     :
      ########################################################################
      T     = f"{MDIR}/{K}"
    ##########################################################################
    if                           ( os . path . exists ( T )                ) :
      ########################################################################
      FILMs . append             ( T                                         )
  ############################################################################
  return FILMs
##############################################################################
def GetPosterImages     ( DIR                                              ) :
  ############################################################################
  CWD   = os   . getcwd (                                                    )
  os           . chdir  ( DIR                                                )
  FILEs = glob . glob   ( "*h.jpg"                                           )
  os           . chdir  ( CWD                                                )
  ############################################################################
  return FILEs
##############################################################################
def MergeCoverPosters               ( JPEG                                 ) :
  ############################################################################
  PDIR        = os . path . dirname ( os . path . realpath ( JPEG )          )
  LeftFile    = ""
  RightFile   = ""
  ############################################################################
  if                                ( JPEG . endswith ( "bh.jpg" )         ) :
    ##########################################################################
    LeftFile  = JPEG
    RightFile = JPEG
    RightFile = RightFile . replace ( "bh.jpg" , "h.jpg"                     )
  ############################################################################
  elif                              ( JPEG . endswith ( "h.jpg" )          ) :
    ##########################################################################
    LeftFile  = JPEG
    RightFile = JPEG
    LeftFile  = LeftFile  . replace ( "h.jpg"  , "bh.jpg"                    )
  ############################################################################
  if                                ( len ( LeftFile  ) <= 0               ) :
    return
  ############################################################################
  if                                ( len ( RightFile ) <= 0               ) :
    return
  ############################################################################
  if                                ( not os . path . exists ( LeftFile  ) ) :
    return
  ############################################################################
  if                                ( not os . path . exists ( RightFile ) ) :
    return
  ############################################################################
  CoverFile   = f"{PDIR}/Cover.jpg"
  ############################################################################
  leftImage   = Pillow . open       ( LeftFile                               )
  rightImage  = Pillow . open       ( RightFile                              )
  ############################################################################
  leftSize    = leftImage  . size
  rightSize   = rightImage . size
  ############################################################################
  w           = leftSize [ 0 ] + rightSize [ 0 ]
  h           = leftSize [ 1 ]
  ############################################################################
  if                                ( leftSize [ 1 ] != rightSize [ 1 ]    ) :
    return
  ############################################################################
  newImage    = Pillow . new        ( 'RGB' , ( w , h ) , ( 255,255,255 )    )
  newImage    . paste               ( leftImage  , (            0   , 0    ) )
  newImage    . paste               ( rightImage , ( leftSize [ 0 ] , 0    ) )
  newImage    . save                ( CoverFile  , "JPEG"                    )
  ############################################################################
  return
##############################################################################
def GenerateAlbumFolder  ( DIR                                             ) :
  ############################################################################
  if                     ( not Path ( DIR ) . is_dir ( )                   ) :
    return
  ############################################################################
  ROOTs    =             [ "DP"                                            , \
                           "Features"                                      , \
                           "images"                                        , \
                           "projects"                                      , \
                           "roles"                                         , \
                           "scripts"                                       , \
                           "subtitles"                                     , \
                           "videos"                                          ]
  SUBs     =             [ "CN" , "EN" , "JP" , "TW"                         ]
  ############################################################################
  for F in ROOTs                                                             :
    ##########################################################################
    D      = f"{DIR}/{F}"
    ##########################################################################
    if                   ( not Path ( D ) . is_dir ( )                     ) :
      ########################################################################
      try                                                                    :
        ######################################################################
        os . makedirs    ( D                                                 )
        ######################################################################
      except                                                                 :
        ######################################################################
        pass
  ############################################################################
  ST       = f"{DIR}/subtitles"
  ############################################################################
  if                     ( Path ( ST ) . is_dir ( )                        ) :
    ##########################################################################
    for S in SUBs                                                            :
      ########################################################################
      Z    = f"{ST}/{S}"
      ########################################################################
      if                 ( not Path ( Z ) . is_dir ( )                     ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          os . makedirs  ( Z                                                 )
          ####################################################################
        except                                                               :
          ####################################################################
          pass
  ############################################################################
  return
##############################################################################
def OpenMovieAlbumJson ( DIR                                               ) :
  ############################################################################
  global ALBUMVERSION
  ############################################################################
  if                   ( not Path ( DIR ) . is_dir ( )                     ) :
    return ""
  ############################################################################
  GenerateAlbumFolder  ( DIR                                                 )
  ############################################################################
  AlbumJson = f"{DIR}/album.json"
  ############################################################################
  if                   ( os . path . exists ( AlbumJson                  ) ) :
    return AlbumJson
  ############################################################################
  NOW       = StarDate (                                                     )
  NOW       . Now      (                                                     )
  FOLDER    = os . path . basename ( DIR                                     )
  JFV       =          { "Version"   : ALBUMVERSION                        , \
                         "Album"     : ""                                  , \
                         "Names"     : { "en-US" : ""                      , \
                                         "ja-JP" : ""                      , \
                                         "zh-TW" : ""                    } , \
                         "Directory" : DIR                                 , \
                         "Folder"    : FOLDER                              , \
                         "Language"  : "zh-TW"                             , \
                         "File"      : AlbumJson                           , \
                         "Timestamp" : NOW . Stardate                        }
  ############################################################################
  SaveJson             ( AlbumJson , JFV                                     )
  ############################################################################
  return AlbumJson
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
