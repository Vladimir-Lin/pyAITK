# -*- coding: utf-8 -*-
##############################################################################
## Player
## 影片播放
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import vlc
##############################################################################
from   PySide6                     import QtCore
from   PySide6                     import QtGui
from   PySide6                     import QtWidgets
from   PySide6 . QtCore            import *
from   PySide6 . QtGui             import *
from   PySide6 . QtWidgets         import *
from   AITK    . Qt6               import *
##############################################################################
from   AITK    . Qt6 . MenuManager import MenuManager as MenuManager
from   AITK    . Qt6 . AttachDock  import AttachDock  as AttachDock
from   AITK    . Qt6 . Widget      import Widget      as Widget
##############################################################################
from                 . Panel       import Panel       as Panel
##############################################################################
class PlayInternalLayer          ( QWidget                                 ) :
  ############################################################################
  def __init__                   ( self , parent = None                    ) :
    ##########################################################################
    super ( ) . __init__         ( parent , Qt.FramelessWindowHint           )
    self . setMouseTracking      ( True                                      )
    self . MoveCallback = None
    ##########################################################################
    ## self . setAttribute   ( Qt . WA_TranslucentBackground )
    PAL  = self   . palette      (                                           )
    ## BKC  = QColor                (   0 ,   0 ,   0 ,   0                     )
    PAL  . setColor              ( QPalette . Window , Qt . black            )
    self . setAutoFillBackground ( True                                      )
    self . setPalette            ( PAL                                       )
    ##########################################################################
    return
  ############################################################################
  def mouseMoveEvent           ( self , e                                  ) :
    ##########################################################################
    super ( ) . mouseMoveEvent (        e                                    )
    self      . MoveCallback   (        e                                    )
    ##########################################################################
    return
##############################################################################
class Player                       ( Widget , AttachDock                   ) :
  ############################################################################
  HavingMenu  = 1371434312
  ############################################################################
  attachNone  = Signal ( QWidget                                             )
  attachDock  = Signal ( QWidget , str , int , int                           )
  attachMdi   = Signal ( QWidget , int                                       )
  Clicked     = Signal ( int                                                 )
  ############################################################################
  def __init__         ( self , parent = None , plan = None                ) :
    ##########################################################################
    super (                   ) . __init__ ( parent , plan                   )
    super ( AttachDock , self ) . __init__ (                                 )
    self . InitializeDock                  (          plan                   )
    self . Configure                       (                                 )
    ##########################################################################
    return
  ############################################################################
  def Configure ( self                                                     ) :
    ##########################################################################
    self . setMouseTracking ( True                                           )
    ##########################################################################
    self . INSTANCE   = vlc . Instance (                                     )
    self . MEDIA      = None
    self . PLAYER     = self . INSTANCE . media_player_new (                 )
    ##########################################################################
    self . LAYER      = PlayInternalLayer ( self                             )
    self . LAYER . MoveCallback = self . MoveCallback
    ##########################################################################
    self . ToolHeight = 64
    self . Duration   = -1
    self . Range      = 1000
    self . VWidth     = 640
    self . VHeight    = 480
    self . ShowPanel  = False
    self . isPause    = False
    ##########################################################################
    self . PANEL      = Panel ( self , self . PlanFunc                       )
    self . PANEL      . hide  (                                              )
    ##########################################################################
    self . PANEL . Play   . clicked . connect ( self . DoPlay                )
    self . PANEL . Stop   . clicked . connect ( self . DoStop                )
    self . PANEL . Pause  . clicked . connect ( self . DoPause               )
    ##########################################################################
    self . PANEL . Clock  . sliderMoved   . connect ( self . setPosition     )
    self . PANEL . Clock  . sliderPressed . connect ( self . setPosition     )
    ##########################################################################
    AVL  = self  . PLAYER . audio_get_volume (                               )
    self . PANEL . Volume . setValue         ( AVL                           )
    self . PANEL . Volume . valueChanged  . connect ( self . setVolume       )
    self . PANEL . Volume . setToolTip       ( f"{AVL}%"                     )
    ##########################################################################
    self . CLOCK      = QTimer ( self                                        )
    self . CLOCK      . setInterval ( 25                                     )
    self . CLOCK      . timeout . connect ( self . UpdateINFO                )
    ##########################################################################
    self . setWindowIcon      ( QIcon ( ":/images/videogroup.png"          ) )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 1024 , 768 )                      )
  ############################################################################
  def PrepareForActions           ( self                                   ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def AttachActions   ( self         ,                          Enabled    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared ( )                   ) :
      return False
    ##########################################################################
    ##########################################################################
    return True
  ############################################################################
  def showEvent            ( self , e                                      ) :
    ##########################################################################
    super ( ) . showEvent  (        e                                        )
    self      . Relocation (                                                 )
    ##########################################################################
    return
  ############################################################################
  def resizeEvent           ( self , e                                     ) :
    ##########################################################################
    super ( ) . resizeEvent (        e                                       )
    self      . Relocation  (                                                )
    ##########################################################################
    return
  ############################################################################
  def closeEvent             ( self , e                                    ) :
    ##########################################################################
    self . defaultCloseEvent (        e                                      )
    ##########################################################################
    return
  ############################################################################
  def MoveCallback              ( self , e                                 ) :
    ##########################################################################
    H = self . height   ( ) - self . ToolHeight
    Y = e    . position ( ) . y (                                            )
    ##########################################################################
    if                          ( Y < H                                    ) :
      ########################################################################
      if                        (     self . ShowPanel                     ) :
        ######################################################################
        self . HideTool         (                                            )
      ########################################################################
    else                                                                     :
      ########################################################################
      if                        ( not self . ShowPanel                     ) :
        ######################################################################
        self . DisplayTool      (                                            )
    ##########################################################################
    return
  ############################################################################
  def mouseMoveEvent           ( self , e                                  ) :
    ##########################################################################
    super ( ) . mouseMoveEvent (        e                                    )
    self      . MoveCallback   (        e                                    )
    ##########################################################################
    return
  ############################################################################
  def DisplayTool         ( self                                           ) :
    ##########################################################################
    self . ShowPanel = True
    ##########################################################################
    self . PANEL . show   (                                                  )
    self . PANEL . raise_ (                                                  )
    ##########################################################################
    return
  ############################################################################
  def HideTool          ( self                                             ) :
    ##########################################################################
    self . ShowPanel = False
    ##########################################################################
    self . PANEL . hide (                                                    )
    ##########################################################################
    return
  ############################################################################
  def Relocation               ( self                                      ) :
    ##########################################################################
    W = self . width           (                                             )
    H = self . height          (                                             )
    T = self . ToolHeight
    X = 0
    Y = self . height ( ) - T
    ##########################################################################
    self . LAYER . setGeometry ( 0 , 0 , W , H                               )
    self . PANEL . setGeometry ( X , Y , W , T                               )
    ##########################################################################
    return
  ############################################################################
  def DoPlay             ( self                                            ) :
    ##########################################################################
    if                   ( self . MEDIA in [ False , None                ] ) :
      return
    ##########################################################################
    self . isPause = False
    ##########################################################################
    ## self . LAYER  . hide (                                                   )
    self . PLAYER . play (                                                   )
    ##########################################################################
    self . PANEL . Play  . setEnabled ( True                                 )
    self . PANEL . Play  . hide       (                                      )
    self . PANEL . Stop  . setEnabled ( True                                 )
    self . PANEL . Pause . setEnabled ( True                                 )
    self . PANEL . Pause . show       (                                      )
    ##########################################################################
    self . CLOCK         . start      (                                      )
    ##########################################################################
    self . setMouseTracking ( True                                           )
    ##########################################################################
    return
  ############################################################################
  def DoStop ( self                                                        ) :
    ##########################################################################
    if                   ( self . MEDIA in [ False , None                ] ) :
      return
    ##########################################################################
    self . isPause = False
    ##########################################################################
    self . PLAYER . stop (                                                   )
    ##########################################################################
    self . PANEL . Play  . setEnabled ( True                                 )
    self . PANEL . Play  . show       (                                      )
    self . PANEL . Stop  . setEnabled ( False                                )
    self . PANEL . Pause . setEnabled ( True                                 )
    self . PANEL . Pause . hide       (                                      )
    ##########################################################################
    self . CLOCK         . stop       (                                      )
    ##########################################################################
    return
  ############################################################################
  def DoPause             ( self                                           ) :
    ##########################################################################
    if                    ( self . MEDIA in [ False , None               ] ) :
      return
    ##########################################################################
    self . isPause = True
    ##########################################################################
    self . PLAYER . pause (                                                   )
    ##########################################################################
    self . PANEL . Play  . setEnabled ( True                                 )
    self . PANEL . Play  . show       (                                      )
    self . PANEL . Stop  . setEnabled ( True                                 )
    self . PANEL . Pause . setEnabled ( True                                 )
    self . PANEL . Pause . hide       (                                      )
    ##########################################################################
    self . CLOCK         . stop       (                                      )
    ##########################################################################
    return
  ############################################################################
  def toClock  ( self , T                                                  ) :
    ##########################################################################
    R    = int ( T  % 1000                                                   )
    S    = int ( T  / 1000                                                   )
    ##########################################################################
    DD   = ""
    V    = R
    for i in range ( 0 , 3 )                                                 :
      ########################################################################
      Z  = V % 10
      ########################################################################
      DD = f"{Z}{DD}"
    ##########################################################################
    SS   = int ( S  % 60                                                     )
    MM   = int ( S  / 60                                                     )
    ##########################################################################
    SA   = int ( SS % 10                                                     )
    SB   = int ( SS / 10                                                     )
    SS   = f"{SB}{SA}"
    ##########################################################################
    HH   = int ( MM / 60                                                     )
    MM   = int ( MM % 60                                                     )
    ##########################################################################
    MA   = int ( MM % 10                                                     )
    MB   = int ( MM / 10                                                     )
    MM   = f"{MB}{MA}"
    ##########################################################################
    return f"{HH}:{MM}:{SS}.{DD}"
  ############################################################################
  def UpdateINFO ( self                                                    ) :
    ##########################################################################
    if           ( self . MEDIA in [ False , None                        ] ) :
      return
    ##########################################################################
    if           ( self . Duration <= 0                                    ) :
      return
    ##########################################################################
    VPOS  = self . PLAYER . get_position (                                   )
    POS   = int  ( VPOS * float ( self . Range    )                          )
    T     = int  ( VPOS * float ( self . Duration )                          )
    S     = self . toClock ( T                                               )
    ##########################################################################
    self  . PANEL . Clock  . setValue   ( POS                                )
    self  . PANEL . Clock  . setToolTip ( S                                  )
    self  . PANEL . CLabel . setText    ( S                                  )
    ##########################################################################
    if           ( not self . PLAYER . is_playing (                      ) ) :
      ########################################################################
      self . CLOCK . stop (                                                  )
      ########################################################################
      if         ( not self . isPause                                      ) :
        ######################################################################
        self . DoStop (                                                      )
    ##########################################################################
    return
  ############################################################################
  def setPosition                         ( self                           ) :
    ##########################################################################
    self . CLOCK  . stop                  (                                  )
    POS  = self   . PANEL . Clock . value (                                  )
    RATE = float ( float ( POS ) / float ( self . Range ) )
    self . PLAYER . set_position          ( RATE                             )
    self . CLOCK  . start                 (                                  )
    ##########################################################################
    return
  ############################################################################
  def setVolume                         ( self , volume                    ) :
    ##########################################################################
    self . PLAYER . audio_set_volume    ( volume                             )
    self . PANEL  . Volume . setToolTip ( f"{volume}%"                       )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def loading                         ( self                               ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def startup        ( self                                                ) :
    ##########################################################################
    ## if               ( not self . isPrepared ( )                           ) :
    ##   self . Prepare (                                                       )
    ##########################################################################
    ## self   . Go      ( self . loading                                        )
    ##########################################################################
    return
  ############################################################################
  def ShowFirstOnly              ( self                                    ) :
    ##########################################################################
    DURATION = self . PLAYER . get_length (                                  )
    ##########################################################################
    if                           ( DURATION <= 0                           ) :
      ########################################################################
      QTimer . singleShot        ( 100 , self , self . ShowFirstOnly         )
      ########################################################################
      return
    ##########################################################################
    self . PLAYER . set_position ( 0.0                                       )
    self . PLAYER . stop         (                                           )
    ##########################################################################
    self . Duration = DURATION
    self . Range    = int        ( float ( DURATION + 999 ) / 1000.0         )
    ##########################################################################
    S    = self  . toClock       ( DURATION                                  )
    self . PANEL . FLabel . setText    ( S                                   )
    self . PANEL . Clock  . setMaximum ( self . Range                        )
    ##########################################################################
    ( W , H ) = self  . PLAYER . video_get_size (                            )
    self . VWidth  = W
    self . VHeight = H
    ##########################################################################
    return
  ############################################################################
  def Play ( self , Filename                                               ) :
    ##########################################################################
    self . MEDIA  = self . INSTANCE . media_new ( Filename                   )
    self . PLAYER . set_media                   ( self . MEDIA               )
    self . MEDIA  . parse                       (                            )
    ##########################################################################
    TITLE         = self . MEDIA  . get_meta    ( 0                          )
    self          . setWindowTitle              ( TITLE                      )
    ##########################################################################
    self          . PLAYER . set_hwnd ( int ( self . LAYER . winId (     ) ) )
    self          . PLAYER . video_set_mouse_input ( False                   )
    self          . PLAYER . video_set_key_input   ( False                   )
    ##########################################################################
    self . Duration = -1
    self . Range    = 1000
    self . PANEL . Clock . setMaximum     ( 1000                             )
    self . PANEL . Clock . setValue       ( 0                                )
    ##########################################################################
    self         . PLAYER . play          (                                  )
    ##########################################################################
    self . PANEL . Volume . setValue ( self . PLAYER . audio_get_volume ( )  )
    ##########################################################################
    self . PANEL . Play   . setEnabled ( True                                )
    self . PANEL . Play   . show       (                                     )
    self . PANEL . Stop   . setEnabled ( False                               )
    self . PANEL . Pause  . setEnabled ( True                                )
    self . PANEL . Pause  . hide       (                                     )
    ##########################################################################
    self . PANEL . raise_ (                                                  )
    ##########################################################################
    QTimer . singleShot   ( 100 , self , self . ShowFirstOnly                )
    ##########################################################################
    return
  ############################################################################
  def Menu                         ( self , pos                            ) :
    ##########################################################################
    if                             ( not self . isPrepared ( )             ) :
      return False
    ##########################################################################
    doMenu = self . isFunction     ( self . HavingMenu                       )
    if                             ( not doMenu                            ) :
      return False
    ##########################################################################
    ##########################################################################
    return True
##############################################################################
