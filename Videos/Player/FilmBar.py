# -*- coding: utf-8 -*-
##############################################################################
## FilmBar
## 播放歷程
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import vlc
import math
import cv2
import dlib
##############################################################################
import pathlib
from   pathlib                import Path
##############################################################################
import AITK
##############################################################################
from   PySide6                import QtCore
from   PySide6                import QtGui
from   PySide6                import QtWidgets
from   PySide6 . QtCore       import *
from   PySide6 . QtGui        import *
from   PySide6 . QtWidgets    import *
from   AITK    . Qt6          import *
##############################################################################
from   AITK    . Qt6 . Widget import Widget as Widget
##############################################################################
class FilmBar            ( Widget                                          ) :
  ############################################################################
  ############################################################################
  def __init__           ( self , parent = None , plan = None              ) :
    ##########################################################################
    super ( ) . __init__ (        parent        , plan                       )
    self . Configure     (                                                   )
    ##########################################################################
    return
  ############################################################################
  def Configure             ( self                                         ) :
    ##########################################################################
    self . setMouseTracking ( False                                          )
    self . FILM =           { "Exists"   : False                           , \
                              "Duration" :  0                              , \
                              "At"       : -1                              , \
                              "Bars"     : [                               ] }
    ##########################################################################
    return
  ############################################################################
  def paintEvent            ( self , e                                     ) :
    ##########################################################################
    D       = self . FILM   [ "Duration"                                     ]
    W       = self . width  (                                                )
    H       = self . height (                                                )
    ##########################################################################
    p       = QPainter      ( self                                           )
    p       . setPen        ( QColor ( Qt . red     )                        )
    p       . setBrush      ( QBrush ( Qt . green   )                        )
    ##########################################################################
    p       . drawRect      ( 0 , 0 , W - 1 , H - 1                          )
    ##########################################################################
    if                      ( D > 0                                        ) :
      ########################################################################
      p     . setPen        ( QColor ( Qt . magenta )                        )
      p     . setBrush      ( QBrush ( Qt . blue    )                        )
      ########################################################################
      for B in self . FILM  [ "Bars"                                       ] :
        ######################################################################
        S   = B             [ "Start"                                        ]
        F   = B             [ "Finish"                                       ]
        ######################################################################
        X1  = int           ( S * W / D                                      )
        X2  = int           ( F * W / D                                      )
        Z   = int           ( X2 - X1                                        )
        ######################################################################
        if                  ( Z > 0                                        ) :
          ####################################################################
          p . drawRect      ( X1 , 1 , Z , H - 3                             )
    ##########################################################################
    p       . end           (                                                )
    ##########################################################################
    return
  ############################################################################
  def AcceptFilm   ( self , FILM                                           ) :
    ##########################################################################
    self . FILM = FILM
    ##########################################################################
    self . repaint (                                                         )
    ##########################################################################
    return
##############################################################################
