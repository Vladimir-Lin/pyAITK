# -*- coding: utf-8 -*-
##############################################################################
## PlayList
## 播放影片列表
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import pathlib
import ffmpeg
##############################################################################
import AITK
##############################################################################
from   AITK    . Documents . JSON  import Load        as LoadJson
from   AITK    . Documents . JSON  import Save        as SaveJson
##############################################################################
from   PySide6                     import QtCore
from   PySide6                     import QtGui
from   PySide6                     import QtWidgets
from   PySide6 . QtCore            import *
from   PySide6 . QtGui             import *
from   PySide6 . QtWidgets         import *
from   AITK    . Qt6               import *
##############################################################################
from   AITK    . Qt6 . MenuManager import MenuManager as MenuManager
from   AITK    . Qt6 . TreeDock    import TreeDock    as TreeDock
##############################################################################
from   AITK    . Videos . Film     import Film        as FilmItem
##############################################################################
class PlayList                     ( TreeDock                              ) :
  ############################################################################
  HavingMenu    = 1371434312
  ############################################################################
  playFilm      = Signal           ( dict                                    )
  appendFilm    = Signal           ( dict                                    )
  FilmsAppended = Signal           (                                         )
  HistoryLoaded = Signal           (                                         )
  ############################################################################
  def __init__                     ( self , parent = None , plan = None    ) :
    ##########################################################################
    super ( ) . __init__           (        parent        , plan             )
    ##########################################################################
    self . dockingOrientation = Qt . Vertical
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setMinimumWidth         ( 240                                     )
    self . setMinimumHeight        ( 400                                     )
    self . setColumnCount          ( 2                                       )
    self . setColumnHidden         ( 1 , True                                )
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ContiguousSelection"                   )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . NoDragDrop          )
    ##########################################################################
    self . WMutex     = threading . Lock (                                   )
    self . Waiting    =                  [                                   ]
    ##########################################################################
    self . Probing    = False
    self . LMutex     = threading . Lock (                                   )
    self . Listings   =                  [                                   ]
    self . SIGNATUREs =                  [                                   ]
    ##########################################################################
    self . IMutex     = threading . Lock (                                   )
    self . IDCs       =                  {                                   }
    ##########################################################################
    self . appendFilm . connect          ( self . AppendItem                 )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 320 , 480 )                       )
  ############################################################################
  def AttachActions   ( self         ,                          Enabled    ) :
    ##########################################################################
    self . LinkAction ( "Refresh"    , self . startup         , Enabled      )
    ##########################################################################
    ## self . LinkAction ( "Insert"     , self . InsertItem      , Enabled      )
    self . LinkAction ( "Delete"     , self . DeleteItems     , Enabled      )
    ##########################################################################
    self . LinkAction ( "Select"     , self . SelectOne       , Enabled      )
    self . LinkAction ( "SelectAll"  , self . SelectAll       , Enabled      )
    self . LinkAction ( "SelectNone" , self . SelectNone      , Enabled      )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared ( )                   ) :
      return False
    ##########################################################################
    self . setActionLabel    ( "Label" , self . windowTitle ( )              )
    self . AttachActions     ( True                                          )
    ##########################################################################
    return True
  ############################################################################
  def closeEvent             ( self , event                                ) :
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . defaultCloseEvent (        event                                  )
    ##########################################################################
    return
  ############################################################################
  def startup                             ( self                           ) :
    ##########################################################################
    FPLI                = self . Settings [ "Playlist"                       ]
    FIDC                = self . Settings [ "IDC"                            ]
    ##########################################################################
    self   . Listings   = LoadJson        ( FPLI                             )
    self   . IDCs       = LoadJson        ( FIDC                             )
    self   . SIGNATUREs =                 [                                  ]
    ##########################################################################
    for FILM in self . Listings                                              :
      ########################################################################
      SIG  = FILM                         [ "Signature"                      ]
      self . SIGNATUREs . append          ( SIG                              )
      ########################################################################
      self . AppendItem                   ( FILM                             )
    ##########################################################################
    if                                    ( len ( self . SIGNATUREs ) > 0  ) :
      ########################################################################
      self . HistoryLoaded . emit         (                                  )
    ##########################################################################
    return
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( "PlayList" , 1                                   )
    ##########################################################################
    return
  ############################################################################
  def toClock  ( self , T                                                  ) :
    ##########################################################################
    T    = int ( T  / 1000                                                   )
    R    = int ( T  % 1000                                                   )
    S    = int ( T  / 1000                                                   )
    ##########################################################################
    DD   = ""
    V    = R
    ##########################################################################
    for i in range ( 0 , 3                                                 ) :
      ########################################################################
      Z  = int     ( V % 10                                                  )
      V  = int     ( V / 10                                                  )
      ########################################################################
      DD = f"{Z}{DD}"
    ##########################################################################
    SS   = int ( S  % 60                                                     )
    MM   = int ( S  / 60                                                     )
    ##########################################################################
    SA   = int ( SS % 10                                                     )
    SB   = int ( SS / 10                                                     )
    SS   = f"{SB}{SA}"
    ##########################################################################
    HH   = int ( MM / 60                                                     )
    MM   = int ( MM % 60                                                     )
    ##########################################################################
    MA   = int ( MM % 10                                                     )
    MB   = int ( MM / 10                                                     )
    MM   = f"{MB}{MA}"
    ##########################################################################
    return f"{HH}:{MM}:{SS}.{DD}"
  ############################################################################
  def AppendItem              ( self , film                                ) :
    ##########################################################################
    NAME     = film           [ "Name"                                       ]
    SIG      = film           [ "Signature"                                  ]
    DURATION = film           [ "Duration"                                   ]
    W        = film           [ "Width"                                      ]
    H        = film           [ "Height"                                     ]
    S        = self . toClock ( DURATION                                     )
    T        = f"{W} x {H} / {S}"
    ##########################################################################
    item = QTreeWidgetItem    (                                              )
    item . setText            ( 0 , NAME                                     )
    item . setToolTip         ( 0 , T                                        )
    item . setData            ( 0 , Qt . UserRole , SIG                      )
    item . setData            ( 1 , Qt . UserRole , film                     )
    self . addTopLevelItem    ( item                                         )
    ##########################################################################
    return
  ############################################################################
  def ClearItems            ( self                                         ) :
    ##########################################################################
    self . clear            (                                                )
    ##########################################################################
    self . LMutex . acquire (                                                )
    ##########################################################################
    self . Listings   =     [                                                ]
    self . SIGNATUREs =     [                                                ]
    ##########################################################################
    self . LMutex . release (                                                )
    ##########################################################################
    threading . Thread      ( target = self . StoreListings                ) \
              . start       (                                                )
    ##########################################################################
    return
  ############################################################################
  def DeleteItems ( self                                                   ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def PlayItem             ( self , ITEM                                   ) :
    ##########################################################################
    FILM = ITEM . data     ( 1 , Qt . UserRole                               )
    self . playFilm . emit ( FILM                                            )
    ##########################################################################
    return
  ############################################################################
  def GetWaiting              ( self                                       ) :
    ##########################################################################
    E      = False
    F      = ""
    ##########################################################################
    self   . WMutex . acquire (                                              )
    ##########################################################################
    if                        ( len ( self . Waiting ) > 0                 ) :
      ########################################################################
      E    = True
      F    = self . Waiting   [ 0                                            ]
      self . Waiting . pop    ( 0                                            )
    ##########################################################################
    self   . WMutex . release (                                              )
    ##########################################################################
    return                    ( E , F ,                                      )
  ############################################################################
  def AddWaiting                ( self , FILEs                             ) :
    ##########################################################################
    CNT  = 0
    ##########################################################################
    self . WMutex . acquire     (                                            )
    ##########################################################################
    for F in FILEs                                                           :
      ########################################################################
      if                        ( F not in self . Waiting                  ) :
        ######################################################################
        self . Waiting . append ( F                                          )
    ##########################################################################
    CNT  = len                  ( self . Waiting                             )
    ##########################################################################
    self . WMutex . release     (                                            )
    ##########################################################################
    if                          ( CNT > 0                                  ) :
      ########################################################################
      threading . Thread        ( target = self . ProbeWaitings            ) \
                . start         (                                            )
    ##########################################################################
    return
  ############################################################################
  def Queue ( self , FILEs                                                 ) :
    ##########################################################################
    threading . Thread ( target = self . AddWaiting                    ,     \
                         args   = ( FILEs                              , ) ) \
              . start  (                                                     )
    ##########################################################################
    return
  ############################################################################
  def LocateFilm                 ( self , FILE , DETAILs                   ) :
    ##########################################################################
    VFI    = FilmItem            (                                           )
    ##########################################################################
    if                           ( not VFI . Parse ( "" , DETAILs        ) ) :
      return
    ##########################################################################
    SIG    = VFI . toSignature   (                                           )
    JFI    = VFI . toJson        (                                           )
    LAT    = -1
    ##########################################################################
    JFI [ "Locations" ] =        [ FILE                                      ]
    ##########################################################################
    NAME   = JFI                 [ "Name"                                    ]
    ##########################################################################
    if                           ( len ( NAME ) <= 0                       ) :
      ########################################################################
      FNO  = pathlib . Path      ( FILE ) . stem
      ########################################################################
      if                         ( len ( FNO ) > 0                         ) :
        ######################################################################
        JFI [ "Name" ] = FNO
    ##########################################################################
    self   . LMutex . acquire    (                                           )
    ##########################################################################
    if                           ( SIG not in self . SIGNATUREs            ) :
      ########################################################################
      LAT  = len                 ( self . Listings                           )
      self . Listings   . append ( JFI                                       )
      self . SIGNATUREs . append ( SIG                                       )
    ##########################################################################
    self   . LMutex . release    (                                           )
    ##########################################################################
    if                           ( LAT < 0                                 ) :
      return
    ##########################################################################
    self . appendFilm . emit     ( JFI                                       )
    ##########################################################################
    return
  ############################################################################
  def ProbeWaitings                    ( self                              ) :
    ##########################################################################
    if                                 ( self . Probing                    ) :
      return
    ##########################################################################
    self . Probing = True
    PROBE          = True
    APPENDED       = False
    ##########################################################################
    while                              ( PROBE                             ) :
      ########################################################################
      ( E , F )    = self . GetWaiting (                                     )
      ########################################################################
      if                               ( E                                 ) :
        ######################################################################
        VFI        = FilmItem          (                                     )
        VJI        = VFI . Probe       ( F                                   )
        self       . LocateFilm        ( F , VJI                             )
        ######################################################################
        APPENDED   = True
        ######################################################################
      else                                                                   :
        ######################################################################
        PROBE      = False
    ##########################################################################
    self . Probing = False
    ##########################################################################
    if                                 ( APPENDED                          ) :
      ########################################################################
      self . FilmsAppended . emit      (                                     )
      ########################################################################
      self . StoreListings             (                                     )
    ##########################################################################
    return
  ############################################################################
  def GetReadyPlaying                   ( self                             ) :
    ##########################################################################
    CNT    = self . topLevelItemCount   (                                    )
    ITEM   = self . currentItem         (                                    )
    VAT    = -1
    ##########################################################################
    if                                  ( CNT <= 0                         ) :
      return                            ( False , { } ,                      )
    ##########################################################################
    if                                  ( ITEM not in [ False , None     ] ) :
      ########################################################################
      VAT  = self . indexOfTopLevelItem ( ITEM                               )
    ##########################################################################
    VAT    = int                        ( VAT + 1                            )
    ##########################################################################
    if                                  ( VAT >= CNT                       ) :
      return                            ( False , { } ,                      )
    ##########################################################################
    ITEM   = self . topLevelItem        ( VAT                                )
    self   . setCurrentItem             ( ITEM                               )
    ##########################################################################
    SIG    = ITEM . data                ( 0 , Qt . UserRole                  )
    FILM   = ITEM . data                ( 1 , Qt . UserRole                  )
    ##########################################################################
    return                              ( True , FILM ,                      )
  ############################################################################
  def StoreListings        ( self                                          ) :
    ##########################################################################
    FPLI = self . Settings [ "Playlist"                                      ]
    ##########################################################################
    SaveJson               ( FPLI , self . Listings                          )
    ##########################################################################
    return
  ############################################################################
  def StoreIDCs            ( self                                          ) :
    ##########################################################################
    FIDC = self . Settings [ "IDC"                                           ]
    ##########################################################################
    SaveJson               ( FIDC , self . IDCs                              )
    ##########################################################################
    return
  ############################################################################
  def Menu                         ( self , pos                            ) :
    ##########################################################################
    if                             ( not self . isPrepared ( )             ) :
      return False
    ##########################################################################
    doMenu = self . isFunction     ( self . HavingMenu                       )
    if                             ( not doMenu                            ) :
      return False
    ##########################################################################
    self   . Notify                ( 0                                       )
    ##########################################################################
    items  = self . selectedItems  (                                         )
    atItem = self . currentItem    (                                         )
    SIG    = ""
    ##########################################################################
    if                             ( atItem not in [ False , None ]        ) :
      SIG  = atItem . data         ( 0 , Qt . UserRole                       )
    ##########################################################################
    mm     = MenuManager           ( self                                    )
    ##########################################################################
    if                             ( atItem not in [ False , None        ] ) :
      ########################################################################
      MSG  = self . getMenuItem    ( "Play"                                  )
      ICO  = QIcon                 ( ":/images/PlayerPlay.png"               )
      mm   . addActionWithIcon     ( 1001 , ICO , MSG                        )
    ##########################################################################
    self   . AppendRefreshAction   ( mm , 1101                               )
    ##########################################################################
    MSG    = self . getMenuItem    ( "Clear"                                 )
    mm     . addAction             ( 1201 , MSG                              )
    ##########################################################################
    if                             ( atItem not in [ False , None ]        ) :
      ########################################################################
      self . AppendDeleteAction    ( mm , 1202                               )
    ##########################################################################
    mm     . addSeparator          (                                         )
    self   . DockingMenu           ( mm                                      )
    ##########################################################################
    mm     . setFont               ( self    . menuFont ( )                  )
    aa     = mm . exec_            ( QCursor . pos      ( )                  )
    at     = mm . at               ( aa                                      )
    ##########################################################################
    if                             ( self . RunDocking   ( mm , aa )       ) :
      return True
    ##########################################################################
    if                             ( at == 1001                            ) :
      ########################################################################
      self . PlayItem              ( atItem                                  )
      ########################################################################
      return True
    ##########################################################################
    if                             ( at == 1101                            ) :
      ########################################################################
      ########################################################################
      return True
    ##########################################################################
    if                             ( at == 1201                            ) :
      ########################################################################
      self . ClearItems            (                                         )
      ########################################################################
      return True
    ##########################################################################
    if                             ( at == 1202                            ) :
      ########################################################################
      self . DeleteItems           (                                         )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
