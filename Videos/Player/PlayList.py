# -*- coding: utf-8 -*-
##############################################################################
## PlayList
## 播放影片列表
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import base64
import json
import pathlib
import ffmpeg
##############################################################################
import AITK
##############################################################################
from   AITK    . Calendars . StarDate import StarDate       as StarDate
from   AITK    . Documents . JSON     import Load           as LoadJson
from   AITK    . Documents . JSON     import Save           as SaveJson
from   AITK    . Documents . JSON     import JsonToBase64   as JsonToBase64
from   AITK    . Documents . JSON     import JsonFromBase64 as JsonFromBase64
##############################################################################
from   PySide6                        import QtCore
from   PySide6                        import QtGui
from   PySide6                        import QtWidgets
from   PySide6 . QtCore               import *
from   PySide6 . QtGui                import *
from   PySide6 . QtWidgets            import *
from   AITK    . Qt6                  import *
##############################################################################
from   AITK    . Qt6 . MenuManager    import MenuManager    as MenuManager
from   AITK    . Qt6 . TreeDock       import TreeDock       as TreeDock
##############################################################################
from   AITK    . Videos . Film        import Film           as FilmItem
##############################################################################
class PlayList                     ( TreeDock                              ) :
  ############################################################################
  HavingMenu    = 1371434312
  ############################################################################
  playFilm      = Signal           ( dict                                    )
  appendFilm    = Signal           ( dict                                    )
  FilmsAppended = Signal           (                                         )
  HistoryLoaded = Signal           (                                         )
  ToggleActions = Signal           (                                         )
  ############################################################################
  def __init__                     ( self , parent = None , plan = None    ) :
    ##########################################################################
    super ( ) . __init__           (        parent        , plan             )
    ##########################################################################
    self . FID                = 0
    self . Awaiting           = False
    self . AwaitTS            = 0
    self . MaxPlayed          = 1
    self . AssignedPlayed     = -1
    self . PlayedSpin         = None
    self . isContinue         = None
    self . CallLogger         = None
    ##########################################################################
    self . dockingOrientation = Qt . Vertical
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setMinimumWidth         ( 240                                     )
    self . setMinimumHeight        ( 400                                     )
    self . setColumnCount          ( 3                                       )
    self . setColumnHidden         ( 2 , True                                )
    self . setColumnWidth          ( 0 , 50                                  )
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    self . MountClicked            ( 2                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ExtendedSelection"                     )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . NoDragDrop          )
    ##########################################################################
    self . WMutex     = threading . Lock (                                   )
    self . Waiting    =                  [                                   ]
    ##########################################################################
    self . Probing    = False
    self . LMutex     = threading . Lock (                                   )
    self . Listings   =                  [                                   ]
    self . SIGNATUREs =                  [                                   ]
    ##########################################################################
    self . IMutex     = threading . Lock (                                   )
    self . IDCs       =                  {                                   }
    ##########################################################################
    self . appendFilm    . connect       ( self . AppendItem                 )
    self . ToggleActions . connect       ( self . SwitchActions              )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 320 , 480 )                       )
  ############################################################################
  def AttachActions   ( self         ,                          Enabled    ) :
    ##########################################################################
    CNT       = self . topLevelItemCount (                                   )
    ENABLED   =       ( CNT > 0                                              )
    ##########################################################################
    if                ( False == Enabled                                   ) :
      ENABLED = False
    ##########################################################################
    self . LinkAction ( "Refresh"    , self . startup         , Enabled      )
    ##########################################################################
    self . LinkAction ( "Insert"     , self . InsertItem      , Enabled      )
    self . LinkAction ( "Delete"     , self . DeleteItems     , ENABLED      )
    ##########################################################################
    self . LinkAction ( "Select"     , self . SelectOne       , ENABLED      )
    self . LinkAction ( "SelectAll"  , self . SelectAll       , ENABLED      )
    self . LinkAction ( "SelectNone" , self . SelectNone      , ENABLED      )
    ##########################################################################
    self . LinkAction ( "GoUp"       , self . GoUp            , False        )
    self . LinkAction ( "GoDown"     , self . GoDown          , False        )
    ##########################################################################
    return
  ############################################################################
  def SwitchActions                    ( self                              ) :
    ##########################################################################
    CNT     = self . topLevelItemCount (                                     )
    ENABLED =                          ( CNT > 0                             )
    WPLAN   = self . GetPlan           (                                     )
    ##########################################################################
    if                                 ( WPLAN in [ False , None ]         ) :
      return
    ##########################################################################
    WPLAN   . Action ( "Delete"     ) . setEnabled ( ENABLED                 )
    WPLAN   . Action ( "Select"     ) . setEnabled ( ENABLED                 )
    WPLAN   . Action ( "SelectAll"  ) . setEnabled ( ENABLED                 )
    WPLAN   . Action ( "SelectNone" ) . setEnabled ( ENABLED                 )
    ##########################################################################
    return
  ############################################################################
  def FocusIn             ( self                                           ) :
    ##########################################################################
    if                    ( not self . isPrepared ( )                      ) :
      return False
    ##########################################################################
    self . setActionLabel ( "Label" , self . windowTitle ( )                 )
    self . AttachActions  ( True                                             )
    ##########################################################################
    return True
  ############################################################################
  def closeEvent             ( self , event                                ) :
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . Closing           (                                               )
    self . defaultCloseEvent (        event                                  )
    ##########################################################################
    return
  ############################################################################
  def LOG             ( self , MSG                                         ) :
    ##########################################################################
    if                ( self . CallLogger in [ False , None              ] ) :
      return
    ##########################################################################
    if                ( len ( MSG ) <= 0                                   ) :
      return
    ##########################################################################
    self . CallLogger ( MSG                                                  )
    ##########################################################################
    return
  ############################################################################
  def startup                             ( self                           ) :
    ##########################################################################
    FPLI                = self . Settings [ "Playlist"                       ]
    FIDC                = self . Settings [ "IDC"                            ]
    ##########################################################################
    self   . Listings   = LoadJson        ( FPLI                             )
    self   . IDCs       = LoadJson        ( FIDC                             )
    self   . SIGNATUREs =                 [                                  ]
    ##########################################################################
    for FILM in self . Listings                                              :
      ########################################################################
      SIG  = FILM                         [ "Signature"                      ]
      self . SIGNATUREs . append          ( SIG                              )
      ########################################################################
      self . AppendItem                   ( FILM                             )
    ##########################################################################
    if                                    ( len ( self . SIGNATUREs ) > 0  ) :
      ########################################################################
      self . HistoryLoaded . emit         (                                  )
      self . ToggleActions . emit         (                                  )
    ##########################################################################
    return
  ############################################################################
  def Closing ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def GoUpDownActions                          ( self                      ) :
    ##########################################################################
    WPLAN   = self . GetPlan                   (                             )
    ##########################################################################
    if                                         ( WPLAN in [ False , None ] ) :
      return
    ##########################################################################
    CITM    = self . currentItem               (                             )
    ##########################################################################
    if                                         ( CITM  in [ False , None ] ) :
      ########################################################################
      return
    ##########################################################################
    CNT     = self . topLevelItemCount         (                             )
    IDX     = self . indexOfTopLevelItem       ( CITM                        )
    ##########################################################################
    if                                         ( IDX     > 0               ) :
      ########################################################################
      WPLAN . Action ( "GoUp"   ) . setEnabled ( True                        )
      ########################################################################
    else                                                                     :
      ########################################################################
      WPLAN . Action ( "GoUp"   ) . setEnabled ( False                       )
    ##########################################################################
    if                                         ( IDX + 1 < CNT             ) :
      ########################################################################
      WPLAN . Action ( "GoDown" ) . setEnabled ( True                        )
      ########################################################################
    else                                                                     :
      ########################################################################
      WPLAN . Action ( "GoDown" ) . setEnabled ( False                       )
    ##########################################################################
    return
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    self . GoUpDownActions      (                                            )
    ##########################################################################
    return
  ############################################################################
  def twiceClicked  ( self , item , column                                 ) :
    ##########################################################################
    self . PlayItem (        item                                            )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( "PlayList" , 2                                   )
    ##########################################################################
    return
  ############################################################################
  def toClock  ( self , T                                                  ) :
    ##########################################################################
    T    = int ( T  / 1000                                                   )
    R    = int ( T  % 1000                                                   )
    S    = int ( T  / 1000                                                   )
    ##########################################################################
    DD   = ""
    V    = R
    ##########################################################################
    for i in range ( 0 , 3                                                 ) :
      ########################################################################
      Z  = int     ( V % 10                                                  )
      V  = int     ( V / 10                                                  )
      ########################################################################
      DD = f"{Z}{DD}"
    ##########################################################################
    SS   = int ( S  % 60                                                     )
    MM   = int ( S  / 60                                                     )
    ##########################################################################
    SA   = int ( SS % 10                                                     )
    SB   = int ( SS / 10                                                     )
    SS   = f"{SB}{SA}"
    ##########################################################################
    HH   = int ( MM / 60                                                     )
    MM   = int ( MM % 60                                                     )
    ##########################################################################
    MA   = int ( MM % 10                                                     )
    MB   = int ( MM / 10                                                     )
    MM   = f"{MB}{MA}"
    ##########################################################################
    return f"{HH}:{MM}:{SS}.{DD}"
  ############################################################################
  def AppendItem                  ( self , film                            ) :
    ##########################################################################
    NAME       = film             [ "Name"                                   ]
    SIG        = film             [ "Signature"                              ]
    DURATION   = film             [ "Duration"                               ]
    W          = film             [ "Width"                                  ]
    H          = film             [ "Height"                                 ]
    PLAYED     = film             [ "Played"                                 ]
    S          = self . toClock   ( DURATION                                 )
    T          = f"{W} x {H} / {S} / {PLAYED}"
    FID        = int              ( self . FID                               )
    FID        = int              ( FID + 1                                  )
    self . FID = FID
    ##########################################################################
    item       = QTreeWidgetItem  (                                          )
    item       . setText          ( 0 , f"{FID}"                             )
    item       . setTextAlignment ( 0 , Qt . AlignRight                      )
    item       . setToolTip       ( 0 , T                                    )
    item       . setText          ( 1 , NAME                                 )
    item       . setToolTip       ( 1 , NAME                                 )
    item       . setData          ( 0 , Qt . UserRole , FID                  )
    item       . setData          ( 1 , Qt . UserRole , SIG                  )
    item       . setData          ( 2 , Qt . UserRole , film                 )
    self       . addTopLevelItem  ( item                                     )
    ##########################################################################
    return
  ############################################################################
  def ClearItems                ( self                                     ) :
    ##########################################################################
    self . FID = 0
    ##########################################################################
    self . clear                (                                            )
    ##########################################################################
    self . LMutex . acquire     (                                            )
    ##########################################################################
    self . Listings   =         [                                            ]
    self . SIGNATUREs =         [                                            ]
    ##########################################################################
    self . LMutex . release     (                                            )
    ##########################################################################
    self . Go                   ( self . StoreListings                       )
    ##########################################################################
    self . ToggleActions . emit (                                            )
    ##########################################################################
    return
  ############################################################################
  def InsertItem                 ( self                                    ) :
    ##########################################################################
    WPLAN = self . GetPlan       (                                           )
    ##########################################################################
    if                           ( WPLAN in [ False , None ]               ) :
      return
    ##########################################################################
    WPLAN . Action ( "Open" ) . triggered . emit (                           )
    ##########################################################################
    self  . ToggleActions . emit (                                           )
    ##########################################################################
    return
  ############################################################################
  def DeleteItems                          ( self                          ) :
    ##########################################################################
    items     = self . selectedItems       (                                 )
    ##########################################################################
    if                                     ( len ( items ) <= 0            ) :
      return
    ##########################################################################
    for item in items                                                        :
      ########################################################################
      ATID    = self . indexOfTopLevelItem ( item                            )
      ########################################################################
      if                                   ( ATID >= 0                     ) :
        ######################################################################
        self  . takeTopLevelItem           ( ATID                            )
        qApp  . processEvents              (                                 )
    ##########################################################################
    TOTAL     = self . topLevelItemCount   (                                 )
    ATID      = 0
    ##########################################################################
    while                                  ( ATID < TOTAL                  ) :
      ########################################################################
      ITEM    = self . topLevelItem        ( ATID                            )
      ########################################################################
      ATID    = ATID + 1
      ########################################################################
      ITEM    . setText                    ( 0 , f"{ATID}"                   )
      ITEM    . setData                    ( 0 , Qt . UserRole , ATID        )
    ##########################################################################
    self      . ToggleActions . emit       (                                 )
    ##########################################################################
    qApp      . processEvents              (                                 )
    ##########################################################################
    self      . Go                         ( self . AwaitRefreshListings     )
    ##########################################################################
    return
  ############################################################################
  def GoUp                            ( self                               ) :
    ##########################################################################
    CITM = self . currentItem         (                                      )
    ##########################################################################
    if                                ( CITM  in [ False , None          ] ) :
      ########################################################################
      return
    ##########################################################################
    IDX  = self . indexOfTopLevelItem ( CITM                                 )
    ##########################################################################
    if                                ( IDX <= 0                           ) :
      return
    ##########################################################################
    NDX  = int                        ( IDX - 1                              )
    NITM = self . topLevelItem        ( NDX                                  )
    ##########################################################################
    self . takeTopLevelItem           ( IDX                                  )
    qApp . processEvents              (                                      )
    self . insertTopLevelItem         ( NDX , CITM                           )
    ##########################################################################
    NDX  = int                        ( NDX + 1                              )
    IDX  = int                        ( IDX + 1                              )
    ##########################################################################
    CITM . setText                    ( 0 , f"{NDX}"                         )
    CITM . setData                    ( 0 , Qt . UserRole , NDX              )
    ##########################################################################
    NITM . setText                    ( 0 , f"{IDX}"                         )
    NITM . setData                    ( 0 , Qt . UserRole , IDX              )
    ##########################################################################
    self . setCurrentItem             ( CITM                                 )
    ##########################################################################
    qApp . processEvents              (                                      )
    ##########################################################################
    self . Go                         ( self . AwaitRefreshListings          )
    ##########################################################################
    return
  ############################################################################
  def GoDown                          ( self                               ) :
    ##########################################################################
    CITM = self . currentItem         (                                      )
    ##########################################################################
    if                                ( CITM  in [ False , None          ] ) :
      ########################################################################
      return
    ##########################################################################
    CNT  = self . topLevelItemCount   (                                      )
    IDX  = self . indexOfTopLevelItem ( CITM                                 )
    ##########################################################################
    if                                ( int ( IDX + 1 ) >= CNT             ) :
      return
    ##########################################################################
    NDX  = int                        ( IDX + 1                              )
    NITM = self . topLevelItem        ( NDX                                  )
    ##########################################################################
    self . takeTopLevelItem           ( IDX                                  )
    qApp . processEvents              (                                      )
    self . insertTopLevelItem         ( NDX , CITM                           )
    ##########################################################################
    NDX  = int                        ( NDX + 1                              )
    IDX  = int                        ( IDX + 1                              )
    ##########################################################################
    CITM . setText                    ( 0 , f"{NDX}"                         )
    CITM . setData                    ( 0 , Qt . UserRole , NDX              )
    ##########################################################################
    NITM . setText                    ( 0 , f"{IDX}"                         )
    NITM . setData                    ( 0 , Qt . UserRole , IDX              )
    ##########################################################################
    self . setCurrentItem             ( CITM                                 )
    ##########################################################################
    qApp . processEvents              (                                      )
    ##########################################################################
    self . Go                         ( self . AwaitRefreshListings          )
    ##########################################################################
    return
  ############################################################################
  def RefreshAll   ( self                                                  ) :
    ##########################################################################
    self . FID = 0
    ##########################################################################
    self . clear   (                                                         )
    self . startup (                                                         )
    ##########################################################################
    return
  ############################################################################
  def PlayItem             ( self , ITEM                                   ) :
    ##########################################################################
    FILM = ITEM . data     ( 2 , Qt . UserRole                               )
    self . playFilm . emit ( FILM                                            )
    ##########################################################################
    return
  ############################################################################
  def GetWaiting              ( self                                       ) :
    ##########################################################################
    E      = False
    F      = ""
    ##########################################################################
    self   . WMutex . acquire (                                              )
    ##########################################################################
    if                        ( len ( self . Waiting ) > 0                 ) :
      ########################################################################
      E    = True
      F    = self . Waiting   [ 0                                            ]
      self . Waiting . pop    ( 0                                            )
    ##########################################################################
    self   . WMutex . release (                                              )
    ##########################################################################
    return                    ( E , F ,                                      )
  ############################################################################
  def AddWaiting                ( self , FILEs                             ) :
    ##########################################################################
    CNT  = 0
    ##########################################################################
    self . WMutex . acquire     (                                            )
    ##########################################################################
    for F in FILEs                                                           :
      ########################################################################
      if                        ( F not in self . Waiting                  ) :
        ######################################################################
        self . Waiting . append ( F                                          )
    ##########################################################################
    CNT  = len                  ( self . Waiting                             )
    ##########################################################################
    self . WMutex . release     (                                            )
    ##########################################################################
    if                          ( CNT > 0                                  ) :
      ########################################################################
      self . Go                 ( self . ProbeWaitings                       )
    ##########################################################################
    return
  ############################################################################
  def Queue   ( self , FILEs                                               ) :
    ##########################################################################
    self . Go ( self . AddWaiting , ( FILEs ,                              ) )
    ##########################################################################
    return
  ############################################################################
  def QueryFilm                 ( self , JFI                               ) :
    ##########################################################################
    HOST     = self . Settings  [ "Center"   ] [ "Host"                      ]
    PORT     = self . Settings  [ "Center"   ] [ "Port"                      ]
    URL      = f"http://{HOST}:{PORT}"
    CMD      = f"{URL}/Film"
    ##########################################################################
    Username = self . Settings  [ "Listener" ] [ "Username"                  ]
    Password = self . Settings  [ "Listener" ] [ "Password"                  ]
    Headers  =                  { "Username" : Username                    , \
                                  "Password" : Password                      }
    QFILM    =                  { "Action" : "Query"                       , \
                                  "Film"   : JsonToBase64 ( JFI )            }
    ##########################################################################
    try                                                                      :
      ########################################################################
      answer = requests . post  ( CMD                                        ,
                                  data    = json . dumps ( QFILM )           ,
                                  headers = Headers                          )
      ########################################################################
    except                                                                   :
      ########################################################################
      return JFI
    ##########################################################################
    JS       = answer . text
    JS       = JS     . replace ( "'" , "\""                                 )
    ##########################################################################
    try                                                                      :
      ########################################################################
      J      = json . loads     ( JS                                         )
      ########################################################################
      if                        ( "Film" in J                              ) :
        ######################################################################
        JFI  = JsonFromBase64   ( J [ "Film"                               ] )
      ########################################################################
    except                                                                   :
      ########################################################################
      return JFI
    ##########################################################################
    return JFI
  ############################################################################
  def LocateFilm                 ( self , FILE , DETAILs                   ) :
    ##########################################################################
    VFI    = FilmItem            (                                           )
    ##########################################################################
    if                           ( not VFI . Parse ( "" , DETAILs        ) ) :
      return
    ##########################################################################
    VFI    . Used  = 1
    VFI    . VType = 1
    SIG    = VFI . toSignature   (                                           )
    JFI    = VFI . toJson        (                                           )
    LAT    = -1
    FLEN   = int                 ( VFI . Duration / 1000                     )
    ##########################################################################
    JFI [ "Locations" ] =        [ FILE                                      ]
    JFI [ "Played"    ] = 0
    JFI [ "Watching"  ] =        { "Exists"   : False                      , \
                                   "Duration" : FLEN                       , \
                                   "At"       : -1                         , \
                                   "Bars"     : [                          ] }
    JFI [ "Analysis"  ] =        { "Exists"   : False                        }
    ##########################################################################
    NAME   = JFI                 [ "Name"                                    ]
    ##########################################################################
    if                           ( len ( NAME ) <= 0                       ) :
      ########################################################################
      FNO  = pathlib . Path      ( FILE ) . stem
      ########################################################################
      if                         ( len ( FNO ) > 0                         ) :
        ######################################################################
        JFI [ "Name" ] = FNO
    ##########################################################################
    JFI    = self . QueryFilm    ( JFI                                       )
    ##########################################################################
    self   . LMutex . acquire    (                                           )
    ##########################################################################
    if                           ( SIG not in self . SIGNATUREs            ) :
      ########################################################################
      LAT  = len                 ( self . Listings                           )
      self . Listings   . append ( JFI                                       )
      self . SIGNATUREs . append ( SIG                                       )
    ##########################################################################
    self   . LMutex . release    (                                           )
    ##########################################################################
    if                           ( LAT < 0                                 ) :
      return
    ##########################################################################
    self . appendFilm . emit     ( JFI                                       )
    ##########################################################################
    return
  ############################################################################
  def ProbeWaitings                    ( self                              ) :
    ##########################################################################
    if                                 ( self . Probing                    ) :
      return
    ##########################################################################
    self . Probing = True
    PROBE          = True
    APPENDED       = False
    ##########################################################################
    while                              ( PROBE                             ) :
      ########################################################################
      ( E , F )    = self . GetWaiting (                                     )
      ########################################################################
      if                               ( E                                 ) :
        ######################################################################
        VFI        = FilmItem          (                                     )
        VJI        = VFI . Probe       ( F                                   )
        self       . LocateFilm        ( F , VJI                             )
        ######################################################################
        APPENDED   = True
        ######################################################################
      else                                                                   :
        ######################################################################
        PROBE      = False
    ##########################################################################
    self . Probing = False
    ##########################################################################
    if                                 ( APPENDED                          ) :
      ########################################################################
      self . ToggleActions . emit      (                                     )
      self . FilmsAppended . emit      (                                     )
      ########################################################################
      self . StoreListings             (                                     )
    ##########################################################################
    return
  ############################################################################
  def AwaitRefreshListings   ( self                                        ) :
    ##########################################################################
    NOW    = StarDate        (                                               )
    NOW    . Now             (                                               )
    ##########################################################################
    self   . AwaitTS  = NOW . Stardate + 3
    ##########################################################################
    if                       ( self . Awaiting                             ) :
      return
    ##########################################################################
    self   . Awaiting = True
    ##########################################################################
    NOW    . Now             (                                               )
    ##########################################################################
    while                    ( NOW . Stardate < self . AwaitTS             ) :
      ########################################################################
      time . sleep           ( 0.1                                           )
      NOW  . Now             (                                               )
    ##########################################################################
    self   . RefreshListings (                                               )
    ##########################################################################
    self   . Awaiting = False
    ##########################################################################
    return
  ############################################################################
  def RefreshListings                  ( self                              ) :
    ##########################################################################
    LISTs   =                          [                                     ]
    SIGs    =                          [                                     ]
    TOTAL   = self . topLevelItemCount (                                     )
    ATID    = 0
    ##########################################################################
    while                              ( ATID < TOTAL                      ) :
      ########################################################################
      ITEM  = self . topLevelItem      ( ATID                                )
      ########################################################################
      SIG   = ITEM . data              ( 1 , Qt . UserRole                   )
      FILM  = ITEM . data              ( 2 , Qt . UserRole                   )
      ########################################################################
      SIGs  . append                   ( SIG                                 )
      LISTs . append                   ( FILM                                )
      ########################################################################
      ATID  = ATID + 1
    ##########################################################################
    self    . LMutex . acquire         (                                     )
    ##########################################################################
    self    . Listings   = LISTs
    self    . SIGNATUREs = SIGs
    ##########################################################################
    self    . LMutex . release         (                                     )
    ##########################################################################
    self    . StoreListings            (                                     )
    ##########################################################################
    return
  ############################################################################
  def GetReadyPlaying                   ( self                             ) :
    ##########################################################################
    CNT    = self . topLevelItemCount   (                                    )
    ITEM   = self . currentItem         (                                    )
    VAT    = -1
    ##########################################################################
    if                                  ( CNT <= 0                         ) :
      return                            ( False , { } ,                      )
    ##########################################################################
    if                                  ( ITEM not in [ False , None     ] ) :
      ########################################################################
      VAT  = self . indexOfTopLevelItem ( ITEM                               )
    ##########################################################################
    VAT    = int                        ( VAT + 1                            )
    ##########################################################################
    if                                  ( VAT >= CNT                       ) :
      return                            ( False , { } ,                      )
    ##########################################################################
    while                               ( VAT < CNT                        ) :
      ########################################################################
      ITEM   = self . topLevelItem      ( VAT                                )
      ########################################################################
      SIG    = ITEM . data              ( 1 , Qt . UserRole                  )
      FILM   = ITEM . data              ( 2 , Qt . UserRole                  )
      ########################################################################
      PLAYED = FILM                     [ "Played"                           ]
      ########################################################################
      if                                ( PLAYED < self . MaxPlayed        ) :
        ######################################################################
        self . setCurrentItem           ( ITEM                               )
        ######################################################################
        return                          ( True , FILM ,                      )
      ########################################################################
      VAT = VAT + 1
    ##########################################################################
    return                              ( False , { } ,                      )
  ############################################################################
  def UpdateFilmJson         ( self , FILM                                 ) :
    ##########################################################################
    SIG   = FILM             [ "Signature"                                   ]
    ##########################################################################
    if                       ( SIG not in self . SIGNATUREs                ) :
      return
    ##########################################################################
    self  . LMutex . acquire (                                               )
    ##########################################################################
    TOTAL = len              ( self . SIGNATUREs                             )
    AT    = 0
    FOUND = False
    ##########################################################################
    while                    ( ( not FOUND ) and ( AT < TOTAL )            ) :
      ########################################################################
      JFI = self . Listings  [ AT                                            ]
      ########################################################################
      if                     ( SIG == JFI [ "Signature" ]                  ) :
        ######################################################################
        FOUND = True
        self  . Listings [ AT ] = FILM
      ########################################################################
      AT  = int              ( AT + 1                                        )
    ##########################################################################
    self  . LMutex . release (                                               )
    ##########################################################################
    self  . StoreListings    (                                               )
    ##########################################################################
    CNT   = self . topLevelItemCount (                                       )
    AT    = 0
    FOUND = False
    ##########################################################################
    while                    ( ( not FOUND ) and ( AT < CNT )              ) :
      ########################################################################
      IT  = self . topLevelItem ( AT                                         )
      XIG = IT . data        ( 1 , Qt . UserRole                             )
      ########################################################################
      if                     ( XIG == SIG                                  ) :
        ######################################################################
        FOUND = True
        IT    . setData      ( 2 , Qt . UserRole , FILM                      )
      ########################################################################
      AT  = int              ( AT + 1                                        )
    ##########################################################################
    HOST     = self . Settings  [ "Center"   ] [ "Host"                      ]
    PORT     = self . Settings  [ "Center"   ] [ "Port"                      ]
    URL      = f"http://{HOST}:{PORT}"
    CMD      = f"{URL}/Film"
    ##########################################################################
    Username = self . Settings  [ "Listener" ] [ "Username"                  ]
    Password = self . Settings  [ "Listener" ] [ "Password"                  ]
    Headers  =                  { "Username" : Username                    , \
                                  "Password" : Password                      }
    QFILM    =                  { "Action"   : "Sync"                      , \
                                  "Film"     : JsonToBase64 ( FILM )         }
    ##########################################################################
    try                                                                      :
      ########################################################################
      answer = requests . post  ( CMD                                        ,
                                  data    = json . dumps ( QFILM )           ,
                                  headers = Headers                          )
      ########################################################################
    except                                                                   :
      ########################################################################
      pass
    ##########################################################################
    return
  ############################################################################
  def FilmJsonUpdated ( self , FILM                                        ) :
    ##########################################################################
    self . Go         ( self . UpdateFilmJson , ( FILM ,                   ) )
    ##########################################################################
    return
  ############################################################################
  def StoreListings        ( self                                          ) :
    ##########################################################################
    FPLI = self . Settings [ "Playlist"                                      ]
    ##########################################################################
    SaveJson               ( FPLI , self . Listings                          )
    ##########################################################################
    return
  ############################################################################
  def StoreIDCs            ( self                                          ) :
    ##########################################################################
    FIDC = self . Settings [ "IDC"                                           ]
    ##########################################################################
    SaveJson               ( FIDC , self . IDCs                              )
    ##########################################################################
    return
  ############################################################################
  def MaxPlayedMenu                  ( self , mm                           ) :
    ##########################################################################
    self . AssignedPlayed = self . MaxPlayed
    ##########################################################################
    SSI  = self . getMenuItem        ( "MaxPlayed"                           )
    ##########################################################################
    self . PlayedSpin = SpinBox      ( None , self . PlanFunc                )
    self . PlayedSpin . setPrefix    ( SSI                                   )
    self . PlayedSpin . setRange     ( 1 , 10000                             )
    self . PlayedSpin . setValue     ( self . MaxPlayed                      )
    self . PlayedSpin . setAlignment ( Qt . AlignRight                       )
    mm   . addWidget                 ( 9999991 , self . PlayedSpin           )
    ##########################################################################
    return mm
  ############################################################################
  def RunMaxPlayedMenu                 ( self                              ) :
    ##########################################################################
    if                                 ( self . PlayedSpin == None         ) :
      return False
    ##########################################################################
    SID    = self . PlayedSpin . value (                                     )
    ##########################################################################
    self   . PlayedSpin = None
    ##########################################################################
    if                                 ( SID != self . AssignedPlayed      ) :
      ########################################################################
      self . MaxPlayed = SID
      ########################################################################
      return True
    ##########################################################################
    return   False
  ############################################################################
  def Menu                            ( self , pos                         ) :
    ##########################################################################
    if                                ( not self . isPrepared ( )          ) :
      return False
    ##########################################################################
    doMenu = self . isFunction        ( self . HavingMenu                    )
    if                                ( not doMenu                         ) :
      return False
    ##########################################################################
    self   . Notify                   ( 0                                    )
    ##########################################################################
    Total  = self . topLevelItemCount (                                      )
    items  = self . selectedItems     (                                      )
    atItem = self . currentItem       (                                      )
    SIG    = ""
    PICKs  = len                      ( items                                )
    ##########################################################################
    if                                ( atItem not in [ False , None ]     ) :
      SIG  = atItem . data            ( 1 , Qt . UserRole                    )
    ##########################################################################
    mm     = MenuManager              ( self                                 )
    ##########################################################################
    if                                ( atItem not in [ False , None     ] ) :
      ########################################################################
      MSG  = self . getMenuItem       ( "Play"                               )
      ICO  = QIcon                    ( ":/images/PlayerPlay.png"            )
      mm   . addActionWithIcon        ( 1001 , ICO , MSG                     )
    ##########################################################################
    self   . AppendRefreshAction      ( mm , 1101                            )
    self   . AppendInsertAction       ( mm , 1102                            )
    ##########################################################################
    if                                ( Total > 0                          ) :
      ########################################################################
      MSG  = self . getMenuItem       ( "Clear"                              )
      mm   . addAction                ( 1201 , MSG                           )
    ##########################################################################
    if                                ( PICKs > 0                          ) :
      ########################################################################
      self . AppendDeleteAction       ( mm , 1202                            )
    ##########################################################################
    mm     . addSeparator             (                                      )
    ##########################################################################
    self   . MaxPlayedMenu            ( mm                                   )
    ##########################################################################
    mm     . addSeparator             (                                      )
    self   . DockingMenu              ( mm                                   )
    ##########################################################################
    mm     . setFont                  ( self    . menuFont ( )               )
    aa     = mm . exec_               ( QCursor . pos      ( )               )
    at     = mm . at                  ( aa                                   )
    ##########################################################################
    OKAY   = self . RunMaxPlayedMenu  (                                      )
    ##########################################################################
    if                                ( OKAY                               ) :
      return True
    ##########################################################################
    if                                ( self . RunDocking ( mm , aa )      ) :
      return True
    ##########################################################################
    if                                ( at == 1001                         ) :
      ########################################################################
      self . PlayItem                 ( atItem                               )
      ########################################################################
      return True
    ##########################################################################
    if                                ( at == 1101                         ) :
      ########################################################################
      self . RefreshAll               (                                      )
      ########################################################################
      return True
    ##########################################################################
    if                                ( at == 1102                         ) :
      ########################################################################
      self . InsertItem               (                                      )
      ########################################################################
      return True
    ##########################################################################
    if                                ( at == 1201                         ) :
      ########################################################################
      self . ClearItems               (                                      )
      ########################################################################
      return True
    ##########################################################################
    if                                ( at == 1202                         ) :
      ########################################################################
      self . DeleteItems              (                                      )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
