# -*- coding: utf-8 -*-
##############################################################################
## 影片資訊數據中心
##############################################################################
import os
import sys
import time
import datetime
import threading
import base64
import json
##############################################################################
import mysql . connector
from   mysql . connector              import Error
##############################################################################
import AITK
##############################################################################
from   AITK  . Calendars . StarDate   import StarDate       as StarDate
from   AITK  . Documents . JSON       import Load           as LoadJson
from   AITK  . Documents . JSON       import Save           as SaveJson
from   AITK  . Documents . JSON       import JsonToBase64   as JsonToBase64
from   AITK  . Documents . JSON       import JsonFromBase64 as JsonFromBase64
##############################################################################
from   AITK  . Database  . Query      import Query
from   AITK  . Database  . Connection import Connection
from   AITK  . Database  . Pair       import Pair
from   AITK  . Database  . Columns    import Columns
##############################################################################
from                     . Film       import Film           as FilmItem
##############################################################################
class FilmCenter         (                                                 ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    self . Settings          = {                                             }
    self . Tables            = {                                             }
    self . DbConf            = {                                             }
    ##########################################################################
    self . History           = { "Signatures" : [                        ] , \
                                 "Films"      : {                        }   }
    self . HistoryUpdated    = 0
    ##########################################################################
    self . Handler           = None
    self . SendMessage       = None
    self . LOG               = None
    self . DbCheck           = 0
    self . RetryConnect      = 10
    self . Ready             = False
    ##########################################################################
    self . DB                = Connection       (                            )
    self . DbLocker          = threading . Lock (                            )
    self . QueryLocker       = threading . Lock (                            )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def LockDb                     ( self                                    ) :
    ##########################################################################
    self . DbLocker    . acquire (                                           )
    ##########################################################################
    return
  ############################################################################
  def ReleaseDb                  ( self                                    ) :
    ##########################################################################
    self . DbLocker    . release (                                           )
    ##########################################################################
    return
  ############################################################################
  def LockQuery                  ( self                                    ) :
    ##########################################################################
    self . QueryLocker . acquire (                                           )
    ##########################################################################
    return
  ############################################################################
  def ReleaseQuery               ( self                                    ) :
    ##########################################################################
    self . QueryLocker . release (                                           )
    ##########################################################################
    return
  ############################################################################
  def setSettings ( self , SETTINGS , DBCONF , TABLEs                      ) :
    ##########################################################################
    self . Settings = SETTINGS
    self . Tables   = TABLEs
    self . DbConf   = DBCONF
    ##########################################################################
    return
  ############################################################################
  def ConnectDB                    ( self , UsePure = False                ) :
    ##########################################################################
    HOST   = self . DbConf         [ "hostname"                              ]
    PORT   = self . DbConf         [ "port"                                  ]
    ##########################################################################
    self   . LockDb                (                                         )
    OK     = self . DB . ConnectTo ( self . DbConf , UsePure                 )
    self   . ReleaseDb             (                                         )
    ##########################################################################
    if                             ( not OK                                ) :
      ########################################################################
      MSG  = f"Failure to connect film database {HOST}:{PORT}"
      self . LOG                   ( MSG                                     )
      ########################################################################
      return False
    ##########################################################################
    self   . DB . Prepare          (                                         )
    ##########################################################################
    MSG    = f"Connect to film database {HOST}:{PORT}"
    self   . LOG                   ( MSG                                     )
    ##########################################################################
    return   True
  ############################################################################
  def CloseDB              ( self                                          ) :
    ##########################################################################
    self . LockDb          (                                                 )
    self . DB . Close      (                                                 )
    self . DB = Connection (                                                 )
    self . ReleaseDb       (                                                 )
    ##########################################################################
    HOST = self . DbConf   [ "hostname"                                      ]
    PORT = self . DbConf   [ "port"                                          ]
    ##########################################################################
    MSG  = f"Close film database {HOST}:{PORT}"
    self . LOG             ( MSG                                             )
    ##########################################################################
    return
  ############################################################################
  def isDbConnected                ( self                                  ) :
    return self . DB . isConnected (                                         )
  ############################################################################
  def AssureDB                     ( self                                  ) :
    ##########################################################################
    NOW  = StarDate                (                                         )
    NOW  . Now                     (                                         )
    CDT  = int                     ( NOW . Stardate                          )
    ZDT  = int                     ( CDT - self . DbCheck                    )
    ##########################################################################
    if                             ( ZDT < 60                              ) :
      return True
    ##########################################################################
    self . DbCheck = CDT
    ##########################################################################
    OK   = self . DB . isConnected (                                         )
    ##########################################################################
    if                             ( OK                                    ) :
      return True
    ##########################################################################
    self . CloseDB                 (                                         )
    return self . ConnectDB        (                                         )
  ############################################################################
  def AcquireDB                   ( self                                   ) :
    ##########################################################################
    OK     = self . isDbConnected (                                          )
    ##########################################################################
    if                            ( OK                                     ) :
      return True
    ##########################################################################
    CNT    = 0
    RCC    = self . RetryConnect
    ##########################################################################
    while                         ( ( False == OK ) and ( CNT < RCC )      ) :
      ########################################################################
      if                          ( self . isDbConnected (               ) ) :
        return True
      ########################################################################
      self . CloseDB              (                                          )
      OK   = self . ConnectDB     (                                          )
      ########################################################################
      time . sleep                ( 1.0                                      )
      ########################################################################
      CNT  = CNT + 1
    ##########################################################################
    return OK
  ############################################################################
  def Prepare                    ( self                                    ) :
    ##########################################################################
    OK    = self . isDbConnected (                                           )
    ##########################################################################
    if                           ( not OK                                  ) :
      return
    ##########################################################################
    ## NOW   = StarDate             (                                           )
    ## NOW   . Now                  (                                           )
    ## CDT   = NOW . Stardate
    ##########################################################################
    ## self  . LockDb               (                                           )
    ##########################################################################
    ##########################################################################
    ## self  . ReleaseDb            (                                           )
    ##########################################################################
    HFILE = self . Settings      [ "Played"                                  ]
    ##########################################################################
    self  . LockQuery            (                                           )
    ##########################################################################
    self  . History  = LoadJson  ( HFILE                                     )
    self  . HistoryUpdated = 0
    ##########################################################################
    self  . ReleaseQuery         (                                           )
    ##########################################################################
    self  . Ready    = True
    ##########################################################################
    MSG   = f"Load Film Database From File {HFILE}"
    self  . LOG                  ( MSG                                       )
    ##########################################################################
    return
  ############################################################################
  def SaveHistory           ( self                                         ) :
    ##########################################################################
    HFILE = self . Settings [ "Played"                                       ]
    self . LockQuery        (                                                )
    SaveJson                ( HFILE , self . History                         )
    self . ReleaseQuery     (                                                )
    ##########################################################################
    self  . HistoryUpdated = 0
    ##########################################################################
    MSG   = f"Save Film Database {HFILE}"
    self  . LOG             ( MSG                                            )
    ##########################################################################
    return
  ############################################################################
  def StoreHistory     ( self                                              ) :
    ##########################################################################
    if                 ( self . HistoryUpdated <= 0                        ) :
      return
    ##########################################################################
    NOW  = StarDate    (                                                     )
    NOW  . Now         (                                                     )
    CDT  = int         ( NOW . Stardate                                      )
    XDT  = int         ( CDT - self . HistoryUpdated                         )
    ##########################################################################
    if                 ( XDT < 300                                         ) :
      return
    ##########################################################################
    self . SaveHistory (                                                     )
    ##########################################################################
    return
  ############################################################################
  def Process           ( self                                             ) :
    ##########################################################################
    self . StoreHistory (                                                    )
    ##########################################################################
    return
  ############################################################################
  def FilmHistory         ( self , FJI                                     ) :
    ##########################################################################
    UUID   = FJI          [ "Uuid"                                           ]
    SIG    = FJI          [ "Signature"                                      ]
    ##########################################################################
    NOW    = StarDate     (                                                  )
    NOW    . Now          (                                                  )
    ##########################################################################
    self   . LockQuery    (                                                  )
    ##########################################################################
    if                    ( SIG in self . History [ "Signatures"         ] ) :
      ########################################################################
      HJI  = self . History [ "Films" ] [ SIG                                ]
      FOCs = FJI          [ "Locations"                                      ]
      LOCs = HJI          [ "Locations"                                      ]
      SEEW = HJI          [ "Watching"                                       ]
      PLAY = HJI          [ "Played"                                         ]
      AAA  = False
      ########################################################################
      for L in FOCs                                                          :
        ######################################################################
        if                ( L not in LOCs                                  ) :
          ####################################################################
          LOCs . append   ( L                                                )
          AAA  = True
      ########################################################################
      if                  ( AAA                                            ) :
        ######################################################################
        FJI [ "Locations" ]   = LOCs
        self . HistoryUpdated = NOW . Stardate
      ########################################################################
      FJI [ "Played"   ] = PLAY
      FJI [ "Watching" ] = SEEW
      ########################################################################
    else                                                                     :
      ########################################################################
      self . History [ "Signatures" ] . append ( SIG                         )
      self . History [ "Films"      ] [ SIG ] = FJI
      self . HistoryUpdated = NOW . Stardate
    ##########################################################################
    self   . ReleaseQuery (                                                  )
    ##########################################################################
    MSG    = f"Query Film {UUID} for {SIG}"
    self   . LOG          ( MSG                                              )
    ##########################################################################
    return FJI
  ############################################################################
  def AssureFilm                   ( self , FJI                            ) :
    ##########################################################################
    UUID      = FJI                [ "Uuid"                                  ]
    SIG       = FJI                [ "Signature"                             ]
    FIMTAB    = self . Tables      [ "FilmCenter" ] [ "Film"                 ]
    ##########################################################################
    if                             ( UUID > 0                              ) :
      return    self . FilmHistory ( FJI                                     )
    ##########################################################################
    OK        = self . AcquireDB   (                                         )
    ##########################################################################
    if                             ( not OK                                ) :
      return FJI
    ##########################################################################
    FI        = FilmItem           (                                         )
    FI        . fromJson           ( FJI                                     )
    ##########################################################################
    NOW       = StarDate           (                                         )
    NOW       . Now                (                                         )
    CDT       = NOW . Stardate
    ##########################################################################
    self      . LockDb             (                                         )
    self      . DB . LockWrites    ( [ FIMTAB                              ] )
    ##########################################################################
    FOUND     = FI . Locate        ( self . DB , FIMTAB                      )
    ##########################################################################
    if                             ( not FOUND                             ) :
      ########################################################################
      ADDED   = FI . Assure        ( self . DB , FIMTAB                      )
      ########################################################################
      if                           ( ADDED                                 ) :
        ######################################################################
        FOUND = True
    ##########################################################################
    self      . DB . UnlockTables  (                                         )
    self      . ReleaseDb          (                                         )
    ##########################################################################
    if                             ( FOUND                                 ) :
      ########################################################################
      FJI               [ "Uuid" ] = FI . Uuid
      FJI [ "Details" ] [ "Uuid" ] = FI . Uuid
      ########################################################################
      UUID    = FI . Uuid
      MSG     = f"Found Film {UUID} for {SIG}"
      self    . LOG                ( MSG                                     )
      ########################################################################
    else                                                                     :
      ########################################################################
      MSG     = f"Missing Film {SIG}"
      self    . LOG                ( MSG                                     )
      ########################################################################
      return FJI
    ##########################################################################
    if ( SIG not in self . History [ "Signatures"                        ] ) :
      ########################################################################
      self    . LockQuery          (                                         )
      ########################################################################
      self    . History [ "Signatures" ] . append ( SIG                      )
      self    . History [ "Films" ] [ SIG ] = FJI
      self    . HistoryUpdated              = CDT
      ########################################################################
      self    . ReleaseQuery       (                                         )
      ########################################################################
      MSG     = f"Append Film {UUID} for {SIG}"
      self    . LOG                ( MSG                                     )
      ########################################################################
    else                                                                     :
      ########################################################################
      return self . FilmHistory    ( FJI                                     )
    ##########################################################################
    return FJI
  ############################################################################
  def SyncFilm            ( self , FJI                                     ) :
    ##########################################################################
    SIG    = FJI          [ "Signature"                                      ]
    NOW    = StarDate     (                                                  )
    NOW    . Now          (                                                  )
    CDT    = NOW . Stardate
    ##########################################################################
    self   . LockQuery    (                                                  )
    ##########################################################################
    if                    ( SIG not in self . History [ "Signatures"     ] ) :
      ########################################################################
      self . History      [ "Signatures" ] . append ( SIG                    )
    ##########################################################################
    self   . History      [ "Films" ] [ SIG ] = FJI
    self   . HistoryUpdated                   = CDT
    ##########################################################################
    self   . ReleaseQuery (                                                  )
    ##########################################################################
    MSG    = f"Sync Film {SIG}"
    self   . LOG          ( MSG                                              )
    ##########################################################################
    return
  ############################################################################
  def RpcHandler ( self , J , ADDR                                         ) :
    ##########################################################################
    ANSWER =     { "Answer" : "Yes" , "IP"       : ADDR                      }
    RESP   =     { "Answer" : 202   , "Response" : ANSWER                    }
    ##########################################################################
    if           ( "Action" not in J                                       ) :
      return RESP
    ##########################################################################
    ACTION = J   [ "Action"                                                  ]
    ##########################################################################
    if           ( "Query" == ACTION                                       ) :
      ########################################################################
      FJI  = JsonFromBase64    ( J [ "Film"                                ] )
      FJI  = self . AssureFilm ( FJI                                         )
      ########################################################################
      ANS  =     { "Answer" : "Yes"                                        , \
                   "IP"     : ADDR                                         , \
                   "Film"   : JsonToBase64 ( FJI )                           }
      RESP =     { "Answer" : 202   , "Response" : ANS                       }
      ########################################################################
      return RESP
    ##########################################################################
    if           ( "Sync" == ACTION                                        ) :
      ########################################################################
      FJI  = JsonFromBase64  ( J [ "Film"                                  ] )
      FJI  = self . SyncFilm ( FJI                                           )
      ########################################################################
      return RESP
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return RESP
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
