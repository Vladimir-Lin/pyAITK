# -*- coding: utf-8 -*-
##############################################################################
## 影片資訊數據中心
##############################################################################
import os
import sys
import time
import datetime
import threading
import json
##############################################################################
import mysql . connector
from   mysql . connector              import Error
##############################################################################
import AITK
##############################################################################
from   AITK  . Calendars . StarDate   import StarDate as StarDate
from   AITK  . Documents . JSON       import Load     as LoadJson
from   AITK  . Documents . JSON       import Save     as SaveJson
##############################################################################
from   AITK  . Database  . Query      import Query
from   AITK  . Database  . Connection import Connection
from   AITK  . Database  . Pair       import Pair
from   AITK  . Database  . Columns    import Columns
##############################################################################
from                     . Film       import Film     as FilmItem
##############################################################################
class FilmCenter         (                                                 ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    self . Settings          = {                                             }
    self . Tables            = {                                             }
    self . DbConf            = {                                             }
    ##########################################################################
    self . History           = { "Signatures" : [                        ] , \
                                 "Films"      : {                        }   }
    self . HistoryUpdated    = 0
    ##########################################################################
    self . Handler           = None
    self . SendMessage       = None
    self . LOG               = None
    self . DbCheck           = 0
    self . Ready             = False
    ##########################################################################
    self . DB                = Connection       (                            )
    self . DbLocker          = threading . Lock (                            )
    self . QueryLocker       = threading . Lock (                            )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def setSettings ( self , SETTINGS , DBCONF , TABLEs                      ) :
    ##########################################################################
    self . Settings = SETTINGS
    self . Tables   = TABLEs
    self . DbConf   = DBCONF
    ##########################################################################
    return
  ############################################################################
  def ConnectDB                ( self , UsePure = False                    ) :
    ##########################################################################
    OK = self . DB . ConnectTo ( self . DbConf , UsePure                     )
    ##########################################################################
    if                         ( not OK                                    ) :
      return False
    ##########################################################################
    self . DB . Prepare        (                                             )
    ##########################################################################
    return   True
  ############################################################################
  def CloseDB              ( self                                          ) :
    ##########################################################################
    self . DB . Close      (                                                 )
    self . DB = Connection (                                                 )
    ##########################################################################
    return
  ############################################################################
  def isDbConnected                ( self                                  ) :
    return self . DB . isConnected (                                         )
  ############################################################################
  def AssureDB                     ( self                                  ) :
    ##########################################################################
    NOW  = StarDate                (                                         )
    NOW  . Now                     (                                         )
    CDT  = int                     ( NOW . Stardate                          )
    ZDT  = int                     ( CDT - self . DbCheck                    )
    ##########################################################################
    if                             ( ZDT < 60                              ) :
      return True
    ##########################################################################
    self . DbCheck = CDT
    ##########################################################################
    OK   = self . DB . isConnected (                                         )
    ##########################################################################
    if                             ( OK                                    ) :
      return True
    ##########################################################################
    return self . ConnectDB        (                                         )
  ############################################################################
  def Prepare                            ( self                            ) :
    ##########################################################################
    OK         = self . DB . isConnected (                                   )
    ##########################################################################
    if                                   ( not OK                          ) :
      return
    ##########################################################################
    NOW        = StarDate                (                                   )
    NOW        . Now                     (                                   )
    CDT        = NOW . Stardate
    ##########################################################################
    self  . DbLocker . acquire           (                                   )
    ##########################################################################
    ##########################################################################
    self  . DbLocker . release           (                                   )
    ##########################################################################
    HFILE = self . Settings              [ "Played"                          ]
    ##########################################################################
    self  . History  = LoadJson          ( HFILE                             )
    self  . HistoryUpdated = 0
    ##########################################################################
    self  . Ready    = True
    ##########################################################################
    MSG   = f"Load Film Database {HFILE}"
    self  . LOG                          ( MSG                               )
    ##########################################################################
    return
  ############################################################################
  def SaveHistory ( self ) :
    ##########################################################################
    HFILE = self . Settings [ "Played"                                       ]
    SaveJson                ( HFILE , self . History                         )
    ##########################################################################
    self  . HistoryUpdated = 0
    ##########################################################################
    MSG   = f"Save Film Database {HFILE}"
    self  . LOG             ( MSG                                            )
    ##########################################################################
    return
  ############################################################################
  def StoreHistory     ( self                                              ) :
    ##########################################################################
    if                 ( self . HistoryUpdated <= 0                        ) :
      return
    ##########################################################################
    NOW  = StarDate    (                                                     )
    NOW  . Now         (                                                     )
    CDT  = int         ( NOW . Stardate                                      )
    XDT  = int         ( CDT - self . HistoryUpdated                         )
    ##########################################################################
    if                 ( XDT < 300                                         ) :
      return
    ##########################################################################
    self . SaveHistory (                                                     )
    ##########################################################################
    return
  ############################################################################
  def Process           ( self                                             ) :
    ##########################################################################
    self . StoreHistory (                                                    )
    ##########################################################################
    return
  ############################################################################
  def FilmHistory       ( self , FJI                                       ) :
    ##########################################################################
    UUID   = FJI        [ "Uuid"                                             ]
    SIG    = FJI        [ "Signature"                                        ]
    ##########################################################################
    NOW    = StarDate   (                                                    )
    NOW    . Now        (                                                    )
    ##########################################################################
    if                  ( SIG in self . History [ "Signatures"           ] ) :
      ########################################################################
      HJI  = self . History [ "Films" ] [ SIG                                ]
      FOCs = FJI        [ "Locations"                                        ]
      LOCs = HJI        [ "Locations"                                        ]
      SEEW = HJI        [ "Watching"                                         ]
      PLAY = HJI        [ "Played"                                           ]
      AAA  = False
      ########################################################################
      for L in FOCs                                                          :
        ######################################################################
        if              ( L not in LOCs                                    ) :
          ####################################################################
          LOCs . append ( L                                                  )
          AAA  = True
      ########################################################################
      if                ( AAA                                              ) :
        ######################################################################
        FJI [ "Locations" ]   = LOCs
        self . HistoryUpdated = NOW . Stardate
      ########################################################################
      FJI [ "Played"   ] = PLAY
      FJI [ "Watching" ] = SEEW
      ########################################################################
    else                                                                     :
      ########################################################################
      self . History [ "Signatures" ] . append ( SIG                         )
      self . History [ "Films"      ] [ SIG ] = FJI
      self . HistoryUpdated = NOW . Stardate
    ##########################################################################
    MSG    = f"Query Film {UUID} for {SIG}"
    self   . LOG        ( MSG                                                )
    ##########################################################################
    return FJI
  ############################################################################
  def AssureFilm                       ( self , FJI                        ) :
    ##########################################################################
    UUID     = FJI                     [ "Uuid"                              ]
    SIG      = FJI                     [ "Signature"                         ]
    FIMTAB   = self . Tables           [ "FilmCenter" ] [ "Film"             ]
    ##########################################################################
    if                                 ( UUID > 0                          ) :
      return self . FilmHistory        ( FJI                                 )
    ##########################################################################
    OK       = self . DB . isConnected (                                     )
    ##########################################################################
    if                                 ( not OK                            ) :
      return FJI
    ##########################################################################
    FI       = FilmItem                (                                     )
    FI       . fromJson                ( FJI                                 )
    ##########################################################################
    NOW      = StarDate                (                                     )
    NOW      . Now                     (                                     )
    CDT      = NOW . Stardate
    ##########################################################################
    self . DbLocker . acquire          (                                     )
    self . DB . LockWrites             ( [ FIMTAB                          ] )
    ##########################################################################
    FOUND    = FI . Locate             ( self . DB , FIMTAB                  )
    ##########################################################################
    if                                 ( not FOUND                         ) :
      ########################################################################
      ADDED  = FI . Assure             ( self . DB , FIMTAB                  )
      ########################################################################
      if                               ( ADDED                             ) :
        ######################################################################
        FOUND = True
    ##########################################################################
    self . DB . UnlockTables           (                                     )
    self . DbLocker . release          (                                     )
    ##########################################################################
    if                                 ( FOUND                             ) :
      ########################################################################
      FJI               [ "Uuid" ] = FI . Uuid
      FJI [ "Details" ] [ "Uuid" ] = FI . Uuid
      ########################################################################
      UUID = FI . Uuid
      MSG  = f"Found Film {UUID} for {SIG}"
      self . LOG                       ( MSG                                 )
    ##########################################################################
    if ( SIG not in self . History [ "Signatures"                        ] ) :
      ########################################################################
      self . History [ "Signatures" ] . append ( SIG                         )
    ##########################################################################
    self   . History [ "Films" ] [ SIG ] = FJI
    self   . HistoryUpdated              = CDT
    ##########################################################################
    return FJI
  ############################################################################
  def SyncFilm        ( self , FJI                                         ) :
    ##########################################################################
    SIG    = FJI      [ "Signature"                                          ]
    NOW    = StarDate (                                                      )
    NOW    . Now      (                                                      )
    CDT    = NOW . Stardate
    ##########################################################################
    if                ( SIG not in self . History [ "Signatures"         ] ) :
      ########################################################################
      self . History  [ "Signatures" ] . append ( SIG                        )
    ##########################################################################
    self   . History  [ "Films" ] [ SIG ] = FJI
    self   . HistoryUpdated               = CDT
    ##########################################################################
    MSG    = f"Sync Film {SIG}"
    self   . LOG      ( MSG                                                  )
    ##########################################################################
    return
  ############################################################################
  def RpcHandler ( self , J , ADDR                                         ) :
    ##########################################################################
    ANSWER =     { "Answer" : "Yes" , "IP"       : ADDR                      }
    RESP   =     { "Answer" : 202   , "Response" : ANSWER                    }
    ##########################################################################
    if           ( "Action" not in J                                       ) :
      return RESP
    ##########################################################################
    ACTION = J   [ "Action"                                                  ]
    ##########################################################################
    if           ( "Query" == ACTION                                       ) :
      ########################################################################
      FJI  = J   [ "Film"                                                    ]
      FJI  = self . AssureFilm ( FJI                                         )
      ########################################################################
      ANS  =     { "Answer" : "Yes" , "IP"       : ADDR , "Film" : FJI       }
      RESP =     { "Answer" : 202   , "Response" : ANS                       }
      ########################################################################
      return RESP
    ##########################################################################
    if           ( "Sync" == ACTION                                        ) :
      ########################################################################
      FJI  = J   [ "Film"                                                    ]
      FJI  = self . SyncFilm ( FJI                                           )
      ########################################################################
      return RESP
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return RESP
##############################################################################
