# -*- coding: utf-8 -*-
##############################################################################
import os
import sys
import time
##############################################################################
import PySide6
from   PySide6                 import QtCore
from   PySide6                 import QtGui
from   PySide6                 import QtWidgets
##############################################################################
from   PySide6 . QtCore        import *
from   PySide6 . QtGui         import *
from   PySide6 . QtWidgets     import *
##############################################################################
from           . VirtualGui    import VirtualGui    as VirtualGui
from           . StatusBar     import StatusBar     as StatusBar
from           . StackedWidget import StackedWidget as StackedWidget
from           . MdiArea       import MdiArea       as MdiArea
from           . MdiSubWindow  import MdiSubWindow  as MdiSubWindow
##############################################################################
class MainWindow         ( QMainWindow , VirtualGui                        ) :
  ############################################################################
  SubmitTtsTalk = Signal ( str , int                                         )
  ############################################################################
  def __init__           ( self , parent = None , plan = None              ) :
    ##########################################################################
    ## super ( QMainWindow , self ) . __init__ ( parent                         )
    super ( ) . __init__ ( parent                         )
    ## super ( VirtualGui  , self ) . __init__ (                                )
    self . Initialize                       ( self                           )
    self . setPlanFunction                  ( plan                           )
    ##########################################################################
    self . SubmitTtsTalk         . connect  ( self . DoTtsTalk               )
    ##########################################################################
    return
  ############################################################################
  def Configure                     ( self                                 ) :
    ##########################################################################
    self . stacked = StackedWidget  ( self           , self . PlanFunc       )
    self . mdi     = MdiArea        ( self . stacked , self . PlanFunc       )
    self . stacked . addWidget      ( self . mdi                             )
    self . setCentralWidget         ( self . stacked                         )
    ##########################################################################
    SB   = StatusBar                ( self                                   )
    self . setStatusBar             ( SB                                     )
    ##########################################################################
    if                              ( self . PlanFunc is None              ) :
      return
    ##########################################################################
    PF   = self . PlanFunc          (                                        )
    PF   . statusMessage = SB . showMessage
    PF   . statusBar     = SB
    ##########################################################################
    return
  ############################################################################
  def focusInEvent    ( self , event                                       ) :
    ##########################################################################
    if                ( self . focusIn ( event )                           ) :
      return
    super ( QMainWindow , self ) . focusInEvent ( event                      )
    ##########################################################################
    return
  ############################################################################
  def focusOutEvent   ( self , event                                       ) :
    ##########################################################################
    if                ( self . focusOut ( event )                          ) :
      return
    super ( QMainWindow , self ) . focusOutEvent ( event                     )
    ##########################################################################
    return
  ############################################################################
  def startup                 ( self                                       ) :
    raise NotImplementedError (                                              )
  ############################################################################
  def FocusIn                 ( self                                       ) :
    return True
  ############################################################################
  def FocusOut                ( self                                       ) :
    return True
  ############################################################################
  def NormalWindow        ( self                                           ) :
    self . showNormal     (                                                  )
    return
  ############################################################################
  def FullScreen          ( self                                           ) :
    self . showFullScreen (                                                  )
    return
  ############################################################################
  def MinimizedWindow     ( self                                           ) :
    self . showMinimized  (                                                  )
    return
  ############################################################################
  def MaximizedWindow     ( self                                           ) :
    self . showMaximized  (                                                  )
    return
  ############################################################################
  def TileWindows               ( self                                     ) :
    ##########################################################################
    self . mdi . Tile           (                                            )
    ##########################################################################
    return
  ############################################################################
  def CascadeWindows            ( self                                     ) :
    ##########################################################################
    self . mdi . Cascade        (                                            )
    ##########################################################################
    return
  ############################################################################
  def TabbedView                ( self                                     ) :
    ##########################################################################
    self . mdi . Tabbed         (                                            )
    ##########################################################################
    return
  ############################################################################
  def SubwindowView             ( self                                     ) :
    ##########################################################################
    self . mdi . Subwindow      (                                            )
    ##########################################################################
    return
  ############################################################################
  def CloseAll                  ( self                                     ) :
    ##########################################################################
    self . mdi . CloseAll       (                                            )
    ##########################################################################
    return
  ############################################################################
  def addMdi                     ( self , widget , showOptions = 1         ) :
    ##########################################################################
    orient  = getattr            ( widget , "dockingOrientation" , None      )
    if                           ( orient not in [ False , None ]          ) :
      ########################################################################
      subw  = self . mdi . Attach ( widget , widget . dockingOrientation     )
      ########################################################################
    else                                                                     :
      ########################################################################
      subw  = MdiSubWindow        (                                          )
      subw  . setWidget           ( widget                                   )
      self  . mdi . addSubWindow  ( subw                                     )
      subw  . setAttribute        ( Qt . WA_DeleteOnClose                    )
    ##########################################################################
    return subw
  ############################################################################
  def connectDockers              ( self , widget                          ) :
    ##########################################################################
    widget . attachNone . connect ( self . attachNone                        )
    widget . attachDock . connect ( self . attachDock                        )
    widget . attachMdi  . connect ( self . attachMdi                         )
    ##########################################################################
    return
  ############################################################################
  def attachNone                   ( self , widget                         ) :
    ##########################################################################
    if                             ( widget is None                        ) :
      return
    ##########################################################################
    widgetIsDocking = getattr      ( widget , "isDocking" , None             )
    if                             ( callable ( widgetIsDocking )          ) :
      if                           ( widget . isDocking ( )                ) :
        widget . Detach            ( self                                    )
    ##########################################################################
    p      = widget . parentWidget (                                         )
    widget . setParent             ( None                                    )
    widget . show                  (                                         )
    ##########################################################################
    if                             ( p is None                             ) :
      return
    ##########################################################################
    widgetIsMdiSubWindow = getattr ( p , "isMdiSubWindow" , None             )
    if                             ( callable ( widgetIsMdiSubWindow )     ) :
      p . deleteLater              (                                         )
    ##########################################################################
    return
  ############################################################################
  def attachDock ( self , widget , title , place , places                  ) :
    ##########################################################################
    subw     = widget . parentWidget (                                       )
    ##########################################################################
    widgetDocking = getattr          ( widget , "Docking" , None             )
    if                               ( callable ( widgetDocking )          ) :
      widget . Docking               ( self , title , place , places         )
    ##########################################################################
    if                               ( subw is None                        ) :
      return
    ##########################################################################
    widgetIsMdiSubWindow = getattr   ( subw , "isMdiSubWindow" , None        )
    if                               ( callable ( widgetIsMdiSubWindow )   ) :
      subw   . deleteLater           (                                       )
    ##########################################################################
    return
  ############################################################################
  def attachMdi               ( self, widget , dockingOrientation          ) :
    ##########################################################################
    p = widget . parentWidget (                                              )
    ##########################################################################
    widget . setParent        ( self . mdi                                   )
    self   . mdi . Attach     ( widget , dockingOrientation                  )
    widget . show             (                                              )
    ##########################################################################
    if                        ( p is None                                  ) :
      return
    ##########################################################################
    dockDetach = getattr      ( widget , "Detach" , None                     )
    if                        ( dockDetach is None                         ) :
      return
    ##########################################################################
    if                        ( callable ( dockDetach )                    ) :
      widget . Detach         ( self                                         )
    ##########################################################################
    return
  ############################################################################
  def deleteLater                    ( self , widget                       ) :
    ##########################################################################
    if                               ( widget is None                      ) :
      return
    ##########################################################################
    p        = widget . parentWidget (                                       )
    if                               ( p is None                           ) :
      widget . deleteLater           (                                       )
      return
    ##########################################################################
    p        . deleteLater           (                                       )
    ##########################################################################
    return
  ############################################################################
  def DoTtsTalk                 ( self , message , locality                ) :
    ##########################################################################
    self . Talk                 (        message , locality                  )
    ##########################################################################
    return
  ############################################################################
  def TtsTalk                   ( self , message , locality                ) :
    ##########################################################################
    self . SubmitTtsTalk . emit (        message , locality                  )
    ##########################################################################
    return
  ############################################################################
  def AssignWidgetFont   ( self , Settings , WIDGET                        ) :
    ##########################################################################
    if                   ( "Font" not in Settings                          ) :
      return
    ##########################################################################
    fnt    = QFont       (                                                   )
    fnt    . fromString  ( Settings [ "Font" ]                               )
    WIDGET . setFont     ( fnt                                               )
    ##########################################################################
    return
  ############################################################################
  def AssignListFont     ( self , Settings , LISTW                         ) :
    ##########################################################################
    if                   ( "Font" not in Settings                          ) :
      return
    ##########################################################################
    fnt   = QFont        (                                                   )
    fnt   . fromString   ( Settings [ "Font" ]                               )
    LISTW . setFont      ( fnt                                               )
    fnt   . setPointSize ( 8                                                 )
    LISTW . setIconFont  ( fnt                                               )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
