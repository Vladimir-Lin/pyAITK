# -*- coding: utf-8 -*-
##############################################################################
## CelestialListings
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import math
##############################################################################
import gmpy2
from   gmpy2 import mpz
from   gmpy2 import mpq
from   gmpy2 import mpfr
##############################################################################
from   AITK  . Documents  . JSON      import Save               as SaveJson
##############################################################################
from   PyQt5                          import QtCore
from   PyQt5                          import QtGui
from   PyQt5                          import QtWidgets
##############################################################################
from   PyQt5 . QtCore                 import QObject
from   PyQt5 . QtCore                 import pyqtSignal
from   PyQt5 . QtCore                 import pyqtSlot
from   PyQt5 . QtCore                 import Qt
from   PyQt5 . QtCore                 import QPoint
from   PyQt5 . QtCore                 import QPointF
from   PyQt5 . QtCore                 import QSize
##############################################################################
from   PyQt5 . QtGui                  import QIcon
from   PyQt5 . QtGui                  import QCursor
from   PyQt5 . QtGui                  import QKeySequence
##############################################################################
from   PyQt5 . QtWidgets              import QApplication
from   PyQt5 . QtWidgets              import QWidget
from   PyQt5 . QtWidgets              import qApp
from   PyQt5 . QtWidgets              import QAction
from   PyQt5 . QtWidgets              import QShortcut
from   PyQt5 . QtWidgets              import QMenu
from   PyQt5 . QtWidgets              import QAbstractItemView
from   PyQt5 . QtWidgets              import QTreeWidget
from   PyQt5 . QtWidgets              import QTreeWidgetItem
from   PyQt5 . QtWidgets              import QLineEdit
from   PyQt5 . QtWidgets              import QComboBox
from   PyQt5 . QtWidgets              import QSpinBox
##############################################################################
from   AITK  . Qt . MenuManager       import MenuManager as MenuManager
from   AITK  . Qt . TreeDock          import TreeDock    as TreeDock
from   AITK  . Qt . LineEdit          import LineEdit    as LineEdit
from   AITK  . Qt . ComboBox          import ComboBox    as ComboBox
from   AITK  . Qt . SpinBox           import SpinBox     as SpinBox
##############################################################################
from   AITK  . Essentials . Relation  import Relation
from   AITK  . Calendars  . StarDate  import StarDate
from   AITK  . Calendars  . Periode   import Periode
##############################################################################
from   AITK  . UUIDs      . UuidListings import appendUuid
from   AITK  . UUIDs      . UuidListings import appendUuids
from   AITK  . UUIDs      . UuidListings import getUuids
##############################################################################
from   AITK  . Physics                import AU             as AU
from   AITK  . Physics                import J2000          as J2000
from   AITK  . Physics                import TsiderealDay   as TsiderealDay
from   AITK  . Physics                import TsiderealYear  as TsiderealYear
from   AITK  . Physics                import JulianDayToJulianCentury as JulianDayToJulianCentury
##############################################################################
from   AITK  . Physics  . Unit        import Unit           as Unit
from   AITK  . Physics  . PlanetSpot  import PlanetSpot     as PlanetSpot
from   AITK  . Physics  . Earth       import Earth          as Earth
from   AITK  . Physics  . Sun         import Sun            as Sun
##############################################################################
from   AITK  . Physics  . SunEarth    import LocateSunEarthPerihelion
from   AITK  . Physics  . SunEarth    import TakeSunEarthPerihelion
from   AITK  . Physics  . SunEarth    import SunEarthApproximateDistance
from   AITK  . Physics  . SunEarth    import LocateEquinoxAngles
from   AITK  . Physics  . SunEarth    import TakeEquinoxAngles
from   AITK  . Physics  . SunEarth    import GetEquinoxAngles
from   AITK  . Physics  . SunEarth    import GetSolarTransformMatrix
from   AITK  . Physics  . SunEarth    import GetRollingSolarAngle
from   AITK  . Physics  . SunEarth    import GetProjectToSolarPoint
from   AITK  . Physics  . SunEarth    import GetProjectPointToSunriseSunset
from   AITK  . Physics  . SunEarth    import GetSunriseSunsetSinAngle
from   AITK  . Physics  . SunEarth    import GetAppearSunriseSinAngle
from   AITK  . Physics  . SunEarth    import GetCriticalTwilightAngle
##############################################################################
import datetime
import pytz
from astral       import LocationInfo
from astral . sun import sun
##############################################################################
from sunpy   . coordinates . ephemeris import get_body_heliographic_stonyhurst
from astropy . time                    import Time as AstroTime
##############################################################################
Midday120 = [ "2022-01-01 12:03:24"                                          ,
  "2022-01-02 12:03:52"                                                      ,
  "2022-01-03 12:04:20"                                                      ,
  "2022-01-04 12:04:48"                                                      ,
  "2022-01-05 12:05:15"                                                      ,
  "2022-01-06 12:05:41"                                                      ,
  "2022-01-07 12:06:07"                                                      ,
  "2022-01-08 12:06:33"                                                      ,
  "2022-01-09 12:06:58"                                                      ,
  "2022-01-10 12:07:23"                                                      ,
  "2022-01-11 12:07:47"                                                      ,
  "2022-01-12 12:08:10"                                                      ,
  "2022-01-13 12:08:33"                                                      ,
  "2022-01-14 12:08:55"                                                      ,
  "2022-01-15 12:09:17"                                                      ,
  "2022-01-16 12:09:38"                                                      ,
  "2022-01-17 12:09:58"                                                      ,
  "2022-01-18 12:10:18"                                                      ,
  "2022-01-19 12:10:36"                                                      ,
  "2022-01-20 12:10:54"                                                      ,
  "2022-01-21 12:11:12"                                                      ,
  "2022-01-22 12:11:28"                                                      ,
  "2022-01-23 12:11:44"                                                      ,
  "2022-01-24 12:11:59"                                                      ,
  "2022-01-25 12:12:13"                                                      ,
  "2022-01-26 12:12:27"                                                      ,
  "2022-01-27 12:12:39"                                                      ,
  "2022-01-28 12:12:51"                                                      ,
  "2022-01-29 12:13:02"                                                      ,
  "2022-01-30 12:13:12"                                                      ,
  "2022-01-31 12:13:22"                                                      ,
  "2022-02-01 12:13:30"                                                      ,
  "2022-02-02 12:13:38"                                                      ,
  "2022-02-03 12:13:45"                                                      ,
  "2022-02-04 12:13:51"                                                      ,
  "2022-02-05 12:13:57"                                                      ,
  "2022-02-06 12:14:01"                                                      ,
  "2022-02-07 12:14:05"                                                      ,
  "2022-02-08 12:14:08"                                                      ,
  "2022-02-09 12:14:10"                                                      ,
  "2022-02-10 12:14:11"                                                      ,
  "2022-02-11 12:14:12"                                                      ,
  "2022-02-12 12:14:11"                                                      ,
  "2022-02-13 12:14:10"                                                      ,
  "2022-02-14 12:14:09"                                                      ,
  "2022-02-15 12:14:06"                                                      ,
  "2022-02-16 12:14:03"                                                      ,
  "2022-02-17 12:13:59"                                                      ,
  "2022-02-18 12:13:55"                                                      ,
  "2022-02-19 12:13:49"                                                      ,
  "2022-02-20 12:13:43"                                                      ,
  "2022-02-21 12:13:37"                                                      ,
  "2022-02-22 12:13:30"                                                      ,
  "2022-02-23 12:13:22"                                                      ,
  "2022-02-24 12:13:13"                                                      ,
  "2022-02-25 12:13:04"                                                      ,
  "2022-02-26 12:12:55"                                                      ,
  "2022-02-27 12:12:44"                                                      ,
  "2022-02-28 12:12:34"                                                      ,
  "2022-03-01 12:12:22"                                                      ,
  "2022-03-02 12:12:11"                                                      ,
  "2022-03-03 12:11:58"                                                      ,
  "2022-03-04 12:11:46"                                                      ,
  "2022-03-05 12:11:32"                                                      ,
  "2022-03-06 12:11:19"                                                      ,
  "2022-03-07 12:11:05"                                                      ,
  "2022-03-08 12:10:50"                                                      ,
  "2022-03-09 12:10:35"                                                      ,
  "2022-03-10 12:10:20"                                                      ,
  "2022-03-11 12:10:05"                                                      ,
  "2022-03-12 12:09:49"                                                      ,
  "2022-03-13 12:09:33"                                                      ,
  "2022-03-14 12:09:16"                                                      ,
  "2022-03-15 12:09:00"                                                      ,
  "2022-03-16 12:08:43"                                                      ,
  "2022-03-17 12:08:26"                                                      ,
  "2022-03-18 12:08:08"                                                      ,
  "2022-03-19 12:07:51"                                                      ,
  "2022-03-20 12:07:33"                                                      ,
  "2022-03-21 12:07:16"                                                      ,
  "2022-03-22 12:06:58"                                                      ,
  "2022-03-23 12:06:40"                                                      ,
  "2022-03-24 12:06:22"                                                      ,
  "2022-03-25 12:06:04"                                                      ,
  "2022-03-26 12:05:46"                                                      ,
  "2022-03-27 12:05:27"                                                      ,
  "2022-03-28 12:05:09"                                                      ,
  "2022-03-29 12:04:51"                                                      ,
  "2022-03-30 12:04:33"                                                      ,
  "2022-03-31 12:04:15"                                                      ,
  "2022-04-01 12:03:57"                                                      ,
  "2022-04-02 12:03:40"                                                      ,
  "2022-04-03 12:03:22"                                                      ,
  "2022-04-04 12:03:05"                                                      ,
  "2022-04-05 12:02:47"                                                      ,
  "2022-04-06 12:02:30"                                                      ,
  "2022-04-07 12:02:13"                                                      ,
  "2022-04-08 12:01:56"                                                      ,
  "2022-04-09 12:01:40"                                                      ,
  "2022-04-10 12:01:24"                                                      ,
  "2022-04-11 12:01:08"                                                      ,
  "2022-04-12 12:00:52"                                                      ,
  "2022-04-13 12:00:37"                                                      ,
  "2022-04-14 12:00:22"                                                      ,
  "2022-04-15 12:00:07"                                                      ,
  "2022-04-16 11:59:52"                                                      ,
  "2022-04-17 11:59:38"                                                      ,
  "2022-04-18 11:59:25"                                                      ,
  "2022-04-19 11:59:12"                                                      ,
  "2022-04-20 11:58:59"                                                      ,
  "2022-04-21 11:58:46"                                                      ,
  "2022-04-22 11:58:34"                                                      ,
  "2022-04-23 11:58:23"                                                      ,
  "2022-04-24 11:58:12"                                                      ,
  "2022-04-25 11:58:01"                                                      ,
  "2022-04-26 11:57:51"                                                      ,
  "2022-04-27 11:57:42"                                                      ,
  "2022-04-28 11:57:32"                                                      ,
  "2022-04-29 11:57:24"                                                      ,
  "2022-04-30 11:57:16"                                                      ,
  "2022-05-01 11:57:08"                                                      ,
  "2022-05-02 11:57:01"                                                      ,
  "2022-05-03 11:56:55"                                                      ,
  "2022-05-04 11:56:49"                                                      ,
  "2022-05-05 11:56:43"                                                      ,
  "2022-05-06 11:56:39"                                                      ,
  "2022-05-07 11:56:34"                                                      ,
  "2022-05-08 11:56:31"                                                      ,
  "2022-05-09 11:56:28"                                                      ,
  "2022-05-10 11:56:25"                                                      ,
  "2022-05-11 11:56:23"                                                      ,
  "2022-05-12 11:56:22"                                                      ,
  "2022-05-13 11:56:21"                                                      ,
  "2022-05-14 11:56:21"                                                      ,
  "2022-05-15 11:56:21"                                                      ,
  "2022-05-16 11:56:22"                                                      ,
  "2022-05-17 11:56:23"                                                      ,
  "2022-05-18 11:56:25"                                                      ,
  "2022-05-19 11:56:28"                                                      ,
  "2022-05-20 11:56:31"                                                      ,
  "2022-05-21 11:56:35"                                                      ,
  "2022-05-22 11:56:39"                                                      ,
  "2022-05-23 11:56:43"                                                      ,
  "2022-05-24 11:56:49"                                                      ,
  "2022-05-25 11:56:54"                                                      ,
  "2022-05-26 11:57:01"                                                      ,
  "2022-05-27 11:57:07"                                                      ,
  "2022-05-28 11:57:15"                                                      ,
  "2022-05-29 11:57:22"                                                      ,
  "2022-05-30 11:57:30"                                                      ,
  "2022-05-31 11:57:39"                                                      ,
  "2022-06-01 11:57:48"                                                      ,
  "2022-06-02 11:57:57"                                                      ,
  "2022-06-03 11:58:07"                                                      ,
  "2022-06-04 11:58:17"                                                      ,
  "2022-06-05 11:58:27"                                                      ,
  "2022-06-06 11:58:38"                                                      ,
  "2022-06-07 11:58:49"                                                      ,
  "2022-06-08 11:59:00"                                                      ,
  "2022-06-09 11:59:12"                                                      ,
  "2022-06-10 11:59:24"                                                      ,
  "2022-06-11 11:59:36"                                                      ,
  "2022-06-12 11:59:48"                                                      ,
  "2022-06-13 12:00:00"                                                      ,
  "2022-06-14 12:00:13"                                                      ,
  "2022-06-15 12:00:26"                                                      ,
  "2022-06-16 12:00:39"                                                      ,
  "2022-06-17 12:00:52"                                                      ,
  "2022-06-18 12:01:05"                                                      ,
  "2022-06-19 12:01:18"                                                      ,
  "2022-06-20 12:01:31"                                                      ,
  "2022-06-21 12:01:44"                                                      ,
  "2022-06-22 12:01:57"                                                      ,
  "2022-06-23 12:02:10"                                                      ,
  "2022-06-24 12:02:23"                                                      ,
  "2022-06-25 12:02:36"                                                      ,
  "2022-06-26 12:02:48"                                                      ,
  "2022-06-27 12:03:01"                                                      ,
  "2022-06-28 12:03:13"                                                      ,
  "2022-06-29 12:03:26"                                                      ,
  "2022-06-30 12:03:38"                                                      ,
  "2022-07-01 12:03:49"                                                      ,
  "2022-07-02 12:04:01"                                                      ,
  "2022-07-03 12:04:12"                                                      ,
  "2022-07-04 12:04:23"                                                      ,
  "2022-07-05 12:04:34"                                                      ,
  "2022-07-06 12:04:44"                                                      ,
  "2022-07-07 12:04:54"                                                      ,
  "2022-07-08 12:05:03"                                                      ,
  "2022-07-09 12:05:12"                                                      ,
  "2022-07-10 12:05:21"                                                      ,
  "2022-07-11 12:05:29"                                                      ,
  "2022-07-12 12:05:37"                                                      ,
  "2022-07-13 12:05:45"                                                      ,
  "2022-07-14 12:05:52"                                                      ,
  "2022-07-15 12:05:58"                                                      ,
  "2022-07-16 12:06:04"                                                      ,
  "2022-07-17 12:06:09"                                                      ,
  "2022-07-18 12:06:14"                                                      ,
  "2022-07-19 12:06:18"                                                      ,
  "2022-07-20 12:06:22"                                                      ,
  "2022-07-21 12:06:25"                                                      ,
  "2022-07-22 12:06:28"                                                      ,
  "2022-07-23 12:06:30"                                                      ,
  "2022-07-24 12:06:32"                                                      ,
  "2022-07-25 12:06:33"                                                      ,
  "2022-07-26 12:06:33"                                                      ,
  "2022-07-27 12:06:33"                                                      ,
  "2022-07-28 12:06:32"                                                      ,
  "2022-07-29 12:06:30"                                                      ,
  "2022-07-30 12:06:28"                                                      ,
  "2022-07-31 12:06:25"                                                      ,
  "2022-08-01 12:06:22"                                                      ,
  "2022-08-02 12:06:18"                                                      ,
  "2022-08-03 12:06:14"                                                      ,
  "2022-08-04 12:06:09"                                                      ,
  "2022-08-05 12:06:03"                                                      ,
  "2022-08-06 12:05:57"                                                      ,
  "2022-08-07 12:05:50"                                                      ,
  "2022-08-08 12:05:42"                                                      ,
  "2022-08-09 12:05:34"                                                      ,
  "2022-08-10 12:05:25"                                                      ,
  "2022-08-11 12:05:16"                                                      ,
  "2022-08-12 12:05:06"                                                      ,
  "2022-08-13 12:04:56"                                                      ,
  "2022-08-14 12:04:45"                                                      ,
  "2022-08-15 12:04:33"                                                      ,
  "2022-08-16 12:04:21"                                                      ,
  "2022-08-17 12:04:09"                                                      ,
  "2022-08-18 12:03:56"                                                      ,
  "2022-08-19 12:03:42"                                                      ,
  "2022-08-20 12:03:28"                                                      ,
  "2022-08-21 12:03:14"                                                      ,
  "2022-08-22 12:02:59"                                                      ,
  "2022-08-23 12:02:43"                                                      ,
  "2022-08-24 12:02:27"                                                      ,
  "2022-08-25 12:02:11"                                                      ,
  "2022-08-26 12:01:54"                                                      ,
  "2022-08-27 12:01:37"                                                      ,
  "2022-08-28 12:01:20"                                                      ,
  "2022-08-29 12:01:02"                                                      ,
  "2022-08-30 12:00:44"                                                      ,
  "2022-08-31 12:00:25"                                                      ,
  "2022-09-01 12:00:06"                                                      ,
  "2022-09-02 11:59:47"                                                      ,
  "2022-09-03 11:59:28"                                                      ,
  "2022-09-04 11:59:08"                                                      ,
  "2022-09-05 11:58:48"                                                      ,
  "2022-09-06 11:58:28"                                                      ,
  "2022-09-07 11:58:00"                                                      ,
  "2022-09-08 11:57:47"                                                      ,
  "2022-09-09 11:57:26"                                                      ,
  "2022-09-10 11:57:06"                                                      ,
  "2022-09-11 11:56:45"                                                      ,
  "2022-09-12 11:56:23"                                                      ,
  "2022-09-13 11:56:02"                                                      ,
  "2022-09-14 11:55:41"                                                      ,
  "2022-09-15 11:55:19"                                                      ,
  "2022-09-16 11:54:58"                                                      ,
  "2022-09-17 11:54:37"                                                      ,
  "2022-09-18 11:54:15"                                                      ,
  "2022-09-19 11:53:54"                                                      ,
  "2022-09-20 11:53:32"                                                      ,
  "2022-09-21 11:53:11"                                                      ,
  "2022-09-22 11:52:50"                                                      ,
  "2022-09-23 11:52:29"                                                      ,
  "2022-09-24 11:52:08"                                                      ,
  "2022-09-25 11:51:47"                                                      ,
  "2022-09-26 11:51:26"                                                      ,
  "2022-09-27 11:51:06"                                                      ,
  "2022-09-28 11:50:45"                                                      ,
  "2022-09-29 11:50:25"                                                      ,
  "2022-09-30 11:50:05"                                                      ,
  "2022-10-01 11:49:46"                                                      ,
  "2022-10-02 11:49:26"                                                      ,
  "2022-10-03 11:49:07"                                                      ,
  "2022-10-04 11:48:49"                                                      ,
  "2022-10-05 11:48:31"                                                      ,
  "2022-10-06 11:48:13"                                                      ,
  "2022-10-07 11:47:55"                                                      ,
  "2022-10-08 11:47:38"                                                      ,
  "2022-10-09 11:47:21"                                                      ,
  "2022-10-10 11:47:05"                                                      ,
  "2022-10-11 11:46:49"                                                      ,
  "2022-10-12 11:46:34"                                                      ,
  "2022-10-13 11:46:19"                                                      ,
  "2022-10-14 11:46:05"                                                      ,
  "2022-10-15 11:45:51"                                                      ,
  "2022-10-16 11:45:38"                                                      ,
  "2022-10-17 11:45:25"                                                      ,
  "2022-10-18 11:45:13"                                                      ,
  "2022-10-19 11:45:01"                                                      ,
  "2022-10-20 11:44:51"                                                      ,
  "2022-10-21 11:44:40"                                                      ,
  "2022-10-22 11:44:31"                                                      ,
  "2022-10-23 11:44:22"                                                      ,
  "2022-10-24 11:44:14"                                                      ,
  "2022-10-25 11:44:06"                                                      ,
  "2022-10-26 11:44:00"                                                      ,
  "2022-10-27 11:43:54"                                                      ,
  "2022-10-28 11:43:48"                                                      ,
  "2022-10-29 11:43:44"                                                      ,
  "2022-10-30 11:43:40"                                                      ,
  "2022-10-31 11:43:37"                                                      ,
  "2022-11-01 11:43:35"                                                      ,
  "2022-11-02 11:43:34"                                                      ,
  "2022-11-03 11:43:33"                                                      ,
  "2022-11-04 11:43:33"                                                      ,
  "2022-11-05 11:43:34"                                                      ,
  "2022-11-06 11:43:36"                                                      ,
  "2022-11-07 11:43:39"                                                      ,
  "2022-11-08 11:43:43"                                                      ,
  "2022-11-09 11:43:47"                                                      ,
  "2022-11-10 11:43:52"                                                      ,
  "2022-11-11 11:43:58"                                                      ,
  "2022-11-12 11:44:05"                                                      ,
  "2022-11-13 11:44:13"                                                      ,
  "2022-11-14 11:44:22"                                                      ,
  "2022-11-15 11:44:31"                                                      ,
  "2022-11-16 11:44:42"                                                      ,
  "2022-11-17 11:44:53"                                                      ,
  "2022-11-18 11:45:05"                                                      ,
  "2022-11-19 11:45:18"                                                      ,
  "2022-11-20 11:45:31"                                                      ,
  "2022-11-21 11:45:46"                                                      ,
  "2022-11-22 11:46:01"                                                      ,
  "2022-11-23 11:46:17"                                                      ,
  "2022-11-24 11:46:34"                                                      ,
  "2022-11-25 11:46:52"                                                      ,
  "2022-11-26 11:47:10"                                                      ,
  "2022-11-27 11:47:29"                                                      ,
  "2022-11-28 11:47:49"                                                      ,
  "2022-11-29 11:48:10"                                                      ,
  "2022-11-30 11:48:31"                                                      ,
  "2022-12-01 11:48:53"                                                      ,
  "2022-12-02 11:49:15"                                                      ,
  "2022-12-03 11:49:39"                                                      ,
  "2022-12-04 11:50:02"                                                      ,
  "2022-12-05 11:50:27"                                                      ,
  "2022-12-06 11:50:52"                                                      ,
  "2022-12-07 11:51:17"                                                      ,
  "2022-12-08 11:51:43"                                                      ,
  "2022-12-09 11:52:10"                                                      ,
  "2022-12-10 11:52:36"                                                      ,
  "2022-12-11 11:53:04"                                                      ,
  "2022-12-12 11:53:31"                                                      ,
  "2022-12-13 11:54:00"                                                      ,
  "2022-12-14 11:54:28"                                                      ,
  "2022-12-15 11:54:57"                                                      ,
  "2022-12-16 11:55:26"                                                      ,
  "2022-12-17 11:55:55"                                                      ,
  "2022-12-18 11:56:24"                                                      ,
  "2022-12-19 11:56:54"                                                      ,
  "2022-12-20 11:57:23"                                                      ,
  "2022-12-21 11:57:53"                                                      ,
  "2022-12-22 11:58:23"                                                      ,
  "2022-12-23 11:58:53"                                                      ,
  "2022-12-24 11:59:23"                                                      ,
  "2022-12-25 11:59:52"                                                      ,
  "2022-12-26 12:00:22"                                                      ,
  "2022-12-27 12:00:52"                                                      ,
  "2022-12-28 12:01:21"                                                      ,
  "2022-12-29 12:01:51"                                                      ,
  "2022-12-30 12:02:20"                                                      ,
  "2022-12-31 12:02:48"                                                      ,
  "2023-01-01 12:03:17"                                                      ,
  "2023-01-02 12:03:45"                                                      ,
  "2023-01-03 12:04:13"                                                      ,
  "2023-01-04 12:04:41"                                                      ,
  "2023-01-05 12:05:08"                                                      ,
  "2023-01-06 12:05:35"                                                      ,
  "2023-01-07 12:06:01"                                                      ,
  "2023-01-08 12:06:27"                                                      ,
  "2023-01-09 12:06:52"                                                      ,
  "2023-01-10 12:07:17"                                                      ,
  "2023-01-11 12:07:41"                                                      ,
  "2023-01-12 12:08:05"                                                      ,
  "2023-01-13 12:08:28"                                                      ,
  "2023-01-14 12:08:50"                                                      ,
  "2023-01-15 12:09:12"                                                      ,
  "2023-01-16 12:09:33"                                                      ,
  "2023-01-17 12:09:53"                                                      ,
  "2023-01-18 12:10:13"                                                      ,
  "2023-01-19 12:10:32"                                                      ,
  "2023-01-20 12:10:50"                                                      ,
  "2023-01-21 12:11:08"                                                      ,
  "2023-01-22 12:11:24"                                                      ,
  "2023-01-23 12:11:40"                                                      ,
  "2023-01-24 12:11:55"                                                      ,
  "2023-01-25 12:12:10"                                                      ,
  "2023-01-26 12:12:24"                                                      ,
  "2023-01-27 12:12:36"                                                      ,
  "2023-01-28 12:12:48"                                                      ,
  "2023-01-29 12:13:00"                                                      ,
  "2023-01-30 12:13:10"                                                      ,
  "2023-01-31 12:13:20"                                                      ,
  "2023-02-01 12:13:28"                                                      ,
  "2023-02-02 12:13:36"                                                      ,
  "2023-02-03 12:13:43"                                                      ,
  "2023-02-04 12:13:50"                                                      ,
  "2023-02-05 12:13:55"                                                      ,
  "2023-02-06 12:14:00"                                                      ,
  "2023-02-07 12:14:04"                                                      ,
  "2023-02-08 12:14:07"                                                      ,
  "2023-02-09 12:14:09"                                                      ,
  "2023-02-10 12:14:11"                                                      ,
  "2023-02-11 12:14:11"                                                      ,
  "2023-02-12 12:14:11"                                                      ,
  "2023-02-13 12:14:11"                                                      ,
  "2023-02-14 12:14:09"                                                      ,
  "2023-02-15 12:14:07"                                                      ,
  "2023-02-16 12:14:04"                                                      ,
  "2023-02-17 12:14:00"                                                      ,
  "2023-02-18 12:13:56"                                                      ,
  "2023-02-19 12:13:51"                                                      ,
  "2023-02-20 12:13:45"                                                      ,
  "2023-02-21 12:13:38"                                                      ,
  "2023-02-22 12:13:31"                                                      ,
  "2023-02-23 12:13:24"                                                      ,
  "2023-02-24 12:13:15"                                                      ,
  "2023-02-25 12:13:06"                                                      ,
  "2023-02-26 12:12:57"                                                      ,
  "2023-02-27 12:12:47"                                                      ,
  "2023-02-28 12:12:36"                                                      ,
  "2023-03-01 12:12:25"                                                      ,
  "2023-03-02 12:12:13"                                                      ,
  "2023-03-03 12:12:01"                                                      ,
  "2023-03-04 12:11:49"                                                      ,
  "2023-03-05 12:11:35"                                                      ,
  "2023-03-06 12:11:22"                                                      ,
  "2023-03-07 12:11:08"                                                      ,
  "2023-03-08 12:10:54"                                                      ,
  "2023-03-09 12:10:39"                                                      ,
  "2023-03-10 12:10:24"                                                      ,
  "2023-03-11 12:10:08"                                                      ,
  "2023-03-12 12:09:53"                                                      ,
  "2023-03-13 12:09:37"                                                      ,
  "2023-03-14 12:09:20"                                                      ,
  "2023-03-15 12:09:04"                                                      ,
  "2023-03-16 12:08:47"                                                      ,
  "2023-03-17 12:08:30"                                                      ,
  "2023-03-18 12:08:13"                                                      ,
  "2023-03-19 12:07:55"                                                      ,
  "2023-03-20 12:07:38"                                                      ,
  "2023-03-21 12:07:20"                                                      ,
  "2023-03-22 12:07:02"                                                      ,
  "2023-03-23 12:06:44"                                                      ,
  "2023-03-24 12:06:26"                                                      ,
  "2023-03-25 12:06:08"                                                      ,
  "2023-03-26 12:05:50"                                                      ,
  "2023-03-27 12:05:32"                                                      ,
  "2023-03-28 12:05:14"                                                      ,
  "2023-03-29 12:04:56"                                                      ,
  "2023-03-30 12:04:38"                                                      ,
  "2023-03-31 12:04:20"                                                      ,
  "2023-04-01 12:04:02"                                                      ,
  "2023-04-02 12:03:44"                                                      ,
  "2023-04-03 12:03:26"                                                      ,
  "2023-04-04 12:03:09"                                                      ,
  "2023-04-05 12:02:51"                                                      ,
  "2023-04-06 12:02:34"                                                      ,
  "2023-04-07 12:02:17"                                                      ,
  "2023-04-08 12:02:00"                                                      ,
  "2023-04-09 12:01:44"                                                      ,
  "2023-04-10 12:01:28"                                                      ,
  "2023-04-11 12:01:12"                                                      ,
  "2023-04-12 12:00:56"                                                      ,
  "2023-04-13 12:00:40"                                                      ,
  "2023-04-14 12:00:25"                                                      ,
  "2023-04-15 12:00:10"                                                      ,
  "2023-04-16 11:59:56"                                                      ,
  "2023-04-17 11:59:42"                                                      ,
  "2023-04-18 11:59:28"                                                      ,
  "2023-04-19 11:59:15"                                                      ,
  "2023-04-20 11:59:02"                                                      ,
  "2023-04-21 11:58:49"                                                      ,
  "2023-04-22 11:58:37"                                                      ,
  "2023-04-23 11:58:26"                                                      ,
  "2023-04-24 11:58:14"                                                      ,
  "2023-04-25 11:58:04"                                                      ,
  "2023-04-26 11:57:54"                                                      ,
  "2023-04-27 11:57:44"                                                      ,
  "2023-04-28 11:57:35"                                                      ,
  "2023-04-29 11:57:26"                                                      ,
  "2023-04-30 11:57:18"                                                      ,
  "2023-05-01 11:57:10"                                                      ,
  "2023-05-02 11:57:03"                                                      ,
  "2023-05-03 11:56:56"                                                      ,
  "2023-05-04 11:56:50"                                                      ,
  "2023-05-05 11:56:45"                                                      ,
  "2023-05-06 11:56:40"                                                      ,
  "2023-05-07 11:56:35"                                                      ,
  "2023-05-08 11:56:32"                                                      ,
  "2023-05-09 11:56:28"                                                      ,
  "2023-05-10 11:56:26"                                                      ,
  "2023-05-11 11:56:24"                                                      ,
  "2023-05-12 11:56:22"                                                      ,
  "2023-05-13 11:56:21"                                                      ,
  "2023-05-14 11:56:21"                                                      ,
  "2023-05-15 11:56:21"                                                      ,
  "2023-05-16 11:56:22"                                                      ,
  "2023-05-17 11:56:23"                                                      ,
  "2023-05-18 11:56:25"                                                      ,
  "2023-05-19 11:56:27"                                                      ,
  "2023-05-20 11:56:30"                                                      ,
  "2023-05-21 11:56:34"                                                      ,
  "2023-05-22 11:56:38"                                                      ,
  "2023-05-23 11:56:42"                                                      ,
  "2023-05-24 11:56:47"                                                      ,
  "2023-05-25 11:56:53"                                                      ,
  "2023-05-26 11:56:59"                                                      ,
  "2023-05-27 11:57:06"                                                      ,
  "2023-05-28 11:57:13"                                                      ,
  "2023-05-29 11:57:20"                                                      ,
  "2023-05-30 11:57:28"                                                      ,
  "2023-05-31 11:57:37"                                                      ,
  "2023-06-01 11:57:46"                                                      ,
  "2023-06-02 11:57:55"                                                      ,
  "2023-06-03 11:58:04"                                                      ,
  "2023-06-04 11:58:14"                                                      ,
  "2023-06-05 11:58:25"                                                      ,
  "2023-06-06 11:58:35"                                                      ,
  "2023-06-07 11:58:46"                                                      ,
  "2023-06-08 11:58:58"                                                      ,
  "2023-06-09 11:59:09"                                                      ,
  "2023-06-10 11:59:21"                                                      ,
  "2023-06-11 11:59:33"                                                      ,
  "2023-06-12 11:59:45"                                                      ,
  "2023-06-13 11:59:58"                                                      ,
  "2023-06-14 12:00:10"                                                      ,
  "2023-06-15 12:00:23"                                                      ,
  "2023-06-16 12:00:36"                                                      ,
  "2023-06-17 12:00:49"                                                      ,
  "2023-06-18 12:01:02"                                                      ,
  "2023-06-19 12:01:15"                                                      ,
  "2023-06-20 12:01:28"                                                      ,
  "2023-06-21 12:01:41"                                                      ,
  "2023-06-22 12:01:54"                                                      ,
  "2023-06-23 12:02:07"                                                      ,
  "2023-06-24 12:02:20"                                                      ,
  "2023-06-25 12:02:33"                                                      ,
  "2023-06-26 12:02:46"                                                      ,
  "2023-06-27 12:02:58"                                                      ,
  "2023-06-28 12:03:11"                                                      ,
  "2023-06-29 12:03:23"                                                      ,
  "2023-06-30 12:03:35"                                                      ,
  "2023-07-01 12:03:47"                                                      ,
  "2023-07-02 12:03:58"                                                      ,
  "2023-07-03 12:04:10"                                                      ,
  "2023-07-04 12:04:21"                                                      ,
  "2023-07-05 12:04:31"                                                      ,
  "2023-07-06 12:04:42"                                                      ,
  "2023-07-07 12:04:52"                                                      ,
  "2023-07-08 12:05:01"                                                      ,
  "2023-07-09 12:05:10"                                                      ,
  "2023-07-10 12:05:19"                                                      ,
  "2023-07-11 12:05:28"                                                      ,
  "2023-07-12 12:05:36"                                                      ,
  "2023-07-13 12:05:43"                                                      ,
  "2023-07-14 12:05:50"                                                      ,
  "2023-07-15 12:05:57"                                                      ,
  "2023-07-16 12:06:03"                                                      ,
  "2023-07-17 12:06:08"                                                      ,
  "2023-07-18 12:06:13"                                                      ,
  "2023-07-19 12:06:18"                                                      ,
  "2023-07-20 12:06:21"                                                      ,
  "2023-07-21 12:06:25"                                                      ,
  "2023-07-22 12:06:28"                                                      ,
  "2023-07-23 12:06:30"                                                      ,
  "2023-07-24 12:06:31"                                                      ,
  "2023-07-25 12:06:33"                                                      ,
  "2023-07-26 12:06:33"                                                      ,
  "2023-07-27 12:06:33"                                                      ,
  "2023-07-28 12:06:32"                                                      ,
  "2023-07-29 12:06:31"                                                      ,
  "2023-07-30 12:06:29"                                                      ,
  "2023-07-31 12:06:26"                                                      ,
  "2023-08-01 12:06:23"                                                      ,
  "2023-08-02 12:06:19"                                                      ,
  "2023-08-03 12:06:15"                                                      ,
  "2023-08-04 12:06:10"                                                      ,
  "2023-08-05 12:06:04"                                                      ,
  "2023-08-06 12:05:58"                                                      ,
  "2023-08-07 12:05:51"                                                      ,
  "2023-08-08 12:05:44"                                                      ,
  "2023-08-09 12:05:36"                                                      ,
  "2023-08-10 12:05:28"                                                      ,
  "2023-08-11 12:05:18"                                                      ,
  "2023-08-12 12:05:09"                                                      ,
  "2023-08-13 12:04:58"                                                      ,
  "2023-08-14 12:04:48"                                                      ,
  "2023-08-15 12:04:36"                                                      ,
  "2023-08-16 12:04:24"                                                      ,
  "2023-08-17 12:04:12"                                                      ,
  "2023-08-18 12:03:59"                                                      ,
  "2023-08-19 12:03:46"                                                      ,
  "2023-08-20 12:03:32"                                                      ,
  "2023-08-21 12:03:17"                                                      ,
  "2023-08-22 12:03:02"                                                      ,
  "2023-08-23 12:02:47"                                                      ,
  "2023-08-24 12:02:31"                                                      ,
  "2023-08-25 12:02:15"                                                      ,
  "2023-08-26 12:01:59"                                                      ,
  "2023-08-27 12:01:42"                                                      ,
  "2023-08-28 12:01:24"                                                      ,
  "2023-08-29 12:01:06"                                                      ,
  "2023-08-30 12:00:48"                                                      ,
  "2023-08-31 12:00:30"                                                      ,
  "2023-09-01 12:00:11"                                                      ,
  "2023-09-02 11:59:52"                                                      ,
  "2023-09-03 11:59:33"                                                      ,
  "2023-09-04 11:59:13"                                                      ,
  "2023-09-05 11:58:53"                                                      ,
  "2023-09-06 11:58:33"                                                      ,
  "2023-09-07 11:58:13"                                                      ,
  "2023-09-08 11:57:52"                                                      ,
  "2023-09-09 11:57:32"                                                      ,
  "2023-09-10 11:57:11"                                                      ,
  "2023-09-11 11:56:50"                                                      ,
  "2023-09-12 11:56:29"                                                      ,
  "2023-09-13 11:56:07"                                                      ,
  "2023-09-14 11:55:46"                                                      ,
  "2023-09-15 11:55:25"                                                      ,
  "2023-09-16 11:55:03"                                                      ,
  "2023-09-17 11:54:42"                                                      ,
  "2023-09-18 11:54:20"                                                      ,
  "2023-09-19 11:53:59"                                                      ,
  "2023-09-20 11:53:38"                                                      ,
  "2023-09-21 11:53:16"                                                      ,
  "2023-09-22 11:52:55"                                                      ,
  "2023-09-23 11:52:34"                                                      ,
  "2023-09-24 11:52:13"                                                      ,
  "2023-09-25 11:51:52"                                                      ,
  "2023-09-26 11:51:31"                                                      ,
  "2023-09-27 11:51:11"                                                      ,
  "2023-09-28 11:50:50"                                                      ,
  "2023-09-29 11:50:30"                                                      ,
  "2023-09-30 11:50:10"                                                      ,
  "2023-10-01 11:49:50"                                                      ,
  "2023-10-02 11:49:31"                                                      ,
  "2023-10-03 11:49:12"                                                      ,
  "2023-10-04 11:48:53"                                                      ,
  "2023-10-05 11:48:35"                                                      ,
  "2023-10-06 11:48:17"                                                      ,
  "2023-10-07 11:47:59"                                                      ,
  "2023-10-08 11:47:42"                                                      ,
  "2023-10-09 11:47:25"                                                      ,
  "2023-10-10 11:47:09"                                                      ,
  "2023-10-11 11:46:53"                                                      ,
  "2023-10-12 11:46:37"                                                      ,
  "2023-10-13 11:46:22"                                                      ,
  "2023-10-14 11:46:08"                                                      ,
  "2023-10-15 11:45:54"                                                      ,
  "2023-10-16 11:45:41"                                                      ,
  "2023-10-17 11:45:28"                                                      ,
  "2023-10-18 11:45:16"                                                      ,
  "2023-10-19 11:45:04"                                                      ,
  "2023-10-20 11:44:53"                                                      ,
  "2023-10-21 11:44:43"                                                      ,
  "2023-10-22 11:44:33"                                                      ,
  "2023-10-23 11:44:24"                                                      ,
  "2023-10-24 11:44:16"                                                      ,
  "2023-10-25 11:44:08"                                                      ,
  "2023-10-26 11:44:01"                                                      ,
  "2023-10-27 11:43:55"                                                      ,
  "2023-10-28 11:43:50"                                                      ,
  "2023-10-29 11:43:45"                                                      ,
  "2023-10-30 11:43:41"                                                      ,
  "2023-10-31 11:43:38"                                                      ,
  "2023-11-01 11:43:35"                                                      ,
  "2023-11-02 11:43:34"                                                      ,
  "2023-11-03 11:43:33"                                                      ,
  "2023-11-04 11:43:33"                                                      ,
  "2023-11-05 11:43:34"                                                      ,
  "2023-11-06 11:43:36"                                                      ,
  "2023-11-07 11:43:38"                                                      ,
  "2023-11-08 11:43:42"                                                      ,
  "2023-11-09 11:43:46"                                                      ,
  "2023-11-10 11:43:51"                                                      ,
  "2023-11-11 11:43:57"                                                      ,
  "2023-11-12 11:44:03"                                                      ,
  "2023-11-13 11:44:11"                                                      ,
  "2023-11-14 11:44:19"                                                      ,
  "2023-11-15 11:44:29"                                                      ,
  "2023-11-16 11:44:39"                                                      ,
  "2023-11-17 11:44:50"                                                      ,
  "2023-11-18 11:45:02"                                                      ,
  "2023-11-19 11:45:14"                                                      ,
  "2023-11-20 11:45:28"                                                      ,
  "2023-11-21 11:45:42"                                                      ,
  "2023-11-22 11:45:57"                                                      ,
  "2023-11-23 11:46:13"                                                      ,
  "2023-11-24 11:46:30"                                                      ,
  "2023-11-25 11:46:47"                                                      ,
  "2023-11-26 11:47:05"                                                      ,
  "2023-11-27 11:47:24"                                                      ,
  "2023-11-28 11:47:44"                                                      ,
  "2023-11-29 11:48:04"                                                      ,
  "2023-11-30 11:48:25"                                                      ,
  "2023-12-01 11:48:47"                                                      ,
  "2023-12-02 11:49:10"                                                      ,
  "2023-12-03 11:49:33"                                                      ,
  "2023-12-04 11:49:56"                                                      ,
  "2023-12-05 11:50:21"                                                      ,
  "2023-12-06 11:50:45"                                                      ,
  "2023-12-07 11:51:11"                                                      ,
  "2023-12-08 11:51:37"                                                      ,
  "2023-12-09 11:52:03"                                                      ,
  "2023-12-10 11:52:30"                                                      ,
  "2023-12-11 11:52:57"                                                      ,
  "2023-12-12 11:53:25"                                                      ,
  "2023-12-13 11:53:53"                                                      ,
  "2023-12-14 11:54:21"                                                      ,
  "2023-12-15 11:54:50"                                                      ,
  "2023-12-16 11:55:18"                                                      ,
  "2023-12-17 11:55:48"                                                      ,
  "2023-12-18 11:56:17"                                                      ,
  "2023-12-19 11:56:46"                                                      ,
  "2023-12-20 11:57:16"                                                      ,
  "2023-12-21 11:57:46"                                                      ,
  "2023-12-22 11:58:16"                                                      ,
  "2023-12-23 11:58:45"                                                      ,
  "2023-12-24 11:59:15"                                                      ,
  "2023-12-25 11:59:45"                                                      ,
  "2023-12-26 12:00:15"                                                      ,
  "2023-12-27 12:00:44"                                                      ,
  "2023-12-28 12:01:14"                                                      ,
  "2023-12-29 12:01:43"                                                      ,
  "2023-12-30 12:02:12"                                                      ,
  "2023-12-31 12:02:41"                                                      ]
##############################################################################
class CelestialListings            ( TreeDock                              ) :
  ############################################################################
  HavingMenu          = 1371434312
  ############################################################################
  emitNamesShow       = pyqtSignal (                                         )
  emitAllNames        = pyqtSignal ( list                                    )
  emitAssignAmounts   = pyqtSignal ( str , int                               )
  StellarObjectGroup  = pyqtSignal ( str , int , str                         )
  ShowPersonalGallery = pyqtSignal ( str , int , str , QIcon                 )
  OpenLogHistory      = pyqtSignal ( str , str , str , str , str             )
  ############################################################################
  def __init__                     ( self , parent = None , plan = None    ) :
    ##########################################################################
    super ( ) . __init__           (        parent        , plan             )
    ##########################################################################
    self . CKEY               = "CelestialListings"
    self . EditAllNames       = None
    ##########################################################################
    self . Total              = 0
    self . GType              = 127
    self . StartId            = 0
    self . Amount             = 40
    self . Active             = True
    self . Usage              = 1
    self . SortOrder          = "asc"
    self . Method             = "Original"
    self . SearchLine         = None
    self . SearchKey          = ""
    self . UUIDs              = [                                            ]
    ##########################################################################
    self . dockingOrientation = Qt . Vertical
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setColumnCount          ( 9                                       )
    self . setColumnHidden         ( 2 , True                                )
    self . setColumnHidden         ( 3 , True                                )
    self . setColumnHidden         ( 4 , True                                )
    self . setColumnHidden         ( 7 , True                                )
    self . setColumnHidden         ( 8 , True                                )
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    self . MountClicked            ( 2                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ContiguousSelection"                   )
    ##########################################################################
    self . emitNamesShow . connect ( self . show                             )
    self . emitAllNames  . connect ( self . refresh                          )
    self . emitAssignAmounts . connect ( self . AssignAmounts                )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setAcceptDrops          ( True                                    )
    self . setDragEnabled          ( True                                    )
    self . setDragDropMode         ( QAbstractItemView . DragDrop            )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 800 , 640 )                       )
  ############################################################################
  def AttachActions   ( self         ,                          Enabled    ) :
    ##########################################################################
    self . LinkAction ( "Refresh"    , self . startup         , Enabled      )
    ##########################################################################
    self . LinkAction ( "Rename"     , self . RenameItem      , Enabled      )
    self . LinkAction ( "Copy"       , self . CopyToClipboard , Enabled      )
    ##########################################################################
    self . LinkAction ( "Home"       , self . PageHome        , Enabled      )
    self . LinkAction ( "End"        , self . PageEnd         , Enabled      )
    self . LinkAction ( "PageUp"     , self . PageUp          , Enabled      )
    self . LinkAction ( "PageDown"   , self . PageDown        , Enabled      )
    ##########################################################################
    self . LinkAction ( "Select"     , self . SelectOne       , Enabled      )
    self . LinkAction ( "SelectAll"  , self . SelectAll       , Enabled      )
    self . LinkAction ( "SelectNone" , self . SelectNone      , Enabled      )
    ##########################################################################
    return
  ############################################################################
  def FocusIn             ( self                                           ) :
    ##########################################################################
    if                    ( not self . isPrepared ( )                      ) :
      return False
    ##########################################################################
    self . setActionLabel ( "Label"      , self . windowTitle ( )            )
    self . AttachActions  ( True                                             )
    ##########################################################################
    return True
  ############################################################################
  def closeEvent             ( self , event                                ) :
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . defaultCloseEvent (        event                                  )
    ##########################################################################
    return
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def doubleClicked              ( self , item , column                    ) :
    ##########################################################################
    if                           ( column not in [ 1 , 2 , 3 , 5 , 6 ]     ) :
      return
    ##########################################################################
    if                           ( column     in [     2             ]     ) :
      ########################################################################
      LL   = self . Translations [ self . CKEY ] [ "Used"                    ]
      val  = item . data         ( column , Qt . UserRole                    )
      val  = int                 ( val                                       )
      cb   = self . setComboBox  ( item                                      ,
                                   column                                    ,
                                   "activated"                               ,
                                   self . usageChanged                       )
      cb   . addJson             ( LL , val                                  )
      cb   . setMaxVisibleItems  ( 20                                        )
      cb   . showPopup           (                                           )
      ########################################################################
      return
    ##########################################################################
    if                           ( column     in [ 1 ,         5 , 6 ]     ) :
      ########################################################################
      line = self . setLineEdit  ( item                                    , \
                                   column                                  , \
                                   "editingFinished"                       , \
                                   self . nameChanged                        )
      line . setFocus            ( Qt . TabFocusReason                       )
      ########################################################################
      return
    ##########################################################################
    if                           ( column     in [         3         ]     ) :
      ########################################################################
      sb   = self . setSpinBox   ( item                                      ,
                                   column                                    ,
                                   0                                         ,
                                   99                                        ,
                                   "editingFinished"                         ,
                                   self . typeChanged                        )
      sb   . setAlignment        ( Qt . AlignRight                           )
      sb   . setFocus            ( Qt . TabFocusReason                       )
      ########################################################################
      return
    ##########################################################################
    return
  ############################################################################
  def PrepareItem                 ( self , JSON                            ) :
    ##########################################################################
    USAGE   = self . Translations [ self . CKEY ] [ "Used"                   ]
    UUID    = JSON                [ "Uuid"                                   ]
    ID      = JSON                [ "Id"                                     ]
    USED    = JSON                [ "Used"                                   ]
    TYPE    = JSON                [ "Type"                                   ]
    PARENT  = JSON                [ "Parent"                                 ]
    PNAME   = JSON                [ "PName"                                  ]
    ENGLISH = JSON                [ "English"                                ]
    COMMENT = JSON                [ "Comment"                                ]
    NAME    = JSON                [ "Name"                                   ]
    UXID    = str                 ( JSON [ "Uuid" ]                          )
    ##########################################################################
    IT      = QTreeWidgetItem     (                                          )
    ##########################################################################
    IT      . setText             ( 0 , str ( ID )                           )
    IT      . setToolTip          ( 0 , UXID                                 )
    IT      . setData             ( 0 , Qt . UserRole , UXID                 )
    IT      . setTextAlignment    ( 0 , Qt.AlignRight                        )
    ##########################################################################
    IT      . setText             ( 1 , NAME                                 )
    IT      . setToolTip          ( 1 , UXID                                 )
    ##########################################################################
    IT      . setText             ( 2 , USAGE [ str ( USED ) ]               )
    IT      . setToolTip          ( 2 , UXID                                 )
    IT      . setData             ( 2 , Qt . UserRole , USED                 )
    ##########################################################################
    IT      . setText             ( 3 , str ( TYPE )                         )
    IT      . setTextAlignment    ( 3 , Qt.AlignRight                        )
    IT      . setData             ( 3 , Qt . UserRole , TYPE                 )
    ##########################################################################
    IT      . setText             ( 4 , PNAME                                )
    ##########################################################################
    IT      . setText             ( 5 , ENGLISH                              )
    IT      . setText             ( 6 , COMMENT                              )
    ##########################################################################
    IT      . setText             ( 7 , ""                                   )
    IT      . setTextAlignment    ( 7 , Qt.AlignRight                        )
    ##########################################################################
    IT      . setData             ( 8 , Qt . UserRole , JSON                 )
    ##########################################################################
    return IT
  ############################################################################
  @pyqtSlot                  (                                               )
  def RenameItem             ( self                                        ) :
    ##########################################################################
    self . defaultRenameItem ( [ 1 , 2 , 3 , 5 , 6                         ] )
    ##########################################################################
    return
  ############################################################################
  @pyqtSlot                      (                                           )
  def nameChanged                ( self                                    ) :
    ##########################################################################
    if                           ( not self . isItemPicked ( )             ) :
      return False
    ##########################################################################
    item   = self . CurrentItem  [ "Item"                                    ]
    column = self . CurrentItem  [ "Column"                                  ]
    line   = self . CurrentItem  [ "Widget"                                  ]
    text   = self . CurrentItem  [ "Text"                                    ]
    msg    = line . text         (                                           )
    uuid   = self . itemUuid     ( item , 0                                  )
    ##########################################################################
    if                           ( len ( msg ) <= 0                        ) :
      self . removeTopLevelItem  ( item                                      )
      return
    ##########################################################################
    item   . setText             ( column ,              msg                 )
    ##########################################################################
    self   . removeParked        (                                           )
    ##########################################################################
    if                           ( column in [ 1 ]                         ) :
      ########################################################################
      self . Go                  ( self . AssureUuidItem                   , \
                                   ( item , uuid , msg , )                   )
      ########################################################################
    elif                         ( column in [ 5 , 6 ]                     ) :
      ########################################################################
      self . Go                  ( self . UpdateColumnValue                , \
                                   ( item , uuid , column , msg , )          )
    ##########################################################################
    return
  ############################################################################
  def usageChanged               ( self                                    ) :
    ##########################################################################
    if                           ( not self . isItemPicked ( )             ) :
      return False
    ##########################################################################
    item   = self . CurrentItem  [ "Item"                                    ]
    column = self . CurrentItem  [ "Column"                                  ]
    cb     = self . CurrentItem  [ "Widget"                                  ]
    cbv    = self . CurrentItem  [ "Value"                                   ]
    index  = cb   . currentIndex (                                           )
    value  = cb   . itemData     ( index                                     )
    uuid   = item . data         ( 0 , Qt . UserRole                         )
    ##########################################################################
    if                           ( value != cbv                            ) :
      ########################################################################
      LL   = self . Translations [ self . CKEY ] [ "Used"                    ]
      msg  = LL                  [ str ( value )                             ]
      ########################################################################
      item . setText             ( column ,  msg                             )
      item . setData             ( column , Qt . UserRole , value            )
      ########################################################################
      self . Go                  ( self . UpdateColumnNumber               , \
                                   ( item , uuid , "used" , value , )        )
    ##########################################################################
    self   . removeParked        (                                           )
    ##########################################################################
    return
  ############################################################################
  def typeChanged               ( self                                     ) :
    ##########################################################################
    if                          ( not self . isItemPicked ( )              ) :
      return False
    ##########################################################################
    item   = self . CurrentItem [ "Item"                                     ]
    column = self . CurrentItem [ "Column"                                   ]
    sb     = self . CurrentItem [ "Widget"                                   ]
    v      = self . CurrentItem [ "Value"                                    ]
    v      = int                ( v                                          )
    nv     = sb   . value       (                                            )
    uuid   = item . data         ( 0 , Qt . UserRole                         )
    ##########################################################################
    if                          ( v != nv                                  ) :
      ########################################################################
      item . setText            ( column , str ( nv )                        )
      ########################################################################
      self . Go                 ( self . UpdateColumnNumber                , \
                                  ( item , uuid , "type" , nv , )            )
    ##########################################################################
    self . removeParked         (                                            )
    ##########################################################################
    return
  ############################################################################
  @pyqtSlot                       (        list                              )
  def refresh                     ( self , LISTS                           ) :
    ##########################################################################
    self   . clear                (                                          )
    ##########################################################################
    for JSON in LISTS                                                        :
      ########################################################################
      IT   = self . PrepareItem   ( JSON                                     )
      self . addTopLevelItem      ( IT                                       )
    ##########################################################################
    FMT    = self . getMenuItem   ( "DisplayTotal"                           )
    MSG    = FMT  . format        ( len ( LISTS )                            )
    self   . setToolTip           ( MSG                                      )
    ##########################################################################
    if                            ( self . Method in [ "Searching" ]       ) :
      ########################################################################
      T    = self . Translations  [ self . CKEY ] [ "Title"                  ]
      K    = self . SearchKey
      T    = f"{T}:{K}"
      ########################################################################
      self . setWindowTitle       ( T                                        )
    ##########################################################################
    self   . emitNamesShow . emit (                                          )
    ##########################################################################
    return
  ############################################################################
  @pyqtSlot                (        str  , int                               )
  def AssignAmounts        ( self , UUID , Amounts                         ) :
    ##########################################################################
    IT = self . uuidAtItem ( UUID , 0                                        )
    if                     ( IT in [ False , None ]                        ) :
      return
    ##########################################################################
    IT . setText           ( 7 , str ( Amounts )                             )
    ##########################################################################
    return
  ############################################################################
  def ReportBelongings                ( self , UUIDs                       ) :
    ##########################################################################
    time   . sleep                    ( 1.0                                  )
    ##########################################################################
    RELTAB = self . Tables            [ "Relation"                           ]
    REL    = Relation                 (                                      )
    REL    . setT1                    ( "Celestial"                          )
    REL    . setT2                    ( "Star"                               )
    REL    . setRelation              ( "Subordination"                      )
    ##########################################################################
    DB     = self . ConnectDB         (                                      )
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      REL  . set                      ( "first" , UUID                       )
      CNT  = REL . CountSecond        ( DB , RELTAB                          )
      ########################################################################
      self . emitAssignAmounts . emit ( str ( UUID ) , CNT                   )
    ##########################################################################
    DB     . Close                    (                                      )
    ##########################################################################
    return
  ############################################################################
  def loading                         ( self                               ) :
    ##########################################################################
    DB      = self . ConnectDB        (                                      )
    if                                ( DB == None                         ) :
      self . emitNamesShow . emit     (                                      )
      return
    ##########################################################################
    self    . Notify                  ( 3                                    )
    ##########################################################################
    FMT     = self . Translations     [ "UI::StartLoading"                   ]
    MSG     = FMT . format            ( self . windowTitle ( )               )
    self    . ShowStatus              ( MSG                                  )
    self    . OnBusy  . emit          (                                      )
    self    . setBustle               (                                      )
    ##########################################################################
    self    . ObtainsInformation      ( DB                                   )
    ##########################################################################
    LISTs   =                         [                                      ]
    UUIDs   = self . ObtainsItemUuids ( DB                                   )
    NAMEs   =                         [                                      ]
    if                                ( len ( UUIDs ) > 0                  ) :
      NAMEs = self . ObtainsUuidNames ( DB , UUIDs                           )
    ##########################################################################
    CLTTAB  = self . Tables           [ "Celestials"                         ]
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      QQ    = f"""select
                  `id`,`used`,`type`,`parent`,`name`,`comment`
                  from {CLTTAB}
                  where ( `uuid` = {UUID} ) ;"""
      QQ    = " " . join              ( QQ . split ( )                       )
      DB    . Query                   ( QQ                                   )
      RR    = DB . FetchOne           (                                      )
      ########################################################################
      if ( ( RR not in [ False , None ] ) and ( len ( RR ) == 6 ) )          :
        ######################################################################
        J               =             {                                      }
        J   [ "Uuid"    ] = int       ( UUID                                 )
        J   [ "Id"      ] = int       ( RR [ 0 ]                             )
        J   [ "Used"    ] = int       ( RR [ 1 ]                             )
        J   [ "Type"    ] = int       ( RR [ 2 ]                             )
        J   [ "Parent"  ] = int       ( RR [ 3 ]                             )
        J   [ "English" ] = self . assureString ( RR [ 4 ]                   )
        J   [ "Comment" ] = self . assureString ( RR [ 5 ]                   )
        J   [ "Name"    ] = NAMEs     [ UUID                                 ]
        J   [ "PName"   ] = ""
        ######################################################################
        if                            ( J [ "Parent" ] in NAMEs            ) :
          J [ "PName"   ] = NAMEs     [ J [ "Parent" ]                       ]
        ######################################################################
        LISTs          . append       ( J                                    )
    ##########################################################################
    self    . setVacancy              (                                      )
    self    . GoRelax . emit          (                                      )
    self    . ShowStatus              ( ""                                   )
    DB      . Close                   (                                      )
    ##########################################################################
    if                                ( len ( LISTs ) <= 0                 ) :
      self . emitNamesShow . emit     (                                      )
      return
    ##########################################################################
    self   . emitAllNames . emit      ( LISTs                                )
    ##########################################################################
    if                                ( not self . isColumnHidden ( 7 )    ) :
      self . Go                       ( self . ReportBelongings            , \
                                        ( UUIDs , )                          )
    ##########################################################################
    return
  ############################################################################
  @pyqtSlot          (                                                       )
  def startup        ( self                                                ) :
    ##########################################################################
    if               ( not self . isPrepared ( )                           ) :
      self . Prepare (                                                       )
    ##########################################################################
    self   . Go      ( self . loading                                        )
    ##########################################################################
    return
  ############################################################################
  def ObtainAllUuids        ( self , DB                                    ) :
    ##########################################################################
    USAGE  = self . Usage
    CLTTAB = self . Tables  [ "Celestials"                                   ]
    ##########################################################################
    if                      ( self . Active                                ) :
      QQ   = f"""select `uuid` from {CLTTAB}
                 where ( `used` = {USAGE} )
                 order by `id` asc ;"""
    else                                                                     :
      QQ   = f"""select `uuid` from {CLTTAB}
                 where ( `used` = 1 )
                 order by `id` asc ;"""
    ##########################################################################
    QQ     = " " . join     ( QQ . split ( )                                 )
    ##########################################################################
    return DB . ObtainUuids ( QQ , 0                                         )
  ############################################################################
  def TranslateAll              ( self                                     ) :
    ##########################################################################
    DB    = self . ConnectDB    (                                            )
    if                          ( DB == None                               ) :
      return
    ##########################################################################
    TABLE = self . Tables       [ "NamesEditing"                             ]
    FMT   = self . Translations [ "UI::Translating"                          ]
    self  . DoTranslateAll      ( DB , TABLE , FMT , 15.0                    )
    ##########################################################################
    DB    . Close               (                                            )
    ##########################################################################
    return
  ############################################################################
  def ObtainsInformation   ( self , DB                                     ) :
    ##########################################################################
    self   . Total = 0
    USAGE  = self . Usage
    ##########################################################################
    CLTTAB = self . Tables [ "Celestials"                                    ]
    ##########################################################################
    if                     ( self . Active                                 ) :
      QQ   = f"select count(*) from {CLTTAB} where ( `used` = {USAGE} ) ;"
    else                                                                     :
      QQ   = f"select count(*) from {CLTTAB} ;"
    DB     . Query                   ( QQ                                    )
    RR     = DB . FetchOne (                                                 )
    ##########################################################################
    if ( not RR ) or ( RR is None ) or ( len ( RR ) <= 0 )                   :
      return
    ##########################################################################
    self   . Total = RR    [ 0                                               ]
    ##########################################################################
    return
  ############################################################################
  def ObtainUuidsQuery              ( self                                 ) :
    ##########################################################################
    CLTTAB = self . Tables          [ "Celestials"                           ]
    STID   = self . StartId
    AMOUNT = self . Amount
    USAGE  = self . Usage
    ORDER  = self . getSortingOrder (                                        )
    ##########################################################################
    if                              ( self . Active                        ) :
      QQ   = f"""select `uuid` from {CLTTAB}
                 where ( `used` = {USAGE} )
                 order by `id` {ORDER}
                 limit {STID} , {AMOUNT} ;"""
    else                                                                     :
      QQ   = f"""select `uuid` from {CLTTAB}
                 order by `id` {ORDER}
                 limit {STID} , {AMOUNT} ;"""
    ##########################################################################
    return " " . join               ( QQ . split ( )                         )
  ############################################################################
  def dragMime                   ( self                                    ) :
    ##########################################################################
    mtype   = "celestial/uuids"
    message = self . getMenuItem ( "TotalPicked"                             )
    ##########################################################################
    return self . CreateDragMime ( self , 0 , mtype , message                )
  ############################################################################
  def startDrag         ( self , dropActions                               ) :
    ##########################################################################
    self . StartingDrag (                                                    )
    ##########################################################################
    return
  ############################################################################
  def allowedMimeTypes        ( self , mime                                ) :
    formats = "celestial/uuids;stellar/uuids"
    return self . MimeType    ( mime , formats                               )
  ############################################################################
  def acceptDrop              ( self , sourceWidget , mimeData             ) :
    return self . dropHandler ( sourceWidget , self , mimeData               )
  ############################################################################
  def dropNew                        ( self                                , \
                                       source                              , \
                                       mimeData                            , \
                                       mousePos                            ) :
    ##########################################################################
    RDN    = self . RegularDropNew   ( mimeData                              )
    if                               ( not RDN                             ) :
      return False
    ##########################################################################
    mtype  = self   . DropInJSON     [ "Mime"                                ]
    UUIDs  = self   . DropInJSON     [ "UUIDs"                               ]
    atItem = self   . itemAt         ( mousePos                              )
    title  = source . windowTitle    (                                       )
    CNT    = len                     ( UUIDs                                 )
    ##########################################################################
    if                               ( atItem in [ False , None ]          ) :
      return False
    ##########################################################################
    if                               ( mtype in [ "celestial/uuids"      ] ) :
      self . ShowMenuItemMessage     ( "AssignParent"                        )
    elif                             ( mtype in [ "stellar/uuids"        ] ) :
      self . ShowMenuItemTitleStatus ( "StarsFrom" , title , CNT             )
    ##########################################################################
    return RDN
  ############################################################################
  def dropMoving               ( self , source , mimeData , mousePos       ) :
    ##########################################################################
    if                         ( self . droppingAction                     ) :
      return False
    ##########################################################################
    atItem = self . itemAt     ( mousePos                                    )
    ##########################################################################
    if                         ( atItem in [ False , None ]                ) :
      return False
    ##########################################################################
    UUID   = atItem . data     ( 0 , Qt . UserRole                           )
    UUID   = int               ( UUID                                        )
    ##########################################################################
    if                         ( UUID <= 0                                 ) :
      return True
    ##########################################################################
    mtype  = self . DropInJSON [ "Mime"                                      ]
    UUIDs  = self . DropInJSON [ "UUIDs"                                     ]
    ##########################################################################
    if                         ( mtype in [ "celestial/uuids" ]            ) :
      ########################################################################
      if                       ( int ( UUID ) == int ( UUIDs [ 0 ] )       ) :
        return False
    ##########################################################################
    return True
  ############################################################################
  def acceptCelestialsDrop ( self                                          ) :
    return True
  ############################################################################
  def acceptStellarsDrop   ( self                                          ) :
    return True
  ############################################################################
  def dropCelestials       ( self , source , pos , JSOX                    ) :
    ##########################################################################
    if                     ( "UUIDs" not in JSOX                           ) :
      return True
    ##########################################################################
    UUIDs  = JSOX          [ "UUIDs"                                         ]
    if                     ( len ( UUIDs ) <= 0                            ) :
      return True
    ##########################################################################
    atItem = self . itemAt ( pos                                             )
    if                     ( atItem in [ False , None ]                    ) :
      return True
    ##########################################################################
    UUID   = atItem . data ( 0 , Qt . UserRole                               )
    UUID   = int           ( UUID                                            )
    ##########################################################################
    if                     ( UUID <= 0                                     ) :
      return True
    ##########################################################################
    self . Go              ( self . AssignCelestialParent                  , \
                             ( UUID , UUIDs , )                              )
    ##########################################################################
    return True
  ############################################################################
  def dropStellars         ( self , source , pos , JSOX                    ) :
    ##########################################################################
    if                     ( "UUIDs" not in JSOX                           ) :
      return True
    ##########################################################################
    UUIDs  = JSOX          [ "UUIDs"                                         ]
    if                     ( len ( UUIDs ) <= 0                            ) :
      return True
    ##########################################################################
    atItem = self . itemAt ( pos                                             )
    if                     ( atItem in [ False , None ]                    ) :
      return True
    ##########################################################################
    UUID   = atItem . data ( 0 , Qt . UserRole                               )
    UUID   = int           ( UUID                                            )
    ##########################################################################
    if                     ( UUID <= 0                                     ) :
      return True
    ##########################################################################
    self   . Go            ( self . AppendingStellars , ( UUID , UUIDs , )   )
    ##########################################################################
    return True
  ############################################################################
  def AssignCelestialParent          ( self , UUID , UUIDs                 ) :
    ##########################################################################
    if                               ( UUID <= 0                           ) :
      return
    ##########################################################################
    COUNT  = len                     ( UUIDs                                 )
    if                               ( COUNT <= 0                          ) :
      return
    ##########################################################################
    DB     = self . ConnectDB        (                                       )
    if                               ( DB == None                          ) :
      return
    ##########################################################################
    PARENT = UUIDs                   [ 0                                     ]
    CLTTAB = self . Tables           [ "Celestials"                          ]
    NAMTAB = self . Tables           [ "Names"                               ]
    DB     . LockWrites              ( [ CLTTAB                            ] )
    ##########################################################################
    QQ     = f"""update {CLTTAB}
                  set `parent` = {PARENT}
                  where ( `uuid` = {UUID} ) ;"""
    QQ     = " " . join              ( QQ . split ( )                        )
    DB     . Query                   ( QQ                                    )
    ##########################################################################
    DB     . UnlockTables            (                                       )
    ##########################################################################
    NAME   = self . GetName          ( DB , NAMTAB , PARENT                  )
    ##########################################################################
    DB     . Close                   (                                       )
    self   . Notify                  ( 5                                     )
    self   . ShowStatus              ( ""                                    )
    ##########################################################################
    IT     = self . uuidAtItem       ( UUID , 0                              )
    if                               ( IT in [ False , None ]              ) :
      return
    ##########################################################################
    self   . emitAssignColumn . emit ( IT , 4 , NAME                         )
    ##########################################################################
    return
  ############################################################################
  def AppendingStellars              ( self , UUID , UUIDs                 ) :
    ##########################################################################
    COUNT  = len                     ( UUIDs                                 )
    if                               ( COUNT <= 0                          ) :
      return
    ##########################################################################
    DB     = self . ConnectDB        (                                       )
    if                               ( DB == None                          ) :
      return
    ##########################################################################
    self   . OnBusy  . emit          (                                       )
    self   . setBustle               (                                       )
    FMT    = self . getMenuItem      ( "JoinStars"                           )
    MSG    = FMT  . format           ( COUNT                                 )
    self   . ShowStatus              ( MSG                                   )
    self   . TtsTalk                 ( MSG , 1002                            )
    ##########################################################################
    RELTAB = self . Tables           [ "RelationStars"                       ]
    DB     . LockWrites              ( [ RELTAB                            ] )
    ##########################################################################
    REL    = Relation                (                                       )
    REL    . set                     ( "first" , UUID                        )
    REL    . setT1                   ( "Celestial"                           )
    REL    . setT2                   ( "Star"                                )
    REL    . setRelation             ( "Subordination"                       )
    REL    . Joins                   ( DB , RELTAB , UUIDs                   )
    TOTAL  = REL . CountSecond       ( DB , RELTAB                           )
    ##########################################################################
    DB     . UnlockTables            (                                       )
    ##########################################################################
    self   . setVacancy              (                                       )
    self   . GoRelax . emit          (                                       )
    DB     . Close                   (                                       )
    ##########################################################################
    IT     = self . uuidAtItem       ( UUID , 0                              )
    if                               ( IT in [ False , None ]              ) :
      return
    ##########################################################################
    self   . emitAssignColumn . emit ( IT , 7 , str ( TOTAL )                )
    self   . Notify                  ( 5                                     )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( self . CKEY , 8                                  )
    self . setColumnWidth ( 2 , 100                                          )
    ##########################################################################
    return
  ############################################################################
  def AssureUuidItem          ( self , item , uuid , name                  ) :
    ##########################################################################
    DB     = self . ConnectDB (                                              )
    if                        ( DB == None                                 ) :
      return
    ##########################################################################
    NAMTAB = self . Tables    [ "NamesEditing"                               ]
    ##########################################################################
    DB     . LockWrites       ( [ NAMTAB                                   ] )
    ##########################################################################
    uuid   = int              ( uuid                                         )
    self   . AssureUuidName   ( DB , NAMTAB , uuid , name                    )
    ##########################################################################
    DB     . UnlockTables     (                                              )
    DB     . Close            (                                              )
    ##########################################################################
    item   . setData          ( 0 , Qt . UserRole , uuid                     )
    ##########################################################################
    return
  ############################################################################
  def UpdateColumnValue       ( self , item , uuid , column , name         ) :
    ##########################################################################
    DB     = self . ConnectDB (                                              )
    if                        ( DB == None                                 ) :
      return
    ##########################################################################
    CLTTAB = self . Tables    [ "Celestials"                                 ]
    ##########################################################################
    DB     . LockWrites       ( [ CLTTAB                                   ] )
    ##########################################################################
    ITEM   = ""
    if                        ( column == 5                                ) :
      ITEM = "name"
    elif                      ( column == 6                                ) :
      ITEM = "comment"
    ##########################################################################
    QQ     = f"""update {CLTTAB}
                 set `{ITEM}` = %s
                 where ( `uuid` = {uuid} ) ;"""
    QQ     = " " . join       ( QQ . split ( )                               )
    DB     . QueryValues      ( QQ , ( name , )                              )
    ##########################################################################
    DB     . UnlockTables     (                                              )
    DB     . Close            (                                              )
    ##########################################################################
    return
  ############################################################################
  def UpdateColumnNumber      ( self , item , uuid , column , value        ) :
    ##########################################################################
    DB     = self . ConnectDB (                                              )
    if                        ( DB == None                                 ) :
      return
    ##########################################################################
    CLTTAB = self . Tables    [ "Celestials"                                 ]
    ##########################################################################
    DB     . LockWrites       ( [ CLTTAB                                   ] )
    ##########################################################################
    QQ     = f"""update {CLTTAB}
                 set `{column}` = {value}
                 where ( `uuid` = {uuid} ) ;"""
    QQ     = " " . join       ( QQ . split ( )                               )
    DB     . Query            ( QQ                                           )
    ##########################################################################
    DB     . UnlockTables     (                                              )
    DB     . Close            (                                              )
    ##########################################################################
    return
  ############################################################################
  def EarthSun               ( self                                        ) :
    ##########################################################################
    global Midday120
    ##########################################################################
    DB     = self . ConnectDB (                                              )
    if                        ( DB == None                                 ) :
      return
    ##########################################################################
    TZ     = "Asia/Taipei"
    NOW    = StarDate         (                                              )
    LOC    = PlanetSpot       ( 23.0 , 121.0 , 0.0                           )
    ET     = Earth            (                                              )
    ##########################################################################
    for DT in Midday120                                                      :
      ########################################################################
      NOW  . fromInput        ( DT , TZ                                      )
      ########################################################################
      J    = ET . Sunlight    ( LOC , NOW . Stardate , TZ                    )
      ########################################################################
      UDT  = NOW  . toDateTimeString ( "UTC"                                 )
      OBS  = AstroTime        ( UDT                                          )
      PCX  = get_body_heliographic_stonyhurst ( "earth" , time = OBS         )
      SAU  = float ( 149597870700.0 * float ( PCX . radius . value ) )
      ########################################################################
      DM   = J                [ "Parameters" ] [ "Noon-Angle"                ]
      DM   = float            ( DM + 360.0                                   )
      DM   = DM - J           [ "Parameters" ] [ "Perihelion-Mean-Anomaly"   ]
      DM   = float            ( DM % 360.0                                   )
      NOD  = J                [ "Parameters" ] [ "Noon-Distance"             ]
      ML   = J                [ "Parameters" ] [ "Mean-Longitude"            ]
      TL   = J                [ "Parameters" ] [ "True-Longitude"            ]
      ########################################################################
      print                   ( J [ "Current"    ] [ "Date"                ] ,
                                J [ "DateTime"   ] [ "Sunrise-Start"       ] ,
                                J [ "DateTime"   ] [ "Noon"                ] ,
                                J [ "DateTime"   ] [ "Sunset-Finish"       ] ,
                                DM                                           ,
                                ML                                           ,
                                TL                                           ,
                                NOD                                          ,
                                SAU                                          ,
                                SAU - NOD                                    ,
                                PCX . lon                                    ,
                                PCX . lat                                    )
    ##########################################################################
    NOW  . fromInput          ( "2023-01-01T00:00:00" , TZ                   )
    SDT  = NOW . Stardate
    NOW  . fromInput          ( "2025-01-01T00:00:00" , TZ                   )
    FDT  = NOW . Stardate
    ##########################################################################
    TERMs = ET . FindSolarTerms ( SDT , FDT , TZ )
    print(json.dumps(TERMs))
    ##########################################################################
    ## NOW  . fromInput          ( "2022-11-01T00:00:00" , TZ                   )
    ## SDT  = NOW . Stardate
    ## NOW  . fromInput          ( "2023-03-01T00:00:00" , TZ                   )
    ## FDT  = NOW . Stardate
    ##########################################################################
    ## TTL  = ET . FindSunEarthPerihelion ( SDT , FDT                           )
    ## NOW  . Stardate = TTL
    ## SET  = NOW . toDateTimeString   ( TZ                                     ,
    ##                                   " "                                    ,
    ##                                   "%Y/%m/%d"                             ,
    ##                                   "%H:%M:%S"                             )
    ## print ( SET )
    ##########################################################################
    ## 1420092000000000000
    ##########################################################################
    NOW  . fromInput          ( "9999-01-01T00:00:00" , TZ                   )
    SDT  = NOW . Stardate
    EDT  = int                ( SDT + ( 365 * 86400 * 2 )                    )
    ##########################################################################
    NOW  . fromInput          ( "2000-01-01T00:00:00" , TZ                   )
    SDT  = NOW . Stardate
    dT   = int                ( SDT - 1420092000000000000                    )
    dY   = int                ( float ( dT ) / 31558432.5386496              )
    dY   = int                ( dY + 1 - 5201                                )
    ## dY   = int                ( dY + 1 - 5201 - 9500                         )
    dY   = int                ( float ( dY ) * 31558432.5386496              )
    BDT  = int                ( SDT - dY                                     )
    NTS  = int                (  90 * 86400                                  )
    DTS  = int                (  92 * 86400                                  )
    DTF  = int                ( 272 * 86400                                  )
    HOLO = -4800
    ##########################################################################
    while                     ( BDT < EDT                                  ) :
      ########################################################################
      SDT   = int             ( BDT - NTS                                    )
      FDT   = int             ( BDT + NTS                                    )
      ########################################################################
      NSEP  = ET . FindSunEarthPerihelion ( SDT , FDT                        )
      NDIST = ET . DistanceToSun   ( NSEP                                    )
      NOW   . Stardate = NSEP
      NAU   = float           ( NDIST / 149597870700.0                       )
      NJD   = NOW . toJulianDay (                                            )
      NJ2   = NOW . toJ2000     (                                            )
      ########################################################################
      SDT   = int             ( BDT + DTS                                    )
      FDT   = int             ( BDT + DTF                                    )
      ########################################################################
      FSEP  = ET . FindSunEarthAphelion ( SDT , FDT                          )
      FDIST = ET . DistanceToSun   ( FSEP                                    )
      NOW   . Stardate = FSEP
      FAU   = float           ( FDIST / 149597870700.0                       )
      FJD   = NOW . toJulianDay (                                            )
      FJ2   = NOW . toJ2000     (                                            )
      ########################################################################
      ## print(HOLO,NSEP,NJD,NJ2,NDIST,NAU,FSEP,FJD,FJ2,FDIST,FAU)
      print(HOLO,NSEP,NAU,NDIST,FSEP,FAU,FDIST)
      ########################################################################
      QQ    = f"""insert into `astronomy`.`xhelions`
                 ( `helion` , `jd` , `j2000` , `au` , `distance` , `near` )
                 values
                 ( {NSEP} , {NJD} , {NJ2} , {NAU} , {NDIST} , 1 ) ;"""
      QQ    = " " . join      ( QQ . split ( )                               )
      ########################################################################
      DB    . Query           ( QQ                                           )
      ########################################################################
      QQ    = f"""insert into `astronomy`.`xhelions`
                 ( `helion` , `jd` , `j2000` , `au` , `distance` , `near` )
                 values
                 ( {FSEP} , {FJD} , {FJ2} , {FAU} , {FDIST} , 0 ) ;"""
      QQ    = " " . join      ( QQ . split ( )                               )
      ########################################################################
      DB    . Query           ( QQ                                           )
      ########################################################################
      BDT = int               ( BDT + 31558432                               )
      HOLO = HOLO + 1
    ##########################################################################
    ## StartYear  = 2001
    ## FinishYear = 2100
    ## TERMs = ET . FindSunEarthPerihelions ( StartYear , FinishYear , TZ )
    ## T0    = TERMs [  0 ] [ "Stardate" ]
    ## T1    = TERMs [ 99 ] [ "Stardate" ]
    ## dT    = int ( T1 - T0 )
    ## AVT   = float ( float(dT) / 100.0 )
    ## print(json.dumps(TERMs))
    ## TERMs = ET . FindSunEarthAphelions   ( StartYear , FinishYear , TZ )
    ## print(json.dumps(TERMs))
    ## print(AVT)
    ##########################################################################
    """
    NOW    . Now              (                                              )
    CDT    = NOW . Stardate
    TSY    = NOW . toSiderealYear (                                          )
    TTY    = NOW . toTropicalYear (                                          )
    TSK    = TSY - float ( int ( TSY ) )
    RMX    = ( 31558149.54 * 23 ) + 0.816
    RMI    = int ( RMX )
    RMK    = RMX - float ( RMI )
    RMS    = f"{RMK}"
    RMS    = RMS . replace ( "0." , "" )
    NOW    . Stardate = 1420092378650807935 + RMI
    DTS    = CDT - NOW . Stardate
    DTS    = float ( DTS ) - RMK
    DTS    = DTS / 86164.0905
    DTZ    = int ( DTS )
    DTR    = DTS - float ( DTZ )
    DTR    = DTR * 360.0
    TTT    = NOW . toDateTimeString ( TZ , " " , "%Y/%m/%d" , "%H:%M:%S"   )
    print(TSY,TTY,TTY-TSY,TSK,TSK*360,f"{TTT}.{RMS}",DTS,DTR)
    """
    ##########################################################################
    """
    for DT in Midday120                                                      :
      ########################################################################
      SDT  = NOW . fromInput  ( DT , TZ                                      )
      ########################################################################
      ## AT   = 0
      ## while                   ( AT < 100                                   ) :
      ##   ######################################################################
      ##   V  = SYL              [ AT                                           ]
      ##   ######################################################################
      ##   if                    ( SDT < V                                    ) :
      ##     AT = AT - 1
      ##     break
      ##   ######################################################################
      ##   AT = AT + 1
      ########################################################################
      ## V    = 1420092378650807935
      ## R    = 0.816
      ########################################################################
      ## KDT  = int              ( SDT - V                                      )
      ## DTX  = float            ( float ( KDT ) - R                            )
      DTX  = NOW . toJ2000    (                                              )
      ## DTS  = NOW . toSiderealDay (                                           )
      DTS  = float            ( DTX / 86164.0905                             )
      DTZ  = int              ( DTS                                          )
      DTR  = float            ( DTS - float ( DTZ )                          )
      DTR  = float            ( DTR * 360.0                                  )
      DTR  = float            ( DTR + 120.0                                  )
      DTM  = int              ( DTR / 360.0                                  )
      DTR  = float            ( DTR - float ( DTM * 360 )                    )
      ########################################################################
      NOW    . Stardate = V
      TTT    = NOW . toDateTimeString ( TZ , " " , "%Y/%m/%d" , "%H:%M:%S"   )
      ########################################################################
      print                   ( DT , SDT , DTX , DTR , TTT                   )
    """
    ##########################################################################
    """
    QQ     = "select `perihelion` from `astronomy`.`earth-helions` order by `id` asc ;"
    PERIs  = DB . ObtainUuids ( QQ                                           )
    ##########################################################################
    TOTAL  = len              ( PERIs                                        )
    PREV   = 0
    AT     = 1
    SYS    = int              ( 31558149.54                                  )
    SDT    = NOW . fromInput  ( "2001-01-01 08:00:00" , TZ                   )
    ##########################################################################
    while                     ( AT < TOTAL                                 ) :
      ########################################################################
      D1   = int              ( PERIs [ PREV                               ] )
      D2   = int              ( PERIs [ AT                                 ] )
      DS   = int              ( D2 - D1                                      )
      DT   = int              ( DS - SYS                                     )
      BT   = int              ( AT * SYS                                     )
      DX   = int              ( D2 - BT - SDT                                )
      DF   = float            ( float ( DX ) * 360.0 / float ( 31558149.54 ) )
      ########################################################################
      print                   ( AT + 2001 , DT , DS , DX , DF                )
      ########################################################################
      PREV = PREV + 1
      AT   = AT   + 1
    """
    ##########################################################################
    """
    TZ     = "Asia/Taipei"
    LATI   = 23.0
    OMEGA  = 120.174
    NOW    = StarDate         (                                              )
    NOW    . Now              (                                              )
    SOD    = NOW . SecondsOfDay ( "Asia/Taipei" )
    KDT    = NOW . Stardate - SOD
    ##########################################################################
    for i in range ( 0 , 1440                                              ) :
      ########################################################################
      DIST   = SunEarthApproximateDistance ( KDT )
      Mvs    = GetSolarTransformMatrix     ( KDT )
      ANGLE  = GetRollingSolarAngle        ( KDT , OMEGA )
      Pj     = GetProjectToSolarPoint      ( ANGLE , LATI )
      YY     = GetProjectPointToSunriseSunset ( Pj , Mvs )
      SRS    = GetSunriseSunsetSinAngle    ( DIST )
      SAS    = GetAppearSunriseSinAngle    ( DIST )
      A5     = GetCriticalTwilightAngle    ( 4.9  )
      A6     = GetCriticalTwilightAngle    ( 6    )
      A12    = GetCriticalTwilightAngle    ( 12   )
      A18    = GetCriticalTwilightAngle    ( 18   )
      ########################################################################
      NOW    . Stardate = KDT
      TTT    = NOW . toDateTimeString ( TZ , " " , "%Y/%m/%d" , "%H:%M:%S"   )
      ########################################################################
      print ( TTT , DIST , YY , SRS , SAS , A5 , A6 , A12 , A18 )
      ########################################################################
      KDT    = KDT + 60
    """
    ##########################################################################
    DB     . Close            (                                              )
    ##########################################################################
    return
  ############################################################################
  def CopyToClipboard        ( self                                        ) :
    ##########################################################################
    self . DoCopyToClipboard (                                               )
    ##########################################################################
    return
  ############################################################################
  def OpenItemGallery                 ( self , item                        ) :
    ##########################################################################
    uuid = item . data                ( 0 , Qt . UserRole                    )
    uuid = int                        ( uuid                                 )
    text = item . text                ( 1                                    )
    icon = self . windowIcon          (                                      )
    xsid = str                        ( uuid                                 )
    ##########################################################################
    self . ShowPersonalGallery . emit ( text , self . GType , xsid , icon    )
    ##########################################################################
    return
  ############################################################################
  def OpenItemStars                   ( self , item                        ) :
    ##########################################################################
    uuid  = item . data               ( 0 , Qt . UserRole                    )
    uuid  = int                       ( uuid                                 )
    ##########################################################################
    if                                ( uuid <= 0                          ) :
      return False
    ##########################################################################
    title = item . text               ( 1                                    )
    self  . StellarObjectGroup . emit ( title , self . GType , str ( uuid )  )
    ##########################################################################
    return True
  ############################################################################
  def GroupsMenu               ( self , mm , uuid , item                   ) :
    ##########################################################################
    if                         ( uuid <= 0                                 ) :
      return mm
    ##########################################################################
    TRX = self . Translations
    FMT = self . getMenuItem   ( "Belongs"                                   )
    MSG = FMT  . format        ( item . text ( 0 )                           )
    LOM = mm   . addMenu       ( MSG                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "CopyCelestialUuid"                         )
    mm  . addActionFromMenu    ( LOM , 24231101 , msg                        )
    ##########################################################################
    msg = self . getMenuItem   ( "AppendCelestialUuid"                       )
    mm  . addActionFromMenu    ( LOM , 24231102 , msg                        )
    ##########################################################################
    mm  . addSeparatorFromMenu ( LOM                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "Stars"                                     )
    mm  . addActionFromMenu    ( LOM , 24231201 , msg                        )
    ##########################################################################
    msg = self . getMenuItem   ( "Gallery"                                   )
    mm  . addActionFromMenu    ( LOM , 24231202 , msg                        )
    ##########################################################################
    msg = self . getMenuItem   ( "Description"                               )
    mm  . addActionFromMenu    ( LOM , 24231203 , msg                        )
    ##########################################################################
    return mm
  ############################################################################
  def RunGroupsMenu                 ( self , at , uuid , item              ) :
    ##########################################################################
    if                              ( at == 24231101                       ) :
      ########################################################################
      qApp . clipboard ( ). setText ( f"{uuid}"                              )
      ########################################################################
      return
    ##########################################################################
    if                              ( at == 24231102                       ) :
      ########################################################################
      appendUuid                    ( uuid                                   )
      self . Notify                 ( 5                                      )
      ########################################################################
      return
    ##########################################################################
    if                              ( at == 24231201                       ) :
      ########################################################################
      self . OpenItemStars          ( item                                   )
      ########################################################################
      return True
    ##########################################################################
    if                              ( at == 24231202                       ) :
      ########################################################################
      self . OpenItemGallery        ( item                                   )
      ########################################################################
      return True
    ##########################################################################
    if                              ( at == 24231203                       ) :
      ########################################################################
      uuid = item . data            ( 0 , Qt . UserRole                      )
      uuid = int                    ( uuid                                   )
      head = item . text            ( 1                                      )
      nx   = ""
      ########################################################################
      if                            ( "Notes" in self . Tables             ) :
        nx = self . Tables          [ "Notes"                                ]
      ########################################################################
      self . OpenLogHistory . emit  ( head                                   ,
                                      str ( uuid )                           ,
                                      "Description"                          ,
                                      nx                                     ,
                                      str ( self . getLocality ( ) )         )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def ColumnsMenu                    ( self , mm                           ) :
    return self . DefaultColumnsMenu (        mm , 0                         )
  ############################################################################
  def RunColumnsMenu               ( self , at                             ) :
    ##########################################################################
    if                             ( at >= 9000 ) and ( at <= 9008 )         :
      ########################################################################
      col  = at - 9000
      hid  = self . isColumnHidden ( col                                     )
      self . setColumnHidden       ( col , not hid                           )
      ########################################################################
      if                           ( ( at == 9007 ) and ( hid )            ) :
        ######################################################################
        self . clear               (                                         )
        self . startup             (                                         )
        ######################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def FiltersMenu                ( self , mm                               ) :
    ##########################################################################
    IBASE = 1782101
    BASE  = 1782110
    ##########################################################################
    msg   = self . getMenuItem   ( "FilterUsage"                             )
    COL   = mm   . addMenu       ( msg                                       )
    ##########################################################################
    msg   = self . getMenuItem   ( "ActiveFilters"                           )
    mm    . addActionFromMenu    ( COL , IBASE , msg , True , self . Active  )
    mm    . addSeparatorFromMenu ( COL                                       )
    ##########################################################################
    ITEMs = self  . Translations [ self . CKEY ] [ "Used"                    ]
    KEYs  = ITEMs . keys         (                                           )
    ##########################################################################
    for i in KEYs                                                            :
      ########################################################################
      v   = int                  ( i                                         )
      msg = ITEMs                [ i                                         ]
      hid =                      ( v == self . Usage                         )
      mm  . addActionFromMenu    ( COL , BASE + v , msg , True , hid         )
    ##########################################################################
    return mm
  ############################################################################
  def RunFiltersMenu   ( self , at                                         ) :
    ##########################################################################
    if                 ( at == 1782101                                     ) :
      ########################################################################
      if               ( self . Active                                     ) :
        self . Active = False
      else                                                                   :
        self . Active = True
      ########################################################################
      return True
    ##########################################################################
    BASE = 1782110
    if                 ( at < BASE                                         ) :
      return False
    ##########################################################################
    if                 ( at > ( BASE + 10 )                                ) :
      return False
    ##########################################################################
    ID           = int ( at - BASE                                           )
    self . Usage = ID
    ##########################################################################
    return True
  ############################################################################
  def Menu                          ( self , pos                           ) :
    ##########################################################################
    if                              ( not self . isPrepared ( )            ) :
      return False
    ##########################################################################
    doMenu = self . isFunction      ( self . HavingMenu                      )
    if                              ( not doMenu                           ) :
      return False
    ##########################################################################
    self   . Notify                 ( 0                                      )
    ##########################################################################
    items  = self . selectedItems   (                                        )
    atItem = self . currentItem     (                                        )
    uuid   = 0
    ##########################################################################
    if                              ( atItem != None                       ) :
      uuid = atItem . data          ( 0 , Qt . UserRole                      )
      uuid = int                    ( uuid                                   )
    ##########################################################################
    mm     = MenuManager            ( self                                   )
    ##########################################################################
    TRX    = self . Translations
    ##########################################################################
    mm     = self . AmountIndexMenu ( mm                                     )
    self   . AppendRefreshAction    ( mm , 1001                              )
    ##########################################################################
    if                              ( self . Method not in [ "Original" ]  ) :
      ########################################################################
      msg  = self . getMenuItem     ( "Original"                             )
      mm   . addAction              ( 1002 , msg                             )
    ##########################################################################
    self   . AppendRenameAction     ( mm , 1101                              )
    ##########################################################################
    if                              ( atItem not in [ False , None ]       ) :
      ########################################################################
      if                            ( self . EditAllNames != None          ) :
        ######################################################################
        mm . addAction              ( 1601 ,  TRX [ "UI::EditNames" ]        )
    ##########################################################################
    mm     . addAction              ( 3001 ,  TRX [ "UI::TranslateAll"     ] )
    mm     . addAction              ( 5001 ,  "日地距離" )
    mm     . addSeparator           (                                        )
    ##########################################################################
    self   . GroupsMenu             ( mm , uuid , atItem                     )
    self   . FiltersMenu            ( mm                                     )
    self   . ColumnsMenu            ( mm                                     )
    self   . SortingMenu            ( mm                                     )
    self   . LocalityMenu           ( mm                                     )
    self   . DockingMenu            ( mm                                     )
    ##########################################################################
    mm     . setFont                ( self    . menuFont ( )                 )
    aa     = mm . exec_             ( QCursor . pos      ( )                 )
    at     = mm . at                ( aa                                     )
    ##########################################################################
    OKAY   = self . RunAmountIndexMenu (                                     )
    if                              ( OKAY                                 ) :
      ########################################################################
      self . restart                (                                        )
      ########################################################################
      return
    ##########################################################################
    OKAY   = self . RunDocking      ( mm , aa                                )
    if                              ( OKAY                                 ) :
      return True
    ##########################################################################
    OKAY   = self . HandleLocalityMenu ( at                                  )
    if                              ( OKAY                                 ) :
      ########################################################################
      self . restart                (                                        )
      ########################################################################
      return True
    ##########################################################################
    OKAY   = self . RunGroupsMenu   ( at , uuid , atItem                     )
    if                              ( OKAY                                 ) :
      return True
    ##########################################################################
    OKAY   = self . RunSortingMenu  ( at                                     )
    if                              ( OKAY                                 ) :
      ########################################################################
      self . restart                (                                        )
      ########################################################################
      return True
    ##########################################################################
    OKAY   = self . RunFiltersMenu  ( at                                     )
    if                              ( OKAY                                 ) :
      ########################################################################
      self . restart                (                                        )
      ########################################################################
      return True
    ##########################################################################
    OKAY   = self . RunColumnsMenu  ( at                                     )
    if                              ( OKAY                                 ) :
      return True
    ##########################################################################
    if                              ( at == 1001                           ) :
      ########################################################################
      self . restart                (                                        )
      ########################################################################
      return True
    ##########################################################################
    if                              ( at == 1002                           ) :
      ########################################################################
      self . Method = "Original"
      self . startup                (                                        )
      ########################################################################
      return True
    ##########################################################################
    if                              ( at == 1101                           ) :
      ########################################################################
      self . RenameItem             (                                        )
      ########################################################################
      return True
    ##########################################################################
    if                              ( at == 1601                           ) :
      uuid = self . itemUuid        ( items [ 0 ] , 0                        )
      NAM  = self . Tables          [ "Names"                                ]
      self . EditAllNames           ( self , "Tasks" , uuid , NAM            )
      return True
    ##########################################################################
    if                              ( at == 3001                           ) :
      self . Go                     ( self . TranslateAll                    )
      return True
    ##########################################################################
    if                              ( at == 5001                           ) :
      self . Go                     ( self . EarthSun                        )
      return True
    ##########################################################################
    return True
##############################################################################
