# -*- coding: utf-8 -*-
##############################################################################
## 物理長度
##############################################################################
import math
##############################################################################
import gmpy2
from   gmpy2 import mpz
from   gmpy2 import mpq
from   gmpy2 import mpfr
##############################################################################
from   AITK . Calendars . StarDate import StarDate
##############################################################################
SunEarthPerihelions = [ 1420092378682678320                                  ,
                        1420092378714060540                                  ,
                        1420092378745736520                                  ,
                        1420092378777318120                                  ,
                        1420092378808706100                                  ,
                        1420092378840468600                                  ,
                        1420092378871933380                                  ,
                        1420092378903397860                                  ,
                        1420092378935163000                                  ,
                        1420092378966557340                                  ,
                        1420092378998159520                                  ,
                        1420092379029803520                                  ,
                        1420092379061181480                                  ,
                        1420092379092916740                                  ,
                        1420092379124433360                                  ,
                        1420092379155854940                                  ,
                        1420092379187619480                                  ,
                        1420092379219037700                                  ,
                        1420092379250572800                                  ,
                        1420092379282290480                                  ,
                        1420092379313675460                                  ,
                        1420092379345359300                                  ,
                        1420092379376929020                                  ,
                        1420092379408322340                                  ,
                        1420092379440077280                                  ,
                        1420092379471540560                                  ,
                        1420092379503023580                                  ,
                        1420092379534768080                                  ,
                        1420092379566151980                                  ,
                        1420092379597745520                                  ,
                        1420092379629406080                                  ,
                        1420092379660799460                                  ,
                        1420092379692532260                                  ,
                        1420092379724042820                                  ,
                        1420092379755478440                                  ,
                        1420092379787235420                                  ,
                        1420092379818648000                                  ,
                        1420092379850187660                                  ,
                        1420092379881902460                                  ,
                        1420092379913283180                                  ,
                        1420092379944942720                                  ,
                        1420092379976519220                                  ,
                        1420092380007929700                                  ,
                        1420092380039691120                                  ,
                        1420092380071148160                                  ,
                        1420092380102633880                                  ,
                        1420092380134381440                                  ,
                        1420092380165767500                                  ,
                        1420092380197362420                                  ,
                        1420092380229017700                                  ,
                        1420092380260416720                                  ,
                        1420092380292139080                                  ,
                        1420092380323635480                                  ,
                        1420092380355069540                                  ,
                        1420092380386844640                                  ,
                        1420092380418263040                                  ,
                        1420092380449797060                                  ,
                        1420092380481508800                                  ,
                        1420092380512896240                                  ,
                        1420092380544562560                                  ,
                        1420092380576129580                                  ,
                        1420092380607542160                                  ,
                        1420092380639310060                                  ,
                        1420092380670753240                                  ,
                        1420092380702214600                                  ,
                        1420092380733975900                                  ,
                        1420092380765379900                                  ,
                        1420092380796992940                                  ,
                        1420092380828629500                                  ,
                        1420092380860023060                                  ,
                        1420092380891756640                                  ,
                        1420092380923246920                                  ,
                        1420092380954673660                                  ,
                        1420092380986457100                                  ,
                        1420092381017873640                                  ,
                        1420092381049399980                                  ,
                        1420092381081099180                                  ,
                        1420092381112489380                                  ,
                        1420092381144183300                                  ,
                        1420092381175746900                                  ,
                        1420092381207149760                                  ,
                        1420092381238926660                                  ,
                        1420092381270367680                                  ,
                        1420092381301836540                                  ,
                        1420092381333587580                                  ,
                        1420092381364989720                                  ,
                        1420092381396616680                                  ,
                        1420092381428233140                                  ,
                        1420092381459603660                                  ,
                        1420092381491354700                                  ,
                        1420092381522856920                                  ,
                        1420092381554292540                                  ,
                        1420092381586068960                                  ,
                        1420092381617482620                                  ,
                        1420092381649031760                                  ,
                        1420092381680718960                                  ,
                        1420092381712092720                                  ,
                        1420092381743807640                                  ,
                        1420092381775357080                                  ,
                        1420092381806747640                                  ]
##############################################################################
EquinoxAngles       = [ 1420092378689175060                                  ,
                        1420092378697189080                                  ,
                        1420092378705279900                                  ,
                        1420092378713042520                                  ,
                        1420092378720731760                                  ,
                        1420092378728745900,
                        1420092378736836960,
                        1420092378744599700,
                        1420092378752288400,
                        1420092378760302660,
                        1420092378768394020,
                        1420092378776156640,
                        1420092378783845340,
                        1420092378791859420,
                        1420092378799950600,
                        1420092378807712920,
                        1420092378815402040,
                        1420092378823416360,
    1420092378831507780,
    1420092378839270100,
    1420092378846959100,
    1420092378854972760,
    1420092378863064240,
    1420092378870826920,
    1420092378878515620,
    1420092378886529160,
    1420092378894621060,
    1420092378902383680,
    1420092378910072140,
    1420092378918086400,
    1420092378926178300,
    1420092378933941040,
    1420092378941629440,
    1420092378949643100,
    1420092378957734280,
    1420092378965497620,
    1420092378973186320,
    1420092378981199680,
    1420092378989291340,
    1420092378997054680,
    1420092379004743260,
    1420092379012756560,
    1420092379020848700,
    1420092379028611800,
    1420092379036300500,
    1420092379044313680,
    1420092379052405340,
    1420092379060168320,
    1420092379067857320,
    1420092379075871040,
    1420092379083962640,
    1420092379091725860,
    1420092379099414620,
    1420092379107427920,
    1420092379115519400,
    1420092379123282980,
    1420092379130971500,
    1420092379138984680,
    1420092379147076400,
    1420092379154839680,
    1420092379162528260,
    1420092379170542100,
    1420092379178634060,
    1420092379186397100,
    1420092379194085740,
    1420092379202099100,
    1420092379210190520,
    1420092379217953740,
    1420092379225642500,
    1420092379233655620,
    1420092379241747640,
    1420092379249510920,
    1420092379257199080,
    1420092379265212440,
    1420092379273305000,
    1420092379281068340,
    1420092379288756200,
    1420092379296769380,
    1420092379304861460,
    1420092379312624980,
    1420092379320313020,
    1420092379328326320,
    1420092379336418460,
    1420092379344182340,
    1420092379351870380,
    1420092379359882840,
    1420092379367975040,
    1420092379375739280,
    1420092379383427500,
    1420092379391439480,
    1420092379399531800,
    1420092379407295680,
    1420092379414984020,
    1420092379422996660,
    1420092379431089040,
    1420092379438852800,
    1420092379446541320,
    1420092379454553720,
    1420092379462645200,
    1420092379470409380,
    1420092379478097960,
    1420092379486110300,
    1420092379494201960,
    1420092379501966200,
    1420092379509654300,
    1420092379517667060,
    1420092379525759320,
    1420092379533523380,
    1420092379541211420,
    1420092379549224120,
    1420092379557315900,
    1420092379565079600,
    1420092379572768060,
    1420092379580780880,
    1420092379588873020,
    1420092379596636840,
    1420092379604325060,
    1420092379612337460,
    1420092379620430020,
    1420092379628194140,
    1420092379635882060,
    1420092379643894220,
    1420092379651986900,
    1420092379659750960,
    1420092379667438580,
    1420092379675451340,
    1420092379683544260,
    1420092379691308620,
    1420092379698996180,
    1420092379707008460,
    1420092379715100720,
    1420092379722865500,
    1420092379730553480,
    1420092379738565100,
    1420092379746657660,
    1420092379754422500,
    1420092379762110180,
    1420092379770121980,
    1420092379778215140,
    1420092379785979860,
    1420092379793667720,
    1420092379801679460,
    1420092379809771780,
    1420092379817536320,
    1420092379825224600,
    1420092379833236520,
    1420092379841328780,
    1420092379849093680,
    1420092379856781600,
    1420092379864793340,
    1420092379872885720,
    1420092379880650860,
    1420092379888338720,
    1420092379896350280,
    1420092379904442600,
    1420092379912207260,
    1420092379919895060,
    1420092379927907160,
    1420092379935999840,
    1420092379943764380,
    1420092379951452420,
    1420092379959464220,
    1420092379967556420,
    1420092379975321140,
    1420092379983009180,
    1420092379991020560,
    1420092379999113060,
    1420092380006877840,
    1420092380014565340,
    1420092380022577140,
    1420092380030670420,
    1420092380038435320,
    1420092380046122400,
    1420092380054134200,
    1420092380062226820,
    1420092380069991780,
    1420092380077679280,
    1420092380085690840,
    1420092380093783580,
    1420092380101548960,
    1420092380109236280,
    1420092380117247300,
    1420092380125340520,
    1420092380133106080,
    1420092380140793520,
    1420092380148804120,
    1420092380156897220,
    1420092380164662420,
    1420092380172350040,
    1420092380180361240,
    1420092380188454460,
    1420092380196219720,
    1420092380203907280,
    1420092380211918420,
    1420092380220010920,
    1420092380227776660,
    1420092380235464400,
    1420092380243475180,
    1420092380251567740,
    1420092380259333540,
    1420092380267020680,
    1420092380275031820,
    1420092380283125160,
    1420092380290890780,
    1420092380298578160,
    1420092380306589360,
    1420092380314682160,
    1420092380322447480,
    1420092380330135160,
    1420092380338146180,
    1420092380346239100,
    1420092380354004540,
    1420092380361692100,
    1420092380369702820,
    1420092380377796400,
    1420092380385562200,
    1420092380393249280,
    1420092380401259940,
    1420092380409353280,
    1420092380417118960,
    1420092380424805860,
    1420092380432816940,
    1420092380440910400,
    1420092380448676320,
    1420092380456363280,
    1420092380464373940,
    1420092380472466980,
    1420092380480233320,
    1420092380487920640,
    1420092380495930580,
    1420092380504023620,
    1420092380511789840,
    1420092380519477040,
    1420092380527487220,
    1420092380535580980,
    1420092380543347080,
    1420092380551034220,
    1420092380559044640,
    1420092380567137620,
    1420092380574903600,
    1420092380582591160,
    1420092380590601580,
    1420092380598694260,
    1420092380606460540,
    1420092380614147620,
    1420092380622157800,
    1420092380630251140,
    1420092380638017720,
    1420092380645704740,
    1420092380653714920,
    1420092380661808080,
    1420092380669574120,
    1420092380677261200,
    1420092380685271620,
    1420092380693365080,
    1420092380701131000,
    1420092380708818020,
    1420092380716828260,
    1420092380724921660,
    1420092380732687940,
    1420092380740375140,
    1420092380748384960,
    1420092380756478420,
    1420092380764244700,
    1420092380771931300,
    1420092380779941360,
    1420092380788035600,
    1420092380795802240,
    1420092380803488660,
    1420092380811498900,
    1420092380819592540,
    1420092380827359240,
    1420092380835045840,
    1420092380843055600,
    1420092380851149060,
    1420092380858916060,
    1420092380866602900,
    1420092380874612120,
    1420092380882706300,
    1420092380890473540,
    1420092380898160560,
    1420092380906169660,
    1420092380914263540,
    1420092380922030300,
    1420092380929717140,
    1420092380937726720,
    1420092380945820360,
    1420092380953587240,
    1420092380961274320,
    1420092380969283960,
    1420092380977377240,
    1420092380985144600,
    1420092380992831740,
    1420092381000841140,
    1420092381008934240,
    1420092381016701360,
    1420092381024388080,
    1420092381032397660,
    1420092381040491600,
    1420092381048258480,
    1420092381055945020,
    1420092381063954900,
    1420092381072048480,
    1420092381079815120,
    1420092381087502200,
    1420092381095511780,
    1420092381103605300,
    1420092381111372000,
    1420092381119058660,
    1420092381127067880,
    1420092381135162300,
    1420092381142929540,
    1420092381150615780,
    1420092381158625060,
    1420092381166719300,
    1420092381174486360,
    1420092381182172180,
    1420092381190181580,
    1420092381198275700,
    1420092381206043060,
    1420092381213729240,
    1420092381221738160,
    1420092381229832280,
    1420092381237600120,
    1420092381245286720,
    1420092381253295040,
    1420092381261389040,
    1420092381269156760,
    1420092381276842880,
    1420092381284851260,
    1420092381292945800,
    1420092381300713460,
    1420092381308399880,
    1420092381316408740,
    1420092381324502680,
    1420092381332270400,
    1420092381339957180,
    1420092381347965980,
    1420092381356059380,
    1420092381363827340,
    1420092381371513760,
    1420092381379522260,
    1420092381387616380,
    1420092381395384640,
    1420092381403070820,
    1420092381411079500,
    1420092381419173620,
    1420092381426941220,
    1420092381434627760,
    1420092381442636620,
    1420092381450730680,
    1420092381458498160,
    1420092381466184820,
    1420092381474193380,
    1420092381482287620,
    1420092381490055580,
    1420092381497742180,
    1420092381505750620,
    1420092381513844860,
    1420092381521612700,
    1420092381529298400,
    1420092381537307020,
    1420092381545401740,
    1420092381553169820,
    1420092381560855580,
    1420092381568864440,
    1420092381576958860,
    1420092381584727060,
    1420092381592413300,
    1420092381600421680,
    1420092381608515800,
    1420092381616284060,
    1420092381623970000,
    1420092381631977600,
    1420092381640072500,
    1420092381647841060,
    1420092381655527240,
    1420092381663535080,
    1420092381671629800,
    1420092381679398000,
    1420092381687084180,
    1420092381695092260,
    1420092381703186500,
    1420092381710954760,
    1420092381718640940,
    1420092381726648840,
    1420092381734743020,
    1420092381742511880,
    1420092381750197880,
    1420092381758205660,
    1420092381766299720,
    1420092381774068340,
    1420092381781754220,
    1420092381789762060,
    1420092381797856600,
    1420092381805625040,
    1420092381813311040,
    1420092381821319120,
    1420092381829413600,
    1420092381837181860
]
##############################################################################
def LocateSunEarthPerihelion   ( SDTime                                    ) :
  ############################################################################
  global SunEarthPerihelions
  ############################################################################
  AT     = 0
  NEXT   = 1
  CNT    = len                 ( SunEarthPerihelions                         )
  ############################################################################
  if                           ( SDTime < SunEarthPerihelions [ 0 ]        ) :
    return -1
  ############################################################################
  while                        ( NEXT < CNT                                ) :
    ##########################################################################
    V    = SunEarthPerihelions [ AT                                          ]
    N    = SunEarthPerihelions [ NEXT                                        ]
    ##########################################################################
    if                         ( ( SDTime >= V ) and ( SDTime < N )        ) :
      return AT
    ##########################################################################
    AT   = AT   + 1
    NEXT = NEXT + 1
  ############################################################################
  return -1
##############################################################################
def TakeSunEarthPerihelion   ( AT                                          ) :
  ############################################################################
  global SunEarthPerihelions
  ############################################################################
  if                         ( AT < 0                                      ) :
    return                   ( 0 , 0 ,                                       )
  ############################################################################
  NEXT = AT + 1
  ############################################################################
  V    = SunEarthPerihelions [ AT                                            ]
  N    = SunEarthPerihelions [ NEXT                                          ]
  ############################################################################
  return                     ( V , N ,                                       )
##############################################################################
def SunEarthApproximateDistance    ( SDTime                                ) :
  ############################################################################
  global SunEarthPerihelions
  ############################################################################
  AT    = LocateSunEarthPerihelion ( SDTime                                  )
  ############################################################################
  if                               ( AT < 0                                ) :
    return 0.0
  ############################################################################
  NEXT  = AT + 1
  ############################################################################
  V     = SunEarthPerihelions      [ AT                                      ]
  N     = SunEarthPerihelions      [ NEXT                                    ]
  D     = float                    ( N      - V                              )
  R     = float                    ( SDTime - V                              )
  ############################################################################
  PAU   = float                    ( 149556049358.6237                       )
  EAU   = float                    ( 2500577145.2762                         )
  TPI   = float                    ( math . pi * 2                           )
  COSV  = EAU * math . cos         ( TPI * R / D                             )
  ############################################################################
  return  float                    ( PAU - COSV                              )
##############################################################################
def LocateEquinoxAngles  ( SDTime                                          ) :
  ############################################################################
  global EquinoxAngles
  ############################################################################
  AT     = 0
  NEXT   = 1
  CNT    = len           ( EquinoxAngles                                     )
  ############################################################################
  if                     ( SDTime < EquinoxAngles [ 0 ]                    ) :
    return -1
  ############################################################################
  while                  ( NEXT < CNT                                      ) :
    ##########################################################################
    V    = EquinoxAngles [ AT                                                ]
    N    = EquinoxAngles [ NEXT                                              ]
    ##########################################################################
    if                   ( ( SDTime >= V ) and ( SDTime < N )              ) :
      return AT
    ##########################################################################
    AT   = AT   + 1
    NEXT = NEXT + 1
  ############################################################################
  return -1
##############################################################################
def TakeEquinoxAngles  ( AT                                                ) :
  ############################################################################
  global EquinoxAngles
  ############################################################################
  return EquinoxAngles [ AT                                                  ]
##############################################################################
def GetEquinoxAngles       ( SDTime                                        ) :
  ############################################################################
  AT = LocateEquinoxAngles ( SDTime                                          )
  ############################################################################
  if                       ( AT < 0                                        ) :
    return 0.0
  ############################################################################
  B   = TakeEquinoxAngles  ( AT                                              )
  C   = TakeEquinoxAngles  ( AT + 1                                          )
  D   = float              ( C - B                                           )
  M   = float              ( int ( AT % 4 )                                  )
  V   = float              ( SDTime - B                                      )
  ############################################################################
  return float             ( float ( M + float ( V / D ) ) / 4               )
##############################################################################
def GetSolarTransformMatrix ( SDTime                                       ) :
  ############################################################################
  CR     = 0.9174821
  SR     = 0.397777
  ANGLE  = GetEquinoxAngles ( SDTime                                         )
  ANGLE  = float            ( ANGLE * math . pi * 2                          )
  CA     = math . cos       ( ANGLE                                          )
  SA     = math . sin       ( ANGLE                                          )
  ############################################################################
  A1     = float            (  SA                                            )
  A2     = float            ( -CA                                            )
  A3     = float            (  0.0                                           )
  B1     = float            (  CR * CA                                       )
  B2     = float            (  CR * SA                                       )
  B3     = float            (  SR                                            )
  C1     = float            ( -SR * CA                                       )
  C2     = float            ( -SR * SA                                       )
  C3     = float            (  CR                                            )
  ############################################################################
  return                    [ A1 , A2 , A3 , B1 , B2 , B3 , C1 , C2 , C3     ]
##############################################################################
def GetRollingSolarAngle        ( SDTime , OMEGA                           ) :
  ############################################################################
  TZ     = "Asia/Taipei"
  SDAY   = 86164.0905
  EAT    = LocateEquinoxAngles  ( SDTime                                     )
  EAT    = EAT - int            ( EAT % 4                                    )
  SPRM   = TakeEquinoxAngles    ( EAT                                        )
  ############################################################################
  NOW    = StarDate             (                                            )
  NOW    . Stardate = SPRM
  SOD    = NOW . SecondsOfDay   ( TZ                                         )
  BPRM   = SPRM - SOD -         ( 4300                                       )
  ## BPRM   = SPRM - SOD -         ( 4 * 3600                                   )
  ## BPRM   = SPRM - SOD +         ( 4 * 3600                                   )
  ## BPRM   = SPRM - SOD
  ############################################################################
  DTX    = int                  ( SPRM - BPRM                                )
  if                            ( DTX < 0                                  ) :
    DTX  = int                  ( DTX + 86400                                )
  DTX    = int                  ( DTX % 86400                                )
  ############################################################################
  ATX    = int                  ( SDTime - SPRM                              )
  ZTX    = float                ( float ( ATX + DTX ) / float ( SDAY )       )
  ZTX    = float                ( ZTX + float ( OMEGA / 360.0 )              )
  RTX    = int                  ( ZTX                                        )
  ZTX    = ZTX - float          ( RTX                                        )
  ############################################################################
  return float                  ( ZTX * math . pi * 2                        )
##############################################################################
def GetProjectToSolarPoint ( Angle , Latitude                              ) :
  ############################################################################
  LANGLE = float           ( Latitude * math . pi / 180.0                    )
  Re     = 6378137.0
  Rp     = 6356752.3
  ############################################################################
  CLA    = math . cos      ( LANGLE                                          )
  SLA    = math . sin      ( LANGLE                                          )
  ############################################################################
  CRA    = math . cos      ( Angle                                           )
  SRA    = math . sin      ( Angle                                           )
  ############################################################################
  X      = float           ( Re * CLA * CRA                                  )
  Y      = float           ( Re * CLA * SRA                                  )
  Z      = float           ( Rp * SLA                                        )
  ############################################################################
  return                   [ X , Y , Z                                       ]
##############################################################################
def GetProjectPointToSunriseSunset ( P , M                                 ) :
  ############################################################################
  A = float                        ( P [ 0 ] * M [ 1 ]                       )
  B = float                        ( P [ 1 ] * M [ 4 ]                       )
  C = float                        ( P [ 2 ] * M [ 7 ]                       )
  ############################################################################
  return float                     ( A + B + C                               )
##############################################################################
def GetSunriseSunsetSinAngle ( DIST                                        ) :
  ############################################################################
  Re = float                 ( 6378137.0                                     )
  Rp = float                 ( 6356752.3                                     )
  Rs = float                 ( 696342000.0                                   )
  AU = float                 ( 149597870700.0                                )
  SA = float                 ( float ( Rs - Rp ) / float ( DIST + Re + Rs )  )
  ############################################################################
  return float               ( -SA * Re                                      )
##############################################################################
def GetAppearSunriseSinAngle ( DIST                                        ) :
  ############################################################################
  Re = float                 ( 6378137.0                                     )
  Rp = float                 ( 6356752.3                                     )
  Rs = float                 ( 696342000.0                                   )
  AU = float                 ( 149597870700.0                                )
  SA = float                 ( float ( Rs + Rp ) / float ( DIST + Re + Rs )  )
  ############################################################################
  return float               ( SA * Re                                       )
##############################################################################
def GetCriticalTwilightAngle ( Angle                                       ) :
  ############################################################################
  Re   = float               ( 6378137.0                                     )
  RADI = float               ( Angle * math . pi / 180.0                     )
  SA   = math . sin          ( RADI                                          )
  ############################################################################
  return float               ( - Re * SA                                     )
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
