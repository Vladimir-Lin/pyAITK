# -*- coding: utf-8 -*-
##############################################################################
## 台灣大樂透每局項目
##############################################################################
import os
import sys
import getopt
import time
import datetime
import logging
import requests
import threading
import gettext
import json
import codecs
import random
import numpy
import scipy
from   scipy . optimize                import curve_fit as CurveFit
##############################################################################
class TaiwanBL         (                                                   ) :
  ############################################################################
  def __init__         ( self                                              ) :
    ##########################################################################
    self . clear       (                                                     )
    ##########################################################################
    return
  ############################################################################
  def __del__          ( self                                              ) :
    return
  ############################################################################
  def clear            ( self                                              ) :
    ##########################################################################
    self . Order    = -1
    self . Serial   = ""
    self . Special  = 0
    self . N6       = { }
    self . N7       = { }
    self . S7       = { }
    self . Appears6 = { }
    self . Appears7 = { }
    ##########################################################################
    for i in range     ( 0 ,  6                                            ) :
      self . N6       [ i ] = 0
    ##########################################################################
    for i in range     ( 0 ,  7                                            ) :
      self . N7       [ i ] = 0
      self . S7       [ i ] = 0
    ##########################################################################
    for i in range     ( 0 , 50                                            ) :
      self . Appears6 [ i ] = 0
      self . Appears7 [ i ] = 0
    ##########################################################################
    return
  ############################################################################
  def MapAppears       ( self , total , numbers , appear                   ) :
    ##########################################################################
    for i in range     ( 0 , total                                         ) :
      v = numbers      [ i                                                   ]
      appear [ v ] = 1
    ##########################################################################
    return
  ############################################################################
  def MapAppears6      ( self                                              ) :
    ##########################################################################
    self . MapAppears  ( 6 , self . N6 , self . Appears6                     )
    ##########################################################################
    return
  ############################################################################
  def MapAppears7      ( self                                              ) :
    ##########################################################################
    self . MapAppears  ( 7 , self . N7 , self . Appears7                     )
    ##########################################################################
    return
  ############################################################################
  def CreateAppears    ( self                                              ) :
    ##########################################################################
    self . MapAppears6 (                                                     )
    self . MapAppears7 (                                                     )
    ##########################################################################
    return
  ############################################################################
  def SortSpecial      ( self                                              ) :
    ##########################################################################
    L    = [ ]
    for i in range     ( 0 , 7                                             ) :
      v = self . S7    [ i                                                   ]
      L . append       ( v                                                   )
    ##########################################################################
    L   . sort         (                                                     )
    ##########################################################################
    for i in range     ( 0 , 7                                             ) :
      self . S7 [ i ] = L [ i ]
    ##########################################################################
    return
  ############################################################################
  def assign             ( self , order , no , numbers                     ) :
    ##########################################################################
    self   . Order    = order
    self   . Serial   = no
    self   . Special  = numbers [ 6 ]
    ##########################################################################
    for i in range       ( 0 , 6                                           ) :
      self . N6 [ i ] = numbers [ i ]
    ##########################################################################
    for i in range       ( 0 , 7                                           ) :
      self . N7 [ i ] = numbers [ i ]
      self . S7 [ i ] = numbers [ i ]
    ##########################################################################
    self . SortSpecial   (                                                   )
    self . CreateAppears (                                                   )
    ##########################################################################
    return
  ############################################################################
  def order              ( self                                            ) :
    return self . Order
  ############################################################################
  def no                 ( self                                            ) :
    return self . Serial
  ############################################################################
  def numbers            ( self , total = 7                                ) :
    ##########################################################################
    if                   ( total == 7                                      ) :
      return self . N7
    ##########################################################################
    return   self . N6
  ############################################################################
  def isSerial           ( self , serial                                   ) :
    return               ( self . Serial == serial                           )
  ############################################################################
  def contains           ( self , number , balls = 6                       ) :
    ##########################################################################
    if                   ( balls == 7                                      ) :
      return             ( self . Appears7 [ number ] > 0                    )
    ##########################################################################
    return               ( self . Appears6 [ number ] > 0                    )
  ############################################################################
  def toTwoDigits        ( self , number                                   ) :
    ##########################################################################
    if                   ( number < 10                                     ) :
      return f"0{number}"
    ##########################################################################
    return f"{number}"
  ############################################################################
  def toString                    ( self                                   ) :
    ##########################################################################
    r    = self . Serial
    ##########################################################################
    for i in range                ( 0 , 7                                  ) :
      r  = r + " "
      r  = r + self . toTwoDigits ( self . N7 [ i ]                          )
    ##########################################################################
    return r
  ############################################################################
  def having       ( self , number , total , values                        ) :
    ##########################################################################
    for i in range ( 0 , total                                             ) :
      if           ( number == values [ i ]                                ) :
        return True
    ##########################################################################
    return False
  ############################################################################
  def indexOf      ( self , v , total , numbers                            ) :
    ##########################################################################
    for i in range ( 0 , total                                             ) :
      if           ( v == numbers [ i ]                                    ) :
        return i
    ##########################################################################
    return -1
  ############################################################################
  def Matches      ( self , balls , numbers                                ) :
    ##########################################################################
    total = 0
    ##########################################################################
    for i in range ( 0 , balls                                             ) :
      if           ( self . having ( numbers [ i ] , 6 , self . N6 )       ) :
        total = total + 1
    ##########################################################################
    return total
  ############################################################################
  def isSpecial    ( self , balls , numbers                                ) :
    ##########################################################################
    for i in range ( 0 , balls                                             ) :
      if           ( numbers [ i ] == self . Special                       ) :
        return True
    ##########################################################################
    return False
  ############################################################################
  def Reward                   ( self , balls                              ) :
    ##########################################################################
    special = self . isSpecial ( 6 , balls                                   )
    matches = self . Matches   ( 6 , balls                                   )
    ##########################################################################
    if                         ( matches == 6                              ) :
      return 1
    ##########################################################################
    if                         ( special ) and ( matches == 5 )              :
      return 2
    ##########################################################################
    if                         ( matches == 5                              ) :
      return 3
    ##########################################################################
    if                         ( special ) and ( matches == 4 )              :
      return 4
    ##########################################################################
    if                         ( matches == 4                              ) :
      return 5
    ##########################################################################
    if                         ( special ) and ( matches == 3 )              :
      return 6
    ##########################################################################
    if                         ( matches == 3                              ) :
      return 7
    ##########################################################################
    if                         ( special ) and ( matches == 2 )              :
      return 8
    ##########################################################################
    return 0
##############################################################################
