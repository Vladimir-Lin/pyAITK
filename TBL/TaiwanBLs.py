# -*- coding: utf-8 -*-
##############################################################################
## 台灣大樂透歷史紀錄
##############################################################################
import os
import sys
import getopt
import time
import datetime
import logging
import requests
import threading
import gettext
import json
import codecs
import random
import numpy
import scipy
from   scipy . optimize import curve_fit       as CurveFit
from   operator         import itemgetter      as itemgetter
##############################################################################
from . TblDistribution  import TblDistribution as TblDistribution
from . TaiwanBL         import TaiwanBL        as TaiwanBL
##############################################################################
class TaiwanBLs              (                                             ) :
  ############################################################################
  def __init__               ( self                                        ) :
    ##########################################################################
    self . clear             (                                               )
    ##########################################################################
    return
  ############################################################################
  def __del__                ( self                                        ) :
    return
  ############################################################################
  def clear                  ( self                                        ) :
    ##########################################################################
    self . Total = 0
    self . TBLs  =           [                                               ]
    ##########################################################################
    return
  ############################################################################
  def Serials                ( self                                        ) :
    return self . Total
  ############################################################################
  def append                 ( self , no , numbers                         ) :
    ##########################################################################
    self . Total = self . Total + 1
    tbl          = TaiwanBL  (                                               )
    tbl          . assign    ( self . Total , no , numbers                   )
    self . TBLs  . append    ( tbl                                           )
    ##########################################################################
    return self . Total
  ############################################################################
  def at                     ( self , index                                ) :
    ##########################################################################
    if                       ( index > self . Total                        ) :
      return None
    ##########################################################################
    if                       ( index < 0                                   ) :
      return None
    ##########################################################################
    return self . TBLs       [ index                                         ]
  ############################################################################
  def find                   ( self , no                                   ) :
    ##########################################################################
    if                       ( self . Total <= 0                           ) :
      return None
    ##########################################################################
    for i in range           ( 0 , self . Total                            ) :
      ########################################################################
      if                     ( self . TBLs [ i ] . isSerial ( no )         ) :
        return self . TBLs   [ i                                             ]
    ##########################################################################
    return None
  ############################################################################
  def indexOf                ( self , v , total , numbers                  ) :
    ##########################################################################
    for i in range           ( 0 , total                                   ) :
      if                     ( v == numbers [ i ]                          ) :
        return i
    ##########################################################################
    return -1
  ############################################################################
  def TotalValue             ( self , total , values                       ) :
    ##########################################################################
    v     = 0
    ##########################################################################
    for i in range           ( 0 , total                                   ) :
      v   = v + int          ( values [ i ]                                  )
    ##########################################################################
    return v
  ############################################################################
  def IntValues              ( self , Item , Balls = 6                     ) :
    ##########################################################################
    if                       ( self . Total <= 0                           ) :
      return                 [                                               ]
    ##########################################################################
    v      =                 [                                               ]
    ##########################################################################
    for i in range           ( 0 , self . Total                            ) :
      ########################################################################
      tblz = self . TBLs     [ i                                             ]
      z    = tblz . IntValue ( Item , Balls                                  )
      v    . append          ( z                                             )
    ##########################################################################
    return v
  ############################################################################
  def StatisticsTotal         ( self , Item , Balls = 6                    ) :
    ##########################################################################
    M = self . StatisticsMaps (        Item , Balls                          )
    ##########################################################################
    return len                ( M                                            )
  ############################################################################
  def StatisticsMaps          ( self , Item , Balls = 6                    ) :
    ##########################################################################
    global tblStatisticsAC6
    global tblStatisticsAC7
    global tblStatisticsOdds6
    global tblStatisticsOdds7
    global tblStatisticsEvens6
    global tblStatisticsEvens7
    global tblStatisticsHead6
    global tblStatisticsHead7
    global tblStatisticsTail6
    global tblStatisticsTail7
    global tblStatisticsFirst6
    global tblStatisticsFirst7
    global tblStatisticsEnding6
    global tblStatisticsEnding7
    global tblStatisticsGaps6
    global tblStatisticsGaps7
    global tblStatisticsTotalSums6
    global tblStatisticsTotalSums7
    global tblStatisticsHeadSums6
    global tblStatisticsHeadSums7
    global tblStatisticsTailSums6
    global tblStatisticsTailSums7
    ##########################################################################
    if                        ( "AC"            == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsAC7
      return   tblStatisticsAC6
    ##########################################################################
    if                        ( "Odds"          == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsOdds7
      return   tblStatisticsOdds6
    ##########################################################################
    if                        ( "Evens"         == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsEvens7
      return   tblStatisticsEvens6
    ##########################################################################
    if                        ( "Head"          == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsHead7
      return   tblStatisticsHead6
    ##########################################################################
    if                        ( "Tail"          == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsTail7
      return   tblStatisticsTail6
    ##########################################################################
    if                        ( "First"         == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsFirst7
      return   tblStatisticsFirst6
    ##########################################################################
    if                        ( "Ending"        == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsEnding7
      return   tblStatisticsEnding6
    ##########################################################################
    if                        ( "Gaps"          == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsGaps7
      return   tblStatisticsGaps6
    ##########################################################################
    if                        ( "Sums::Total"   == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsTotalSums7
      return   tblStatisticsTotalSums6
    ##########################################################################
    if                        ( "Sums::Head"    == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsHeadSums7
      return   tblStatisticsHeadSums6
    ##########################################################################
    if                        ( "Sums::Tail"    == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return tblStatisticsTailSums7
      return   tblStatisticsTailSums6
    ##########################################################################
    if                        ( "Square"        == Item                    ) :
      if                      ( 7 == Balls                                 ) :
        return                {                                              }
      return                  {                                              }
    ##########################################################################
    return                    {                                              }
  ############################################################################
  def Distribution            ( self , Item , Balls = 6                    ) :
    ##########################################################################
    M = self . StatisticsMaps (        Item , Balls                          )
    if                        ( M == None                                  ) :
      return None
    ##########################################################################
    T = TblDistribution       (                                              )
    T . assign                (        T    , Balls                          )
    ##########################################################################
    return T
  ############################################################################
  def CallFunction            ( self , data , func , balls                 ) :
    ##########################################################################
    if                        ( 7 == balls                                 ) :
      self . LoopFunction7    ( data , func                                  )
    else                                                                     :
      self . LoopFunction6    ( data , func                                  )
    ##########################################################################
    return
  ############################################################################
  def LoopFunction6           ( self , data , func                         ) :
    ##########################################################################
    n    =                    {                                              }
    for           i0 in range (      1 , 45                                ) :
      n           [ 0 ] = i0
      for         i1 in range ( i0 + 1 , 46                                ) :
        n         [ 1 ] = i1
        for       i2 in range ( i1 + 1 , 47                                ) :
          n       [ 2 ] = i2
          for     i3 in range ( i2 + 1 , 48                                ) :
            n     [ 3 ] = i3
            for   i4 in range ( i3 + 1 , 49                                ) :
              n   [ 4 ] = i4
              for i5 in range ( i4 + 1 , 50                                ) :
                n [ 5 ] = i5
                func          ( data , 6 , n                                 )
    ##########################################################################
    return
  ############################################################################
  def LoopFunction7             ( self , data , func                       ) :
    ##########################################################################
    n    =                      {                                            }
    for             i0 in range (      1 , 44                              ) :
      n             [ 0 ] = i0
      for           i1 in range ( i0 + 1 , 45                              ) :
        n           [ 1 ] = i1
        for         i2 in range ( i1 + 1 , 46                              ) :
          n         [ 2 ] = i2
          for       i3 in range ( i2 + 1 , 47                              ) :
            n       [ 3 ] = i3
            for     i4 in range ( i3 + 1 , 48                              ) :
              n     [ 4 ] = i4
              for   i5 in range ( i4 + 1 , 49                              ) :
                n   [ 5 ] = i5
                for i6 in range ( i5 + 1 , 50                              ) :
                  n [ 6 ] = i6
                  func          ( data , 7 , n                               )
    ##########################################################################
    return
  ############################################################################
  def EmptyDragNumber            ( self , followings                       ) :
    ##########################################################################
    for   i in range             ( 0 , 50                                  ) :
      if                         ( i not in followings                     ) :
        followings [ i ]       = {                                           }
      for j in range             ( 0 , 50                                  ) :
        followings [ i ] [ j ] = 0
    ##########################################################################
    return followings
  ############################################################################
  def NumberFollows                   ( self , followings , a , b          ) :
    ##########################################################################
    n     = self . at ( a ) . numbers ( 6                                    )
    m     = self . at ( b ) . numbers ( 6                                    )
    ##########################################################################
    for   i in range                  ( 0 , 6                              ) :
      v   = n                         [ i                                    ]
      for j in range                  ( 0 , 6                              ) :
        x = m                         [ i                                    ]
        followings [ v ] [ x ] = followings [ v ] [ x ] + 1
    ##########################################################################
    return followings
  ############################################################################
  def MakeFollows                ( self , followings , start , total , gap ) :
    ##########################################################################
    p   = start - ( ( total - 1 ) * gap )
    x   = p     + gap
    ##########################################################################
    while                        ( x <= start                              ) :
      ########################################################################
      self . NumberFollows       ( followings , p , x                        )
      ########################################################################
      p = p + gap
      x = x + gap
    ##########################################################################
    return followings
  ############################################################################
  def PickAppears           ( self , start , total , gap , balls , numbers ) :
    ##########################################################################
    Followings   =          {                                                }
    m            =          {                                                }
    t            =          {                                                }
    w            =          {                                                }
    ##########################################################################
    Followings   = self . EmptyDragNumber ( Followings                       )
    for i in range          ( 0 , 50                                       ) :
      m [ i ]    = 0
    ##########################################################################
    Followings   = self . MakeFollows ( Followings , start , total , gap     )
    z            = self . at ( start ) . numbers ( 6 )                       ;
    ##########################################################################
    for j in range          ( 0 , 6                                        ) :
      a          = z        [ j                                              ]
      for e in range        ( 1 , 50                                       ) :
        m [ e ] = m [ e ] + Followings [ a ] [ e ]
    ##########################################################################
    w    = self . DisappearFinal ( start                                     )
    r    = self . MultiplyTwo49  ( w , m                                     )
    t    = self . SortMapValues  ( r                                         )
    ##########################################################################
    for e in range          ( 0 , balls                                    ) :
      numbers [ e ] = t [ e ]
    ##########################################################################
    return numbers
  ############################################################################
  def SortMapValues         ( self , v                                     ) :
    ##########################################################################
    orders      =           {                                                }
    mss         =           {                                                }
    ##########################################################################
    for i in range          ( 1 , 50                                       ) :
      mss [ i ] = v         [ i                                              ]
    ##########################################################################
    kss         = sorted    ( mss , key = itemgetter ( 1 )                   )
    ##########################################################################
    CNT         = 1
    for i , v in kss                                                         :
      ########################################################################
      orders [ CNT ] = i
      ########################################################################
      CNT = CNT + 1
    ##########################################################################
    return orders
  ############################################################################
  def SumAppears            ( self , periods , gaps , balls                ) :
    ##########################################################################
    v         = 0
    tt        = 0
    t         =             {                                                }
    start     =             ( periods * gaps                                 )
    ##########################################################################
    for i in range          ( start + 1 , self . Total                     ) :
      ########################################################################
      tblz    = self . at   ( i + 1                                          )
      if                    ( tblz != None                                 ) :
        ######################################################################
        t     = self . PickAppears ( i - 1 , periods , gaps , balls , t      )
        mm    = self . at ( i ) . Matches ( balls , t                        )
        v     = v  + mm
        tt    = tt + 1
    ##########################################################################
    return float ( v ) / float ( tt )
  ############################################################################
  
  
  
  ############################################################################
  
  
  
  ############################################################################
  
  
  
  ############################################################################
  def MultiplyTwo49          ( self , A , B                                ) :
    ##########################################################################
    R   = { }
    ##########################################################################
    for i in range           ( 1 , 50                                      ) :
      R [ i ] = int ( A [ i ] ) * int ( B [ i ] )
    ##########################################################################
    return R
##############################################################################



"""
//////////////////////////////////////////////////////////////////////////////
double TaiwanBLs::SumAppears    ( int  periods                               ,
                                  int  gaps                                  ,
                                  int  balls                                 ,
                                  bool show                                ) {
  ////////////////////////////////////////////////////////////////////////////
  int t [ 50 ]                                                               ;
  int total = Serials           (                                          ) ;
  int v     = 0                                                              ;
  int mm                                                                     ;
  int tt    = 0                                                              ;
  int start =                   ( periods * gaps                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  for                           ( int i = start + 1 ; i < total ; i++      ) {
    TaiwanBL * tblz = at        ( i + 1                                    ) ;
    if                          ( tblz != nullptr                          ) {
      PickAppears               ( i - 1 , periods , gaps , balls , t       ) ;
      mm  = at ( i ) -> Matches ( balls , t                                ) ;
      v  += mm                                                               ;
      tt ++                                                                  ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  double r = double ( v ) / double ( tt )                                    ;
//  if                            ( show                                     ) {
//    printf                      ( "%3d %5d %10d %1.5f\n"                     ,
//                                  periods                                    ,
//                                  tt                                         ,
//                                  v                                          ,
//                                  r                                        ) ;
//  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return r                                                                   ;
}
//////////////////////////////////////////////////////////////////////////////
void TaiwanBLs::CountDisappears  ( int start , int * weight                ) {
  ////////////////////////////////////////////////////////////////////////////
  int        cnt = 0                                                         ;
  int        n                                                               ;
  bool       more                                                            ;
  int      * z                                                               ;
  TaiwanBL * tblz                                                            ;
  ////////////////////////////////////////////////////////////////////////////
  for                            ( int i = 0 ; i < 50 ; i++                ) {
    weight [ i ] = -1                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  while                          ( start >= 0                              ) {
    //////////////////////////////////////////////////////////////////////////
    tblz   = at                  ( start                                   ) ;
    if                           ( tblz == nullptr                         ) {
      return                                                                 ;
    }                                                                        ;
    z      = tblz -> numbers     ( 6                                       ) ;
    //////////////////////////////////////////////////////////////////////////
    for                          ( int i = 0 ; i < 6 ; i++                 ) {
      n    = z                   [ i                                       ] ;
      if                         ( weight [ n ] < 0                        ) {
        weight [ n ] = cnt                                                   ;
      }                                                                      ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    more   = false                                                           ;
    for                          ( int i = 1 ; i < 50 ; i++                ) {
      if                         ( weight [ i ] < 0                        ) {
        more = true                                                          ;
      }                                                                      ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    if                           ( ! more                                  ) {
      return                                                                 ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    start  = start - 1                                                       ;
    cnt    = cnt   + 1                                                       ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
void TaiwanBLs::ConvertDisappearWeight ( int * weight , int * final        ) {
  ////////////////////////////////////////////////////////////////////////////
  int w                                                                      ;
  ////////////////////////////////////////////////////////////////////////////
  final [ 0 ] = 0                                                            ;
  for                                  ( int i = 1 ; i < 50 ; i++          ) {
    w  = weight                        [ i                                 ] ;
    if                                 ( w < totalAppearanceWeights        ) {
      final [ i ] = appearanceWeights  [ w                                 ] ;
    } else                                                                   {
      final [ i ] = 1                                                        ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
void TaiwanBLs::DisappearFinal ( int start , int * weight                  ) {
  ////////////////////////////////////////////////////////////////////////////
  int W                        [ 50                                        ] ;
  ////////////////////////////////////////////////////////////////////////////
  CountDisappears              ( start , W                                 ) ;
  ConvertDisappearWeight       ( W     , weight                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
"""
