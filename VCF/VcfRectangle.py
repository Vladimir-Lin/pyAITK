# -*- coding: utf-8 -*-
##############################################################################
## VcfRectangle
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
##############################################################################
from   PyQt5                          import QtCore
from   PyQt5                          import QtGui
from   PyQt5                          import QtWidgets
##############################################################################
from   PyQt5 . QtCore                 import QObject
from   PyQt5 . QtCore                 import pyqtSignal
from   PyQt5 . QtCore                 import Qt
from   PyQt5 . QtCore                 import QPoint
from   PyQt5 . QtCore                 import QPointF
from   PyQt5 . QtCore                 import QSize
from   PyQt5 . QtCore                 import QSizeF
from   PyQt5 . QtCore                 import QRect
from   PyQt5 . QtCore                 import QRectF
##############################################################################
from   PyQt5 . QtGui                  import QIcon
from   PyQt5 . QtGui                  import QCursor
from   PyQt5 . QtGui                  import QFont
from   PyQt5 . QtGui                  import QFontMetricsF
from   PyQt5 . QtGui                  import QPen
from   PyQt5 . QtGui                  import QBrush
from   PyQt5 . QtGui                  import QKeySequence
from   PyQt5 . QtGui                  import QTransform
##############################################################################
from   PyQt5 . QtWidgets              import QApplication
from   PyQt5 . QtWidgets              import qApp
from   PyQt5 . QtWidgets              import QToolTip
from   PyQt5 . QtWidgets              import QWidget
from   PyQt5 . QtWidgets              import QGraphicsView
from   PyQt5 . QtWidgets              import QGraphicsItem
##############################################################################
from         . VcfItem                import VcfItem    as VcfItem
##############################################################################
class VcfRectangle              ( VcfItem                                  ) :
  ############################################################################
  vrNoSide        = 0
  vrTopLeft       = 1
  vrTopRight      = 2
  vrBottomLeft    = 3
  vrBottomRight   = 4
  vrLeftSide      = 5
  vrRightSide     = 6
  vrTopSide       = 7
  vrBottomSide    = 8
  vrInside        = 9
  ############################################################################
  GeometryChanged = pyqtSignal  ( VcfItem                                    )
  ############################################################################
  def __init__                  ( self                                     , \
                                  parent = None                            , \
                                  item   = None                            , \
                                  plan   = None                            ) :
    ##########################################################################
    super ( ) . __init__        ( parent , item , plan                       )
    self . setRectangleDefaults (                                            )
    ##########################################################################
    return
  ############################################################################
  def __del__         ( self                                               ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def setRectangleDefaults         ( self                                  ) :
    ##########################################################################
    self . PaperPos   = QPointF    ( 0.0 , 0.0                               )
    self . PaperRect  = QRectF     ( 0.0 , 0.0 , 0.0 , 0.0                   )
    self . ScreenRect = QRectF     ( 0.0 , 0.0 , 0.0 , 0.0                   )
    self . Scaling    = False
    self . Editing    = False
    self . Angle      = 0.0
    self . Transform  = QTransform (                                         )
    self . Transform  . reset      (                                         )
    ##########################################################################
    """
    VcfProxys     Proxys     ;
    VcfWidgets    Widgets    ;
    VcfPoints     Points     ;
    VcfRectangles Rectangles ;
    """
    self . Proxys     =            {                                         }
    self . Widgets    =            {                                         }
    self . Points     =            {                                         }
    self . Rectangles =            {                                         }
    ##########################################################################
    self . Markers    =            {                                         }
    self . Markers [ 0 ] = 0
    ##########################################################################
    self . setFunction             ( 32001 , False                           )
    self . setFunction             ( 32002 , True                            )
    ##########################################################################
    self . setFunction             ( 33001 , True                            )
    self . setFunction             ( 33002 , True                            )
    self . setFunction             ( 33003 , True                            )
    self . setFunction             ( 33004 , True                            )
    self . setFunction             ( 33005 , True                            )
    self . setFunction             ( 33006 , True                            )
    self . setFunction             ( 33007 , True                            )
    self . setFunction             ( 33008 , True                            )
    ##########################################################################
    return
  ############################################################################
  def boundingRect ( self                                                  ) :
    return self . ScreenRect
  ############################################################################
  def emitGeometryChanged         ( self                                   ) :
    ##########################################################################
    self . prepareGeometryChange  (                                          )
    self . update                 (                                          )
    ## self . GeometryChanged . emit ( self                                     )
    ##########################################################################
    return
  ############################################################################
  def PaperSize   ( self                                                   ) :
    return QSizeF ( self . PaperRect . width  ( )                          , \
                    self . PaperRect . height ( )                            )
  ############################################################################
  def PaperMiddle  ( self                                                  ) :
    return QPointF ( self . PaperRect . width  ( ) / 2                     , \
                     self . PaperRect . height ( ) / 2                       )
  ############################################################################
  def PaperRange  ( self                                                   ) :
    return QRectF ( self . PaperPos , self . PaperSize ( )                   )
  ############################################################################
  def setScaling       ( self , scale                                      ) :
    ##########################################################################
    self . Scaling = scale
    ##########################################################################
    return
  ############################################################################
  def setPos           ( self , CM                                         ) :
    ##########################################################################
    self      . PaperPos = CM
    ##########################################################################
    super ( ) . setPos ( self . paperToPoint ( CM )                          )
    ##########################################################################
    return
  ############################################################################
  def setRect                             ( self , Region                  ) :
    ##########################################################################
    self . PaperRect = Region
    ##########################################################################
    TL   = self . PaperRect . topLeft     (                                  )
    TL   = self . paperToPoint            ( TL                               )
    BR   = self . PaperRect . bottomRight (                                  )
    BR   = self . paperToPoint            ( BR                               )
    ##########################################################################
    self . ScreenRect . setTopLeft        ( TL                               )
    self . ScreenRect . setBottomRight    ( BR                               )
    ##########################################################################
    self . prepareGeometryChange          (                                  )
    ##########################################################################
    return
  ############################################################################
  def setRange     ( self , paper                                          ) :
    ##########################################################################
    R    = QRectF  ( 0 , 0 , paper . width ( ) , paper . height ( )          )
    self . setPos  ( paper . topLeft ( )                                     )
    self . setRect ( R                                                       )
    ##########################################################################
    return
  ############################################################################
  def atCorner                ( self , pos                                 ) :
    ##########################################################################
    SS        = self . ScreenRect
    ##########################################################################
    LL        = SS   . left   (                                              )
    RR        = SS   . right  (                                              )
    TT        = SS   . top    (                                              )
    BB        = SS   . bottom (                                              )
    WW        = SS   . width  (                                              )
    HH        = SS   . height (                                              )
    ##########################################################################
    Inner     = QRectF        ( LL + 4 , TT + 4 , WW - 8 , HH - 8            )
    ##########################################################################
    if                        ( Inner . contains ( pos )                   ) :
      return self . vrInside
    ##########################################################################
    LT        = QRectF        ( LL     , TT     ,      4 ,      4            )
    RT        = QRectF        ( RR - 4 , TT     ,      4 ,      4            )
    LB        = QRectF        ( LL     , BB - 4 ,      4 ,      4            )
    RB        = QRectF        ( RR - 4 , BB - 4 ,      4 ,      4            )
    LC        = QRectF        ( LL     , TT + 4 ,      4 , HH - 8            )
    RC        = QRectF        ( RR - 4 , TT + 4 ,      4 , HH - 8            )
    TC        = QRectF        ( LL + 4 , TT     , WW - 8 ,      4            )
    BC        = QRectF        ( LL + 4 , BB - 4 , WW - 8 ,      4            )
    ##########################################################################
    if                        ( LT . contains ( pos )                      ) :
      return self . vrTopLeft
    ##########################################################################
    if                        ( RT . contains ( pos )                      ) :
      return self . vrTopRight
    ##########################################################################
    if                        ( LB . contains ( pos )                      ) :
      return self . vrBottomLeft
    ##########################################################################
    if                        ( RB . contains ( pos )                      ) :
      return self . vrBottomRight
    ##########################################################################
    if                        ( LC . contains ( pos )                      ) :
      return self . vrLeftSide
    ##########################################################################
    if                        ( RC . contains ( pos )                      ) :
      return self . vrRightSide
    ##########################################################################
    if                        ( TC . contains ( pos )                      ) :
      return self . vrTopSide
    ##########################################################################
    if                        ( BC . contains ( pos )                      ) :
      return self . vrBottomSide
    ##########################################################################
    return   self . vrNoSide
  ############################################################################
  def hoverEnterEvent           ( self , event                             ) :
    ##########################################################################
    super ( ) . hoverEnterEvent (        event                               )
    ##########################################################################
    if                          ( not self . Scaling                       ) :
      return
    ##########################################################################
    return
  ############################################################################
  def hoverLeaveEvent           ( self , event                             ) :
    ##########################################################################
    super ( ) . hoverLeaveEvent (        event                               )
    ##########################################################################
    if                          ( not self . Scaling                       ) :
      return
    ##########################################################################
    self      . setCursor       ( Qt . ArrowCursor                           )
    ##########################################################################
    return
  ############################################################################
  def hoverMoveEvent            ( self , event                             ) :
    ##########################################################################
    super ( ) . hoverMoveEvent  (        event                               )
    ##########################################################################
    self      . Hovering        ( event . pos ( )                            )
    ##########################################################################
    if                          ( not self . Scaling                       ) :
      return
    ##########################################################################
    Corner    = self . atCorner ( event . pos ( )                            )
    self      . setCornerCursor ( Corner                                     )
    ##########################################################################
    return
  ############################################################################
  def Hovering                  ( self , pos                               ) :
    return
  ############################################################################
  def setCornerCursor           ( self , Corner                            ) :
    ##########################################################################
    if                          ( Corner == self . vrNoSide                ) :
      ########################################################################
      self . setCursor          ( Qt . ArrowCursor                           )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrInside                ) :
      ########################################################################
      self . setCursor          ( Qt . ArrowCursor                           )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrTopLeft               ) :
      ########################################################################
      if                        ( not self . isFunction ( 33005 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeFDiagCursor                       )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrTopRight              ) :
      ########################################################################
      if                        ( not self . isFunction ( 33006 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeBDiagCursor                       )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrBottomLeft            ) :
      ########################################################################
      if                        ( not self . isFunction ( 33007 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeBDiagCursor                       )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrBottomRight           ) :
      ########################################################################
      if                        ( not self . isFunction ( 33008 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeFDiagCursor                       )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrLeftSide              ) :
      ########################################################################
      if                        ( not self . isFunction ( 33001 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeHorCursor                         )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrRightSide             ) :
      ########################################################################
      if                        ( not self . isFunction ( 33002 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeHorCursor                         )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrTopSide               ) :
      ########################################################################
      if                        ( not self . isFunction ( 33003 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeVerCursor                         )
      ########################################################################
      return
    ##########################################################################
    if                          ( Corner == self . vrBottomSide            ) :
      ########################################################################
      if                        ( not self . isFunction ( 33004 )          ) :
        return
      ########################################################################
      self . setCursor          ( Qt . SizeVerCursor                         )
      ########################################################################
      return
    ##########################################################################
    return
  ############################################################################
  def ResizeRect                  ( self , P1 , P2                         ) :
    ##########################################################################
    x1   = P1 . x                 (                                          )
    x2   = P2 . x                 (                                          )
    y1   = P1 . y                 (                                          )
    y2   = P2 . y                 (                                          )
    t    = 0
    ##########################################################################
    if                            ( x1 > x2                                ) :
      t  = x1
      x1 = x2
      x2 = t
    ##########################################################################
    if                            ( y1 > y2                                ) :
      t  = y1
      y1 = y2
      y2 = t
    ##########################################################################
    self . ScreenRect . setLeft   ( x1                                       )
    self . ScreenRect . setTop    ( y1                                       )
    self . ScreenRect . setRight  ( x2                                       )
    self . ScreenRect . setBottom ( y2                                       )
    ##########################################################################
    self . emitGeometryChanged    (                                          )
    ##########################################################################
    return
  ############################################################################
  def ResizeWidth                 ( self , P1 , P2                         ) :
    ##########################################################################
    x1   = P1 . x                 (                                          )
    x2   = P2 . x                 (                                          )
    t    = 0
    ##########################################################################
    if                            ( x1 > x2                                ) :
      t  = x1
      x1 = x2
      x2 = t
    ##########################################################################
    self . ScreenRect . setLeft   ( x1                                       )
    self . ScreenRect . setRight  ( x2                                       )
    ##########################################################################
    self . emitGeometryChanged    (                                          )
    ##########################################################################
    return
  ############################################################################
  def ResizeHeight                ( self , P1 , P2                         ) :
    ##########################################################################
    y1   = P1 . y                 (                                          )
    y2   = P2 . y                 (                                          )
    t    = 0
    ##########################################################################
    if                            ( y1 > y2                                ) :
      t  = y1
      y1 = y2
      y2 = t
    ##########################################################################
    self . ScreenRect . setTop    ( y1                                       )
    self . ScreenRect . setBottom ( y2                                       )
    ##########################################################################
    self . emitGeometryChanged    (                                          )
    ##########################################################################
    return
  ############################################################################
  def CursorMoving         ( self , event                                  ) :
    ##########################################################################
    self . setCornerCursor ( self . atCorner ( event . pos ( ) )             )
    ##########################################################################
    return False
  ############################################################################
  def ResizeStart              ( self , event                              ) :
    ##########################################################################
    Corner   = self . atCorner ( event . pos ( )                             )
    ##########################################################################
    if                         ( Corner == self . vrNoSide ) :
      ########################################################################
      self   . setCursor       ( Qt . ArrowCursor                            )
      self   . Markers    [ 0 ] = 0
      self   . Markers    [ 1 ] = Corner
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrTopLeft                ) :
      ########################################################################
      if                       ( self . isFunction ( 33005 )               ) :
        ######################################################################
        self . setCursor       ( Qt . SizeFDiagCursor                        )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . topLeft     (         )
        self . Points     [ 3 ] = self  . ScreenRect . bottomRight (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrTopRight               ) :
      ########################################################################
      if                       ( self . isFunction ( 33006 )               ) :
        self . setCursor       ( Qt . SizeBDiagCursor                        )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . topRight    (         )
        self . Points     [ 3 ] = self  . ScreenRect . bottomLeft  (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrBottomLeft             ) :
      ########################################################################
      if                       ( self . isFunction ( 33007 )               ) :
        ######################################################################
        self . setCursor       ( Qt . SizeBDiagCursor                        )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . bottomLeft  (         )
        self . Points     [ 3 ] = self  . ScreenRect . topRight    (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrBottomRight            ) :
      ########################################################################
      if                       ( self . isFunction ( 33008 )               ) :
        ######################################################################
        self . setCursor       ( Qt . SizeFDiagCursor                        )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . bottomRight (         )
        self . Points     [ 3 ] = self  . ScreenRect . topLeft     (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrLeftSide               ) :
      ########################################################################
      if                       ( self . isFunction ( 33001 )               ) :
        ######################################################################
        self . setCursor       ( Qt . SizeHorCursor                          )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . topLeft     (         )
        self . Points     [ 3 ] = self  . ScreenRect . topRight    (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrRightSide              ) :
      ########################################################################
      if                       ( self . isFunction ( 33002 )               ) :
        ######################################################################
        self . setCursor       ( Qt . SizeHorCursor                          )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . topRight    (         )
        self . Points     [ 3 ] = self  . ScreenRect . topLeft     (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrTopSide                ) :
      ########################################################################
      if                       ( self . isFunction ( 33003 )               ) :
        ######################################################################
        self . setCursor       ( Qt .SizeVerCursor                           )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . topLeft     (         )
        self . Points     [ 3 ] = self  . ScreenRect . bottomLeft  (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrBottomSide             ) :
      ########################################################################
      if                       ( self . isFunction ( 33004 )               ) :
        ######################################################################
        self . setCursor       ( Qt . SizeVerCursor                          )
        self . Markers    [ 0 ] = 1
        self . Markers    [ 1 ] = Corner
        self . Points     [ 0 ] = event . pos                      (         )
        self . Points     [ 2 ] = self  . ScreenRect . bottomLeft  (         )
        self . Points     [ 3 ] = self  . ScreenRect . topLeft     (         )
        self . Rectangles [ 0 ] = self  . ScreenRect
        ######################################################################
        return True
      ########################################################################
      return False
    ##########################################################################
    if                         ( Corner == self . vrInside                 ) :
      ########################################################################
      self   . setCursor       ( Qt . ArrowCursor                            )
      self   . Markers    [ 0 ] = 0
      self   . Markers    [ 1 ] = self . vrNoSide
      ########################################################################
      return False
    ##########################################################################
    return False
  ############################################################################
  def ResizeMoving          ( self , event                                 ) :
    ##########################################################################
    Corner = self . Markers [ 1                                              ]
    P1     = QPointF        (                                                )
    P2     = QPointF        (                                                )
    ##########################################################################
    CR     =                [ self . vrTopLeft                             , \
                              self . vrTopRight                            , \
                              self . vrBottomLeft                          , \
                              self . vrBottomRight                           ]
    LR     =                [ self . vrLeftSide , self . vrRightSide         ]
    TB     =                [ self . vrTopSide  , self . vrBottomSide        ]
    ##########################################################################
    if                      ( Corner in CR                                 ) :
      ########################################################################
      self . Points [ 1 ] = event . pos (                                    )
      P1   = self . Points [ 2 ] + self . Points [ 1 ] - self . Points [ 0 ]
      P2   = self . Points [ 3 ]
      self . ResizeRect     ( P1 , P2                                        )
      ########################################################################
      return True
    ##########################################################################
    if                      ( Corner in LR                                 ) :
      ########################################################################
      self . Points [ 1 ] = event . pos (                                    )
      P1   = self . Points [ 2 ] + self . Points [ 1 ] - self . Points [ 0 ]
      P2   = self . Points [ 3 ]
      self . ResizeWidth    ( P1 , P2                                        )
      ########################################################################
      return True
    ##########################################################################
    if                      ( Corner in TB                                 ) :
      ########################################################################
      self . Points [ 1 ] = event . pos (                                    )
      P1   = self . Points [ 2 ] + self . Points [ 1 ] - self . Points [ 0 ]
      P2   = self . Points [ 3 ]
      self . ResizeHeight   ( P1 , P2                                        )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def ResizeFinish                        ( self , event                   ) :
    ##########################################################################
    if                                    ( self . Markers [ 0 ] == 0      ) :
      return False
    ##########################################################################
    self . PaperRect = self . rectToPaper ( self . ScreenRect                )
    self . Markers [ 0 ] = 0
    ##########################################################################
    self . setCursor                      ( Qt . ArrowCursor                 )
    self . emitGeometryChanged            (                                  )
    ##########################################################################
    return True
  ############################################################################
  def scalePressEvent           ( self , event                             ) :
    ##########################################################################
    if                          ( self . Scaling                           ) :
      ########################################################################
      if ( self . IsMask ( event . buttons ( ) , Qt . LeftButton )         ) :
        ######################################################################
        if                      ( self . ResizeStart ( event )             ) :
          event . accept        (                                            )
        else                                                                 :
          super ( ) . mousePressEvent ( event                                )
        ######################################################################
        return
    ##########################################################################
    super ( ) . mousePressEvent ( event                                      )
    self      . DeleteGadgets   (                                            )
    ##########################################################################
    return
  ############################################################################
  def scaleMoveEvent                 ( self , event                        ) :
    ##########################################################################
    if                               ( self . Scaling                      ) :
      if ( self . IsMask ( event . buttons ( ) , Qt . LeftButton )         ) :
        ######################################################################
        if                           ( self . ResizeMoving ( event )       ) :
          ####################################################################
          event . accept             (                                       )
          ####################################################################
        else                                                                 :
          ####################################################################
          super ( ) . mouseMoveEvent ( event                                 )
        ######################################################################
        return
        ######################################################################
      else                                                                   :
        ######################################################################
        if                           ( self . CursorMoving ( event )       ) :
          ####################################################################
          event . accept             (                                       )
          ####################################################################
        else                                                                 :
          ####################################################################
          super ( ) . mouseMoveEvent ( event                                 )
        ######################################################################
        return
    ##########################################################################
    super ( ) . mouseMoveEvent       ( event                                 )
    ##########################################################################
    return
  ############################################################################
  def scaleReleaseEvent           ( self , event                           ) :
    ##########################################################################
    if                            ( self . Markers [ 0 ] == 1              ) :
      self . ResizeFinish         (        event                             )
    ##########################################################################
    super ( ) . mouseReleaseEvent (        event                             )
    ##########################################################################
    return
  ############################################################################
  def DeleteGadgets ( self ) :
    ##########################################################################
    """
    CUIDs K = Proxys . keys ( )                ;
    int k                                      ;
    foreach ( k , K )                          {
      scene ( ) -> removeItem ( Proxys [ k ] ) ;
      Proxys [ k ] -> deleteLater ( )          ;
    }                                          ;
    Widgets . clear ( )                        ;
    Proxys  . clear ( )                        ;
    update          ( )                        ;
    """
    ##########################################################################
    return
  ############################################################################
  def itemChange ( self , change , value                                   ) :
    ##########################################################################
    if           ( change == QGraphicsItem . ItemPositionChange            ) :
      self . GeometryChanged . emit ( self                                   )
    ##########################################################################
    return super ( ) . itemChange   ( change , value                         )
  ############################################################################
  def NewLineEdit ( self , Id ) :
    ##########################################################################
    """
    QLineEdit            * line  = new QLineEdit            (      ) ;
    QGraphicsProxyWidget * proxy = new QGraphicsProxyWidget ( this ) ;
    proxy -> setFlag   ( ItemAcceptsInputMethod , true )             ;
    proxy -> setWidget ( line )                                      ;
    Proxys  [ Id ] = proxy                                           ;
    Widgets [ Id ] = line                                            ;
    return line                                                      ;
    """
    ##########################################################################
    return None
  ############################################################################
  def NewComboBox ( self , Id                                              ) :
    ##########################################################################
    """
    QComboBox            * combo = new QComboBox            (      ) ;
    QGraphicsProxyWidget * proxy = new QGraphicsProxyWidget ( this ) ;
    proxy -> setFlag   ( ItemAcceptsInputMethod , true )             ;
    proxy -> setWidget ( combo )                                     ;
    Proxys  [ Id ] = proxy                                           ;
    Widgets [ Id ] = combo                                           ;
    return combo                                                     ;
    """
    ##########################################################################
    return None
  ############################################################################
  def AttachZLevel ( self ) :
    ##########################################################################
    """
    QSlider              * slider = new QSlider              ( Qt::Horizontal ) ;
    QGraphicsProxyWidget * proxy  = new QGraphicsProxyWidget ( this           ) ;
    proxy  -> setFlag   ( ItemAcceptsInputMethod , true )                       ;
    proxy  -> setWidget ( slider            )                                   ;
    MountZLevel         ( proxy    , slider )                                   ;
    slider -> setRange  ( 0        , 1000   )                                   ;
    slider -> setValue  ( zValue() * 1000   )                                   ;
    nConnect ( slider,SIGNAL(valueChanged(int)),this,SLOT(modifyZLevel(int)) )  ;
    """
    ##########################################################################
    return
  ############################################################################
  def MountZLevel            ( self , proxy , slider                       ) :
    return
  ############################################################################
  def modifyZLevel           ( self , Z                                    ) :
    ##########################################################################
    ZZ       = float         ( Z                                             )
    ZZ       = float         ( ZZ / 1000.0                                   )
    ##########################################################################
    pos      = QCursor . pos (                                               )
    msg      = f"Z : {ZZ}"
    ##########################################################################
    self     . setZValue     ( ZZ                                            )
    self     . update        (                                               )
    QToolTip . showText      ( pos , msg                                     )
    ##########################################################################
    return
  ############################################################################
  def AttachOpacity ( self                                                 ) :
    ##########################################################################
    """
    QSlider              * slider = new QSlider              ( Qt::Horizontal ) ;
    QGraphicsProxyWidget * proxy  = new QGraphicsProxyWidget ( this           ) ;
    proxy  -> setFlag   ( ItemAcceptsInputMethod , true   )                     ;
    proxy  -> setWidget ( slider                          )                     ;
    MountOpacity        ( proxy , slider                  )                     ;
    slider -> setRange  ( 0 , 1000                        )                     ;
    slider -> setValue  ( QGraphicsItem::opacity() * 1000 )                     ;
    nConnect (slider,SIGNAL(valueChanged(int)),this,SLOT(modifyOpacity(int))  ) ;
    """
    ##########################################################################
    return
  ############################################################################
  def MountOpacity  ( self , proxy , slider                                ) :
    return
  ############################################################################
  def modifyOpacity     ( self , Opacity                                   ) :
    ##########################################################################
    O   = float         ( Opacity                                            )
    O   = float         ( O / 1000.0                                         )
    ##########################################################################
    pos = QCursor . pos (                                                    )
    msg = f"Opacity : {O}"
    ##########################################################################
    self . setOpacity   ( O                                                  )
    self . update       (                                                    )
    QToolTip . showText ( pos , msg                                          )
    ##########################################################################
    return
  ############################################################################
  def AttachRotation       ( self                                          ) :
    ##########################################################################
    """
    QDial                * dial   = new QDial                (      )          ;
    QGraphicsProxyWidget * proxy  = new QGraphicsProxyWidget ( NULL )          ;
    proxy -> setFlag     ( ItemAcceptsInputMethod , true )                     ;
    proxy -> setWidget   ( dial         )                                      ;
    MountRotation        ( proxy , dial )                                      ;
    dial  -> setWrapping ( true         )                                      ;
    dial  -> setRange    ( 0 , 360000   )                                      ;
    dial  -> setValue    ( Angle * 1000 )                                      ;
    nConnect ( dial,SIGNAL(valueChanged(int)),this,SLOT(modifyRotation(int)) ) ;
    scene ( ) -> addItem ( proxy        )                                      ;
    """
    ##########################################################################
    return
  ############################################################################
  def MountRotation        ( self , proxy , dial                           ) :
    return
  ############################################################################
  def modifyRotation       ( self , Rotation                               ) :
    ##########################################################################
    self . Angle = float   ( Rotation                                        )
    self . Angle = float   ( self . Angle / 1000.0                           )
    ##########################################################################
    pos  = QCursor . pos   (                                                 )
    msg  = f"Angle : {Angle}"
    ##########################################################################
    self . RotationUpdated (                                                 )
    self . update          (                                                 )
    QToolTip . showText    ( pos , msg                                       )
    ##########################################################################
    return
  ############################################################################
  def RotationUpdated ( self                                               ) :
    return
##############################################################################
