# -*- coding: utf-8 -*-
##############################################################################
## VcfPainter
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
##############################################################################
from   PyQt5                          import QtCore
from   PyQt5                          import QtGui
from   PyQt5                          import QtWidgets
##############################################################################
from   PyQt5 . QtCore                 import QObject
from   PyQt5 . QtCore                 import pyqtSignal
from   PyQt5 . QtCore                 import Qt
from   PyQt5 . QtCore                 import QPoint
from   PyQt5 . QtCore                 import QPointF
##############################################################################
from   PyQt5 . QtGui                  import QIcon
from   PyQt5 . QtGui                  import QCursor
from   PyQt5 . QtGui                  import QFont
from   PyQt5 . QtGui                  import QFontMetricsF
from   PyQt5 . QtGui                  import QColor
from   PyQt5 . QtGui                  import QPen
from   PyQt5 . QtGui                  import QBrush
from   PyQt5 . QtGui                  import QPolygonF
from   PyQt5 . QtGui                  import QPainterPath
##############################################################################
class VcfPainter                 (                                         ) :
  ############################################################################
  def __init__                   ( self                                    ) :
    ##########################################################################
    self . setVcfPainterDefaults (                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def setVcfPainterDefaults ( self                                         ) :
    ##########################################################################
    self . Names     =      {                                                }
    self . pens      =      {                                                }
    self . brushes   =      {                                                }
    self . gradients =      {                                                }
    self . fonts     =      {                                                }
    self . pathes    =      {                                                }
    self . switches  =      {                                                }
    ##########################################################################
    return
  ############################################################################
  def addMap ( self , Name , Id                                            ) :
    self . Names [ Name ] = Id
    return
  ############################################################################
  def addPen                       ( self , Id , color                     ) :
    self . pens    [ Id ] = QPen   ( color                                   )
    return len                     ( self . pens                             )
  ############################################################################
  def addBrush                     ( self , Id , color                     ) :
    self . brushes [ Id ] = QBrush ( color                                   )
    return len                     ( self . brushes                          )
  ############################################################################
  def addGradient                  ( self , Id , gradient                  ) :
    self . gradients [ Id ] = gradient
    return len                     ( self . gradients                        )
  ############################################################################
  def assignPainterPenId ( self , p , Id                                   ) :
    ##########################################################################
    if                   ( Id in self . pens                               ) :
      p . setPen         ( self . pens    [ Id ]                             )
    ##########################################################################
    return
  ############################################################################
  def assignPainterId  ( self , p , Id                                     ) :
    ##########################################################################
    if                 ( Id in self . pens                                 ) :
      p . setPen       ( self . pens    [ Id ]                               )
    ##########################################################################
    if                 ( Id in self . brushes                              ) :
      p . setBrush     ( self . brushes [ Id ]                               )
    ##########################################################################
    return
  ############################################################################
  def setPainter           ( self , p , name                               ) :
    ##########################################################################
    if                     ( name not in self . Names                      ) :
      return
    ##########################################################################
    Id   = self . Names    [ name                                            ]
    self . assignPainterId ( p , Id                                          )
    ##########################################################################
    return
  ############################################################################
  def drawRect         ( self , p , name , rect                            ) :
    ##########################################################################
    if                 ( name not in self . Names                          ) :
      return
    ##########################################################################
    Id  = self . Names [ name                                                ]
    ##########################################################################
    if                 ( Id in self . pens                                 ) :
      p . setPen       ( self . pens    [ Id ]                               )
    ##########################################################################
    if                 ( Id in self . brushes                              ) :
      p . setBrush     ( self . brushes [ Id ]                               )
    ##########################################################################
    p   . drawRect     ( rect                                                )
    ##########################################################################
    return
  ############################################################################
  def drawBorder       ( self , p , name ,rect                             ) :
    ##########################################################################
    if                 ( name not in self . Names                          ) :
      return
    ##########################################################################
    Id  = self . Names [ name                                                ]
    ##########################################################################
    if                 ( Id in self . pens                                 ) :
      p . setPen       ( self . pens    [ Id ]                               )
    ##########################################################################
    X   = QPolygonF    (                                                     )
    ##########################################################################
    X   . append       ( rect . topLeft     ( )                              )
    X   . append       ( rect . topRight    ( )                              )
    X   . append       ( rect . bottomRight ( )                              )
    X   . append       ( rect . bottomLeft  ( )                              )
    X   . append       ( rect . topLeft     ( )                              )
    ##########################################################################
    p   . drawPolyline ( X                                                   )
    ##########################################################################
    return
  ############################################################################
  def drawRectGradient        ( self , p , name , rect                     ) :
    ##########################################################################
    if                        ( name not in self . Names                   ) :
      return
    ##########################################################################
    Id   = self . Names       [ name                                         ]
    ##########################################################################
    self . assignPainterPenId ( p , Id                                       )
    ##########################################################################
    if                        ( Id in self . gradients                     ) :
      ########################################################################
      p . setBrush            ( QBrush ( self . gradients [ Id ] )           )
    ##########################################################################
    p   . drawRect            ( rect                                         )
    ##########################################################################
    return
  ############################################################################
  def drawPainterPath      ( self , p , name                               ) :
    ##########################################################################
    if                     ( name not in self . Names                      ) :
      return
    ##########################################################################
    Id   = self . Names    [ name                                            ]
    ##########################################################################
    self . assignPainterId ( p , Id                                          )
    ##########################################################################
    if                     ( Id in self . pathes                           ) :
      ########################################################################
      p  . drawPath        ( self . pathes [ Id ]                            )
    ##########################################################################
    return
  ############################################################################
  def FontMetrics        ( self , Id                                       ) :
    return QFontMetricsF ( self . fonts [ Id ]                               )
  ############################################################################
  def boundingRect ( self , Id , text                                      ) :
    return self . FontMetrics ( Id ) . boundingRect ( text                   )
  ############################################################################
  def UnitedPathes                  ( self                                 ) :
    ##########################################################################
    path  = QPainterPath            (                                        )
    if                              ( len ( self . switches ) <= 0         ) :
      return path
    ##########################################################################
    Index = self  . switches . keys (                                        )
    Index = list                    ( Index                                  )
    Index . sort                    (                                        )
    ##########################################################################
    for Id in Index                                                          :
      ########################################################################
      if                            ( self . switches [ Id ]               ) :
        ######################################################################
        path . addPath              ( self . pathes   [ Id ]                 )
    ##########################################################################
    return path . simplified        (                                        )
  ############################################################################
  def MergePathes                                    ( self , TargetId     ) :
    self . pathes [ TargetId ] = self . UnitedPathes (                       )
    return
  ############################################################################
  def drawAllPathes                 ( self , p                             ) :
    ##########################################################################
    Index = self  . switches . keys (                                        )
    Index = list                    ( Index                                  )
    if                              ( len ( Index ) <= 0                   ) :
      return
    ##########################################################################
    Index . sort                    (                                        )
    ##########################################################################
    for Id in Index                                                          :
      ########################################################################
      if                            ( self . switches [ Id ]               ) :
        ######################################################################
        if                          ( Id in self . pathes                  ) :
          ####################################################################
          self . assignPainterId    ( p , Id                                 )
          p    . drawPath           ( self . pathes [ Id ]                   )
    ##########################################################################
    return
  ############################################################################
  def RatioColor         ( self , color , ratio                            ) :
    ##########################################################################
    R   = color . redF   (                                                   )
    G   = color . greenF (                                                   )
    B   = color . blueF  (                                                   )
    ##########################################################################
    R   = R     * ratio
    G   = G     * ratio
    B   = B     * ratio
    ##########################################################################
    if                   ( R > 1.0                                         ) :
      R = 1.0
    ##########################################################################
    if                   ( R < 0.0                                         ) :
      R = 0.0
    ##########################################################################
    if                   ( G > 1.0                                         ) :
      G = 1.0
    ##########################################################################
    if                   ( G < 0.0                                         ) :
      G = 0.0
    ##########################################################################
    if                   ( B > 1.0                                         ) :
      B = 1.0
    ##########################################################################
    if                   ( B < 0.0                                         ) :
      B = 0.0
    ##########################################################################
    C   = QColor         (                                                   )
    C   . setRedF        ( R                                                 )
    C   . setGreenF      ( G                                                 )
    C   . setBlueF       ( B                                                 )
    ##########################################################################
    return C
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
