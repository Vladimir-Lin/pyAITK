# -*- coding: utf-8 -*-
##############################################################################
## UuidListings
##############################################################################
import os
import sys
import time
import requests
import threading
import json
##############################################################################
from   PySide6                     import QtCore
from   PySide6                     import QtGui
from   PySide6                     import QtWidgets
from   PySide6 . QtCore            import *
from   PySide6 . QtGui             import *
from   PySide6 . QtWidgets         import *
from   AITK    . Qt6               import *
##############################################################################
from   AITK    . Qt6 . MenuManager import MenuManager as MenuManager
from   AITK    . Qt6 . TreeDock    import TreeDock    as TreeDock
##############################################################################
defaultUuidListings = None
SystemUUIDs         = [                                                      ]
##############################################################################
def setUuidListings ( UUID                                                 ) :
  ############################################################################
  global defaultUuidListings
  ############################################################################
  defaultUuidListings = UUID
  ############################################################################
  return
##############################################################################
def getUuids (                                                             ) :
  ############################################################################
  global SystemUUIDs
  ############################################################################
  return SystemUUIDs
##############################################################################
def appendUuid                  ( UUID                                     ) :
  ############################################################################
  global defaultUuidListings
  global SystemUUIDs
  ############################################################################
  SystemUUIDs         . append  ( UUID                                       )
  defaultUuidListings . startup (                                            )
  ############################################################################
  return
##############################################################################
def appendUuids                 ( UUIDs                                    ) :
  ############################################################################
  global defaultUuidListings
  global SystemUUIDs
  ############################################################################
  for UUID in UUIDs                                                          :
    ##########################################################################
    SystemUUIDs       . append  ( UUID                                       )
  ############################################################################
  defaultUuidListings . startup (                                            )
  ############################################################################
  return
##############################################################################
def assignUuids                 ( UUIDs                                    ) :
  ############################################################################
  global defaultUuidListings
  global SystemUUIDs
  ############################################################################
  SystemUUIDs         = UUIDs
  ############################################################################
  defaultUuidListings . startup (                                            )
  ############################################################################
  return
##############################################################################
class UuidListings                 ( TreeDock                              ) :
  ############################################################################
  HavingMenu = 1371434312
  ############################################################################
  emitLog    = Signal              ( str                                     )
  emitReload = Signal              (                                         )
  ############################################################################
  def __init__                     ( self , parent = None , plan = None    ) :
    ##########################################################################
    super ( ) . __init__           (        parent        , plan             )
    ##########################################################################
    self . dockingOrientation = Qt . Vertical
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setColumnCount          ( 2                                       )
    self . setColumnHidden         ( 1 , True                                )
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ContiguousSelection"                   )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . DropOnly            )
    ##########################################################################
    self . emitReload . connect    ( self . reload                           )
    ##########################################################################
    return
  ############################################################################
  def AttachActions   ( self         ,                        Enabled      ) :
    ##########################################################################
    self . LinkAction ( "Refresh"    , self . startup       , Enabled        )
    ##########################################################################
    self . LinkAction ( "Insert"     , self . InsertItem    , Enabled        )
    self . LinkAction ( "Delete"     , self . DeleteItems   , Enabled        )
    self . LinkAction ( "Cut"        , self . ClearAllItems , Enabled        )
    self . LinkAction ( "Paste"      , self . PasteItems    , Enabled        )
    ##########################################################################
    self . LinkAction ( "Select"     , self . SelectOne     , Enabled        )
    self . LinkAction ( "SelectAll"  , self . SelectAll     , Enabled        )
    self . LinkAction ( "SelectNone" , self . SelectNone    , Enabled        )
    ##########################################################################
    M    = self . windowTitle (                                              )
    ##########################################################################
    if                        ( Enabled                                    ) :
      ########################################################################
      M  = f"Enter {M}"
      ########################################################################
    else                                                                     :
      ########################################################################
      M  = f"Leave {M}"
    ##########################################################################
    self . emitLog . emit     ( M                                            )
    ##########################################################################
    return
  ############################################################################
  def FocusIn             ( self                                           ) :
    ##########################################################################
    if                    ( not self . isPrepared ( )                      ) :
      return False
    ##########################################################################
    self . setActionLabel ( "Label" , self . windowTitle ( )                 )
    self . AttachActions  ( True                                             )
    ##########################################################################
    return True
  ############################################################################
  def FocusOut             ( self                                          ) :
    ##########################################################################
    if                     ( not self . isPrepared ( )                     ) :
      return True
    ##########################################################################
    if                     ( not self . AtMenu                             ) :
      self . AttachActions ( False                                           )
    ##########################################################################
    return False
  ############################################################################
  def closeEvent             ( self , event                                ) :
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . defaultCloseEvent (        event                                  )
    ##########################################################################
    return
  ############################################################################
  def reload                 ( self                                        ) :
    ##########################################################################
    global SystemUUIDs
    ##########################################################################
    self   . clear           (                                               )
    ##########################################################################
    for UUID in SystemUUIDs                                                  :
      ########################################################################
      item = QTreeWidgetItem (                                               )
      item . setText         ( 0 , str ( UUID )                              )
      item . setData         ( 0 , Qt . UserRole , UUID                      )
      self . addTopLevelItem ( item                                          )
    ##########################################################################
    return
  ############################################################################
  def startup                ( self                                        ) :
    ##########################################################################
    self . emitReload . emit (                                               )
    ##########################################################################
    return
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( "UuidListings" , 1                               )
    ##########################################################################
    return
  ############################################################################
  def InsertItem              ( self                                       ) :
    ##########################################################################
    item = QTreeWidgetItem    (                                              )
    item . setData            ( 0 , Qt . UserRole , 0                        )
    self . addTopLevelItem    ( item                                         )
    line = self . setLineEdit ( item                                       , \
                                0                                          , \
                                "editingFinished"                          , \
                                self . nameChanged                           )
    line . setFocus           ( Qt . TabFocusReason                          )
    ##########################################################################
    return
  ############################################################################
  def nameChanged                 ( self                                   ) :
    ##########################################################################
    global SystemUUIDs
    ##########################################################################
    if                            ( not self . isItemPicked ( )            ) :
      return False
    ##########################################################################
    item   = self . CurrentItem   [ "Item"                                   ]
    column = self . CurrentItem   [ "Column"                                 ]
    line   = self . CurrentItem   [ "Widget"                                 ]
    text   = self . CurrentItem   [ "Text"                                   ]
    msg    = line . text          (                                          )
    uuid   = self . itemUuid      ( item , 0                                 )
    ##########################################################################
    if                            ( len ( msg ) <= 0                       ) :
      ########################################################################
      if                          ( uuid <= 0                              ) :
        self . removeTopLevelItem ( item                                     )
        return
    ##########################################################################
    uuid   = int                  ( msg                                      )
    item   . setText              ( column ,                 msg             )
    item   . setData              ( column , Qt . UserRole , uuid            )
    ##########################################################################
    self   . removeParked         (                                          )
    ##########################################################################
    SystemUUIDs . append          ( uuid                                     )
    ##########################################################################
    return
  ############################################################################
  def PasteItems                        ( self                             ) :
    ##########################################################################
    global SystemUUIDs
    ##########################################################################
    T     = qApp . clipboard ( ) . text (                                    )
    ##########################################################################
    if                                  ( len ( T ) <= 0                   ) :
      return
    ##########################################################################
    LINEs = T . split                   ( "\n"                               )
    if                                  ( len ( LINEs ) <= 0               ) :
      return
    ##########################################################################
    for L in LINEs                                                           :
      ########################################################################
      try                                                                    :
        ######################################################################
        U           = int               ( L                                  )
        SystemUUIDs . append            ( U                                  )
        ######################################################################
      except                                                                 :
        continue
    ##########################################################################
    self . restart                      (                                    )
    ##########################################################################
    return
  ############################################################################
  def DeleteItems                ( self                                    ) :
    ##########################################################################
    global SystemUUIDs
    ##########################################################################
    items = self . selectedItems (                                           )
    if                           ( len ( items ) <= 0                      ) :
      return
    ##########################################################################
    for item in items                                                        :
      ########################################################################
      L   = item . text          ( 0                                         )
      U   = int                  ( L                                         )
      SystemUUIDs . remove       ( U                                         )
    ##########################################################################
    self . restart               (                                           )
    ##########################################################################
    return
  ############################################################################
  def ClearAllItems       ( self                                           ) :
    ##########################################################################
    SystemUUIDs =         [                                                  ]
    self        . restart (                                                  )
    ##########################################################################
    return
  ############################################################################
  def Menu                         ( self , pos                            ) :
    ##########################################################################
    global SystemUUIDs
    ##########################################################################
    if                             ( not self . isPrepared ( )             ) :
      return False
    ##########################################################################
    doMenu = self . isFunction     ( self . HavingMenu                       )
    if                             ( not doMenu                            ) :
      return False
    ##########################################################################
    self   . Notify                ( 0                                       )
    ##########################################################################
    items , atItem , uuid = self . GetMenuDetails ( 0                        )
    CT     = qApp . clipboard ( ) . text (                                   )
    ##########################################################################
    mm     = MenuManager           ( self                                    )
    ##########################################################################
    self   . AppendRefreshAction   ( mm , 1001                               )
    self   . AppendInsertAction    ( mm , 1101                               )
    ##########################################################################
    if                             ( atItem not in self . EmptySet         ) :
      ########################################################################
      self . AppendDeleteAction    ( mm , 1202                               )
    ##########################################################################
    self   . AppendClearAllAction  ( mm , 1201                               )
    ##########################################################################
    if                             ( len ( CT ) > 0                        ) :
      ########################################################################
      mm   . addSeparator          (                                         )
      MSG  = self . getMenuItem    ( "PasteInto"                             )
      icon = QIcon                 ( ":/images/paste.png"                    )
      mm   . addActionWithIcon     ( 1102 , icon , MSG                       )
    ##########################################################################
    mm     . addSeparator          (                                         )
    self   . DockingMenu           ( mm                                      )
    ##########################################################################
    self   . AtMenu = True
    ##########################################################################
    mm     . setFont               ( self    . menuFont ( )                  )
    aa     = mm . exec_            ( QCursor . pos      ( )                  )
    at     = mm . at               ( aa                                      )
    ##########################################################################
    self   . AtMenu = False
    ##########################################################################
    if                             ( self . RunDocking   ( mm , aa )       ) :
      return True
    ##########################################################################
    if                             ( at == 1001                            ) :
      ########################################################################
      self . startup               (                                         )
      ########################################################################
      return True
    ##########################################################################
    if                             ( at == 1101                            ) :
      self . InsertItem            (                                         )
      return True
    ##########################################################################
    if                             ( at == 1102                            ) :
      self . PasteItems            (                                         )
      return True
    ##########################################################################
    if                             ( at == 1201                            ) :
      self . ClearAllItems         (                                         )
      return True
    ##########################################################################
    if                             ( at == 1202                            ) :
      ########################################################################
      uxid        = atItem . text  ( 0                                       )
      uuid        = int            ( uxid                                    )
      ########################################################################
      SystemUUIDs . remove         ( uuid                                    )
      ########################################################################
      self . startup               (                                         )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
