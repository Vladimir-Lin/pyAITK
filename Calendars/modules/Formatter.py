# -*- coding: utf-8 -*-
##############################################################################
## 曆法格式器
##############################################################################
## import time
## import datetime
## import pytz
##############################################################################
class Formatter    (                                                       ) :
  ############################################################################
  def __init__     ( self                                                  ) :
    return
  ############################################################################
  def __del__      ( self                                                  ) :
    return
  ############################################################################
  def ReplaceString   ( self , KEY , VALUE , SOURCE                        ) :
    ##########################################################################
    S   = SOURCE
    ##########################################################################
    if                ( KEY in S                                           ) :
      ########################################################################
      S = S . replace ( KEY , VALUE                                          )
    ##########################################################################
    return S
  ############################################################################
  def ReplacePairs             ( self , KV , SOURCE                        ) :
    ##########################################################################
    S   = SOURCE
    ##########################################################################
    for K in KV . keys         (                                           ) :
      ########################################################################
      S = self . ReplaceString ( K , KV [ K ] , S                            )
    ##########################################################################
    return S
  ############################################################################
  def toHours    ( self , seconds                                          ) :
    ##########################################################################
    try                                                                      :
      ########################################################################
      HOUR = int ( int ( seconds ) / 3600                                    )
      ########################################################################
    except                                                                   :
      return 0
    ##########################################################################
    return HOUR
  ############################################################################
  def toMinutes  ( self , seconds                                          ) :
    ##########################################################################
    try                                                                      :
      ########################################################################
      HOUR = int ( int ( seconds ) / 3600                                    )
      SECS = int ( int ( seconds ) - ( HOUR * 3600 )                         )
      MINS = int ( SECS            /  60                                     )
      ########################################################################
    except                                                                   :
      return 0
    ##########################################################################
    return MINS
  ############################################################################
  def toSeconds  ( self , seconds                                          ) :
    ##########################################################################
    try                                                                      :
      SECS = int ( int ( seconds ) % 60                                      )
    except                                                                   :
      return 0
    ##########################################################################
    return SECS
  ############################################################################
  def numberToText ( self , N                                              ) :
    return f"{N}"
  ############################################################################
  def toTwoDigit ( self , value                                            ) :
    ##########################################################################
    try                                                                      :
      V = int    ( value                                                     )
    except                                                                   :
      return "00"
    ##########################################################################
    if           ( V <= 0                                                  ) :
      return "00"
    ##########################################################################
    if           ( V > 9                                                   ) :
      return f"{V}"
    ##########################################################################
    return   f"0{V}"
  ############################################################################
  def toHMS                ( self , inputString , seconds                  ) :
    ##########################################################################
    KV = { "%H" : self . toTwoDigit ( self . toHours   ( seconds ) )       , \
           "%M" : self . toTwoDigit ( self . toMinutes ( seconds ) )       , \
           "%S" : self . toTwoDigit ( self . toSeconds ( seconds ) )         }
    ##########################################################################
    return self . ReplacePairs ( KV , inputString                            )
  ############################################################################
  def toRemainDigits  ( self , day , digits                                ) :
    ##########################################################################
    if                ( int ( digits ) <= 0                                ) :
      ########################################################################
      S = f"{day}"
      S = S . replace ( "0." , ""                                            )
      ########################################################################
      return S
    ##########################################################################
    V   = day
    ##########################################################################
    for i in range    ( 0 , int ( digits )                                 ) :
      ########################################################################
      V = V * 10
    ##########################################################################
    D   = int         ( V                                                    )
    S   = f"{D}"
    ##########################################################################
    return S . zfill  ( digits                                               )
  ############################################################################
  def FormatRemainDay                  ( self , KEY , inputString , day    ) :
    ##########################################################################
    V          = inputString
    LEN        = len                   ( V                                   )
    ##########################################################################
    if                                 ( KEY not in V                      ) :
      return V
    ##########################################################################
    DIGITs     = 0
    ##########################################################################
    BracketAt  = V         . index     ( KEY                                 )
    BracketAt  = BracketAt + len       ( KEY                                 )
    ##########################################################################
    if ( ( BracketAt < LEN ) and ( V [ BracketAt ] == "(" ) )                :
      ########################################################################
      try                                                                    :
        ######################################################################
        EAT    = V    . index          ( ")" , BracketAt                     )
        DSTR   = V                     [ BracketAt + 1 : EAT                 ]
        DIGITs = int                   ( DSTR                                )
        KEY    = f"{KEY}({DSTR})"
        ######################################################################
      except                                                                 :
        pass
    ##########################################################################
    S          = self . toRemainDigits ( day , DIGITs                        )
    ##########################################################################
    V          = V    . replace        ( KEY , S                             )
    ##########################################################################
    return V
  ############################################################################
  def toRemainDay                ( self , inputString , day , KEY = "%D"   ) :
    ##########################################################################
    V   = inputString
    ##########################################################################
    while                        ( "%D" in V                               ) :
      V = self . FormatRemainDay ( KEY , V , day                             )
    ##########################################################################
    return V
  ############################################################################
  def Keywords                ( self                                       ) :
    raise NotImplementedError (                                              )
  ############################################################################
  def toString                ( self , Calendar , Format                   ) :
    raise NotImplementedError (                                              )
##############################################################################
