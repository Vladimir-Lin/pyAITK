# -*- coding: utf-8 -*-
##############################################################################
## 全新世曆法
##############################################################################
import  json
##############################################################################
from .. Base      import Base      as Base
from .. Formatter import Formatter as Formatter
from .. Parser    import Parser    as Parser
##############################################################################
class HoloceneFormatter  ( Formatter                                       ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    ##########################################################################
    return
  ############################################################################
  def Keywords ( self                                                      ) :
    return     [ "%J" , "%R" , "%D" , "%H" , "%M" , "%S"                     ]
  ############################################################################
  def toString                ( self , Calendar , Format                   ) :
    ##########################################################################
    V   = Calendar . Value
    R   = Calendar . Remain
    N   = Calendar . Norm
    S   = Format
    ##########################################################################
    if                        ( "%J" in S                                  ) :
      ########################################################################
      S = S     . replace     ( "%J" , f"{V}"                                )
    ##########################################################################
    if                        ( "%R" in S                                  ) :
      ########################################################################
      S = S     . replace     ( "%R" , f"{R}"                                )
    ##########################################################################
    S   = self  . toRemainDay ( S , N                                        )
    ##########################################################################
    return self . toHMS       ( S , R                                        )
##############################################################################
class HoloceneParser     ( Parser                                          ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    ##########################################################################
    return
  ############################################################################
  def Keywords ( self                                                      ) :
    return     [ "%J" , "%R" , "%H" , "%M" , "%S"                            ]
  ############################################################################
  def Decoder                       ( self                                 , \
                                      Calendar                             , \
                                      inputString                          , \
                                      Format                               ) :
    ##########################################################################
    K        = self . KeywordExists ( Format , self . Keywords ( ) , 0       )
    ##########################################################################
    if                              ( len ( K ) <= 0                       ) :
      return False
    ##########################################################################
    R        = self . Dissects      ( Format , self . Keywords ( )           )
    ##########################################################################
    if                              ( len ( R ) <= 0                       ) :
      return False
    ##########################################################################
    J        = self . Parsing       ( inputString , K , R                    )
    S        = J    . keys          (                                        )
    ##########################################################################
    if                              ( len ( S ) <= 0                       ) :
      return False
    ##########################################################################
    XJD      = Calendar . Value
    REMAIN   = Calendar . Remain
    HOURS    = self     . toHours   ( REMAIN                                 )
    MINS     = self     . toMinutes ( REMAIN                                 )
    SECS     = self     . toSeconds ( REMAIN                                 )
    ##########################################################################
    for KEY in S                                                             :
      ########################################################################
      V            = J              [ KEY                                    ]
      ########################################################################
      if                            ( "%R" == KEY                          ) :
        ######################################################################
        try                                                                  :
          REMAIN   = int            ( V                                      )
        except                                                               :
          return False
        ######################################################################
        HOURS      = self . toHours   ( REMAIN                               )
        MINS       = self . toMinutes ( REMAIN                               )
        SECS       = self . toSeconds ( REMAIN                               )
      ########################################################################
      elif                          ( "%J" == KEY                          ) :
        ######################################################################
        if                          ( "." in V                             ) :
          ####################################################################
          L        = V . split      ( "."                                    )
          if                        ( len ( L ) != 2                       ) :
            return False
          ####################################################################
          try                                                                :
            XJD    = int            ( L [ 0 ]                                )
          except                                                             :
            return False
          ####################################################################
          F        = L              [ 1                                      ]
          F        = f"0.{F}"
          ####################################################################
          try                                                                :
            REMAIN = int            ( float ( F ) * 86400                    )
          except                                                             :
            return False
          ####################################################################
          HOURS    = self . toHours   ( REMAIN                               )
          MINS     = self . toMinutes ( REMAIN                               )
          SECS     = self . toSeconds ( REMAIN                               )
          ####################################################################
        else                                                                 :
          ####################################################################
          try                                                                :
            XJD    = int            ( V                                      )
          except                                                             :
            return False
      ########################################################################
      elif                          ( "%H" == KEY                          ) :
        ######################################################################
        try                                                                  :
          HOURS    = int            ( V                                      )
        except                                                               :
          return False
      ########################################################################
      elif                          ( "%M" == KEY                          ) :
        ######################################################################
        try                                                                  :
          MINS     = int            ( V                                      )
        except                                                               :
          return False
      ########################################################################
      elif                          ( "%S" == KEY                          ) :
        ######################################################################
        try                                                                  :
          SECS     = int            ( V                                      )
        except                                                               :
          return False
    ##########################################################################
    REMAIN         =          int   ( HOURS * 3600                           )
    REMAIN         = REMAIN + int   ( MINS  *  60                            )
    REMAIN         = REMAIN + int   ( SECS                                   )
    ##########################################################################
    Calendar       . setXJD         ( XJD , REMAIN                           )
    ##########################################################################
    return True
##############################################################################
class Holocene                   ( Base                                    ) :
  ############################################################################
  def __init__                   ( self                                    ) :
    ##########################################################################
    super ( ) . __init__         (                                           )
    ##########################################################################
    self      . YEAR   = 0
    self      . MONTH  = 0
    self      . DAY    = 0
    self      . HOUR   = 0
    self      . MINUTE = 0
    self      . SECOND = 0
    ##########################################################################
    self      . setFormat        ( "%J.%D(6)"                                )
    self      . InstallFormatter ( HoloceneFormatter ( )                     )
    self      . InstallParser    ( HoloceneParser    ( )                     )
    ##########################################################################
    return
  ############################################################################
  def __del__      ( self                                                  ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def __str__              ( self                                          ) :
    return self . toString (                                                 )
  ############################################################################
  def __repr__          ( self                                             ) :
    return json . dumps ( self . toJson ( )                                  )
  ############################################################################
  def typeStrings ( self                                                   ) :
    return        [ "Holocene" , "HE" , "BHE"                                ]
  ############################################################################
  def hasLeapYear ( self                                                   ) :
    return True
  ############################################################################
  def isLeapYear  ( self                                                   ) :
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return False
  ############################################################################
  def hasTimeZone ( self                                                   ) :
    return True
  ############################################################################
  def XJDsToStarDate ( self , XJDV                                         ) :
    ##########################################################################
    try                                                                      :
      ########################################################################
      XJDs = int     (        XJDV                                           )
      ########################################################################
    except                                                                   :
      return 0
    ##########################################################################
    return int       ( XJDs + 1420092166837320000                            )
  ############################################################################
  def StarDateToXJDs ( self                                                ) :
    return int       ( self . Stardate - 1420092166837320000                 )
  ############################################################################
  def valueChanged                 ( self                                  ) :
    ##########################################################################
    XJDS   = self . StarDateToXJDs (                                         )
    ##########################################################################
    self   . Value  = 0
    self   . Remain = 0
    self   . Norm   = 0.0
    ##########################################################################
    try                                                                      :
      ########################################################################
      self . Value  = int          ( XJDS / 86400                            )
      self . Remain = int          ( XJDS % 86400                            )
      self . Norm   = float        ( float ( self . Remain ) / 86400.0       )
      ########################################################################
    except                                                                   :
      pass
    ##########################################################################
    return
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Type"      : self . typeStrings ( )                        , \
               "Signature" : self . Signature                              , \
               "StarDate"  : self . Stardate                               , \
               "TimeZone"  : self . TimeZone                               , \
               "TzOffset"  : self . TzShift                                , \
               "Format"    : self . Format                                 , \
               "JD"        : self . Value                                  , \
               "Remain"    : self . Remain                                 , \
               "Norm"      : self . Norm                                     }
  ############################################################################
  def toString                  ( self , format = ""                       ) :
    ##########################################################################
    MOD   = self . defaultFormatter
    ##########################################################################
    if                          ( MOD in [ False , None ]                  ) :
      raise ModuleNotFoundError (                                            )
    ##########################################################################
    FMT   = format
    if                          ( len ( FMT ) <= 0                         ) :
      FMT = self . Format
    ##########################################################################
    return MOD . toString       ( self , FMT                                 )
  ############################################################################
  def fromString                ( self , inputString , format = ""         ) :
    ##########################################################################
    MOD   = self . defaultParser
    ##########################################################################
    if                          ( MOD in [ False , None ]                  ) :
      raise ModuleNotFoundError (                                            )
    ##########################################################################
    FMT   = format
    if                          ( len ( FMT ) <= 0                         ) :
      FMT = self . Format
    ##########################################################################
    return MOD . Decoder        ( self , inputString , FMT                   )
  ############################################################################
  def setXJD                     ( self , xjd , remain                     ) :
    ##########################################################################
    SD   = int                   ( int ( xjd * 86400 ) + remain              )
    SD   = self . XJDsToStarDate ( SD                                        )
    self . setStarDate           ( SD                                        )
    ##########################################################################
    return
  ############################################################################
  def setValue             ( self , key , value                            ) :
    ##########################################################################
    K        = key
    K        = K . lower   (                                                 )
    ##########################################################################
    if                     ( key in [ "jd" , "value" , "j" ]               ) :
      ########################################################################
      try                                                                    :
        ######################################################################
        V    = int         ( value                                           )
        self . Value  = V
        ######################################################################
      except                                                                 :
        pass
    ##########################################################################
    if                     ( key in [ "remain" , "r" ]                     ) :
      ########################################################################
      try                                                                    :
        ######################################################################
        V    = int         ( value                                           )
        self . Remain  = V
        ######################################################################
      except                                                                 :
        pass
    ##########################################################################
    return self . Stardate
  ############################################################################
  def getValue      ( self , key                                           ) :
    ##########################################################################
    K = key
    K = K . lower   (                                                        )
    ##########################################################################
    if              ( key in [ "sd" , "stardate"                         ] ) :
      return int    ( self . Stardate                                        )
    ##########################################################################
    if              ( key in [ "year"                                    ] ) :
      return int    ( self . YEAR                                            )
    ##########################################################################
    if              ( key in [ "month"                                   ] ) :
      return int    ( self . MONTH                                           )
    ##########################################################################
    if              ( key in [ "day"                                     ] ) :
      return int    ( self . DAY                                             )
    ##########################################################################
    if              ( key in [ "hour"                                    ] ) :
      return int    ( self . HOUR                                            )
    ##########################################################################
    if              ( key in [ "minute"                                  ] ) :
      return int    ( self . MINUTE                                          )
    ##########################################################################
    if              ( key in [ "second"                                  ] ) :
      return int    ( self . SECOND                                          )
    ##########################################################################
    if              ( key in [ "tzdiff" , "tzshift"                      ] ) :
      return int    ( self . TzShift                                         )
    ##########################################################################
    if              ( key in [ "timezone" , "tz"                         ] ) :
      return str    ( self . TimeZone                                        )
    ##########################################################################
    if              ( key in [ "format"                                  ] ) :
      return str    ( self . Format                                          )
    ##########################################################################
    raise NameError (                                                        )
##############################################################################
