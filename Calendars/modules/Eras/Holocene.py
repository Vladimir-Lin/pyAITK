# -*- coding: utf-8 -*-
##############################################################################
## 全新世曆法
##############################################################################
import  json
##############################################################################
from .. Base      import Base      as Base
from .. Formatter import Formatter as Formatter
from .. Parser    import Parser    as Parser
##############################################################################
class HoloceneFormatter  ( Formatter                                       ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    ##########################################################################
    return
  ############################################################################
  def Keywords ( self                                                      ) :
    return     [ "%(HE)"                                                   , \
                 "%(R)"                                                    , \
                 "%(Y)"                                                    , \
                 "%(yyyyy)"                                                , \
                 "%(MM)"                                                   , \
                 "%(M)"                                                    , \
                 "%(DD)"                                                   , \
                 "%(D)"                                                    , \
                 "%(W)"                                                    , \
                 "%(WL)"                                                   , \
                 "%(WS)"                                                   , \
                 "%(AP)"                                                   , \
                 "%(hh)"                                                   , \
                 "%(hm)"                                                   , \
                 "%(hz)"                                                   , \
                 "%(h)"                                                    , \
                 "%(mm)"                                                   , \
                 "%(m)"                                                    , \
                 "%(ss)"                                                   , \
                 "%(s)"                                                    , \
                 "%(SD)"                                                   , \
                 "%(TZ)"                                                     ]
  ############################################################################
  def heToEra            ( self , Calendar , Format                        ) :
    ##########################################################################
    V      = Format
    ##########################################################################
    if                   ( "%(HE)" in V                                    ) :
      ########################################################################
      Y    = Calendar . YEAR
      HE   = Calendar . HES
      ########################################################################
      if                 ( Y < 0                                           ) :
        HE = Calendar . BHE
      ########################################################################
      V    = V . replace ( "%(HE)" , f"{HE}"                                 )
    ##########################################################################
    return V
  ############################################################################
  def heToAMPM           ( self , Calendar , Format                        ) :
    ##########################################################################
    V      = Format
    ##########################################################################
    if                   ( "%(AP)" in V                                    ) :
      ########################################################################
      H    = Calendar . HOUR
      AP   = Calendar . Morning
      ########################################################################
      if                 ( H >= 12                                         ) :
        AP = Calendar . Afternoon
      ########################################################################
      V    = V . replace ( "%(AP)" , f"{AP}"                                 )
    ##########################################################################
    return V
  ############################################################################
  def heToWeekdays       ( self , Calendar , Format                        ) :
    ##########################################################################
    V      = Format
    WD     = Calendar . WEEKDAY
    WDL    = Calendar . WeekDays
    WDS    = Calendar . ShortWeekDays
    ##########################################################################
    if                   ( "%(W)" in V                                     ) :
      ########################################################################
      WX   = WDL         [ WD                                                ]
      ########################################################################
      V    = V . replace ( "%(W)"  , f"{WX}"                                 )
    ##########################################################################
    if                   ( "%(WL)" in V                                    ) :
      ########################################################################
      WX   = WDL         [ WD                                                ]
      ########################################################################
      V    = V . replace ( "%(WL)" , f"{WX}"                                 )
    ##########################################################################
    if                   ( "%(WS)" in V                                    ) :
      ########################################################################
      WX   = WDS         [ WD                                                ]
      ########################################################################
      V    = V . replace ( "%(WS)" , f"{WX}"                                 )
    ##########################################################################
    return V
  ############################################################################
  def heToTimeZone    ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    T   = Calendar . TimeZone
    ##########################################################################
    if                ( "%(TZ)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(TZ)" , f"{T}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def heToYears       ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    Y   = Calendar . YEAR
    ##########################################################################
    if                ( "%(Y)" in V                                        ) :
      ########################################################################
      P   = Y
      ########################################################################
      if              ( P < 0                                              ) :
        ######################################################################
        P = -P
      ########################################################################
      V = V . replace ( "%(Y)"     , f"{P}"                                  )
    ##########################################################################
    if                ( "%(yyyyy)"  in V                                   ) :
      ########################################################################
      P   = Y
      ########################################################################
      if              ( P < 0                                              ) :
        ######################################################################
        P = -P
      ########################################################################
      V = V . replace ( "%(yyyyy)" , f"{P:05}"                               )
    ##########################################################################
    if                ( "%(R)"  in V                                       ) :
      ########################################################################
      V = V . replace ( "%(R)"     , f"{Y}"                                  )
    ##########################################################################
    return V
  ############################################################################
  def heToMonths      ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    M   = Calendar . MONTH
    ##########################################################################
    if                ( "%(MM)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(MM)" , self . toTwoDigit ( M )                    )
    ##########################################################################
    if                ( "%(M)"  in V                                       ) :
      ########################################################################
      V = V . replace ( "%(M)"  , f"{M}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def heToDays        ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    D   = Calendar . DAY
    ##########################################################################
    if                ( "%(DD)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(DD)" , self . toTwoDigit ( D )                    )
    ##########################################################################
    if                ( "%(D)"  in V                                       ) :
      ########################################################################
      V = V . replace ( "%(D)"  , f"{D}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def heToHours       ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    H   = Calendar . HOUR
    ##########################################################################
    if                ( "%(hh)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(hh)" , self . toTwoDigit ( H )                    )
    ##########################################################################
    if                ( "%(hm)" in V                                       ) :
      ########################################################################
      M = int         ( H % 12                                               )
      if              ( 0 == M                                             ) :
        M = 12
      ########################################################################
      V = V . replace ( "%(hm)" , self . toTwoDigit ( M )                    )
    ##########################################################################
    if                ( "%(h)"  in V                                       ) :
      ########################################################################
      V = V . replace ( "%(h)"  , f"{H}"                                     )
    ##########################################################################
    if                ( "%(hz)" in V                                       ) :
      ########################################################################
      M = int         ( H % 12                                               )
      if              ( 0 == M                                             ) :
        M = 12
      ########################################################################
      V = V . replace ( "%(hz)" , f"{M}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def heToMinutes     ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    M   = Calendar . MINUTE
    ##########################################################################
    if                ( "%(mm)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(mm)" , self . toTwoDigit ( M )                    )
    ##########################################################################
    if                ( "%(m)"  in V                                       ) :
      ########################################################################
      V = V . replace ( "%(m)"  , f"{M}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def heToSeconds     ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    S   = Calendar . SECOND
    ##########################################################################
    if                ( "%(ss)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(ss)" , self . toTwoDigit ( S )                    )
    ##########################################################################
    if                ( "%(s)"  in V                                       ) :
      ########################################################################
      V = V . replace ( "%(s)"  , f"{S}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def heToStardate    ( self , Calendar , Format                           ) :
    ##########################################################################
    V   = Format
    S   = Calendar . Stardate
    ##########################################################################
    if                ( "%(SD)" in V                                       ) :
      ########################################################################
      V = V . replace ( "%(SD)" , f"{S}"                                     )
    ##########################################################################
    return V
  ############################################################################
  def toString                ( self , Calendar , Format                   ) :
    ##########################################################################
    S   = Format
    ##########################################################################
    S   = self . heToYears    ( Calendar , S                                 )
    S   = self . heToMonths   ( Calendar , S                                 )
    S   = self . heToDays     ( Calendar , S                                 )
    S   = self . heToHours    ( Calendar , S                                 )
    S   = self . heToMinutes  ( Calendar , S                                 )
    S   = self . heToSeconds  ( Calendar , S                                 )
    S   = self . heToStardate ( Calendar , S                                 )
    S   = self . heToTimeZone ( Calendar , S                                 )
    S   = self . heToWeekdays ( Calendar , S                                 )
    S   = self . heToAMPM     ( Calendar , S                                 )
    S   = self . heToEra      ( Calendar , S                                 )
    ##########################################################################
    return S
##############################################################################
class HoloceneParser     ( Parser                                          ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    ##########################################################################
    return
  ############################################################################
  def Keywords ( self                                                      ) :
    return     [ "%(R)"                                                    , \
                 "%(M)"                                                    , \
                 "%(D)"                                                    , \
                 "%(h)"                                                    , \
                 "%(m)"                                                    , \
                 "%(s)"                                                    , \
                 "%(TZ)"                                                     ]
  ############################################################################
  def Decoder                       ( self                                 , \
                                      Calendar                             , \
                                      inputString                          , \
                                      Format                               ) :
    ##########################################################################
    K        = self . KeywordExists ( Format , self . Keywords ( ) , 0       )
    ##########################################################################
    if                              ( len ( K ) <= 0                       ) :
      return False
    ##########################################################################
    R        = self . Dissects      ( Format , self . Keywords ( )           )
    ##########################################################################
    if                              ( len ( R ) <= 0                       ) :
      return False
    ##########################################################################
    J        = self . Parsing       ( inputString , K , R                    )
    S        = J    . keys          (                                        )
    ##########################################################################
    if                              ( len ( S ) <= 0                       ) :
      return False
    ##########################################################################
    for KEY in S                                                             :
      ########################################################################
      V            = J              [ KEY                                    ]
      ########################################################################
      if                            ( "%(R)" == KEY                        ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          X        = int            ( V                                      )
          Calendar . YEAR = X
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif                          ( "%(M)" == KEY                        ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          X        = int            ( V                                      )
          ####################################################################
          if                        ( X < 1                                ) :
            ##################################################################
            X      = 1
            ##################################################################
          elif                      ( X > 12                               ) :
            ##################################################################
            X      = 12
          ####################################################################
          Calendar . MONTH = X
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif                          ( "%(D)" == KEY                        ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          X        = int            ( V                                      )
          ####################################################################
          if                        ( X < 1                                ) :
            ##################################################################
            X      = 1
            ##################################################################
          elif                      ( X > 31                               ) :
            ##################################################################
            X      = 31
          ####################################################################
          Calendar . DAY = X
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif                          ( "%(h)" == KEY                        ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          X        = int            ( V                                      )
          ####################################################################
          if                        ( X < 0                                ) :
            ##################################################################
            X      = 0
            ##################################################################
          elif                      ( X > 23                               ) :
            ##################################################################
            X      = 23
          ####################################################################
          Calendar . HOUR = X
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif                          ( "%(m)" == KEY                        ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          X        = int            ( V                                      )
          ####################################################################
          if                        ( X < 0                                ) :
            ##################################################################
            X      = 0
            ##################################################################
          elif                      ( X > 59                               ) :
            ##################################################################
            X      = 59
          ####################################################################
          Calendar . MINUTE = X
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif                          ( "%(s)" == KEY                        ) :
        ######################################################################
        try                                                                  :
          ####################################################################
          X        = int            ( V                                      )
          ####################################################################
          if                        ( X < 0                                ) :
            ##################################################################
            X      = 0
            ##################################################################
          elif                      ( X > 59                               ) :
            ##################################################################
            X      = 59
          ####################################################################
          Calendar . SECOND = X
          ####################################################################
        except                                                               :
          pass
        ######################################################################
      elif                          ( "%(TZ)" == KEY                       ) :
        ######################################################################
        Calendar . setTimeZone      ( f"{V}"                                 )
    ##########################################################################
    Calendar     . localToStardate  (                                        )
    Calendar     . WEEKDAY = Calendar . toWeekOfDay ( Calendar . Stardate    )
    ##########################################################################
    return True
##############################################################################
class Holocene                   ( Base                                    ) :
  ############################################################################
  def __init__                   ( self                                    ) :
    ##########################################################################
    super ( ) . __init__         (                                           )
    ##########################################################################
    self      . YEAR          = 0
    self      . MONTH         = 0
    self      . DAY           = 0
    self      . HOUR          = 0
    self      . MINUTE        = 0
    self      . SECOND        = 0
    self      . WEEKDAY       = 0
    self      . HES           = "HE"
    self      . BHE           = "BHE"
    self      . Morning       = "AM"
    self      . Afternoon     = "PM"
    ##########################################################################
    self      . WeekDays      = { 1 : "Monday"                             , \
                                  2 : "Tuesday"                            , \
                                  3 : "Wednesday"                          , \
                                  4 : "Thursday"                           , \
                                  5 : "Friday"                             , \
                                  6 : "Saturday"                           , \
                                  7 : "Sunday"                               }
    ##########################################################################
    self      . ShortWeekDays = { 1 : "Monday"                             , \
                                  2 : "Tuesday"                            , \
                                  3 : "Wednesday"                          , \
                                  4 : "Thursday"                           , \
                                  5 : "Friday"                             , \
                                  6 : "Saturday"                           , \
                                  7 : "Sunday"                               }
    ##########################################################################
    self      . NonLeapYear   = [ 0 ,  31 ,  59 ,  90 , 120 , 151 , 181 ,    \
                                      212 , 243 , 273 , 304 , 334 , 365      ]
    self      . HasLeapYear   = [ 0 ,  31 ,  60 ,  91 , 121 , 152 , 182 ,    \
                                      213 , 244 , 274 , 305 , 335 , 366      ]
    self      . NonLeap1582   = [ 0 ,  31 ,  59 ,  90 , 120 , 151 , 181 ,    \
                                      212 , 243 , 273 , 294 , 324 , 355      ]
    ##########################################################################
    FMT       = "%(yyyyy)/%(MM)/%(DD) %(W) %(AP) %(hh):%(mm):%(ss) %(TZ) %(HE) %(SD)"
    ##########################################################################
    self      . setFormat        ( FMT                                       )
    self      . InstallFormatter ( HoloceneFormatter ( )                     )
    self      . InstallParser    ( HoloceneParser    ( )                     )
    ##########################################################################
    return
  ############################################################################
  def __del__      ( self                                                  ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Configure ( self , JSOX                                              ) :
    ##########################################################################
    if          ( "HE"            in JSOX                                  ) :
      self . HES           = JSOX [ "HE"                                     ]
    ##########################################################################
    if          ( "BHE"           in JSOX                                  ) :
      self . BHE           = JSOX [ "BHE"                                    ]
    ##########################################################################
    if          ( "Morning"       in JSOX                                  ) :
      self . Morning       = JSOX [ "Morning"                                ]
    ##########################################################################
    if          ( "Afternoon"     in JSOX                                  ) :
      self . Afternoon     = JSOX [ "Afternoon"                              ]
    ##########################################################################
    if          ( "WeekDays"      in JSOX                                  ) :
      self . WeekDays      = JSOX [ "WeekDays"                               ]
    ##########################################################################
    if          ( "ShortWeekDays" in JSOX                                  ) :
      self . ShortWeekDays = JSOX [ "ShortWeekDays"                          ]
    ##########################################################################
    if          ( "TimeZone"      in JSOX                                  ) :
      ########################################################################
      TZ                   = JSOX [ "TimeZone"                               ]
      self . setTimeZone          ( f"{TZ}"                                  )
    ##########################################################################
    return
  ############################################################################
  def __str__              ( self                                          ) :
    return self . toString (                                                 )
  ############################################################################
  def __repr__          ( self                                             ) :
    return json . dumps ( self . toJson ( )                                  )
  ############################################################################
  def typeStrings ( self                                                   ) :
    return        [ "Holocene" , "HE"                                        ]
  ############################################################################
  def hasLeapYear ( self                                                   ) :
    return True
  ############################################################################
  def isLeapYear   ( self                                                  ) :
    ##########################################################################
    LP       = False
    FC       = int ( self . YEAR % 400                                       )
    MC       = int ( self . YEAR % 100                                       )
    QC       = int ( self . YEAR %   4                                       )
    ##########################################################################
    if             ( 0 == QC                                               ) :
      ########################################################################
      LP     = True
      ########################################################################
      if           ( 0 == MC                                               ) :
        ######################################################################
        LP   = False
        ######################################################################
        if         ( 0 == FC                                               ) :
          LP = True
    ##########################################################################
    return LP
  ############################################################################
  def hasTimeZone ( self                                                   ) :
    return True
  ############################################################################
  ## 當日秒數轉成HMS格式數據
  ############################################################################
  def heSodToHMS ( self , SOD                                              ) :
    ##########################################################################
    H = int      ( SOD / 3600                                                )
    M = int      ( SOD % 3600                                                )
    S = int      ( M   %   60                                                )
    M = int      ( M   /   60                                                )
    ##########################################################################
    return       ( H , M , S ,                                               )
  ############################################################################
  ## 定位月份位置
  ############################################################################
  def heSpotMonth    ( self , DAYS , MONTHs                                ) :
    ##########################################################################
    Month   = 1
    ##########################################################################
    while            ( Month <= 12                                         ) :
      ########################################################################
      B     = MONTHs [ Month - 1                                             ]
      E     = MONTHs [ Month                                                 ]
      ########################################################################
      if             ( ( DAYS >= B ) and ( DAYS < E )                      ) :
        return Month
      ########################################################################
      Month = Month + 1
      ########################################################################
    return -1
  ############################################################################
  def heNoLeapMonthDate    ( self , DAYS                                   ) :
    ##########################################################################
    M = self . heSpotMonth ( DAYS , self . NonLeapYear                       )
    ##########################################################################
    if                     ( M <= 0                                        ) :
      return               ( -1 , 0 ,                                        )
    ##########################################################################
    D = int                ( DAYS - self . NonLeapYear [ M - 1 ] + 1         )
    ##########################################################################
    return                 ( M , D ,                                         )
  ############################################################################
  def heLeapMonthDate      ( self , DAYS                                   ) :
    ##########################################################################
    M = self . heSpotMonth ( DAYS , self . HasLeapYear                       )
    ##########################################################################
    if                     ( M <= 0                                        ) :
      return               ( -1 , 0 ,                                        )
    ##########################################################################
    D = int                ( DAYS - self . HasLeapYear [ M - 1 ] + 1         )
    ##########################################################################
    return                 ( M , D ,                                         )
  ############################################################################
  def heNoLeapMonthDate1582    ( self , DAYS                               ) :
    ##########################################################################
    M     = self . heSpotMonth ( DAYS , self . NonLeap1582                   )
    ##########################################################################
    if                         ( M <= 0                                    ) :
      return                   ( -1 , 0 ,                                    )
    ##########################################################################
    if                         ( M == 10                                   ) :
      ########################################################################
      D   = int                ( DAYS - self . NonLeap1582 [ M - 1 ]         )
      ########################################################################
      if                       ( D < 4                                     ) :
        ######################################################################
        D = D + 1
        ######################################################################
      else                                                                   :
        ######################################################################
        D = D + 11
      ########################################################################
    else                                                                     :
      ########################################################################
      D   = int                ( DAYS - self . NonLeap1582 [ M - 1 ] + 1     )
    ##########################################################################
    return                     ( M , D ,                                     )
  ############################################################################
  def heLeap4Rule1      ( self , CDT  , YEAR , BASE                        ) :
    ##########################################################################
    DT            = int ( CDT  - BASE                                        )
    ##########################################################################
    if                  ( DT   < 31622400                                  ) :
      ########################################################################
      DAYS        = int ( DT   / 86400                                       )
      MTH , HDATE = self . heLeapMonthDate   ( DAYS                          )
      ########################################################################
    else                                                                     :
      ########################################################################
      NY          = int ( DT   - 31622400                                    )
      NY          = int ( NY   / 31536000                                    )
      NT          = int ( NY   * 31536000                                    )
      NT          = int ( NT   + 31622400                                    )
      BASE        = int ( BASE + NT                                          )
      YEAR        = int ( YEAR + NY + 1                                      )
      DT          = int ( CDT  - BASE                                        )
      DAYS        = int ( DT   / 86400                                       )
      ########################################################################
      MTH , HDATE = self . heNoLeapMonthDate ( DAYS                          )
    ##########################################################################
    SOY           = int ( DAYS * 86400                                       )
    SOD           = int ( CDT  - BASE - SOY                                  )
    DH , DM , DS  = self . heSodToHMS        ( SOD                           )
    ##########################################################################
    return              ( YEAR , MTH , HDATE , DH , DM , DS ,                )
  ############################################################################
  def heLeap4Rule2    ( self , CDT  , YEAR , BASE                          ) :
    ##########################################################################
    DT          = int ( CDT  - BASE                                          )
    NY          = int ( DT   / 31536000                                      )
    NT          = int ( NY   * 31536000                                      )
    BASE        = int ( BASE + NT                                            )
    YEAR        = int ( YEAR + NY                                            )
    DT          = int ( CDT  - BASE                                          )
    DAYS        = int ( DT   / 86400                                         )
    MTH , HDATE = self . heNoLeapMonthDate ( DAYS                            )
    SOY         = int ( DAYS * 86400                                         )
    SOD         = int ( CDT  - BASE - SOY                                    )
    ##########################################################################
    DH , DM , DS  = self . heSodToHMS      ( SOD                             )
    ##########################################################################
    return            ( YEAR , MTH , HDATE , DH , DM , DS ,                  )
  ############################################################################
  def heLeap4Rule3      ( self , CDT  , YEAR , BASE                        ) :
    ##########################################################################
    DT            = int ( CDT  - BASE                                        )
    ##########################################################################
    if                  ( DT   < 31622400                                  ) :
      ########################################################################
      DAYS        = int ( DT   / 86400                                       )
      ########################################################################
      MTH , HDATE = self . heLeapMonthDate       ( DAYS                      )
      ########################################################################
    elif                ( DT   < 63158400                                  ) :
      ########################################################################
      BASE        = 1420092365429318400
      YEAR        = 11581
      ########################################################################
      DT          = int ( CDT - BASE                                         )
      DAYS        = int ( DT  / 86400                                        )
      ########################################################################
      MTH , HDATE = self . heNoLeapMonthDate     ( DAYS                      )
      ########################################################################
    elif                ( DT   < 93830400                                  ) :
      ########################################################################
      BASE        = 1420092365460854400
      YEAR        = 11582
      ########################################################################
      DT          = int ( CDT - BASE                                         )
      DAYS        = int ( DT  / 86400                                        )
      ########################################################################
      MTH , HDATE = self . heNoLeapMonthDate1582 ( DAYS                      )
      ########################################################################
    else                                                                     :
      ########################################################################
      BASE        = 1420092365491526400
      YEAR        = 11583
      ########################################################################
      DT          = int ( CDT - BASE                                         )
      DAYS        = int ( DT  / 86400                                        )
      ########################################################################
      MTH , HDATE = self . heNoLeapMonthDate     ( DAYS                      )
    ##########################################################################
    SOY           = int ( DAYS * 86400                                       )
    SOD           = int ( CDT  - BASE - SOY                                  )
    ##########################################################################
    DH , DM , DS  = self . heSodToHMS            ( SOD                       )
    ##########################################################################
    return              ( YEAR , MTH , HDATE , DH , DM , DS ,                )
  ############################################################################
  def heLeap100Rule1             ( self , CDT , YEAR , BASE                ) :
    ##########################################################################
    DT   = int                   ( CDT  - BASE                               )
    ##########################################################################
    if                           ( DT   < 126144000                        ) :
      return self . heLeap4Rule2 ( CDT  , YEAR , BASE                        )
    ##########################################################################
    LX   = int                   ( DT   - 126144000                          )
    LX   = int                   ( LX   / 126230400                          )
    ##########################################################################
    LY   = int                   ( LX   + 1                                  )
    LY   = int                   ( LY   * 4                                  )
    ##########################################################################
    LT   = int                   ( LX   * 126230400                          )
    LT   = int                   ( LT   + 126144000                          )
    ##########################################################################
    BASE = int                   ( BASE + LT                                 )
    YEAR = int                   ( YEAR + LY                                 )
    ##########################################################################
    return   self . heLeap4Rule1 ( CDT  , YEAR , BASE                        )
  ############################################################################
  def heLeap100Rule2           ( self , CDT , YEAR , BASE                  ) :
    ##########################################################################
    DT   = int                 ( CDT  - BASE                                 )
    ##########################################################################
    LX   = int                 ( DT   / 126230400                            )
    LY   = int                 ( LX   * 4                                    )
    LT   = int                 ( LX   * 126230400                            )
    ##########################################################################
    BASE = int                 ( BASE + LT                                   )
    YEAR = int                 ( YEAR + LY                                   )
    ##########################################################################
    return self . heLeap4Rule1 ( CDT  , YEAR , BASE                          )
  ############################################################################
  def heLeap100Rule3               ( self , CDT  , YEAR  , BASE            ) :
    ##########################################################################
    if                             ( CDT >=         1420092365523062400    ) :
      return self . heLeap100Rule2 ( CDT  , 11584 , 1420092365523062400      )
    ##########################################################################
    elif                           ( CDT >=         1420092365397696000    ) :
      return self . heLeap4Rule3   ( CDT  , 11580 , 1420092365397696000      )
    ##########################################################################
    return   self . heLeap100Rule1 ( CDT  , 11500 , 1420092362873174400      )
  ############################################################################
  def heLeap400Rule1               ( self , CDT , YEAR , BASE              ) :
    ##########################################################################
    DT   = int                     ( CDT  - BASE                             )
    ##########################################################################
    QX   = int                     ( DT   / 12622780800                      )
    QY   = int                     ( QX   * 400                              )
    QT   = int                     ( QX   * 12622780800                      )
    ##########################################################################
    BASE = int                     ( BASE + QT                               )
    YEAR = int                     ( YEAR + QY                               )
    ##########################################################################
    DX   = int                     ( CDT  - BASE                             )
    ##########################################################################
    if                             ( DX   < 3155760000                     ) :
      return self . heLeap100Rule2 ( CDT  , YEAR , BASE                      )
    ##########################################################################
    CX   = int                     ( DX   - 3155760000                       )
    CX   = int                     ( CX   / 3155673600                       )
    ##########################################################################
    CY   = int                     ( CX   + 1                                )
    CY   = int                     ( CY   * 100                              )
    ##########################################################################
    CT   = int                     ( CX   * 3155673600                       )
    CT   = int                     ( CT   + 3155760000                       )
    ##########################################################################
    BASE = int                     ( BASE + CT                               )
    YEAR = int                     ( YEAR + CY                               )
    ##########################################################################
    return   self . heLeap100Rule1 ( CDT  , YEAR , BASE                      )
  ############################################################################
  def heLeap400Rule2             ( self , CDT , YEAR , BASE                ) :
    ##########################################################################
    DT   = int                   ( BASE - CDT                                )
    ##########################################################################
    QX   = int                   ( DT   / 12622780800                        )
    QX   = int                   ( QX   + 1                                  )
    QY   = int                   ( QX   * 400                                )
    QT   = int                   ( QX   * 12622780800                        )
    ##########################################################################
    BASE = int                   ( BASE - QT                                 )
    YEAR = int                   ( YEAR - QY                                 )
    ##########################################################################
    return self . heLeap400Rule1 ( CDT  , YEAR , BASE                        )
  ############################################################################
  def heLeap400Rule3               ( self , CDT , YEAR , BASE              ) :
    ##########################################################################
    if                             ( CDT >=         1420092362873174400    ) :
      return self . heLeap100Rule3 ( CDT  , 11500 , 1420092362873174400      )
    ##########################################################################
    elif                           ( CDT >=         1420092359717500800    ) :
      return self . heLeap100Rule1 ( CDT  , 11400 , 1420092359717500800      )
    ##########################################################################
    elif                           ( CDT >=         1420092356561827200    ) :
      return self . heLeap100Rule1 ( CDT  , 11300 , 1420092356561827200      )
    ##########################################################################
    return   self . heLeap100Rule2 ( CDT  , 11200 , 1420092353406067200      )
  ############################################################################
  def toHoloceneYNDHMS             ( self , CDT                            ) :
    ##########################################################################
    if                             ( CDT >=        1420092366027984000     ) :
      return self . heLeap400Rule1 ( CDT , 11600 , 1420092366027984000       )
    ##########################################################################
    elif                           ( CDT >=        1420092353406067200     ) :
      return self . heLeap400Rule3 ( CDT , 11200 , 1420092353406067200       )
    ##########################################################################
    elif                           ( CDT >=        1420091999968204800     ) :
      return self . heLeap400Rule1 ( CDT ,     0 , 1420091999968204800       )
    ##########################################################################
    return   self . heLeap400Rule2 ( CDT ,     0 , 1420091999968204800       )
  ############################################################################
  def heToSdNoLeapYear        ( self                                       , \
                                YEARS                                      , \
                                MONTHS                                     , \
                                DAY                                        , \
                                BYEAR                                      , \
                                BASE                                       ) :
    ##########################################################################
    MX   = int                ( MONTHS - 1                                   )
    ##########################################################################
    if                        ( MX < 0                                     ) :
      ########################################################################
      MX = 0
      ########################################################################
    elif                      ( MX > 11                                    ) :
      MX = 11
    ##########################################################################
    MB   = self . NonLeapYear [ MX                                           ]
    ME   = self . NonLeapYear [ MX + 1                                       ]
    ##########################################################################
    MT   = int                ( MB + DAY - 1                                 )
    ##########################################################################
    if                        ( MT < MB                                    ) :
      ########################################################################
      MT = MB
      ########################################################################
    if                        ( MT > ME                                    ) :
      ########################################################################
      MT = ME
    ##########################################################################
    DT   = int                ( MT * 86400                                   )
    ##########################################################################
    return int                ( BASE + DT                                    )
  ############################################################################
  def heToSdLeapYear          ( self                                       , \
                                YEARS                                      , \
                                MONTHS                                     , \
                                DAY                                        , \
                                BYEAR                                      , \
                                BASE                                       ) :
    ##########################################################################
    MX   = int                ( MONTHS - 1                                   )
    ##########################################################################
    if                        ( MX < 0                                     ) :
      ########################################################################
      MX = 0
      ########################################################################
    elif                      ( MX > 11                                    ) :
      ########################################################################
      MX = 11
    ##########################################################################
    MB   = self . HasLeapYear [ MX                                           ]
    ME   = self . HasLeapYear [ MX + 1                                       ]
    MT   = int                ( MB + DAY - 1                                 )
    ##########################################################################
    if                        ( MT < MB                                    ) :
      ########################################################################
      MT = MB
      ########################################################################
    if                        ( MT > ME                                    ) :
      ########################################################################
      MT = ME
    ##########################################################################
    DT   = int                ( MT * 86400                                   )
    ##########################################################################
    return int                ( BASE + DT                                    )
  ############################################################################
  def heToSdNoLeap1582          ( self                                     , \
                                  YEARS                                    , \
                                  MONTHS                                   , \
                                  DAY                                      , \
                                  BYEAR                                    , \
                                  BASE                                     ) :
    ##########################################################################
    MX     = int                ( MONTHS - 1                                 )
    ##########################################################################
    if                          ( MX < 0                                   ) :
      ########################################################################
      MX   = 0
      ########################################################################
    elif                        ( MX > 11                                  ) :
      ########################################################################
      MX   = 11
    ##########################################################################
    MB     = self . NonLeap1582 [ MX                                         ]
    ME     = self . NonLeap1582 [ MX + 1                                     ]
    ##########################################################################
    if                          ( MONTHS == 10                             ) :
      ########################################################################
      if                        ( DAY < 1                                  ) :
        ######################################################################
        MT = MB
        ######################################################################
      elif                      ( DAY < 5                                  ) :
        ######################################################################
        MT = int                ( MB + DAY - 1                               )
        ######################################################################
      elif                      ( DAY < 15                                 ) :
        ######################################################################
        MT = int                ( MB + 3                                     )
        ######################################################################
      elif                      ( DAY > 31                                 ) :
        ######################################################################
        MT = int                ( MB + 30                                    )
        ######################################################################
      else                                                                   :
        ######################################################################
        MT = int                ( MB + DAY - 11                              )
      ########################################################################
    else                                                                     :
      ########################################################################
      MT   = int                ( MB + DAY - 1                               )
      ########################################################################
      if                        ( MT < MB                                  ) :
        ######################################################################
        MT = MB
        ######################################################################
      elif                      ( MT > ME                                  ) :
        ######################################################################
        MT = ME
    ##########################################################################
    DT     = int                ( MT * 86400                                 )
    ##########################################################################
    return int                  ( BASE + DT                                  )
  ############################################################################
  def heToSdLeap4Rule1               ( self                                , \
                                       YEARS                               , \
                                       MONTHS                              , \
                                       DAY                                 , \
                                       BYEAR                               , \
                                       BASE                                ) :
    ##########################################################################
    DY    = int                      ( YEARS - BYEAR                         )
    ##########################################################################
    if                               ( DY == 0                             ) :
      return self . heToSdLeapYear   ( YEARS , MONTHS , DAY , BYEAR , BASE   )
    ##########################################################################
    QD    = int                      ( DY    * 365                           )
    QD    = int                      ( QD    + 1                             )
    ##########################################################################
    QT    = int                      ( QD    * 86400                         )
    ##########################################################################
    BYEAR = int                      ( BYEAR + DY                            )
    BASE  = int                      ( BASE  + QT                            )
    ##########################################################################
    return   self . heToSdNoLeapYear ( YEARS , MONTHS , DAY , BYEAR , BASE   )
  ############################################################################
  def heToSdLeap4Rule2             ( self                                  , \
                                     YEARS                                 , \
                                     MONTHS                                , \
                                     DAY                                   , \
                                     BYEAR                                 , \
                                     BASE                                  ) :
    ##########################################################################
    DY    = int                    ( YEARS - BYEAR                           )
    QD    = int                    ( DY    * 365                             )
    QT    = int                    ( QD    * 86400                           )
    ##########################################################################
    BYEAR = int                    ( BYEAR + DY                              )
    BASE  = int                    ( BASE  + QT                              )
    ##########################################################################
    return self . heToSdNoLeapYear ( YEARS , MONTHS , DAY , BYEAR , BASE     )
  ############################################################################
  def heToSdLeap100Rule1             ( self                                , \
                                       YEARS                               , \
                                       MONTHS                              , \
                                       DAY                                 , \
                                       BYEAR                               , \
                                       BASE                                ) :
    ##########################################################################
    DY    = int                      ( YEARS - BYEAR                         )
    ##########################################################################
    if                               ( DY    < 4                           ) :
      return self . heToSdLeap4Rule2 ( YEARS , MONTHS , DAY , BYEAR , BASE   )
    ##########################################################################
    QX    = int                      ( DY    / 4                             )
    QY    = int                      ( QX    * 4                             )
    ##########################################################################
    QD    = int                      ( QX    * 1461                          )
    QD    = int                      ( QD    - 1                             )
    ##########################################################################
    QT    = int                      ( QD    * 86400                         )
    ##########################################################################
    BYEAR = int                      ( BYEAR + QY                            )
    BASE  = int                      ( BASE  + QT                            )
    ##########################################################################
    return   self . heToSdLeap4Rule1 ( YEARS , MONTHS , DAY , BYEAR , BASE   )
  ############################################################################
  def heToSdLeap100Rule2           ( self                                  , \
                                     YEARS                                 , \
                                     MONTHS                                , \
                                     DAY                                   , \
                                     BYEAR                                 , \
                                     BASE                                  ) :
    ##########################################################################
    DY    = int                    ( YEARS - BYEAR                           )
    ##########################################################################
    QX    = int                    ( DY    / 4                               )
    QY    = int                    ( QX    * 4                               )
    QD    = int                    ( QX    * 1461                            )
    QT    = int                    ( QD    * 86400                           )
    ##########################################################################
    BYEAR = int                    ( BYEAR + QY                              )
    BASE  = int                    ( BASE  + QT                              )
    ##########################################################################
    return self . heToSdLeap4Rule1 ( YEARS , MONTHS , DAY , BYEAR , BASE     )
  ############################################################################
  def heToSdRule1                      ( self                              , \
                                         YEARS                             , \
                                         MONTHS                            , \
                                         DAY                               , \
                                         BYEAR                             , \
                                         BASE                              ) :
    ##########################################################################
    DY    = int                        ( YEARS - BYEAR                       )
    ##########################################################################
    QX    = int                        ( DY    / 400                         )
    QY    = int                        ( QX    * 400                         )
    QD    = int                        ( QX    * 146097                      )
    QT    = int                        ( QD    * 86400                       )
    ##########################################################################
    BYEAR = int                        ( BYEAR + QY                          )
    BASE  = int                        ( BASE  + QT                          )
    ##########################################################################
    DY    = int                        ( YEARS - BYEAR                       )
    ##########################################################################
    if                                 ( DY    < 100                       ) :
      return self . heToSdLeap100Rule2 ( YEARS                             , \
                                         MONTHS                            , \
                                         DAY                               , \
                                         BYEAR                             , \
                                         BASE                                )
    ##########################################################################
    CX    = int                        ( DY    / 100                         )
    CY    = int                        ( CX    * 100                         )
    CD    = int                        ( int ( CX * 36524 ) + 1              )
    CT    = int                        ( CD    * 86400                       )
    ##########################################################################
    BYEAR = int                        ( BYEAR + CY                          )
    BASE  = int                        ( BASE  + CT                          )
    ##########################################################################
    return   self . heToSdLeap100Rule1 ( YEARS , MONTHS , DAY , BYEAR , BASE )
  ############################################################################
  def heToSdRule2                  ( self , YEARS , MONTHS , DAY           ) :
    ##########################################################################
    BYEAR = int                    ( 11584                                   )
    BASE  = int                    ( 1420092365523062400                     )
    ##########################################################################
    DY    = int                    ( YEARS - BYEAR                           )
    QX    = int                    ( DY    / 4                               )
    QY    = int                    ( QX    * 4                               )
    QT    = int                    ( QX    * 126230400                       )
    ##########################################################################
    BYEAR = int                    ( BYEAR + QY                              )
    BASE  = int                    ( BASE  + QT                              )
    ##########################################################################
    return self . heToSdLeap4Rule1 ( YEARS , MONTHS , DAY , BYEAR , BASE     )
  ############################################################################
  def heToSdRule3             ( self , YEARS , MONTHS , DAY                ) :
    ##########################################################################
    DY    = int               ( - YEARS                                      )
    ##########################################################################
    QX    = int               ( DY    / 400                                  )
    QX    = int               ( QX    + 1                                    )
    ##########################################################################
    QY    = int               ( QX    * 400                                  )
    QD    = int               ( QX    * 146097                               )
    QT    = int               ( QD    * 86400                                )
    ##########################################################################
    BYEAR = int               ( - QY                                         )
    BASE  = int               ( 1420092315537724800 - QT                     )
    ##########################################################################
    return self . heToSdRule1 ( YEARS , MONTHS , DAY , BYEAR , BASE          )
  ############################################################################
  def heToSdRule4                  ( self , YEARS , MONTHS , DAY           ) :
    return self . heToSdNoLeapYear ( YEARS                                 , \
                                     MONTHS                                , \
                                     DAY                                   , \
                                     11583                                 , \
                                     1420092365491526400                     )
  ############################################################################
  def heToSdRule5                  ( self , YEARS , MONTHS , DAY           ) :
    return self . heToSdNoLeap1582 ( YEARS                                 , \
                                     MONTHS                                , \
                                     DAY                                   , \
                                     11582                                 , \
                                     1420092365460854400                     )
  ############################################################################
  def heToStardate              ( self , YEARS , MONTHS , DAY              ) :
    ##########################################################################
    if                          ( YEARS <  0                               ) :
      return self . heToSdRule3 ( YEARS , MONTHS , DAY                       )
    ##########################################################################
    if                          ( YEARS == 11582                           ) :
      return self . heToSdRule5 ( YEARS , MONTHS , DAY                       )
    ##########################################################################
    if                          ( YEARS == 11583                           ) :
      return self . heToSdRule4 ( YEARS , MONTHS , DAY                       )
    ##########################################################################
    if                          ( ( YEARS >= 11584 ) and ( YEARS < 11600 ) ) :
      return self . heToSdRule2 ( YEARS , MONTHS , DAY                       )
    ##########################################################################
    if                          ( YEARS >= 11600                           ) :
      return self . heToSdRule1 ( YEARS                                    , \
                                  MONTHS                                   , \
                                  DAY                                      , \
                                  11600                                    , \
                                  1420092366027984000                        )
    ##########################################################################
    return   self . heToSdRule1 ( YEARS                                    , \
                                  MONTHS                                   , \
                                  DAY                                      , \
                                  0                                        , \
                                  1420091999968204800                        )
  ############################################################################
  def HoloceneToStardate        ( self                                     , \
                                  YEAR                                     , \
                                  MONTH                                    , \
                                  DAY                                      , \
                                  HOURS                                    , \
                                  MINUTES                                  , \
                                  SECONDS                                  ) :
    ##########################################################################
    SOD = self . toSecondsOfDay ( HOURS , MINUTES , SECONDS                  )
    HSD = self . heToStardate   ( YEAR  , MONTH   , DAY                      )
    ##########################################################################
    return int                  ( HSD + SOD - self . TzShift                 )
  ############################################################################
  def localToStardate                           ( self                     ) :
    ##########################################################################
    self . Stardate = self . HoloceneToStardate ( self . YEAR                ,
                                                  self . MONTH               ,
                                                  self . DAY                 ,
                                                  self . HOUR                ,
                                                  self . MINUTE              ,
                                                  self . SECOND              )
    ##########################################################################
    return self . Stardate
  ############################################################################
  def valueChanged       ( self                                            ) :
    ##########################################################################
    CDT            = int ( self . Stardate + self . TzShift                  )
    ##########################################################################
    Y , MT , D , H , M , S = self . toHoloceneYNDHMS ( CDT                   )
    WD                     = self . toWeekOfDay      ( CDT                   )
    ##########################################################################
    self . YEAR    = Y
    self . MONTH   = MT
    self . DAY     = D
    self . HOUR    = H
    self . MINUTE  = M
    self . SECOND  = S
    self . WEEKDAY = WD
    ##########################################################################
    return
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Type"      : self . typeStrings ( )                        , \
               "Signature" : self . Signature                              , \
               "StarDate"  : self . Stardate                               , \
               "TimeZone"  : self . TimeZone                               , \
               "TzOffset"  : self . TzShift                                , \
               "Format"    : self . Format                                 , \
               "Year"      : self . YEAR                                   , \
               "Month"     : self . MONTH                                  , \
               "Day"       : self . DAY                                    , \
               "Hour"      : self . HOUR                                   , \
               "Minute"    : self . MINUTE                                 , \
               "Second"    : self . SECOND                                 , \
               "WeekDay"   : self . WEEKDAY                                , \
               "HE"        : self . HES                                    , \
               "BHE"       : self . BHE                                      }
  ############################################################################
  def toString                  ( self , format = ""                       ) :
    ##########################################################################
    MOD   = self . defaultFormatter
    ##########################################################################
    if                          ( MOD in [ False , None ]                  ) :
      raise ModuleNotFoundError (                                            )
    ##########################################################################
    FMT   = format
    if                          ( len ( FMT ) <= 0                         ) :
      FMT = self . Format
    ##########################################################################
    return MOD . toString       ( self , FMT                                 )
  ############################################################################
  def fromString                ( self , inputString , format = ""         ) :
    ##########################################################################
    MOD   = self . defaultParser
    ##########################################################################
    if                          ( MOD in [ False , None ]                  ) :
      raise ModuleNotFoundError (                                            )
    ##########################################################################
    FMT   = format
    if                          ( len ( FMT ) <= 0                         ) :
      FMT = self . Format
    ##########################################################################
    return MOD . Decoder        ( self , inputString , FMT                   )
  ############################################################################
  def setValue             ( self , key , value                            ) :
    ##########################################################################
    K        = key
    K        = K . lower   (                                                 )
    ##########################################################################
    if                     ( key in [ "sd" , "stardate" ]                  ) :
      ########################################################################
      try                                                                    :
        ######################################################################
        self . Stardate = int ( value                                        )
        self . valueChanged   (                                              )
        ######################################################################
      except                                                                 :
        pass
      ########################################################################
      return self . Stardate
    ##########################################################################
    if              ( key in [ "year"                                    ] ) :
      ########################################################################
      try                                                                    :
        self . YEAR = int ( value                                            )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . YEAR                                            )
    ##########################################################################
    if              ( key in [ "month"                                   ] ) :
      ########################################################################
      try                                                                    :
        self . MONTH = int ( value                                           )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . MONTH                                           )
    ##########################################################################
    if              ( key in [ "day"                                     ] ) :
      ########################################################################
      try                                                                    :
        self . DAY = int ( value                                             )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . DAY                                             )
    ##########################################################################
    if              ( key in [ "hour"                                    ] ) :
      ########################################################################
      try                                                                    :
        self . HOUR = int ( value                                            )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . HOUR                                            )
    ##########################################################################
    if              ( key in [ "minute"                                  ] ) :
      ########################################################################
      try                                                                    :
        self . MINUTE = int ( value                                          )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . MINUTE                                          )
    ##########################################################################
    if              ( key in [ "second"                                  ] ) :
      ########################################################################
      try                                                                    :
        self . SECOND = int ( value                                          )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . SECOND                                          )
    ##########################################################################
    if              ( key in [ "weekday"                                 ] ) :
      ########################################################################
      try                                                                    :
        self . WEEKDAY = int ( value                                         )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . WEEKDAY                                         )
    ##########################################################################
    if              ( key in [ "weekdays"                                ] ) :
      ########################################################################
      self . WeekDays = value
      ########################################################################
      return self . WeekDays
    ##########################################################################
    if              ( key in [ "shortweekdays"                           ] ) :
      ########################################################################
      self . ShortWeekDays = value
      ########################################################################
      return self . ShortWeekDays
    ##########################################################################
    if              ( key in [ "tzdiff" , "tzshift"                      ] ) :
      ########################################################################
      try                                                                    :
        self . TzShift = int ( value                                         )
      except                                                                 :
        pass
      ########################################################################
      return int    ( self . TzShift                                         )
    ##########################################################################
    if              ( key in [ "timezone" , "tz"                         ] ) :
      ########################################################################
      try                                                                    :
        self . TimeZone = str ( value                                        )
      except                                                                 :
        pass
      ########################################################################
      return str    ( self . TimeZone                                        )
    ##########################################################################
    if              ( key in [ "format"                                  ] ) :
      ########################################################################
      try                                                                    :
        self . Format = str ( value                                          )
      except                                                                 :
        pass
      ########################################################################
      return str    ( self . Format                                          )
    ##########################################################################
    if              ( key in [ "he"                                      ] ) :
      ########################################################################
      try                                                                    :
        self . HES = str ( value                                             )
      except                                                                 :
        pass
      ########################################################################
      return str    ( self . HES                                             )
    ##########################################################################
    if              ( key in [ "bhe"                                     ] ) :
      ########################################################################
      try                                                                    :
        self . BHE = str ( value                                             )
      except                                                                 :
        pass
      ########################################################################
      return str    ( self . BHE                                             )
    ##########################################################################
    if              ( key in [ "morning"                                 ] ) :
      ########################################################################
      try                                                                    :
        self . Morning = str ( value                                         )
      except                                                                 :
        pass
      ########################################################################
      return str    ( self . Morning                                         )
    ##########################################################################
    if              ( key in [ "afternoon"                               ] ) :
      ########################################################################
      try                                                                    :
        self . Afternoon = str ( value                                       )
      except                                                                 :
        pass
      ########################################################################
      return str    ( self . Afternoon                                       )
    ##########################################################################
    return self . Stardate
  ############################################################################
  def getValue      ( self , key                                           ) :
    ##########################################################################
    K = key
    K = K . lower   (                                                        )
    ##########################################################################
    if              ( key in [ "sd" , "stardate"                         ] ) :
      return int    ( self . Stardate                                        )
    ##########################################################################
    if              ( key in [ "year"                                    ] ) :
      return int    ( self . YEAR                                            )
    ##########################################################################
    if              ( key in [ "month"                                   ] ) :
      return int    ( self . MONTH                                           )
    ##########################################################################
    if              ( key in [ "day"                                     ] ) :
      return int    ( self . DAY                                             )
    ##########################################################################
    if              ( key in [ "hour"                                    ] ) :
      return int    ( self . HOUR                                            )
    ##########################################################################
    if              ( key in [ "minute"                                  ] ) :
      return int    ( self . MINUTE                                          )
    ##########################################################################
    if              ( key in [ "second"                                  ] ) :
      return int    ( self . SECOND                                          )
    ##########################################################################
    if              ( key in [ "weekday"                                 ] ) :
      return int    ( self . WEEKDAY                                         )
    ##########################################################################
    if              ( key in [ "weekdays"                                ] ) :
      return self . WeekDays
    ##########################################################################
    if              ( key in [ "shortweekdays"                           ] ) :
      return self . ShortWeekDays
    ##########################################################################
    if              ( key in [ "tzdiff" , "tzshift"                      ] ) :
      return int    ( self . TzShift                                         )
    ##########################################################################
    if              ( key in [ "timezone" , "tz"                         ] ) :
      return str    ( self . TimeZone                                        )
    ##########################################################################
    if              ( key in [ "format"                                  ] ) :
      return str    ( self . Format                                          )
    ##########################################################################
    if              ( key in [ "he"                                      ] ) :
      return str    ( self . HES                                             )
    ##########################################################################
    if              ( key in [ "bhe"                                     ] ) :
      return str    ( self . BHE                                             )
    ##########################################################################
    if              ( key in [ "morning"                                 ] ) :
      return str    ( self . Morning                                         )
    ##########################################################################
    if              ( key in [ "afternoon"                               ] ) :
      return str    ( self . Afternoon                                       )
    ##########################################################################
    raise NameError (                                                        )
##############################################################################
