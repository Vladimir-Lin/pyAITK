# -*- coding: utf-8 -*-
##############################################################################
## 星曆時標
##############################################################################
import os
import sys
import getopt
import time
import datetime
import pytz
##############################################################################
class StarDate (                                                           ) :
  ############################################################################
  def __init__ ( self                                                      ) :
    ##########################################################################
    self . Stardate = 0
    ##########################################################################
    return
  ############################################################################
  def isValid  ( self                                                      ) :
    return     ( self . Stardate > 0                                         )
  ############################################################################
  def set      ( self , sd                                                 ) :
    self . Stardate = sd
    return self . Stardate
  ############################################################################
  def Seconds  ( self , D , H , M , S                                      ) :
    return self . Days    ( D ) + \
           self . Hours   ( H ) + \
           self . Minutes ( M ) + \
                            S     ;
  ############################################################################
  def Minutes  ( self , M                                                  ) :
    return int ( int ( M ) * 60                                              )
  ############################################################################
  def Hours    ( self , H                                                  ) :
    return int ( int ( H ) * 3600                                            )
  ############################################################################
  def Days     ( self , D                                                  ) :
    return int ( int ( D ) * 86400                                           )
  ############################################################################
  def Add      ( self , S                                                  ) :
    self . Stardate += S
    return self . Stardate
  ############################################################################
  def AddDuration    ( self , S                                            ) :
    ##########################################################################
    SS   = S . split ( ":"                                                   )
    CNT  = len       ( SS                                                    )
    ##########################################################################
    if               ( CNT <= 0                                            ) :
      return self . Stardate
    ##########################################################################
    TT   = 0
    II   = 0
    ##########################################################################
    while            ( II < CNT                                            ) :
      ########################################################################
      TT = TT * 60
      XX = SS        [ II                                                    ]
      TT = TT + XX
      II = II + 1
    ##########################################################################
    self . Add       ( TT                                                    )
    ##########################################################################
    return self . Stardate
  ############################################################################
  def Subtract     ( self , S                                              ) :
    self . Stardate -= S
    return self . Stardate
  ############################################################################
  def Timestamp    ( self                                                  ) :
    return self . Stardate - 1420092377704080000
  ############################################################################
  def secondsTo    ( self , SD                                             ) :
    return SD . Stardate - self . Stardate
  ############################################################################
  def setTime      ( self , ut                                             ) :
    self . Stardate = ut   + 1420092377704080000
    return self . Stardate
  ############################################################################
  def fromDateTime        ( self , dt                                      ) :
    return self . setTime ( int ( dt . timestamp ( ) )                       )
  ############################################################################
  def Now                      ( self                                      ) :
    return self . fromDateTime ( datetime . datetime . now ( )               )
  ############################################################################
  def fromFormat                           ( self , dtString , TZ = ""     ) :
    ##########################################################################
    if                                     ( len ( TZ ) > 0                ) :
      ########################################################################
      if                                   ( TZ == "UTC"                   ) :
        tzs = pytz   . utc
      else                                                                   :
        tzs = pytz   . timezone            ( TZ                              )
      dtp = datetime . datetime . strptime ( dtString , "%Y/%m/%d %H:%M:%S"  )
      dt  = tzs      . localize            ( dtp                             )
    else                                                                     :
      dt  = datetime . datetime . strptime ( dtString , "%Y/%m/%d %H:%M:%S"  )
    ##########################################################################
    return self . fromDateTime             ( dt                              )
  ############################################################################
  def fromInput                   ( self , inpString , TZ = ""             ) :
    ##########################################################################
    dtString = inpString
    dtString = dtString . replace ( "T" , " "                                )
    dtString = dtString . replace ( "-" , "/"                                )
    cnt      = dtString . count   ( ":"                                      )
    if                            ( cnt == 0                               ) :
      dtString = dtString + ":00:00"
    elif                          ( cnt == 1                               ) :
      dtString = dtString + ":00"
    ##########################################################################
    return self . fromFormat      ( dtString , TZ                            )
  ############################################################################
  def ShrinkMinute          ( self                                         ) :
    ##########################################################################
    TS   = self . Timestamp (                                                )
    TS   = TS % 60
    self . Stardate -= TS
    ##########################################################################
    return self . Stardate
  ############################################################################
  def ShrinkHour           ( self                                          ) :
    return self . Subtract ( self . Timestamp ( ) % 3600                     )
  ############################################################################
  def toDateTime             ( self , TZ = ""                              ) :
    ##########################################################################
    if                       ( len ( TZ ) > 0                              ) :
      ########################################################################
      tzs = pytz . timezone  ( TZ                                            )
      TSV = self . Timestamp (                                               )
      ########################################################################
      if                     ( TSV < 0                                     ) :
        ######################################################################
        DT  = datetime . datetime . fromtimestamp ( 0 , tz = tzs             )
        DT  = DT + datetime . timedelta ( seconds = TSV                      )
        ######################################################################
        return DT
      ########################################################################
      return datetime . datetime . fromtimestamp ( TSV , tz = tzs            )
    ##########################################################################
    TSV   = self . Timestamp (                                               )
    ##########################################################################
    if                       ( TSV < 0                                     ) :
      ########################################################################
      DT  = datetime . datetime       ( 1970 , 1 , 1 , tzinfo = pytz . utc   )
      DT  = DT + datetime . timedelta ( seconds = TSV                        )
      ########################################################################
      return DT
    ##########################################################################
    return datetime . datetime . fromtimestamp ( self . Timestamp ( )        )
  ############################################################################
  def Weekday              ( self , TZ = ""                                ) :
    DT = self . toDateTime ( TZ                                              )
    return DT . weekday ( ) + 1
  ############################################################################
  def isPM                            ( self , TZ = ""                     ) :
    ##########################################################################
    DT   = self . toDateTime          ( TZ                                   )
    hour = DT   . today ( ) . weekday (                                      )
    ##########################################################################
    if                                ( hour < 12                          ) :
      return 0
    ##########################################################################
    return 1
  ############################################################################
  def toDateString         ( self , TZ , FMT = "%Y/%m/%d"                  ) :
    DT = self . toDateTime ( TZ                                              )
    return DT . strftime   ( FMT                                             )
  ############################################################################
  def toTimeString         ( self , TZ , FMT = "%H:%M:%S"                  ) :
    DT = self . toDateTime ( TZ                                              )
    return DT . strftime   ( FMT                                             )
  ############################################################################
  def toDateTimeString       ( self                                        , \
                               TZ                                          , \
                               JOIN       = "T"                            , \
                               DateFormat = "%Y-%m-%d"                     , \
                               TimeFormat = "%H:%M:%S"                     ) :
    ##########################################################################
    DS = self . toDateString ( TZ , DateFormat                               )
    DT = self . toTimeString ( TZ , TimeFormat                               )
    ##########################################################################
    return DS + JOIN + DT
  ############################################################################
  def toLongDateTimeString         ( self                                  , \
                                     TZ                                    , \
                                     DateFormat = "%Y-%m-%d"               , \
                                     TimeFormat = "%H:%M:%S"               ) :
    ##########################################################################
    WD     = self . Weekday        ( TZ                                      )
    WD     = int                   ( WD                                      )
    WS     = {  1 : "Monday"                                               , \
              2 : "Tuesday"                                                , \
              3 : "Wednesday"                                              , \
              4 : "Thursday"                                               , \
              5 : "Friday"                                                 , \
              6 : "Saturday"                                               , \
              7 : "Sunday"                                                   }
    ##########################################################################
    JOIZ   = " "
    ##########################################################################
    if                             ( WD in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]   ) :
      KS   = WS [ WD ]
      JOIZ = f" {KS} "
    ##########################################################################
    return self . toDateTimeString ( TZ , JOIZ , DateFormat , TimeFormat     )
  ############################################################################
  def SecondsOfDay                 ( self , TZ = ""                        ) :
    ##########################################################################
    DX = self . toDateString       ( TZ , "%Y-%m-%d"                         )
    DX = f"{DX}T00:00:00"
    XS = StarDate                  (                                         )
    XS . Stardate = XS . fromInput ( DX                                      )
    ##########################################################################
    return XS . secondsTo          ( self                                    )
  ############################################################################
  ## 轉換到J2000
  ############################################################################
  def toJ2000    ( self                                                    ) :
    ##########################################################################
    SDT = int    ( self . Stardate - 1420092378650807935                     )
    ##########################################################################
    return float ( float ( SDT ) - 0.816                                     )
  ############################################################################
  ## J2000轉換到恆星日單位
  ############################################################################
  def toSiderealDay ( self                                                 ) :
    return float    ( self . toJ2000 ( ) / 86164.0905                        )
  ############################################################################
  ## J2000轉換到恆星年單位
  ## 31558149.54
  ## 31558149.7635456
  ############################################################################
  def toSiderealYear ( self                                                ) :
    return float     ( self . toJ2000 ( ) / 31558149.54                      )
  ############################################################################
  ## J2000轉換到回歸年單位
  ## 31556925.2522
  ## 50.260角秒
  ############################################################################
  def toTropicalYear ( self                                                ) :
    return float     ( self . toJ2000 ( ) / 31556925.2522                    )
##############################################################################
