# -*- coding: utf-8 -*-
##############################################################################
## VtkModel
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import math
import shutil
##############################################################################
import vtk
##############################################################################
from   PyQt5                          import QtCore
from   PyQt5                          import QtGui
from   PyQt5                          import QtWidgets
##############################################################################
from   PyQt5 . QtCore                 import QObject
from   PyQt5 . QtCore                 import pyqtSignal
from   PyQt5 . QtCore                 import pyqtSlot
from   PyQt5 . QtCore                 import Qt
from   PyQt5 . QtCore                 import QPoint
from   PyQt5 . QtCore                 import QPointF
from   PyQt5 . QtCore                 import QSize
##############################################################################
from   PyQt5 . QtGui                  import QIcon
from   PyQt5 . QtGui                  import QCursor
from   PyQt5 . QtGui                  import QColor
from   PyQt5 . QtGui                  import QKeySequence
##############################################################################
from   PyQt5 . QtWidgets              import QApplication
from   PyQt5 . QtWidgets              import qApp
from   PyQt5 . QtWidgets              import QWidget
from   PyQt5 . QtWidgets              import QFileDialog
from   PyQt5 . QtWidgets              import QSpinBox
from   PyQt5 . QtWidgets              import QDoubleSpinBox
##############################################################################
from   AITK  . VTK . VtkWidget        import VtkWidget   as VtkWidget
from   AITK  . VTK . Wrapper          import Wrapper     as VtkWrapper
##############################################################################
from   AITK  . Qt  . MenuManager      import MenuManager as MenuManager
##############################################################################
from   AITK  . Math . Geometry . ControlPoint import ControlPoint as ControlPoint
from   AITK  . Math . Geometry . Contour      import Contour      as Contour
from   AITK  . Math . Geometry . Circle       import Circle       as Circle
from   AITK  . Math . Geometry . Cylinder     import Cylinder     as Cylinder
from   AITK  . Math . Geometry . Plane        import Plane        as Plane
from   AITK  . Math . Geometry . Parabola     import Parabola     as Parabola
from   AITK  . Math . Geometry . Sphere       import Sphere       as Sphere
from   AITK  . Math . Geometry . Polyhedron   import Polyhedron   as Polyhedron
##############################################################################
class VtkModel                 ( VtkWidget                                 ) :
  ############################################################################
  emitStartModel = pyqtSignal  (                                             )
  ############################################################################
  def __init__                 ( self , parent = None , plan = None        ) :
    ##########################################################################
    super ( ) . __init__       (        parent        , plan                 )
    self . setVtkModelDefaults (                                             )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 640 , 640 )                       )
  ############################################################################
  def setVtkModelDefaults   ( self                                         ) :
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . RightDockWidgetArea
    ##########################################################################
    self . Uuid    = 0
    self . LOID    = 0
    ##########################################################################
    self . setFunction      ( self . HavingMenu      , True                  )
    ##########################################################################
    self . setAcceptDrops   ( False                                          )
    ## self . setDragEnabled   ( False                                          )
    ## self . setDragDropMode  ( QAbstractItemView . NoDragDrop                 )
    ##########################################################################
    self . emitStartModel . connect ( self . StartModel                      )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PrepareContent       ( self                                          ) :
    ##########################################################################
    source = vtk.vtkSphereSource()
    source . SetCenter(0, 0, 0)
    source . SetRadius(10.0)
    ##########################################################################
    ## Create a mapper
    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputConnection(source.GetOutputPort())
    ##########################################################################
    # Create an actor
    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    ##########################################################################
    self . renderer . AddActor     ( actor )
    self . renderer . ResetCamera  ( )
    ##########################################################################
    self . interactor . Initialize ( )
    self . interactor . Start      ( )
    ##########################################################################
    return
  ############################################################################
  def ImportWaveFront                        ( self , DIR , OBJ , MTL      ) :
    ##########################################################################
    CWD   = os . getcwd                      (                               )
    os    . chdir                            ( DIR                           )
    ##########################################################################
    wfobj = vtk . vtkOBJImporter             (                               )
    wfobj . SetFileName                      ( OBJ                           )
    wfobj . SetFileNameMTL                   ( MTL                           )
    ##########################################################################
    wfobj . Read                             (                               )
    wfobj . InitializeObjectBase             (                               )
    ##########################################################################
    os    . chdir                            ( CWD                           )
    ##########################################################################
    self  . ClearRenderer                    (                               )
    ##########################################################################
    self  . renderer   = wfobj . GetRenderer (                               )
    self  . AssignBackgroundColor            (                               )
    wfobj . SetRenderWindow                  ( self . rWindow                )
    ##########################################################################
    self  . rWindow    . AddRenderer         ( self . renderer               )
    self  . interactor . SetRenderWindow     ( self . rWindow                )
    ##########################################################################
    return
  ############################################################################
  def LoadZipWaveFront        ( self , PARAMETERs , ZipData                ) :
    ##########################################################################
    TMPDIR = self . Settings  [ "ModelPath"                                  ]
    CWD    = os   . getcwd    (                                              )
    ##########################################################################
    WFPATH = PARAMETERs       [ "Directory"                                  ]
    OBJ    = PARAMETERs       [ "OBJ"                                        ]
    MTL    = PARAMETERs       [ "MTL"                                        ]
    LOID   = self . LOID
    LZIP   = f"{LOID}.zip"
    TZIP   = os . path . join ( TMPDIR , LZIP                                )
    DIR    = os . path . join ( TMPDIR , WFPATH                              )
    ##########################################################################
    with open                 ( TZIP , 'wb'                           ) as f :
      f    . write            ( ZipData                                      )
    ##########################################################################
    os     . chdir            ( TMPDIR                                       )
    shutil . unpack_archive   ( LZIP , TMPDIR                                )
    os     . chdir            ( CWD                                          )
    ##########################################################################
    self   . ImportWaveFront  ( DIR , OBJ , MTL                              )
    ##########################################################################
    ## os     . remove           ( TZIP                                         )
    ## shutil . rmtree           ( DIR                                          )
    ##########################################################################
    ## DIR    = "D:\\AITK\\Models\\Temp\\Cat"
    ## OBJ    = "12221_Cat_v1_l3.obj"
    ## MTL    = "12221_Cat_v1_l3.mtl"
    ## DIR    = "D:\\AITK\\Models\\Airplane\\"
    ## OBJ    = "11803_Airplane_v1_l1.obj"
    ## MTL    = "11803_Airplane_v1_l1.mtl"
    ##########################################################################
    return
  ############################################################################
  def ImportBareWaveFront            ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkOBJReader      (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    self . renderer   . AddActor     ( actor                                 )
    ##########################################################################
    return
  ############################################################################
  def StartModel                    ( self                                 ) :
    ##########################################################################
    self . renderer   . ResetCamera (                                        )
    self . interactor . Initialize  (                                        )
    self . interactor . Start       (                                        )
    ##########################################################################
    self . Notify                   ( 5                                      )
    ##########################################################################
    return
  ############################################################################
  def toJSON               ( self , TEXT                                   ) :
    ##########################################################################
    if                     ( len ( TEXT ) <= 0                             ) :
      return               {                                                 }
    ##########################################################################
    try                                                                      :
      BODY = TEXT . decode ( "utf-8"                                         )
    except                                                                   :
      return               {                                                 }
    ##########################################################################
    if                     ( len ( BODY ) <= 0                             ) :
      return               {                                                 }
    ##########################################################################
    return json . loads    ( BODY                                            )
  ############################################################################
  def loading                        ( self                                ) :
    ##########################################################################
    DB       = self . ConnectDB      (                                       )
    if                               ( DB == None                          ) :
      self   . emitStartModel . emit (                                       )
      return
    ##########################################################################
    OKAY     = False
    self     . Notify                ( 3                                     )
    ##########################################################################
    FMT      = self . Translations   [ "UI::StartLoading"                    ]
    MSG      = FMT . format          ( self . windowTitle ( )                )
    self     . ShowStatus            ( MSG                                   )
    self     . OnBusy  . emit        (                                       )
    self     . setBustle             (                                       )
    ##########################################################################
    LOID     = self . LOID
    UUID     = 0
    LTYPE    = 0
    BODY     = None
    JSOX     =                       {                                       }
    LODTAB   = self . Tables         [ "LOD"                                 ]
    ##########################################################################
    QQ       = f"""select
                   `uuid` , `type` , `parameters` , `body`
                   from {LODTAB}
                   where ( `id` = {LOID} ) ;"""
    QQ       = " " . join            ( QQ . split ( )                        )
    ##########################################################################
    DB       . Query                 ( QQ                                    )
    RR       = DB . FetchOne         (                                       )
    ##########################################################################
    if ( ( RR not in [ False , None ] ) and ( len ( RR ) == 4 ) )            :
      ########################################################################
      UUID   = int                   ( RR [ 0                              ] )
      LTYPE  = int                   ( RR [ 1                              ] )
      JSOX   = self . toJSON         ( RR [ 2                              ] )
      BODY   =                         RR [ 3                                ]
      ########################################################################
      if ( ( BODY not in [ False , None ] ) and ( len ( BODY ) > 0 ) )       :
        ######################################################################
        OKAY = True
    ##########################################################################
    self     . setVacancy            (                                       )
    self     . GoRelax . emit        (                                       )
    self     . ShowStatus            ( ""                                    )
    DB       . Close                 (                                       )
    ##########################################################################
    if                               ( OKAY                                ) :
      ########################################################################
      self   . Uuid = UUID
      ########################################################################
      if                             ( 112 == LTYPE                        ) :
        ######################################################################
        self . LoadZipWaveFront      ( JSOX , BODY                           )
    ##########################################################################
    self . emitStartModel . emit     (                                       )
    ##########################################################################
    return
  ############################################################################
  def startup ( self                                                       ) :
    ##########################################################################
    self . Go ( self . loading                                               )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def SwitchDisplayElement          ( self , Item                          ) :
    ##########################################################################
    E      = self . FaceObjects     [ Item ] [ "Enabled"                     ]
    A      = self . FaceObjects     [ Item ] [ "Actor"                       ]
    ##########################################################################
    if                              ( E                                    ) :
      ########################################################################
      E    = False
      self . renderer . RemoveActor ( A                                      )
      ########################################################################
    else                                                                     :
      ########################################################################
      E    = True
      self . renderer . AddActor    ( A                                      )
    ##########################################################################
    self   . FaceObjects [ Item ] [ "Enabled" ] = E
    ##########################################################################
    return
  ############################################################################
  def ElementsMenu           ( self , mm                                   ) :
    ##########################################################################
    MSG = self . getMenuItem ( "DisplayObjects"                              )
    LOM = mm   . addMenu     ( MSG                                           )
    ##########################################################################
    E   = self . FaceObjects [ "Texture"    ] [ "Enabled"                    ]
    msg = self . getMenuItem ( "DisplayTextured"                             )
    mm  . addActionFromMenu  ( LOM , 54233101 , msg , True , E               )
    ##########################################################################
    E   = self . FaceObjects [ "Points"     ] [ "Enabled"                    ]
    msg = self . getMenuItem ( "DisplayPoints"                               )
    mm  . addActionFromMenu  ( LOM , 54233102 , msg , True , E               )
    ##########################################################################
    E   = self . FaceObjects [ "Mesh"       ] [ "Enabled"                    ]
    msg = self . getMenuItem ( "DisplayLines"                                )
    mm  . addActionFromMenu  ( LOM , 54233103 , msg , True , E               )
    ##########################################################################
    E   = self . FaceObjects [ "Face"       ] [ "Enabled"                    ]
    msg = self . getMenuItem ( "DisplayFace"                                 )
    mm  . addActionFromMenu  ( LOM , 54233104 , msg , True , E               )
    ##########################################################################
    E   = self . FaceObjects [ "Plate"      ] [ "Enabled"                    ]
    msg = self . getMenuItem ( "DisplayPlate"                                )
    mm  . addActionFromMenu  ( LOM , 54233105 , msg , True , E               )
    ##########################################################################
    return mm
  ############################################################################
  def RunElementsMenu             ( self , at                              ) :
    ##########################################################################
    if                            ( at == 54233101                         ) :
      ########################################################################
      self . SwitchDisplayElement ( "Texture"                               )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233102                         ) :
      ########################################################################
      self . SwitchDisplayElement ( "Points"                                 )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233103                         ) :
      ########################################################################
      self . SwitchDisplayElement ( "Mesh"                                   )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233104                         ) :
      ########################################################################
      self . SwitchDisplayElement ( "Face"                                   )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233105                         ) :
      ########################################################################
      self . SwitchDisplayElement ( "Plate"                                  )
      ########################################################################
      return
    ##########################################################################
    return False
  ############################################################################
  def Menu                         ( self , pos                            ) :
    ##########################################################################
    doMenu = self . isFunction     ( self . HavingMenu                       )
    if                             ( not doMenu                            ) :
      return False
    ##########################################################################
    self   . Notify                ( 0                                       )
    ##########################################################################
    mm     = MenuManager           ( self                                    )
    ##########################################################################
    TRX    = self . Translations
    ##########################################################################
    msg    = "背景顏色"
    icon   = QIcon                 ( ":/images/reload.png"                   )
    mm     . addActionWithIcon     ( 1001 , icon , msg                       )
    ##########################################################################
    ## self   . ElementsMenu          ( mm                                      )
    self   . DockingMenu           ( mm                                      )
    ##########################################################################
    mm     . setFont               ( self    . menuFont ( )                  )
    aa     = mm . exec_            ( QCursor . pos      ( )                  )
    at     = mm . at               ( aa                                      )
    ##########################################################################
    """
    if                             ( self . RunElementsMenu ( at )         ) :
      return True
    """
    ##########################################################################
    if                             ( self . RunDocking   ( mm , aa )       ) :
      return True
    ##########################################################################
    if                             ( at == 1001                            ) :
      ########################################################################
      self . ChangeBackgroundColor (                                         )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
