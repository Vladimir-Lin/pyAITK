# -*- coding: utf-8 -*-
##############################################################################
## VtkModel
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import math
import shutil
##############################################################################
import vtk
##############################################################################
from   PyQt5                                  import QtCore
from   PyQt5                                  import QtGui
from   PyQt5                                  import QtWidgets
##############################################################################
from   PyQt5 . QtCore                         import QObject
from   PyQt5 . QtCore                         import pyqtSignal
from   PyQt5 . QtCore                         import pyqtSlot
from   PyQt5 . QtCore                         import Qt
from   PyQt5 . QtCore                         import QPoint
from   PyQt5 . QtCore                         import QPointF
from   PyQt5 . QtCore                         import QSize
##############################################################################
from   PyQt5 . QtGui                          import QIcon
from   PyQt5 . QtGui                          import QCursor
from   PyQt5 . QtGui                          import QColor
from   PyQt5 . QtGui                          import QKeySequence
##############################################################################
from   PyQt5 . QtWidgets                      import QApplication
from   PyQt5 . QtWidgets                      import qApp
from   PyQt5 . QtWidgets                      import QWidget
from   PyQt5 . QtWidgets                      import QFileDialog
from   PyQt5 . QtWidgets                      import QSpinBox
from   PyQt5 . QtWidgets                      import QDoubleSpinBox
##############################################################################
from   AITK  . Documents . JSON               import Load         as LoadJson
from   AITK  . Documents . JSON               import Save         as SaveJson
##############################################################################
from   AITK  . VTK . VtkWidget                import VtkWidget    as VtkWidget
from   AITK  . VTK . Wrapper                  import Wrapper      as VtkWrapper
##############################################################################
from   AITK  . Qt  . MenuManager              import MenuManager  as MenuManager
from   AITK  . Qt  . LineEdit                 import LineEdit     as LineEdit
from   AITK  . Qt  . ComboBox                 import ComboBox     as ComboBox
from   AITK  . Qt  . SpinBox                  import SpinBox      as SpinBox
##############################################################################
from   AITK  . Math . Geometry . ControlPoint import ControlPoint as ControlPoint
from   AITK  . Math . Geometry . Contour      import Contour      as Contour
from   AITK  . Math . Geometry . Circle       import Circle       as Circle
from   AITK  . Math . Geometry . Cylinder     import Cylinder     as Cylinder
from   AITK  . Math . Geometry . Plane        import Plane        as Plane
from   AITK  . Math . Geometry . Parabola     import Parabola     as Parabola
from   AITK  . Math . Geometry . Sphere       import Sphere       as Sphere
from   AITK  . Math . Geometry . Polyhedron   import Polyhedron   as Polyhedron
##############################################################################
from         . VtkModelPad                    import VtkModelPad
##############################################################################
class VtkModel                 ( VtkWidget                                 ) :
  ############################################################################
  emitStartModel = pyqtSignal  (                                             )
  Leave          = pyqtSignal  ( QWidget                                     )
  ############################################################################
  def __init__                 ( self , parent = None , plan = None        ) :
    ##########################################################################
    super ( ) . __init__       (        parent        , plan                 )
    self . setVtkModelDefaults (                                             )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 640 , 640 )                       )
  ############################################################################
  def setVtkModelDefaults   ( self                                         ) :
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . RightDockWidgetArea
    ##########################################################################
    self . Uuid               = 0
    self . LOID               = 0
    self . LodName            = ""
    self . Mouse              = False
    self . Pad                = False
    self . PadUi              = None
    self . AitkJSON           = {                                            }
    ##########################################################################
    self . setFunction      ( self . HavingMenu      , True                  )
    ##########################################################################
    self . setAcceptDrops   ( False                                          )
    ## self . setDragEnabled   ( False                                          )
    ## self . setDragDropMode  ( QAbstractItemView . NoDragDrop                 )
    ##########################################################################
    self . emitStartModel . connect ( self . StartModel                      )
    ##########################################################################
    self . setPrepared      ( True                                           )
    ##########################################################################
    return
  ############################################################################
  def AttachActions   ( self ,                         Enabled             ) :
    ##########################################################################
    self . LinkAction ( "Save"   , self . ExportVTK  , Enabled               )
    self . LinkAction ( "Export" , self . ExportJSON , Enabled               )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared ( )                   ) :
      return False
    ##########################################################################
    self . setActionLabel    ( "Label" , self . windowTitle ( )              )
    self . AttachActions     ( True                                          )
    self . attachActionsTool (                                               )
    ##########################################################################
    return True
  ############################################################################
  def mouseDoubleClickEvent           ( self , event                       ) :
    ##########################################################################
    if                                ( self . handleMouse ( 3 , event )   ) :
      return
    ##########################################################################
    super ( ) . mouseDoubleClickEvent (     event                            )
    self      . dealWithMouse         ( 3 , event                            )
    ##########################################################################
    return
  ############################################################################
  def mouseMoveEvent           ( self , event                              ) :
    ##########################################################################
    if                         ( self . handleMouse ( 2 , event )          ) :
      return
    ##########################################################################
    super ( ) . mouseMoveEvent (     event                                   )
    self      . dealWithMouse  ( 2 , event                                   )
    ##########################################################################
    return
  ############################################################################
  def mouseReleaseEvent           ( self , event                           ) :
    ##########################################################################
    if                          ( self . handleMouse ( 1 , event )         ) :
      return
    ##########################################################################
    super ( ) . mouseReleaseEvent (     event                                )
    self      . dealWithMouse     ( 1 , event                                )
    ##########################################################################
    return
  ############################################################################
  def mousePressEvent           ( self , event                             ) :
    ##########################################################################
    if                          ( self . handleMouse ( 0 , event )         ) :
      return
    ##########################################################################
    super ( ) . mousePressEvent (     event                                  )
    self      . dealWithMouse   ( 0 , event                                  )
    ##########################################################################
    return
  ############################################################################
  def handleMouse   ( self , mType , event                                 ) :
    ##########################################################################
    if              ( self . Mouse                                         ) :
      return False
    ##########################################################################
    event . accept  (                                                        )
    ##########################################################################
    return True
  ############################################################################
  def dealWithMouse                   ( self , mType , event               ) :
    ##########################################################################
    if                                ( self . Pad                         ) :
      ########################################################################
      if ( self . isBitMask ( event . buttons ( ) , Qt . LeftButton )      ) :
        ######################################################################
        self . PadUi . UpdateRenderer (                                      )
    ##########################################################################
    return
  ############################################################################
  def Shutdown           ( self                                            ) :
    ##########################################################################
    self . Leave . emit  ( self                                              )
    ## self . AttachActions ( False                                             )
    ##########################################################################
    return True
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PrepareContent       ( self                                          ) :
    ##########################################################################
    source = vtk.vtkSphereSource()
    source . SetCenter(0, 0, 0)
    source . SetRadius(10.0)
    ##########################################################################
    ## Create a mapper
    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputConnection(source.GetOutputPort())
    ##########################################################################
    # Create an actor
    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    ##########################################################################
    self . renderer . AddActor     ( actor )
    self . renderer . ResetCamera  ( )
    ##########################################################################
    self . interactor . Initialize ( )
    self . interactor . Start      ( )
    ##########################################################################
    return
  ############################################################################
  def ImportWaveFront                        ( self , DIR , OBJ , MTL      ) :
    ##########################################################################
    CWD   = os . getcwd                      (                               )
    os    . chdir                            ( DIR                           )
    ##########################################################################
    wfobj = vtk . vtkOBJImporter             (                               )
    wfobj . SetFileName                      ( OBJ                           )
    wfobj . SetFileNameMTL                   ( MTL                           )
    ##########################################################################
    wfobj . Read                             (                               )
    wfobj . InitializeObjectBase             (                               )
    ##########################################################################
    os    . chdir                            ( CWD                           )
    ##########################################################################
    self  . ClearRenderer                    (                               )
    ##########################################################################
    self  . renderer   = wfobj . GetRenderer (                               )
    self  . AssignBackgroundColor            (                               )
    wfobj . SetRenderWindow                  ( self . rWindow                )
    ##########################################################################
    self  . rWindow    . AddRenderer         ( self . renderer               )
    self  . interactor . SetRenderWindow     ( self . rWindow                )
    ##########################################################################
    return
  ############################################################################
  def LoadZipWaveFront        ( self , PARAMETERs , ZipData                ) :
    ##########################################################################
    TMPDIR = self . Settings  [ "ModelPath"                                  ]
    CWD    = os   . getcwd    (                                              )
    ##########################################################################
    WFPATH = PARAMETERs       [ "Directory"                                  ]
    OBJ    = PARAMETERs       [ "OBJ"                                        ]
    MTL    = PARAMETERs       [ "MTL"                                        ]
    LOID   = self . LOID
    LZIP   = f"{LOID}.zip"
    TZIP   = os . path . join ( TMPDIR , LZIP                                )
    DIR    = os . path . join ( TMPDIR , WFPATH                              )
    ##########################################################################
    with open                 ( TZIP , 'wb'                           ) as f :
      f    . write            ( ZipData                                      )
    ##########################################################################
    os     . chdir            ( TMPDIR                                       )
    shutil . unpack_archive   ( LZIP , TMPDIR                                )
    os     . chdir            ( CWD                                          )
    ##########################################################################
    self   . ImportWaveFront  ( DIR , OBJ , MTL                              )
    ##########################################################################
    os     . remove           ( TZIP                                         )
    shutil . rmtree           ( DIR                                          )
    ##########################################################################
    return
  ############################################################################
  def ImportBareWaveFront            ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkOBJReader      (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    self . renderer   . AddActor     ( actor                                 )
    ##########################################################################
    return
  ############################################################################
  def LoadBareWaveFront          ( self , PARAMETERs , ZipData             ) :
    ##########################################################################
    TMPDIR = self . Settings     [ "ModelPath"                               ]
    CWD    = os   . getcwd       (                                           )
    ##########################################################################
    WFPATH = PARAMETERs          [ "Directory"                               ]
    OBJ    = PARAMETERs          [ "OBJ"                                     ]
    LOID   = self . LOID
    LZIP   = f"{LOID}.zip"
    TZIP   = os . path . join    ( TMPDIR , LZIP                             )
    DIR    = os . path . join    ( TMPDIR , WFPATH                           )
    WFOBJ  = os . path . join    ( DIR    , OBJ                              )
    ##########################################################################
    with open                    ( TZIP , 'wb'                        ) as f :
      f    . write               ( ZipData                                   )
    ##########################################################################
    os     . chdir               ( TMPDIR                                    )
    shutil . unpack_archive      ( LZIP , TMPDIR                             )
    os     . chdir               ( CWD                                       )
    ##########################################################################
    self   . ImportBareWaveFront ( WFOBJ                                     )
    ##########################################################################
    os     . remove              ( TZIP                                      )
    shutil . rmtree              ( DIR                                       )
    ##########################################################################
    return
  ############################################################################
  def StartModel                    ( self                                 ) :
    ##########################################################################
    self . renderer   . ResetCamera (                                        )
    self . interactor . Initialize  (                                        )
    self . interactor . Start       (                                        )
    ##########################################################################
    self . Notify                   ( 5                                      )
    ##########################################################################
    return
  ############################################################################
  def toJSON               ( self , TEXT                                   ) :
    ##########################################################################
    if                     ( len ( TEXT ) <= 0                             ) :
      return               {                                                 }
    ##########################################################################
    try                                                                      :
      BODY = TEXT . decode ( "utf-8"                                         )
    except                                                                   :
      return               {                                                 }
    ##########################################################################
    if                     ( len ( BODY ) <= 0                             ) :
      return               {                                                 }
    ##########################################################################
    return json . loads    ( BODY                                            )
  ############################################################################
  def loading                        ( self                                ) :
    ##########################################################################
    DB       = self . ConnectDB      (                                       )
    if                               ( DB == None                          ) :
      self   . emitStartModel . emit (                                       )
      return
    ##########################################################################
    OKAY     = False
    self     . Notify                ( 3                                     )
    ##########################################################################
    FMT      = self . Translations   [ "UI::StartLoading"                    ]
    MSG      = FMT . format          ( self . windowTitle ( )                )
    self     . ShowStatus            ( MSG                                   )
    self     . OnBusy  . emit        (                                       )
    self     . setBustle             (                                       )
    ##########################################################################
    LOID     = self . LOID
    UUID     = 0
    LTYPE    = 0
    BODY     = None
    JSOX     =                       {                                       }
    LODTAB   = self . Tables         [ "LOD"                                 ]
    ##########################################################################
    QQ       = f"""select
                   `uuid` , `name` , `type` , `parameters` , `body`
                   from {LODTAB}
                   where ( `id` = {LOID} ) ;"""
    QQ       = " " . join            ( QQ . split ( )                        )
    ##########################################################################
    DB       . Query                 ( QQ                                    )
    RR       = DB . FetchOne         (                                       )
    ##########################################################################
    if ( ( RR not in [ False , None ] ) and ( len ( RR ) == 5 ) )            :
      ########################################################################
      UUID   = int                   ( RR [ 0                              ] )
      NAME   = self . assureString   ( RR [ 1                              ] )
      LTYPE  = int                   ( RR [ 2                              ] )
      JSOX   = self . toJSON         ( RR [ 3                              ] )
      BODY   =                         RR [ 4                                ]
      ########################################################################
      if ( ( BODY not in [ False , None ] ) and ( len ( BODY ) > 0 ) )       :
        ######################################################################
        OKAY           = True
        self . LodName = NAME
    ##########################################################################
    self     . setVacancy            (                                       )
    self     . GoRelax . emit        (                                       )
    self     . ShowStatus            ( ""                                    )
    DB       . Close                 (                                       )
    ##########################################################################
    if                               ( OKAY                                ) :
      ########################################################################
      self   . Uuid = UUID
      ########################################################################
      if                             ( 102 == LTYPE                        ) :
        ######################################################################
        self . LoadBareWaveFront     ( JSOX , BODY                           )
      ########################################################################
      elif                           ( 112 == LTYPE                        ) :
        ######################################################################
        self . LoadZipWaveFront      ( JSOX , BODY                           )
    ##########################################################################
    self . emitStartModel . emit     (                                       )
    ##########################################################################
    return
  ############################################################################
  def startup ( self                                                       ) :
    ##########################################################################
    self . Go ( self . loading                                               )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def ReportIt ( self                                                      ) :
    ##########################################################################
    ## FN     = f"D:/Workspaces/VTK/EyeBalls.vtk"
    ##########################################################################
    ## writer = vtk . vtkPolyDataWriter ( )
    ## writer . SetInputData            ( sphere.GetOutput() )
    ## writer . SetFileName             ( FN )
    ## writer . Update                  (    )
    ##########################################################################
    ## FN     = f"D:\\Workspaces\\VTK\\EyeBalls-{CNT}.json"
    ## FN     = f"D:/Workspaces/VTK"
    ## EXP = vtk . vtkJSONSceneExporter ( )
    ## EXP . SetFileName       ( FN              )
    ## EXP . SetInput          ( self . rWindow  )
    ## EXP . SetActiveRenderer ( self . renderer )
    ## EXP . Write             (                 )
    CNT     = 0
    actors  = self . renderer . GetActors (                                  )
    ##########################################################################
    for actor in actors                                                      :
      ########################################################################
      CNT   = CNT + 1
      ########################################################################
      ## print ( "Actor : " , CNT )
      ########################################################################
      vm     = actor . GetMapper (                                           )
      vi     = vm    . GetInput  (                                           )
      ########################################################################
      FN     = f"D:/Workspaces/VTK/EyeBalls-{CNT}.vtk"
      ##########################################################################
      writer = vtk . vtkPolyDataWriter (    )
      writer . SetInputData            ( vi )
      writer . SetFileName             ( FN )
      writer . Update                  (    )
      ########################################################################
      ## FN     = f"D:\\Workspaces\\VTK\\EyeBalls-{CNT}.json"
      ## writer = vtk . vtkJSONDataSetWriter (                                  )
      ## writer . SetFileName  ( FN                                             )
      ## writer . SetInputData ( vi                                             )
      ## writer . Write        (                                                )
      ## writer . Update       (                                                )
      ########################################################################
      ## TUPS = vi . GetNumberOfPoints ( )
      ## SAT  = 0
      ## print ( "Points : " , TUPS )
      ## while ( SAT < TUPS ) :
      ##   ######################################################################
      ##   print ( vi . GetPoint ( SAT ) )
      ##   SAT = SAT + 1
      ########################################################################
      ## CELS = vi . GetNumberOfCells ( )
      ## SAT  = 0
      ## print ( "Cells : " , CELS )
      ## while ( SAT < CELS ) :
      ##   ######################################################################
      ##   CE = vi . GetCell ( SAT )
      ##   PX = CE . GetNumberOfPoints ( )
      ##   ED = CE . GetNumberOfEdges  ( )
      ##   FA = CE . GetNumberOfFaces  ( )
      ##   FF = CE . GetFaces          ( )
      ##   ######################################################################
      ##   PV = CE . GetPointIds       ( )
      ##   PC = PV . GetNumberOfIds    ( )
      ##   AP = 0
      ##   LL = [ ]
      ##   while ( AP < PC ) :
      ##     ####################################################################
      ##     LL . append ( PV . GetId ( AP ) )
      ##     ####################################################################
      ##     AP = AP + 1
      ##   ######################################################################
      ##   print ( PX , ED , FA , FF , LL )
      ##   ######################################################################
      ##   SAT = SAT + 1
      ########################################################################
    ## actors   = [                                                             ]
    ## na       = actors . GetNextActor (                                       )
    ##########################################################################
    ## while ( na not in [ False , None ] )                                     :
    ##   ########################################################################
    ##   actors . append ( na )
    ##   print ( na . GetObjectName ( ) )
      ########################################################################
    ##   na     = actors . GetNextActor (                                       )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ## 清除場景內所有的角色
  ############################################################################
  def ClearActors                        ( self                            ) :
    ##########################################################################
    actors = self . renderer . GetActors (                                   )
    ##########################################################################
    for actor in actors                                                      :
      ########################################################################
      self . renderer . RemoveActor      ( actor                             )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ## 轉換到AITK JSON
  ############################################################################
  def ToAitkJSON      ( self                                               ) :
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    self . AitkJSON = { "Name" : self . LodName }
    ##########################################################################
    return
  ############################################################################
  ### 匯出JSON檔
  ############################################################################
  def ExportJSON               ( self                                      ) :
    ##########################################################################
    self  . ToAitkJSON         (                                             )
    ##########################################################################
    DPATH = self . Settings    [ "ModelPath"                                 ]
    LOD   = self . LodName
    ##########################################################################
    FN    = f"{DPATH}/{LOD}.json"
    ##########################################################################
    FRS   = self . getMenuItem ( "SaveJsonFilters"                           )
    MSG   = self . getMenuItem ( "ExportJSON"                                )
    ##########################################################################
    F , _ = QFileDialog . getSaveFileName ( self , MSG , FN , FRS            )
    ##########################################################################
    if                         ( len ( F ) <= 0                            ) :
      return
    ##########################################################################
    SaveJson                   ( F , self . AitkJSON                         )
    self . Notify              ( 5                                           )
    ##########################################################################
    return
  ############################################################################
  ### 匯入JSON檔
  ############################################################################
  def ImportJSON               ( self                                      ) :
    ##########################################################################
    self  . ToAitkJSON         (                                             )
    ##########################################################################
    DPATH = self . Settings    [ "ModelPath"                                 ]
    LOD   = self . LodName
    ##########################################################################
    FN    = f"{DPATH}/{LOD}.json"
    ##########################################################################
    FRS   = self . getMenuItem ( "SaveJsonFilters"                           )
    MSG   = self . getMenuItem ( "ImportJSON"                                )
    ##########################################################################
    F , _ = QFileDialog . getOpenFileName ( self , MSG , FN , FRS            )
    ##########################################################################
    if                         ( len ( F ) <= 0                            ) :
      return
    ##########################################################################
    ## SaveJson                   ( F , self . AitkJSON                         )
    self . Notify              ( 5                                           )
    ##########################################################################
    return
  ############################################################################
  ### 匯出VTK目錄
  ############################################################################
  def ExportVTK                        ( self                              ) :
    ##########################################################################
    DPATH = self . Settings            [ "ModelPath"                         ]
    DIR   = QFileDialog . getExistingDirectory                               (
              self                                                           ,
              self . getMenuItem       ( "VtkDirectory"                    ) ,
              DPATH                                                          ,
              QFileDialog . ShowDirsOnly                                     )
    ##########################################################################
    if                                 ( DIR in [ False , None ]           ) :
      return
    ##########################################################################
    if                                 ( len ( DIR ) <= 0                  ) :
      return
    ##########################################################################
    LOD   = self . LodName
    DIR   = f"{DIR}/{LOD}"
    ##########################################################################
    EVTK  = vtk . vtkJSONSceneExporter (                                     )
    EVTK  . SetFileName                ( DIR                                 )
    EVTK  . SetInput                   ( self . rWindow                      )
    EVTK  . SetActiveRenderer          ( self . renderer                     )
    EVTK  . Write                      (                                     )
    ##########################################################################
    self  . Notify                     ( 5                                   )
    ##########################################################################
    return
  ############################################################################
  ### 匯出OBJ檔
  ############################################################################
  def ExportOBJ ( self                                                     ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ### 匯出STL檔
  ############################################################################
  def ExportSTL ( self                                                     ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ### 匯出glTL檔
  ############################################################################
  def ExportGLTF ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ## 切換控制板
  ############################################################################
  def SwitchPad                      ( self                                ) :
    ##########################################################################
    if                               ( self . Pad                          ) :
      ########################################################################
      self . PadUi      . close      (                                       )
      ########################################################################
      self . Pad       = False
      self . PadUi     = None
      ########################################################################
    else                                                                     :
      ########################################################################
      VPAD  = VtkModelPad            ( None , self . PlanFunc                )
      TITLE = self     . getMenuItem ( "ControlPad"                          )
      ########################################################################
      VPAD  . Settings     = self . Settings
      VPAD  . Translations = self . Translations
      VPAD  . Hosts        = { "ERP"      : self . Settings [ "ERP"      ] , \
                               "Database" : self . Settings [ "Database" ] , \
                               "Oriphase" : self . Settings [ "Oriphase" ]   }
      VPAD  . DB           = self . Settings [ "Database"                    ]
      VPAD  . Tables       = self . Tables
      ########################################################################
      MENUZ = self . Translations              [ "VtkModelPad" ] [ "Menus"   ]
      ########################################################################
      VPAD  . setLocality            ( self . getLocality ( )                )
      VPAD  . setMenus               ( MENUZ                                 )
      ########################################################################
      VPAD  . rWindow  = self . rWindow
      VPAD  . renderer = self . renderer
      ########################################################################
      self  . addControl             ( TITLE , VPAD , self                   )
      ########################################################################
      VPAD  . startup                (                                       )
      ########################################################################
      self  . Pad      = True
      self  . PadUi    = VPAD
    ##########################################################################
    return
  ############################################################################
  ## 切換滑鼠追蹤控制
  ############################################################################
  def SwitchMouse ( self                                                   ) :
    ##########################################################################
    if            ( self . Mouse                                           ) :
      ########################################################################
      self . Mouse = False
      ########################################################################
    else                                                                     :
      ########################################################################
      self . Mouse = True
    ##########################################################################
    return
  ############################################################################
  def LodChanged ( self , LOD                                              ) :
    ##########################################################################
    self . LodName = LOD
    ##########################################################################
    return
  ############################################################################
  def ModelMenu                ( self , mm                                 ) :
    ##########################################################################
    MSG = self . getMenuItem   ( "ModelMenu"                                 )
    LOM = mm   . addMenu       ( MSG                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "BackgrounColor"                            )
    mm  . addActionFromMenu    ( LOM , 54233001 , msg                        )
    ##########################################################################
    msg = self . getMenuItem   ( "Report"                                    )
    mm  . addActionFromMenu    ( LOM , 54233002 , msg                        )
    ##########################################################################
    mm  . addSeparatorFromMenu ( LOM                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "ClearActors"                               )
    mm  . addActionFromMenu    ( LOM , 54233011 , msg                        )
    ##########################################################################
    return mm
  ############################################################################
  def RunModelMenu                 ( self , at                             ) :
    ##########################################################################
    if                             ( at == 54233001                        ) :
      ########################################################################
      self . ChangeBackgroundColor (                                         )
      ########################################################################
      return
    ##########################################################################
    if                             ( at == 54233002                        ) :
      ########################################################################
      self . ReportIt              (                                         )
      ########################################################################
      return
    ##########################################################################
    if                             ( at == 54233011                        ) :
      ########################################################################
      self . ClearActors           (                                         )
      ########################################################################
      return
    ##########################################################################
    return False
  ############################################################################
  def FilesMenu                ( self , mm                                 ) :
    ##########################################################################
    MSG = self . getMenuItem   ( "FilesMenu"                                 )
    LOM = mm   . addMenu       ( MSG                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "ImportJSON"                                )
    mm  . addActionFromMenu    ( LOM , 54233101 , msg                        )
    ##########################################################################
    msg = self . getMenuItem   ( "ExportJSON"                                )
    mm  . addActionFromMenu    ( LOM , 54233102 , msg                        )
    ##########################################################################
    mm  . addSeparatorFromMenu ( LOM                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "ExportVTK"                                 )
    mm  . addActionFromMenu    ( LOM , 54233103 , msg                        )
    ##########################################################################
    mm  . addSeparatorFromMenu ( LOM                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "ExportOBJ"                                 )
    mm  . addActionFromMenu    ( LOM , 54233104 , msg                        )
    ##########################################################################
    mm  . addSeparatorFromMenu ( LOM                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "ExportSTL"                                 )
    mm  . addActionFromMenu    ( LOM , 54233105 , msg                        )
    ##########################################################################
    mm  . addSeparatorFromMenu ( LOM                                         )
    ##########################################################################
    msg = self . getMenuItem   ( "ExportGLTF"                                )
    mm  . addActionFromMenu    ( LOM , 54233106 , msg                        )
    ##########################################################################
    return mm
  ############################################################################
  def RunFilesMenu                ( self , at                              ) :
    ##########################################################################
    if                            ( at == 54233101                         ) :
      ########################################################################
      self . ImportJSON           (                                          )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233102                         ) :
      ########################################################################
      self . ExportJSON           (                                          )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233103                         ) :
      ########################################################################
      self . ExportVTK            (                                          )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233104                         ) :
      ########################################################################
      self . ExportOBJ            (                                          )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233105                         ) :
      ########################################################################
      self . ExportSTL            (                                          )
      ########################################################################
      return
    ##########################################################################
    if                            ( at == 54233106                         ) :
      ########################################################################
      self . ExportGLTF           (                                          )
      ########################################################################
      return
    ##########################################################################
    return False
  ############################################################################
  def Menu                        ( self , pos                             ) :
    ##########################################################################
    doMenu = self . isFunction    ( self . HavingMenu                        )
    if                            ( not doMenu                             ) :
      return False
    ##########################################################################
    self   . Notify               ( 0                                        )
    ##########################################################################
    mm     = MenuManager          ( self                                     )
    ##########################################################################
    SERL   = LineEdit             ( None , self . PlanFunc                   )
    SERL   . setText              ( self . LodName                           )
    SERL   . textEdited . connect ( self . LodChanged                        )
    mm     . addWidget            ( 9999991 , SERL                           )
    ##########################################################################
    mm     . addSeparator         (                                          )
    ##########################################################################
    msg    = self . getMenuItem   ( "ControlPad"                             )
    mm     . addAction            ( 1101 , msg , True , self . Pad           )
    ##########################################################################
    msg    = self . getMenuItem   ( "TrackMouse"                             )
    mm     . addAction            ( 1102 , msg , True , self . Mouse         )
    ##########################################################################
    mm     . addSeparator         (                                          )
    ##########################################################################
    self   . ModelMenu            ( mm                                       )
    self   . FilesMenu            ( mm                                       )
    mm     . addSeparator         (                                          )
    self   . DockingMenu          ( mm                                       )
    ##########################################################################
    mm     . setFont              ( self    . menuFont ( )                   )
    aa     = mm . exec_           ( QCursor . pos      ( )                   )
    at     = mm . at              ( aa                                       )
    ##########################################################################
    if                            ( self . RunModelMenu ( at             ) ) :
      return True
    ##########################################################################
    if                            ( self . RunFilesMenu ( at             ) ) :
      return True
    ##########################################################################
    if                            ( self . RunDocking   ( mm , aa        ) ) :
      return True
    ##########################################################################
    if                            ( at == 1101                             ) :
      ########################################################################
      self . SwitchPad            (                                          )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at == 1102                             ) :
      ########################################################################
      self . SwitchMouse          (                                          )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
