# -*- coding: utf-8 -*-
#############################################################################
## 錄音
#############################################################################
import os
import sys
import time
import datetime
import threading
import pyaudio
import wave
#############################################################################
class Recorder              (                                             ) :
  ###########################################################################
  def __init__              ( self                                        ) :
    #########################################################################
    self . AudioLocker = threading . Lock    (                              )
    self . Audio       = None
    self . Stream      = None
    self . Frames      = [                                                  ]
    self . Format      = pyaudio . paInt16
    self . Device      = -1
    self . Channels    = 1
    self . Rate        = 44100
    self . Chunk       = 1024
    self . Periods     = 10 * 60 ## 十分鐘
    self . Interval    = 5
    self . Running     = False
    self . Path        = ""
    self . FileBase    = ""
    self . File        = None
    self . Filename    = ""
    self . Name        = ""
    self . Converter   = None
    #########################################################################
    return
  ###########################################################################
  def __del__               ( self                                        ) :
    #########################################################################
    self . Running = False
    #########################################################################
    return
  ###########################################################################
  def Wait              ( self , seconds                                  ) :
    #########################################################################
    NOW    = int        ( time . time ( )                                   )
    NT     = int        ( NOW + seconds                                     )
    #########################################################################
    while               ( ( self . Running ) and ( NOW < NT )             ) :
      #######################################################################
      time . sleep      ( 0.1                                               )
      NOW  = int        ( time . time ( )                                   )
    #########################################################################
    return
  ###########################################################################
  def OpenFile          ( self , index                                    ) :
    #########################################################################
    if                  ( index < 0                                       ) :
      return False
    #########################################################################
    if                  ( self . File not in [ False , None ]             ) :
      return False
    #########################################################################
    if                  ( self . Audio    in [ False , None ]             ) :
      return False
    #########################################################################
    Now             = datetime . datetime . now (                           )
    DTIME           = Now      . strftime       ( "%Y-%m-%d-%H-%M-%S"       )
    #########################################################################
    PATH            = self . Path
    BASE            = self . FileBase
    BASE            = f"{PATH}/{BASE}"
    BASE            = f"{BASE}x{index}"
    Filename        = f"{BASE}-{DTIME}.wav"
    self . Filename = Filename
    #########################################################################
    WIDTH           = self . Audio . get_sample_size ( self . Format        )
    #########################################################################
    self . File     = wave . open  ( Filename , 'wb'                        )
    self . File     . setnchannels ( self . Channels                        )
    self . File     . setsampwidth ( WIDTH                                  )
    self . File     . setframerate ( self . Rate                            )
    #########################################################################
    return True
  ###########################################################################
  def WriteFile                  ( self                                   ) :
    #########################################################################
    if                           ( self . File in [ False , None ]        ) :
      return False
    #########################################################################
    self . AudioLocker . acquire (                                          )
    FRAMES        = self . Frames
    self . Frames =              [                                          ]
    self . AudioLocker . release (                                          )
    #########################################################################
    if                           ( len ( FRAMES ) <= 0                    ) :
      return False
    #########################################################################
    self . File . writeframes    ( b'' . join ( FRAMES )                    )
    #########################################################################
    return True
  ###########################################################################
  def CloseFile         ( self                                            ) :
    #########################################################################
    if                  ( self . File in [ False , None ]                 ) :
      return False
    #########################################################################
    self . File . close (                                                   )
    self . File = None
    #########################################################################
    if                  ( self . Converter not in [ False , None ]        ) :
      if                ( len ( self . Filename ) > 0                     ) :
        #####################################################################
        th = threading . Thread ( target = self . Converter               , \
                                  args   = ( self . Filename , )            )
        th . start              (                                           )
    #########################################################################
    return True
  ###########################################################################
  def CreateAudioStream ( self , index                                    ) :
    #########################################################################
    if                  ( self . Stream not in [ False , None ]           ) :
      return False
    #########################################################################
    self . Stream = self . Audio . open                                   ( \
                      format             = self . Format                  , \
                      channels           = self . Channels                , \
                      rate               = self . Rate                    , \
                      input              = True                           , \
                      input_device_index = index                          , \
                      frames_per_buffer  = self . Chunk                     )
    #########################################################################
    return              ( self . Stream not in [ False , None ]             )
  ###########################################################################
  def StopAudioStream           ( self                                    ) :
    #########################################################################
    if                          ( self . Stream in [ False , None ]       ) :
      return False
    #########################################################################
    self . Stream . stop_stream (                                           )
    self . Stream . close       (                                           )
    self . Audio  . terminate   (                                           )
    self . Stream = None
    self . Audio  = None
    #########################################################################
    return True
  ###########################################################################
  def AppendStream               ( self                                   ) :
    #########################################################################
    if                           ( self . Stream in [ False , None ]      ) :
      return False
    #########################################################################
    try                                                                     :
      D  = self . Stream . read  ( self . Chunk                             )
    except                                                                  :
      return False
    #########################################################################
    self . AudioLocker . acquire (                                          )
    self . Frames      . append  ( D                                        )
    self . AudioLocker . release (                                          )
    #########################################################################
    return True
  ###########################################################################
  def WriteWave               ( self                                      ) :
    #########################################################################
    OFW     = self . OpenFile ( self . Device                               )
    if                        ( not OFW                                   ) :
      return False
    #########################################################################
    NOW     = int             ( time . time ( )                             )
    NT      = int             ( NOW + self . Interval                       )
    ET      = int             ( NOW + self . Periods                        )
    #########################################################################
    while                     ( ( self . Running ) and ( NOW < ET )       ) :
      #######################################################################
      time  . sleep           ( 0.1                                         )
      NOW   = int             ( time . time ( )                             )
      if                      ( NOW < NT                                  ) :
        continue
      #######################################################################
      NT    = int             ( NOW + self . Interval                       )
      #######################################################################
      self  . WriteFile       (                                             )
    #########################################################################
    self    . WriteFile       (                                             )
    self    . CloseFile       (                                             )
    #########################################################################
    return True
  ###########################################################################
  def RecordWave              ( self                                      ) :
    #########################################################################
    while                     ( self . Running                            ) :
      #######################################################################
      self . Wait             ( 2                                           )
      self . WriteWave        (                                             )
    #########################################################################
    return True
  ###########################################################################
  def Recording                        ( self                             ) :
    #########################################################################
    self   . Audio = pyaudio . PyAudio (                                    )
    #########################################################################
    CAS    = self  . CreateAudioStream ( self . Device                      )
    if                                 ( not CAS                          ) :
      return False
    #########################################################################
    self   . Running = True
    #########################################################################
    th     = threading . Thread        ( target = self . RecordWave         )
    th     . start                     (                                    )
    #########################################################################
    while                              ( self . Running                   ) :
      #######################################################################
      OK   = self . AppendStream       (                                    )
      if ( ( not OK ) and ( self . Running ) )                              :
        time . sleep                   ( 0.1                                )
        self . StopAudioStream         (                                    )
        time . sleep                   ( 0.1                                )
        self . CreateAudioStream       ( self . Device                      )
        time . sleep                   ( 0.1                                )
    #########################################################################
    self   . StopAudioStream           (                                    )
    #########################################################################
    return
  ###########################################################################
  def startup                 ( self , index                              ) :
    #########################################################################
    self . Device = index
    th   = threading . Thread ( target = self . Recording                   )
    th   . start              (                                             )
    #########################################################################
    return
#############################################################################
