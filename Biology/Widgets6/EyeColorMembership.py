# -*- coding: utf-8 -*-
##############################################################################
## EyeColorMembership
## 眼睛瞳色選擇元件
##############################################################################
import os
import sys
import time
import requests
import threading
import json
##############################################################################
from   PySide6                             import QtCore
from   PySide6                             import QtGui
from   PySide6                             import QtWidgets
from   PySide6 . QtCore                    import *
from   PySide6 . QtGui                     import *
from   PySide6 . QtWidgets                 import *
from   AITK    . Qt6                       import *
##############################################################################
from   AITK    . Essentials . Relation     import Relation
from   AITK    . Calendars  . StarDate     import StarDate
from   AITK    . Calendars  . Periode      import Periode
from   AITK    . People     . People       import People
from   AITK    . People     . Eyes . Iris  import Iris
##############################################################################
class EyeColorMembership ( TreeDock                                        ) :
  ############################################################################
  HavingMenu    = 1371434312
  ############################################################################
  emitNamesShow = Signal (                                                   )
  emitAllNames  = Signal ( list                                              )
  emitLog       = Signal ( str                                               )
  ############################################################################
  def __init__           ( self , parent = None , plan = None              ) :
    ##########################################################################
    super ( ) . __init__ (        parent        , plan                       )
    ##########################################################################
    self . ClassTag           = "EyeColorMembership"
    self . FetchTableKey      = "EyeColorMembership"
    self . GType              = 19
    self . SortOrder          = "asc"
    self . JoinRelate         = "Subordination"
    self . PeopleEyeColors    = [                                            ]
    ##########################################################################
    self . IRIS               = Iris (                                       )
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setColumnCount          ( 3                                       )
    self . setColumnHidden         ( 1 , True                                )
    self . setColumnHidden         ( 2 , True                                )
    ##########################################################################
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    self . MountClicked            ( 9                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ExtendedSelection"                     )
    ##########################################################################
    self . emitNamesShow . connect ( self . show                             )
    self . emitAllNames  . connect ( self . refresh                          )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setAcceptDrops          ( False                                   )
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . NoDragDrop          )
    ##########################################################################
    self . setMinimumSize          ( 80 , 80                                 )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 160 , 200 )                       )
  ############################################################################
  def AttachActions   ( self      ,                  Enabled               ) :
    ##########################################################################
    self . LinkAction ( "Refresh" , self . startup , Enabled                 )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                     ( self                                   ) :
    return self . defaultFocusIn  (                                          )
  ############################################################################
  def FocusOut                    ( self                                   ) :
    return self . defaultFocusOut (                                          )
  ############################################################################
  def Shutdown               ( self                                        ) :
    ##########################################################################
    self . StayAlive   = False
    self . LoopRunning = False
    ##########################################################################
    if                       ( self . isThreadRunning (                  ) ) :
      return False
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . detachActionsTool (                                               )
    self . LinkVoice         ( None                                          )
    ##########################################################################
    self . Leave . emit      ( self                                          )
    ##########################################################################
    return True
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def stateChanged            ( self , item , column                       ) :
    ##########################################################################
    if                        ( column not in [ 0                        ] ) :
      return
    ##########################################################################
    CHK   = item . checkState ( 0                                            )
    state =                   ( CHK == Qt . Checked                          )
    uuid  = item . data       ( 0 , Qt . UserRole                            )
    uuid  = int               ( uuid                                         )
    VAL   =                   ( uuid , state ,                               )
    ##########################################################################
    self  . Go                ( self . UpdateEyeColor , VAL                  )
    ##########################################################################
    return
  ############################################################################
  def ObtainUuidsQuery               ( self                                ) :
    return self . IRIS . QuerySyntax ( self . Tables [ "Eyes" ]            , \
                                       self . SortOrder                      )
  ############################################################################
  def ObtainsInformation                         ( self , DB               ) :
    ##########################################################################
    self    . ReloadLocality                     (        DB                 )
    PCOLORs = self . IRIS . FetchPeopleEyeColors ( DB , self . JoinRelate    )
    self    . PeopleEyeColors = PCOLORs
    ##########################################################################
    return
  ############################################################################
  def PrepareItem                 ( self , JSON , BRUSH                    ) :
    ##########################################################################
    UUID = JSON                   [ "Uuid"                                   ]
    ##########################################################################
    ST   = Qt . Unchecked
    ##########################################################################
    if                            ( UUID in self . PeopleEyeColors         ) :
      ST = Qt . Checked
    ##########################################################################
    NAME = JSON                   [ "Name"                                   ]
    ID   = JSON                   [ "Identifier"                             ]
    R    = JSON                   [ "R"                                      ]
    G    = JSON                   [ "G"                                      ]
    B    = JSON                   [ "B"                                      ]
    ICON = self . CreateColorIcon ( R , G , B , 24 , 24                      )
    ##########################################################################
    IT   = self . PrepareUuidItem ( 0 , UUID , NAME                          )
    IT   . setIcon                ( 0 , ICON                                 )
    IT   . setCheckState          ( 0 , ST                                   )
    IT   . setText                ( 1 , ID                                   )
    IT   . setData                ( 2 , Qt . UserRole , JSON                 )
    ##########################################################################
    for COL in                    [ 0 , 1 , 2                              ] :
      ########################################################################
      IT . setBackground          ( COL , BRUSH                              )
    ##########################################################################
    return IT
  ############################################################################
  def RefreshToolTip              ( self , Total                           ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def refresh                     ( self , LISTs                           ) :
    ##########################################################################
    self   . clear                (                                          )
    self   . setEnabled           ( False                                    )
    ##########################################################################
    CNT    = 0
    MOD    = len                  ( self . TreeBrushes                       )
    ##########################################################################
    for JSON in LISTs                                                        :
      ########################################################################
      IT   = self . PrepareItem   ( JSON , self . TreeBrushes [ CNT ]        )
      self . addTopLevelItem      ( IT                                       )
      ########################################################################
      CNT  = int                  ( int ( CNT + 1 ) % MOD                    )
    ##########################################################################
    self   . RefreshToolTip       ( len ( LISTs )                            )
    self   . setEnabled           ( True                                     )
    self   . emitNamesShow . emit (                                          )
    ##########################################################################
    return
  ############################################################################
  def LoadEyesListings                     ( self , DB                     ) :
    ##########################################################################
    LISTs  =                               [                                 ]
    UUIDs  = self . ObtainsItemUuids       ( DB                              )
    ##########################################################################
    if                                     ( len ( UUIDs ) <= 0            ) :
      return LISTs
    ##########################################################################
    EYETAB = self . Tables                 [ "Eyes"                          ]
    NAMEs  = self . ObtainsUuidNames       ( DB ,          UUIDs             )
    LISTs  = self . IRIS . QueryAllDetails ( DB , EYETAB , UUIDs , NAMEs     )
    ##########################################################################
    self   . IRIS . UUIDs = UUIDs
    self   . IRIS . NAMEs = NAMEs
    self   . IRIS . LISTs = LISTs
    ##########################################################################
    return                                 ( UUIDs , LISTs ,                 )
  ############################################################################
  def loading                        ( self                                ) :
    ##########################################################################
    DB     = self . ConnectDB        (                                       )
    ##########################################################################
    if                               ( self . NotOkay ( DB )               ) :
      ########################################################################
      self . emitNamesShow . emit    (                                       )
      ########################################################################
      return
    ##########################################################################
    self   . Notify                  ( 3                                     )
    self   . OnBusy  . emit          (                                       )
    self   . setBustle               (                                       )
    ##########################################################################
    FMT    = self . Translations     [ "UI::StartLoading"                    ]
    MSG    = FMT . format            ( self . windowTitle ( )                )
    self   . ShowStatus              ( MSG                                   )
    ##########################################################################
    self   . ObtainsInformation      ( DB                                    )
    U , L  = self . LoadEyesListings ( DB                                    )
    ##########################################################################
    self   . setVacancy              (                                       )
    self   . GoRelax . emit          (                                       )
    self   . ShowStatus              ( ""                                    )
    DB     . Close                   (                                       )
    ##########################################################################
    if                               ( len ( L ) <= 0                      ) :
      ########################################################################
      self . emitNamesShow . emit    (                                       )
      ########################################################################
      return
    ##########################################################################
    self   . emitAllNames  . emit    ( L                                     )
    self   . Notify                  ( 5                                     )
    ##########################################################################
    return
  ############################################################################
  def StartupMembership       ( self , title , uuid                        ) :
    ##########################################################################
    FMT  = self . getMenuItem ( "Title"                                      )
    self . setWindowTitle     ( FMT . format ( title                       ) )
    ##########################################################################
    self . IRIS . setPeople   (                uuid                          )
    self . startup            (                                              )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( self . ClassTag , 2                              )
    ##########################################################################
    self . LoopRunning = False
    ##########################################################################
    return
  ############################################################################
  def UpdateEyeColor            ( self , uuid , state                      ) :
    ##########################################################################
    if                          ( state                                    ) :
      ########################################################################
      if                        ( uuid not in self . PeopleEyeColors       ) :
        ######################################################################
        self . PeopleEyeColors . append ( uuid                               )
      ########################################################################
    else                                                                     :
      ########################################################################
      if                        ( uuid     in self . PeopleEyeColors       ) :
        ######################################################################
        self . PeopleEyeColors . remove ( uuid                               )
    ##########################################################################
    DB       = self . ConnectDB (                                            )
    if                          ( self . NotOkay ( DB )                    ) :
      return False
    ##########################################################################
    self     . IRIS . LockRelationTable    ( DB                              )
    self     . IRIS . AssignPeopleEyeColor ( DB                            , \
                                             uuid                          , \
                                             state                         , \
                                             self . JoinRelate               )
    ##########################################################################
    DB       . UnlockTables     (                                            )
    DB       . Close            (                                            )
    ##########################################################################
    self     . Notify           ( 5                                          )
    ##########################################################################
    return
  ############################################################################
  def UpdateLocalityUsage       ( self                                     ) :
    ##########################################################################
    DB     = self . ConnectDB   (                                            )
    if                          ( self . NotOkay ( DB )                    ) :
      return False
    ##########################################################################
    PAMTAB = self . Tables      [ "Parameters"                               ]
    DB     . LockWrites         ( [ PAMTAB                                 ] )
    ##########################################################################
    self   . SetLocalityByUuid  ( DB                                       , \
                                  PAMTAB                                   , \
                                  0                                        , \
                                  self . GType                             , \
                                  self . ClassTag                            )
    ##########################################################################
    DB     . UnlockTables       (                                            )
    DB     . Close              (                                            )
    self   . emitRestart . emit (                                            )
    ##########################################################################
    return True
  ############################################################################
  def ReloadLocality           ( self , DB                                 ) :
    ##########################################################################
    PAMTAB = self . Tables     [ "Parameters"                                ]
    self   . GetLocalityByUuid ( DB                                        , \
                                 PAMTAB                                    , \
                                 0                                         , \
                                 self . GType                              , \
                                 self . ClassTag                             )
    ##########################################################################
    return
  ############################################################################
  def ColumnsMenu                    ( self , mm                           ) :
    return self . DefaultColumnsMenu (        mm , 1                         )
  ############################################################################
  def RunColumnsMenu               ( self , at                             ) :
    ##########################################################################
    if                             ( at >= 9001 ) and ( at <= 9002 )         :
      ########################################################################
      col  = at - 9000
      hid  = self . isColumnHidden ( col                                     )
      self . setColumnHidden       ( col , not hid                           )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def JoinsMenu              ( self , mm                                   ) :
    ##########################################################################
    msg = self . getMenuItem ( "BelongTypes"                                 )
    LOM = mm   . addMenu     ( msg                                           )
    ##########################################################################
    CK  =                    ( "Subordination" == self . JoinRelate          )
    msg = self . getMenuItem ( "ConfirmEyeColor"                             )
    mm  . addActionFromMenu  ( LOM , 66471301 , msg , True , CK              )
    ##########################################################################
    CK  =                    ( "Possible"      == self . JoinRelate          )
    msg = self . getMenuItem ( "PossibleEyeColor"                            )
    mm  . addActionFromMenu  ( LOM , 66471302 , msg , True , CK              )
    ##########################################################################
    return mm
  ############################################################################
  def RunJoinsMenu ( self , at                                             ) :
    ##########################################################################
    if             ( at == 66471301                                        ) :
      ########################################################################
      self . JoinRelate = "Subordination"
      ########################################################################
      return True
    ##########################################################################
    if             ( at == 66471302                                        ) :
      ########################################################################
      self . JoinRelate = "Possible"
      ########################################################################
      return True
    ##########################################################################
    return   False
  ############################################################################
  def Menu                             ( self , pos                        ) :
    ##########################################################################
    if                                 ( not self . isPrepared ( )         ) :
      return False
    ##########################################################################
    doMenu = self . isFunction         ( self . HavingMenu                   )
    if                                 ( not doMenu                        ) :
      return False
    ##########################################################################
    self   . Notify                    ( 0                                   )
    ##########################################################################
    items  , atItem , uuid = self . GetMenuDetails ( 0                       )
    ##########################################################################
    mm     = MenuManager               ( self                                )
    ##########################################################################
    self   . AppendRefreshAction       (          mm , 1001                  )
    mm     . addSeparator              (                                     )
    self   . JoinsMenu                 ( mm                                  )
    self   . ColumnsMenu               ( mm                                  )
    self   . SortingMenu               ( mm                                  )
    self   . LocalityMenu              ( mm                                  )
    self   . DockingMenu               ( mm                                  )
    ##########################################################################
    self   . AtMenu = True
    ##########################################################################
    mm     . setFont                   ( self    . menuFont ( )              )
    aa     = mm . exec_                ( QCursor . pos      ( )              )
    at     = mm . at                   ( aa                                  )
    ##########################################################################
    self   . AtMenu = False
    ##########################################################################
    OKAY   = self . RunDocking         ( mm , aa                             )
    if                                 ( OKAY                              ) :
      return True
    ##########################################################################
    OKAY   = self . HandleLocalityMenu ( at                                  )
    if                                 ( OKAY                              ) :
      return True
    ##########################################################################
    OKAY   = self . RunColumnsMenu     ( at                                  )
    if                                 ( OKAY                              ) :
      return True
    ##########################################################################
    OKAY   = self . RunSortingMenu     ( at                                  )
    if                                 ( OKAY                              ) :
      ########################################################################
      self . restart                   (                                     )
      ########################################################################
      return True
    ##########################################################################
    OKAY   = self . RunJoinsMenu       ( at                                  )
    if                                 ( OKAY                              ) :
      ########################################################################
      self . restart                   (                                     )
      ########################################################################
      return True
    ##########################################################################
    if                                 ( at == 1001                        ) :
      ########################################################################
      self . restart                   (                                     )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
