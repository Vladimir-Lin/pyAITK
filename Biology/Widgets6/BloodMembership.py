# -*- coding: utf-8 -*-
##############################################################################
## BloodMembership
##############################################################################
import os
import sys
import time
import requests
import threading
import json
##############################################################################
from   PySide6                              import QtCore
from   PySide6                              import QtGui
from   PySide6                              import QtWidgets
from   PySide6 . QtCore                     import *
from   PySide6 . QtGui                      import *
from   PySide6 . QtWidgets                  import *
from   AITK    . Qt6                        import *
##############################################################################
from   AITK    . Essentials . Relation      import Relation
from   AITK    . Calendars  . StarDate      import StarDate
from   AITK    . Biology    . Blood . Blood import Blood
##############################################################################
class BloodMembership    ( TreeDock                                        ) :
  ############################################################################
  HavingMenu    = 1371434312
  ############################################################################
  emitNamesShow = Signal (                                                   )
  emitAllNames  = Signal ( dict                                              )
  emitLog       = Signal ( str                                               )
  ############################################################################
  def __init__           ( self , parent = None , plan = None              ) :
    ##########################################################################
    super ( ) . __init__ (        parent        , plan                       )
    ##########################################################################
    self . ClassTag           = "BloodMembership"
    self . FetchTableKey      = "BloodMembership"
    self . GType              = 203
    self . SortOrder          = "asc"
    self . UsedOptions        = [ 1 , 2 , 3 , 4 , 5                          ]
    self . GroupOptions       = [ 1                                          ]
    self . PeopleBloods       = [                                            ]
    ##########################################################################
    self . BLOOD              = Blood (                                      )
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setColumnCount          ( 2                                       )
    self . setColumnHidden         ( 1 , True                                )
    ##########################################################################
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    self . MountClicked            ( 9                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ExtendedSelection"                     )
    ##########################################################################
    self . emitNamesShow . connect ( self . show                             )
    self . emitAllNames  . connect ( self . refresh                          )
    ##########################################################################
    self . setAcceptDrops          ( False                                   )
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . NoDragDrop          )
    ##########################################################################
    self . setMinimumSize          ( 80 , 80                                 )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 200 , 160 )                       )
  ############################################################################
  def AttachActions   ( self      ,                  Enabled               ) :
    ##########################################################################
    self . LinkAction ( "Refresh" , self . startup , Enabled                 )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                     ( self                                   ) :
    return self . defaultFocusIn  (                                          )
  ############################################################################
  def FocusOut                    ( self                                   ) :
    return self . defaultFocusOut (                                          )
  ############################################################################
  def Shutdown               ( self                                        ) :
    ##########################################################################
    self . StayAlive   = False
    self . LoopRunning = False
    ##########################################################################
    if                       ( self . isThreadRunning (                  ) ) :
      return False
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . detachActionsTool (                                               )
    self . LinkVoice         ( None                                          )
    ##########################################################################
    self . Leave . emit      ( self                                          )
    ##########################################################################
    return True
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def stateChanged            ( self , item , column                       ) :
    ##########################################################################
    if                        ( column not in [ 0                        ] ) :
      return
    ##########################################################################
    CHK   = item . checkState ( 0                                            )
    state =                   ( CHK == Qt . Checked                          )
    uuid  = item . data       ( 0 , Qt . UserRole                            )
    uuid  = int               ( uuid                                         )
    VAL   =                   ( uuid , state ,                               )
    ##########################################################################
    self  . Go                ( self . UpdateBloods , VAL                    )
    ##########################################################################
    return
  ############################################################################
  def ObtainsInformation    ( self , DB                                    ) :
    ##########################################################################
    self   . ReloadLocality (        DB                                      )
    ##########################################################################
    BLOODz = self . BLOOD . FetchPeopleBloods ( DB                           )
    self   . PeopleBloods = BLOODz
    ##########################################################################
    return
  ############################################################################
  def ObtainUuidsQuery                ( self                               ) :
    return self . BLOOD . QuerySyntax ( self . Tables [ "Bloods" ]         , \
                                        self . UsedOptions                 , \
                                        self . GroupOptions                , \
                                        self . SortOrder                     )
  ############################################################################
  def PrepareItem          ( self , UUID , NAME , BRUSH                    ) :
    ##########################################################################
    ST   = Qt . Unchecked
    ##########################################################################
    if                     ( UUID in self . PeopleBloods                   ) :
      ST = Qt . Checked
    ##########################################################################
    IT   = QTreeWidgetItem (                                                 )
    IT   . setText         ( 0 , NAME                                        )
    IT   . setToolTip      ( 0 , str ( UUID )                                )
    IT   . setCheckState   ( 0 , ST                                          )
    IT   . setData         ( 0 , Qt . UserRole , str ( UUID )                )
    ##########################################################################
    for COL in             [ 0 , 1                                         ] :
      ########################################################################
      IT . setBackground   ( COL , BRUSH                                     )
    ##########################################################################
    return IT
  ############################################################################
  def RefreshToolTip              ( self , Total                           ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def refresh                     ( self , JSON                            ) :
    ##########################################################################
    self   . clear                (                                          )
    self   . setEnabled           ( False                                    )
    ##########################################################################
    CNT    = 0
    MOD    = len                  ( self . TreeBrushes                       )
    ##########################################################################
    UUIDs  = JSON                 [ "UUIDs"                                  ]
    NAMEs  = JSON                 [ "NAMEs"                                  ]
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      IT   = self . PrepareItem   ( U                                      , \
                                    NAMEs [ U ]                            , \
                                    self . TreeBrushes [ CNT ]               )
      self . addTopLevelItem      ( IT                                       )
      ########################################################################
      CNT  = int                  ( int ( CNT + 1 ) % MOD                    )
    ##########################################################################
    self   . RefreshToolTip       ( len ( UUIDs )                            )
    self   . setEnabled           ( True                                     )
    self   . emitNamesShow . emit (                                          )
    ##########################################################################
    return
  ############################################################################
  def loading                        ( self                                ) :
    ##########################################################################
    DB     = self . ConnectDB        (                                       )
    if                               ( DB == None                          ) :
      self . emitNamesShow . emit    (                                       )
      return
    ##########################################################################
    self   . Notify                  ( 3                                     )
    self   . OnBusy  . emit          (                                       )
    self   . setBustle               (                                       )
    ##########################################################################
    FMT    = self . Translations     [ "UI::StartLoading"                    ]
    MSG    = FMT . format            ( self . windowTitle ( )                )
    self   . ShowStatus              ( MSG                                   )
    ##########################################################################
    UUIDs  = self . ObtainsItemUuids ( DB                                    )
    NAMEs  = self . ObtainsUuidNames ( DB , UUIDs                            )
    ##########################################################################
    self   . setVacancy              (                                       )
    self   . GoRelax . emit          (                                       )
    self   . ShowStatus              ( ""                                    )
    DB     . Close                   (                                       )
    ##########################################################################
    if                               ( len ( UUIDs ) <= 0                  ) :
      self . emitNamesShow . emit    (                                       )
      return
    ##########################################################################
    JSON   =                         {  "UUIDs" : UUIDs , "NAMEs" : NAMEs    }
    ##########################################################################
    self   . emitAllNames . emit     ( JSON                                  )
    self   . Notify                  ( 5                                     )
    ##########################################################################
    return
  ############################################################################
  def StartupMembership       ( self , title , uuid                        ) :
    ##########################################################################
    FMT  = self . getMenuItem ( "Title"                                      )
    self . setWindowTitle     ( FMT . format ( title                       ) )
    ##########################################################################
    self . BLOOD . setPeople  (                uuid                          )
    self . startup            (                                              )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( self . ClassTag , 1                              )
    ##########################################################################
    self . LoopRunning = False
    ##########################################################################
    return
  ############################################################################
  def UpdateBloods              ( self , uuid , state                      ) :
    ##########################################################################
    if                          ( state                                    ) :
      ########################################################################
      if                        ( uuid not in self . PeopleBloods          ) :
        ######################################################################
        self . PeopleBloods . append ( uuid                                  )
      ########################################################################
    else                                                                     :
      ########################################################################
      if                        ( uuid     in self . PeopleBloods          ) :
        ######################################################################
        self . PeopleBloods . remove ( uuid                                  )
    ##########################################################################
    DB       = self . ConnectDB (                                            )
    if                          ( self . NotOkay ( DB )                    ) :
      return False
    ##########################################################################
    self     . BLOOD . LockRelationTable  ( DB                               )
    self     . BLOOD . AssignPeopleBloods ( DB , uuid , state                )
    ##########################################################################
    DB       . UnlockTables     (                                            )
    DB       . Close            (                                            )
    ##########################################################################
    self     . Notify           ( 5                                          )
    ##########################################################################
    return
  ############################################################################
  def UpdateLocalityUsage       ( self                                     ) :
    ##########################################################################
    DB     = self . ConnectDB   (                                            )
    if                          ( self . NotOkay ( DB )                    ) :
      return False
    ##########################################################################
    PAMTAB = self . Tables      [ "Parameters"                               ]
    DB     . LockWrites         ( [ PAMTAB                                 ] )
    ##########################################################################
    self   . SetLocalityByUuid  ( DB                                       , \
                                  PAMTAB                                   , \
                                  0                                        , \
                                  self . GType                             , \
                                  self . ClassTag                            )
    ##########################################################################
    DB     . UnlockTables       (                                            )
    DB     . Close              (                                            )
    self   . emitRestart . emit (                                            )
    ##########################################################################
    return True
  ############################################################################
  def ReloadLocality           ( self , DB                                 ) :
    ##########################################################################
    PAMTAB = self . Tables     [ "Parameters"                                ]
    self   . GetLocalityByUuid ( DB                                        , \
                                 PAMTAB                                    , \
                                 0                                         , \
                                 self . GType                              , \
                                 self . ClassTag                             )
    ##########################################################################
    return
  ############################################################################
  def ColumnsMenu                    ( self , mm                           ) :
    return self . DefaultColumnsMenu (        mm , 1                         )
  ############################################################################
  def RunColumnsMenu               ( self , at                             ) :
    ##########################################################################
    if                             ( at >= 9001 ) and ( at <= 9001 )         :
      ########################################################################
      col  = at - 9000
      hid  = self . isColumnHidden ( col                                     )
      self . setColumnHidden       ( col , not hid                           )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def Menu                         ( self , pos                            ) :
    ##########################################################################
    if                             ( not self . isPrepared (             ) ) :
      return False
    ##########################################################################
    doMenu = self . isFunction     ( self . HavingMenu                       )
    if                             ( not doMenu                            ) :
      return False
    ##########################################################################
    self   . Notify                ( 0                                       )
    ##########################################################################
    items  , atItem , uuid = self . GetMenuDetails ( 0                       )
    ##########################################################################
    mm     = MenuManager           ( self                                    )
    ##########################################################################
    TRX    = self . Translations
    ##########################################################################
    self   . AppendRefreshAction   ( mm , 1001                               )
    mm     . addSeparator          (                                         )
    self   . ColumnsMenu           ( mm                                      )
    self   . SortingMenu           ( mm                                      )
    self   . LocalityMenu          ( mm                                      )
    self   . DockingMenu           ( mm                                      )
    ##########################################################################
    self   . AtMenu = True
    ##########################################################################
    mm     . setFont               ( self    . menuFont (                  ) )
    aa     = mm . exec_            ( QCursor . pos      (                  ) )
    at     = mm . at               ( aa                                      )
    ##########################################################################
    self   . AtMenu = False
    ##########################################################################
    if                             ( self . RunDocking   ( mm , aa )       ) :
      return True
    ##########################################################################
    if                             ( self . HandleLocalityMenu ( at )      ) :
      return True
    ##########################################################################
    OKAY   = self . RunColumnsMenu ( at                                      )
    if                             ( OKAY                                  ) :
      return True
    ##########################################################################
    OKAY   = self . RunSortingMenu ( at                                      )
    if                             ( OKAY                                  ) :
      ########################################################################
      self . restart               (                                         )
      ########################################################################
      return True
    ##########################################################################
    if                             ( at == 1001                            ) :
      ########################################################################
      self . restart               (                                         )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
