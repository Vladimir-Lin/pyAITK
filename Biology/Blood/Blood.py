# -*- coding: utf-8 -*-
##############################################################################
## 血型元件
##############################################################################
import os
import sys
import getopt
import time
import datetime
import requests
import threading
##############################################################################
import mysql . connector
from   mysql . connector                   import Error
##############################################################################
import AITK
from   AITK  . Database   . Query          import Query
from   AITK  . Database   . Connection     import Connection
from   AITK  . Database   . Pair           import Pair
from   AITK  . Database   . Columns        import Columns
##############################################################################
from   AITK  . Documents  . ParameterQuery import ParameterQuery as ParameterQuery
from   AITK  . Essentials . Relation       import Relation       as Relation
##############################################################################
DefaultBloodJson =                                                           {
  "A"  : 5433123000000090001                                                 ,
  "B"  : 5433123000000090002                                                 ,
  "AB" : 5433123000000090003                                                 ,
  "O"  : 5433123000000090004                                                 ,
  "-"  : 5433123000000090011                                                 ,
  "+"  : 5433123000000090012                                                 }
##############################################################################
BLOODREL         = "`affiliations`.`relations_people_0009`"
BLOODPARAM       = "`cios`.`parameters`"
BloodShortType   = 203
BloodLongType    = 1100000000000000203
BloodTypeName    = "Blood"
##############################################################################
class Blood              ( Columns                                         ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    self      . Clear    (                                                   )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear          ( self                                                ) :
    ##########################################################################
    self . Columns = [                                                       ]
    self . Id      = -1
    self . Uuid    =  0
    self . Used    =  0
    self . Group   =  0
    self . Name    =  ""
    self . Comment =  ""
    self . Wiki    =  ""
    self . ltime   =  0
    ##########################################################################
    return
  ############################################################################
  def assign ( self , item                                                 ) :
    ##########################################################################
    self . Columns = item . Columns
    self . Id      = item . Id
    self . Uuid    = item . Uuid
    self . Used    = item . Used
    self . Group   = item . Group
    self . Name    = item . Name
    self . Comment = item . Comment
    self . Wiki    = item . Wiki
    self . ltime   = item . ltime
    ##########################################################################
    return
  ############################################################################
  def set            ( self , item , value                                 ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"      == a                                      ) :
      self . Id     = value
    ##########################################################################
    elif             ( "uuid"    == a                                      ) :
      self . Uuid   = value
    ##########################################################################
    elif             ( "used"    == a                                      ) :
      self . Used   = value
    ##########################################################################
    elif             ( "group"   == a                                      ) :
      self . Group  = value
    ##########################################################################
    elif             ( "name"    == a                                      ) :
      self . Name    = value
    ##########################################################################
    elif             ( "comment" == a                                      ) :
      self . Comment = value
    ##########################################################################
    elif             ( "wiki"    == a                                      ) :
      self . Wiki = value
    ##########################################################################
    elif             ( "ltime"   == a                                      ) :
      self . ltime  = value
    ##########################################################################
    return
  ############################################################################
  def get            ( self , item                                         ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"      == a                                      ) :
      return self . Id
    ##########################################################################
    if               ( "uuid"    == a                                      ) :
      return self . Uuid
    ##########################################################################
    if               ( "used"    == a                                      ) :
      return self . Used
    ##########################################################################
    if               ( "group"   == a                                      ) :
      return self . Group
    ##########################################################################
    if               ( "name"    == a                                      ) :
      return self . Name
    ##########################################################################
    if               ( "comment" == a                                      ) :
      return self . Comment
    ##########################################################################
    if               ( "wiki"    == a                                      ) :
      return self . Wiki
    ##########################################################################
    if               ( "ltime"   == a                                      ) :
      return self . ltime
    ##########################################################################
    return ""
  ############################################################################
  def tableItems        ( self                                             ) :
    return [ "id"                                                            ,
             "uuid"                                                          ,
             "used"                                                          ,
             "group"                                                         ,
             "name"                                                          ,
             "comment"                                                       ,
             "wiki"                                                          ,
             "ltime"                                                         ]
  ############################################################################
  def pair              ( self , item                                      ) :
    v = self . get      (        item                                        )
    return f"`{item}` = {v}"
  ############################################################################
  def valueItems        ( self                                             ) :
    return [ "used"                                                          ,
             "group"                                                         ,
             "name"                                                          ,
             "comment"                                                       ,
             "wiki"                                                          ]
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Id"      : self . Id                                       , \
               "Uuid"    : self . Uuid                                     , \
               "Used"    : self . Used                                     , \
               "Group"   : self . Group                                    , \
               "Name"    : self . Name                                     , \
               "Comment" : self . Comment                                  , \
               "Wiki"    : self . Wiki                                       }
  ############################################################################
  ## 血型名稱轉血型長編號
  ## Name : 血型名稱
  ############################################################################
  def NameToUuid              ( self , Name                                ) :
    ##########################################################################
    global DefaultBloodJson
    ##########################################################################
    K = Name
    K = K . strip             (                                              )
    K = K . upper             (                                              )
    ##########################################################################
    if                        ( K in DefaultBloodJson . keys ( )           ) :
      return DefaultBloodJson [ K                                            ]
    ##########################################################################
    return 0
  ############################################################################
  ## 人物加入血型
  ## DB     : 資料庫連線物件
  ## BLOOD  : 血型名稱
  ## PEOPLE : 人物長編號
  ############################################################################
  def PeopleJoinBlood      ( self , DB , BLOOD , PEOPLE                    ) :
    ##########################################################################
    global BloodTypeName
    global BLOODREL
    ##########################################################################
    R        = Relation    (                                                 )
    ##########################################################################
    R        . set         ( "first"  , BLOOD                                )
    R        . set         ( "second" , PEOPLE                               )
    R        . setT1       ( BloodTypeName                                   )
    R        . setT2       ( "People"                                        )
    R        . setRelation ( "Subordination"                                 )
    ##########################################################################
    return R . Join        ( DB       , BLOODREL                             )
  ############################################################################
  ## 人物加入血型名稱
  ## DB     : 資料庫連線物件
  ## BLOOD  : 血型名稱
  ## PEOPLE : 人物長編號
  ############################################################################
  def PeopleJoinBloodName         ( self , DB , BLOOD , PEOPLE             ) :
    ##########################################################################
    BN = self   . NameToUuid      (             BLOOD                        )
    ##########################################################################
    if                            ( BN == 0                                ) :
      return
    ##########################################################################
    return self . PeopleJoinBlood (        DB , BN    , PEOPLE               )
  ############################################################################
  ## 將血型加入參數表
  ## DB     : 資料庫連線物件
  ## BLOOD  : 血型名稱
  ## PEOPLE : 人物長編號
  ############################################################################
  def assureBloodParameter ( self , DB , BLOOD , PEOPLE                    ) :
    ##########################################################################
    global BLOODPARAM
    ##########################################################################
    PQ = ParameterQuery    ( 7 , 113 , "Profile" , BLOODPARAM                )
    ##########################################################################
    PQ . assureData        ( DB , PEOPLE , "Blood" , f"{BLOOD}"              )
    ##########################################################################
    return
  ############################################################################
  ## 將血型從參數表加入關聯表
  ## DB : 資料庫連線物件
  ############################################################################
  def ParametersToRelations         ( self , DB                            ) :
    ##########################################################################
    global BLOODPARAM
    ##########################################################################
    QQ        = f"""select `uuid`,`data` from {BLOODPARAM}
                    where ( `type` = 7 )
                      and ( `variety` = 113 )
                      and ( `scope` = 'Profile' )
                      and ( `name` = 'Blood' )
                    order by `id` asc ;"""
    QQ        = " " . join          ( QQ . split ( )                         )
    ##########################################################################
    DB        . Query               ( QQ                                     )
    ALL       = DB . FetchAll       (                                        )
    ##########################################################################
    if                              ( ALL in [ False , None ]              ) :
      ########################################################################
      return
    ##########################################################################
    if                              ( len ( ALL ) <= 0                     ) :
      ########################################################################
      return
    ##########################################################################
    for B in ALL                                                             :
      ########################################################################
      try                                                                    :
        ######################################################################
        UUID  = int                 ( B [ 0                                ] )
        BLOOD = B                   [     1                                  ]
        BLOOD = BLOOD . decode      ( "utf-8"                                )
        ######################################################################
        self  . PeopleJoinBloodName ( DB , BLOOD , UUID                      )
        ######################################################################
      except                                                                 :
        pass
    ##########################################################################
    return
##############################################################################
