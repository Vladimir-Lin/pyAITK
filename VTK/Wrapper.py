# -*- coding: utf-8 -*-
##############################################################################
## VTK Wrapper
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import math
import vtk
##############################################################################
from   AITK  . Math . Geometry . ControlPoint import ControlPoint as ControlPoint
from   AITK  . Math . Geometry . Contour      import Contour      as Contour
from   AITK  . Math . Geometry . Circle       import Circle       as Circle
from   AITK  . Math . Geometry . Cylinder     import Cylinder     as Cylinder
from   AITK  . Math . Geometry . Plane        import Plane        as Plane
from   AITK  . Math . Geometry . Parabola     import Parabola     as Parabola
from   AITK  . Math . Geometry . Sphere       import Sphere       as Sphere
from   AITK  . Math . Geometry . Polyhedron   import Polyhedron   as Polyhedron
##############################################################################
class Wrapper  (                                                           ) :
  ############################################################################
  def __init__ ( self                                                      ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  def pjsonToVtkPoint ( self , JSON                                        ) :
    return            [ JSON [ "X" ] , JSON [ "Y" ] , JSON [ "Z" ]           ]
  ############################################################################
  def GenerateFacePoints              ( self , StartId , POINTs            ) :
    ##########################################################################
    TOTALs   = len                    ( POINTs                               )
    Points   = vtk . vtkPoints        (                                      )
    Points   . SetNumberOfPoints      ( TOTALs                               )
    ##########################################################################
    id       = StartId
    ##########################################################################
    for P in POINTs                                                          :
      ########################################################################
      PS     = self . pjsonToVtkPoint ( P                                    )
      Points . SetPoint               ( id , PS                              )
      ########################################################################
      id     = id + 1
    ##########################################################################
    return Points
  ############################################################################
  def GenerateColors                   ( self , StartId , Total , Componet ) :
    ##########################################################################
    CNT   = len                        ( Componet                            )
    ##########################################################################
    C     = vtk . vtkUnsignedCharArray (                                     )
    C     . SetNumberOfComponents      ( CNT                                 )
    C     . SetNumberOfTuples          ( Total                               )
    ##########################################################################
    R     = Componet                   [ 0                                   ]
    G     = Componet                   [ 1                                   ]
    B     = Componet                   [ 2                                   ]
    ##########################################################################
    if                                 ( CNT == 3                          ) :
      ########################################################################
      for ID in range                  ( StartId , StartId + Total         ) :
        ######################################################################
        C . SetTuple3                  ( id , R , G , B                      )
      ########################################################################
    elif                               ( CNT == 4                          ) :
      ########################################################################
      T   = Componet                   [ 3                                   ]
      ########################################################################
      for ID in range                  ( StartId , StartId + Total         ) :
        ######################################################################
        C . SetTuple4                  ( id , R , G , B , T                  )
    ##########################################################################
    return C
  ############################################################################
  def GenerateCellVertices       ( self , VERTICEs , StartId , Total       ) :
    ##########################################################################
    VERTICEs   . InsertNextCell  ( Total                                     )
    ##########################################################################
    for id in range              ( StartId , StartId + Total               ) :
      ########################################################################
      VERTICEs . InsertCellPoint ( id                                        )
    ##########################################################################
    return VERTICEs
  ############################################################################
  def GenerateVertices                 ( self     , StartId , Total        ) :
    ##########################################################################
    VERTICEs    = vtk . vtkCellArray   (                                     )
    return self . GenerateCellVertices ( VERTICEs , StartId , Total          )
  ############################################################################
  def GenerateLines             ( self , LINEs                             ) :
    ##########################################################################
    LVCA   = vtk . vtkCellArray (                                            )
    for L in LINEs                                                           :
      ########################################################################
      CNT  = len                ( L                                          )
      LVCA . InsertNextCell     ( CNT , L                                    )
    ##########################################################################
    return LVCA
  ############################################################################
  def GeneratePolygons                ( self , POLYGONs                    ) :
    ##########################################################################
    PVCA    = vtk . vtkCellArray      (                                      )
    ##########################################################################
    for POLY  in POLYGONs                                                    :
      ########################################################################
      P     = vtk . vtkPolygon        (                                      )
      CNT   = len                     ( POLY                                 )
      IDX   = 0
      P     . GetPointIds ( ) . SetNumberOfIds ( CNT                         )
      ########################################################################
      for PID in POLY                                                        :
        ######################################################################
        P   . GetPointIds ( ) . SetId ( IDX , PID                            )
        ######################################################################
        IDX = IDX + 1
      ########################################################################
      PVCA  . InsertNextCell          ( P                                    )
    ##########################################################################
    return PVCA
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
