# -*- coding: utf-8 -*-
##############################################################################
## Widget
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import math
import shutil
import vtk
##############################################################################
from   PyQt5                                   import QtCore
from   PyQt5                                   import QtGui
from   PyQt5                                   import QtWidgets
##############################################################################
from   PyQt5 . QtCore                          import QObject
from   PyQt5 . QtCore                          import pyqtSignal
from   PyQt5 . QtCore                          import pyqtSlot
from   PyQt5 . QtCore                          import Qt
from   PyQt5 . QtCore                          import QPoint
from   PyQt5 . QtCore                          import QPointF
from   PyQt5 . QtCore                          import QSize
##############################################################################
from   PyQt5 . QtGui                           import QIcon
from   PyQt5 . QtGui                           import QCursor
from   PyQt5 . QtGui                           import QColor
from   PyQt5 . QtGui                           import QKeySequence
##############################################################################
from   PyQt5 . QtWidgets                       import QApplication
from   PyQt5 . QtWidgets                       import qApp
from   PyQt5 . QtWidgets                       import QWidget
from   PyQt5 . QtWidgets                       import QFileDialog
from   PyQt5 . QtWidgets                       import QSpinBox
from   PyQt5 . QtWidgets                       import QDoubleSpinBox
##############################################################################
from   vtk   . qt . QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
##############################################################################
from   AITK  . Documents . JSON                import Save        as SaveJson
##############################################################################
from   AITK  . Qt . VirtualGui                 import VirtualGui  as VirtualGui
from   AITK  . Qt . AttachDock                 import AttachDock  as AttachDock
from   AITK  . Qt . MenuManager                import MenuManager as MenuManager
from   AITK  . Qt . LineEdit                   import LineEdit    as LineEdit
from   AITK  . Qt . ComboBox                   import ComboBox    as ComboBox
from   AITK  . Qt . SpinBox                    import SpinBox     as SpinBox
##############################################################################
class VtkWidget   ( QVTKRenderWindowInteractor , VirtualGui , AttachDock   ) :
  ############################################################################
  HavingMenu  = 1371434312
  ############################################################################
  attachNone  = pyqtSignal ( QWidget                                         )
  attachDock  = pyqtSignal ( QWidget , str , int , int                       )
  attachMdi   = pyqtSignal ( QWidget , int                                   )
  Leave       = pyqtSignal ( QWidget                                         )
  ############################################################################
  emitBustle  = pyqtSignal (                                                 )
  emitVacancy = pyqtSignal (                                                 )
  OnBusy      = pyqtSignal (                                                 )
  GoRelax     = pyqtSignal (                                                 )
  ############################################################################
  def __init__ ( self , parent = None , plan = None                        ) :
    ##########################################################################
    super (                   ) . __init__ ( parent                          )
    super ( VirtualGui , self ) . __init__ (                                 )
    super ( AttachDock , self ) . __init__ (                                 )
    self . Initialize                      ( self                            )
    self . setPlanFunction                 ( plan                            )
    self . InitializeDock                  ( plan                            )
    ##########################################################################
    self . dockingOrientation = 0
    self . dockingPlace       = Qt . RightDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setFunction           ( self . FunctionDocking , True             )
    ##########################################################################
    self . setAttribute          ( Qt . WA_InputMethodEnabled                )
    self . VoiceJSON =           {                                           }
    self . bgColor   = self . getSystemColor (                               )
    ##########################################################################
    self . emitBustle  . connect ( self . DoBustle                           )
    self . emitVacancy . connect ( self . DoVacancy                          )
    self . OnBusy      . connect ( self . AtBusy                             )
    self . GoRelax     . connect ( self . OnRelax                            )
    ##########################################################################
    self . PrepareRenderer       (                                           )
    ##########################################################################
    return
  ############################################################################
  def PrepareRenderer      ( self                                          ) :
    ##########################################################################
    self . rWindow    = self . GetRenderWindow (                             )
    self . renderer   = vtk  . vtkRenderer     (                             )
    self . renderer   . SetBackground          ( 1.0 , 1.0 , 1.0             )
    self . rWindow    . AddRenderer            ( self . renderer             )
    self . interactor = self . rWindow . GetInteractor (                     )
    ## self . Initialize      (                                                 )
    ##########################################################################
    return
  ############################################################################
  def ClearRenderer ( self                                                 ) :
    ##########################################################################
    if              ( self . rWindow . HasRenderer   ( self . renderer )   ) :
      ########################################################################
      self . rWindow  . RemoveRenderer ( self . renderer                     )
      self . renderer = None
    ##########################################################################
    return
  ############################################################################
  def ChangeBackgroundColor         ( self                                 ) :
    ##########################################################################
    C    = self . getSystemColor    (                                        )
    R    = C    . redF              (                                        )
    G    = C    . greenF            (                                        )
    B    = C    . blueF             (                                        )
    ##########################################################################
    self . bgColor = C
    ##########################################################################
    self . renderer . SetBackground ( R , G , B                              )
    ##########################################################################
    return
  ############################################################################
  def AssignBackgroundColor         ( self                                 ) :
    ##########################################################################
    C    = self . bgColor
    R    = C    . redF              (                                        )
    G    = C    . greenF            (                                        )
    B    = C    . blueF             (                                        )
    ##########################################################################
    self . renderer . SetBackground ( R , G , B                              )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PrepareForActions ( self                                             ) :
    return
  ############################################################################
  def focusInEvent            ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusIn ( event )                   ) :
      return
    ##########################################################################
    super ( ) . focusInEvent  ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def focusOutEvent           ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusOut ( event )                  ) :
      return
    ##########################################################################
    super ( ) . focusOutEvent ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared ( )                   ) :
      return False
    ##########################################################################
    self . setActionLabel    ( "Label" , self . windowTitle ( )              )
    self . AttachActions     ( True                                          )
    self . attachActionsTool (                                               )
    ##########################################################################
    return True
  ############################################################################
  def FocusOut        ( self                                               ) :
    return True
  ############################################################################
  def closeEvent           ( self , event                                  ) :
    ##########################################################################
    if                     ( not self . Shutdown ( )                       ) :
      ########################################################################
      event . ignore       (                                                 )
      ########################################################################
      return
    ##########################################################################
    super ( ) . closeEvent (        event                                    )
    ##########################################################################
    return
  ############################################################################
  def contextMenuEvent           ( self , event                            ) :
    ##########################################################################
    if                           ( self . Menu ( event . pos ( ) )         ) :
      event . accept             (                                           )
      return
    ##########################################################################
    super ( ) . contextMenuEvent ( event                                     )
    ##########################################################################
    return
  ############################################################################
  def resizeEvent           ( self , event                                 ) :
    ##########################################################################
    if                      ( self . Relocation ( )                        ) :
      event . accept        (                                                )
      return
    ##########################################################################
    super ( ) . resizeEvent ( event                                          )
    ##########################################################################
    return
  ############################################################################
  def showEvent           ( self , event                                   ) :
    ##########################################################################
    super ( ) . showEvent ( event                                            )
    self . Relocation     (                                                  )
    ##########################################################################
    return
  ############################################################################
  def Relocation              ( self                                       ) :
    return False
  ############################################################################
  def Shutdown          ( self                                             ) :
    ##########################################################################
    self . Leave . emit ( self                                               )
    ##########################################################################
    return True
  ############################################################################
  def AttachActions ( self , Enabled                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  @pyqtSlot                   (                                              )
  def DoBustle                ( self                                       ) :
    self . Bustle             (                                              )
    return
  ############################################################################
  def setBustle               ( self                                       ) :
    self . emitBustle  . emit (                                              )
    return
  ############################################################################
  @pyqtSlot                   (                                              )
  def DoVacancy               ( self                                       ) :
    self . Vacancy            (                                              )
    return
  ############################################################################
  def setVacancy              ( self                                       ) :
    self . emitVacancy . emit (                                              )
    return
  ############################################################################
  def AtBusy           ( self                                              ) :
    ##########################################################################
    self . doStartBusy (                                                     )
    ##########################################################################
    return
  ############################################################################
  def OnRelax          ( self                                              ) :
    ##########################################################################
    self . doStopBusy  (                                                     )
    ##########################################################################
    return
  ############################################################################
  def PrepareMessages            ( self                                    ) :
    ##########################################################################
    IDPMSG = self . Translations [ "Docking" ] [ "None" ]
    DCKMSG = self . Translations [ "Docking" ] [ "Dock" ]
    MDIMSG = self . Translations [ "Docking" ] [ "MDI"  ]
    ##########################################################################
    self   . setLocalMessage     ( self . AttachToNone , IDPMSG              )
    self   . setLocalMessage     ( self . AttachToMdi  , MDIMSG              )
    self   . setLocalMessage     ( self . AttachToDock , DCKMSG              )
    ##########################################################################
    return
  ############################################################################
  def Visible        ( self , visible                                      ) :
    self . Visiblity (        visible                                        )
    return
  ############################################################################
  def DockIn         ( self , shown                                        ) :
    self . ShowDock  (        shown                                          )
    return
  ############################################################################
  def Docking            ( self , Main , title , area , areas              ) :
    ##########################################################################
    super ( )  . Docking (        Main , self ,  title , area , areas        )
    if                   ( self . Dock == None                             ) :
      return
    ##########################################################################
    self . Dock . visibilityChanged . connect ( self . Visible               )
    ##########################################################################
    return
  ############################################################################
  def DockingMenu                    ( self , menu                         ) :
    ##########################################################################
    canDock = self . isFunction      ( self . FunctionDocking                )
    if                               ( not canDock                         ) :
      return
    ##########################################################################
    p       = self . parentWidget    (                                       )
    S       = False
    D       = False
    M       = False
    ##########################################################################
    if                               ( p == None                           ) :
      S     = True
    else                                                                     :
      ########################################################################
      if                             ( self . isDocking ( )                ) :
        D   = True
      else                                                                   :
        M   = True
    ##########################################################################
    menu    . addSeparator           (                                       )
    ##########################################################################
    if                               (     S or D                          ) :
      msg   = self . getLocalMessage ( self . AttachToMdi                    )
      menu  . addAction              ( self . AttachToMdi  , msg             )
    ##########################################################################
    if                               (     S or M                          ) :
      msg   = self . getLocalMessage ( self . AttachToDock                   )
      menu  . addAction              ( self . AttachToDock , msg             )
    ##########################################################################
    if                               ( not S                               ) :
      msg   = self . getLocalMessage ( self . AttachToNone                   )
      menu  . addAction              ( self . AttachToNone , msg             )
    ##########################################################################
    return
  ############################################################################
  def RunDocking               ( self , menu , action                      ) :
    ##########################################################################
    at = menu . at             ( action                                      )
    ##########################################################################
    if                         ( at == self . AttachToNone                 ) :
      self . attachNone . emit ( self                                        )
      return True
    ##########################################################################
    if                         ( at == self . AttachToMdi                  ) :
      self . attachMdi  . emit ( self , self . dockingOrientation            )
      return True
    ##########################################################################
    if                         ( at == self . AttachToDock                 ) :
      self . attachDock . emit ( self                                      , \
                                 self . windowTitle ( )                    , \
                                 self . dockingPlace                       , \
                                 self . dockingPlaces                        )
      return True
    ##########################################################################
    return False
  ############################################################################
  def Menu                         ( self , pos                            ) :
    return False
  ############################################################################
  ## 清除場景內所有的角色
  ############################################################################
  def ClearActors                        ( self                            ) :
    ##########################################################################
    actors = self . renderer . GetActors (                                   )
    ##########################################################################
    for actor in actors                                                      :
      ########################################################################
      self . renderer . RemoveActor      ( actor                             )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def ImportWaveFront                        ( self , DIR , OBJ , MTL      ) :
    ##########################################################################
    CWD   = os . getcwd                      (                               )
    os    . chdir                            ( DIR                           )
    ##########################################################################
    wfobj = vtk . vtkOBJImporter             (                               )
    wfobj . SetFileName                      ( OBJ                           )
    wfobj . SetFileNameMTL                   ( MTL                           )
    ##########################################################################
    wfobj . Read                             (                               )
    wfobj . InitializeObjectBase             (                               )
    ##########################################################################
    os    . chdir                            ( CWD                           )
    ##########################################################################
    self  . ClearRenderer                    (                               )
    ##########################################################################
    self  . renderer   = wfobj . GetRenderer (                               )
    self  . AssignBackgroundColor            (                               )
    wfobj . SetRenderWindow                  ( self . rWindow                )
    ##########################################################################
    self  . rWindow    . AddRenderer         ( self . renderer               )
    self  . interactor . SetRenderWindow     ( self . rWindow                )
    ##########################################################################
    return
  ############################################################################
  def LoadZipWaveFront        ( self , PARAMETERs , ZipData                ) :
    ##########################################################################
    TMPDIR = self . Settings  [ "ModelPath"                                  ]
    CWD    = os   . getcwd    (                                              )
    ##########################################################################
    WFPATH = PARAMETERs       [ "Directory"                                  ]
    OBJ    = PARAMETERs       [ "OBJ"                                        ]
    MTL    = PARAMETERs       [ "MTL"                                        ]
    LOID   = self . LOID
    LZIP   = f"{LOID}.zip"
    TZIP   = os . path . join ( TMPDIR , LZIP                                )
    DIR    = os . path . join ( TMPDIR , WFPATH                              )
    ##########################################################################
    with open                 ( TZIP , 'wb'                           ) as f :
      f    . write            ( ZipData                                      )
    ##########################################################################
    os     . chdir            ( TMPDIR                                       )
    shutil . unpack_archive   ( LZIP , TMPDIR                                )
    os     . chdir            ( CWD                                          )
    ##########################################################################
    self   . ImportWaveFront  ( DIR , OBJ , MTL                              )
    ##########################################################################
    os     . remove           ( TZIP                                         )
    shutil . rmtree           ( DIR                                          )
    ##########################################################################
    return
  ############################################################################
  def ImportBareWaveFront            ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkOBJReader      (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    self . renderer   . AddActor     ( actor                                 )
    ##########################################################################
    return
  ############################################################################
  def LoadBareWaveFront          ( self , PARAMETERs , ZipData             ) :
    ##########################################################################
    TMPDIR = self . Settings     [ "ModelPath"                               ]
    CWD    = os   . getcwd       (                                           )
    ##########################################################################
    WFPATH = PARAMETERs          [ "Directory"                               ]
    OBJ    = PARAMETERs          [ "OBJ"                                     ]
    LOID   = self . LOID
    LZIP   = f"{LOID}.zip"
    TZIP   = os . path . join    ( TMPDIR , LZIP                             )
    DIR    = os . path . join    ( TMPDIR , WFPATH                           )
    WFOBJ  = os . path . join    ( DIR    , OBJ                              )
    ##########################################################################
    with open                    ( TZIP , 'wb'                        ) as f :
      f    . write               ( ZipData                                   )
    ##########################################################################
    os     . chdir               ( TMPDIR                                    )
    shutil . unpack_archive      ( LZIP , TMPDIR                             )
    os     . chdir               ( CWD                                       )
    ##########################################################################
    self   . ImportBareWaveFront ( WFOBJ                                     )
    ##########################################################################
    os     . remove              ( TZIP                                      )
    shutil . rmtree              ( DIR                                       )
    ##########################################################################
    return
  ############################################################################
  def ImportBareSTL                  ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkSTLReader      (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    self   . renderer . AddActor     ( actor                                 )
    ##########################################################################
    return
  ############################################################################
  def ImportBareGLTF                 ( self , FILENAME                     ) :
    ##########################################################################
    reader = vtk . vtkGLTFReader     (                                       )
    reader . SetFileName             ( FILENAME                              )
    reader . Update                  (                                       )
    ##########################################################################
    mapper = vtk . vtkPolyDataMapper (                                       )
    mapper . SetInputConnection      ( reader . GetOutputPort ( )            )
    ##########################################################################
    actor  = vtk . vtkActor          (                                       )
    actor  . SetMapper               ( mapper                                )
    ##########################################################################
    self   . renderer . AddActor     ( actor                                 )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def PrepareContent       ( self                                          ) :
    ##########################################################################
    source = vtk.vtkSphereSource()
    source . SetCenter(0, 0, 0)
    source . SetRadius(5.0)
    ##########################################################################
    ## Create a mapper
    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputConnection(source.GetOutputPort())
    ##########################################################################
    # Create an actor
    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    ##########################################################################
    self . renderer . AddActor     ( actor )
    self . renderer . ResetCamera  ( )
    ##########################################################################
    self . interactor . Initialize ( )
    self . interactor . Start      ( )
    ##########################################################################
    return
##############################################################################
