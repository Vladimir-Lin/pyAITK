# -*- coding: utf-8 -*-
##############################################################################
## VcfManager
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
##############################################################################
import PySide6
from   PySide6             import QtCore
from   PySide6             import QtGui
from   PySide6             import QtWidgets
##############################################################################
from   PySide6 . QtCore    import *
from   PySide6 . QtGui     import *
from   PySide6 . QtWidgets import *
##############################################################################
from           . VcfItem   import VcfItem as VcfItem
##############################################################################
class VcfManager      (                                                    ) :
  ############################################################################
  def __init__        ( self                                               ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def __del__         ( self                                               ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def InitializeManager       ( self , widget                              ) :
    ##########################################################################
    self . vcfItems         = [                                              ]
    self . vcfMaps          = {                                              }
    self . MasterWidget     = widget
    self . MasterJsonCaller = None
    ##########################################################################
    return
  ############################################################################
  def setJsonCaller          ( self , jsonCaller                           ) :
    ##########################################################################
    self . MasterJsonCaller = jsonCaller
    ##########################################################################
    return
  ############################################################################
  def addItem                ( self , item , parent = None                 ) :
    ##########################################################################
    if                       ( item in [ False , None ]                    ) :
      return len             ( self . vcfItems                               )
    ##########################################################################
    if                       ( item in self . vcfItems                     ) :
      ########################################################################
      self . vcfMaps [ item ] = parent
      ########################################################################
      return len             ( self . vcfItems                               )
    ##########################################################################
    item . setMenuCaller     ( self . MasterWidget . MenuCallerEmitter       )
    item . JsonCaller = self . MasterJsonCaller
    ##########################################################################
    self . vcfItems . append ( item                                          )
    self . vcfMaps [ item ] = parent
    ##########################################################################
    return   len             ( self . vcfItems                               )
  ############################################################################
  def takeItem                         ( self , item                       ) :
    ##########################################################################
    if                                 ( item in [ False , None ]          ) :
      return len                       ( self . vcfItems                     )
    ##########################################################################
    ## Looking for children
    ##########################################################################
    Children =                         [                                     ]
    for it in self . vcfItems                                                :
      ########################################################################
      if                               ( self . vcfMaps [ it ] == item     ) :
        Children . append              ( it                                  )
    ##########################################################################
    for child in Children                                                    :
      ########################################################################
      if                               ( item != child                     ) :
        self . takeItem                ( child                               )
    ##########################################################################
    AT       = self . vcfItems . index ( item                                )
    if                                 ( AT >= 0                           ) :
      del self . vcfItems              [ AT                                  ]
    ##########################################################################
    del self . vcfMaps                 [ item                                ]
    ## item . deleteLater                 (                                     )
    ##########################################################################
    return   len                       ( self . vcfItems                     )
  ############################################################################
  def toView                                     ( self , view , item      ) :
    ##########################################################################
    V = self . toScene                           (        view , item        )
    Z = view . mapFromScene ( V ) . boundingRect (                           )
    ##########################################################################
    return Z
  ############################################################################
  def toScene                                  ( self , view , item        ) :
    ##########################################################################
    R = item                    . boundingRect (                             )
    V = item . mapToScene ( R ) . boundingRect (                             )
    ##########################################################################
    return V
  ############################################################################
  def UnitedAll             ( self , view                                  ) :
    ##########################################################################
    V     = QRectF          ( 0 , 0 , 0 , 0                                  )
    CNT   = len             ( self . vcfItems                                )
    ##########################################################################
    if                      ( CNT <= 0                                     ) :
      return V
    ##########################################################################
    IT    = self . vcfItems [ 0                                              ]
    V     = self . toScene  ( view , IT                                      )
    if                      ( CNT == 1                                     ) :
      return V
    ##########################################################################
    for item in self . vcfItems                                              :
      ########################################################################
      if                    ( item != IT                                   ) :
        R = self . toScene  ( view , item                                    )
        V = V    . united   ( R                                              )
    ##########################################################################
    return V
  ############################################################################
  def United             ( self , view , rectangle                         ) :
    ##########################################################################
    V   = rectangle
    ##########################################################################
    for item in self . vcfItems                                              :
      ########################################################################
      R = self . toScene ( view , item                                       )
      V = V    . united  ( R                                                 )
    ##########################################################################
    return V
  ############################################################################
  def ItemContours ( self , parent                                         ) :
    ##########################################################################
    """
    QList<N::VcfContours *> N::VcfManager::ItemContours(VcfItem * parent)
    {
      QList<VcfContours *> contours                      ;
      for (int i=0;i<Items.count();i++)                  {
        VcfItem * item = Items[i]                        ;
        if (nEqual(Maps[item],parent))                   {
          VcfContours * c = VcfCasting(VcfContours,item) ;
          nIfSafe(c) contours << c                       ;
        }                                                ;
      }                                                  ;
      return contours                                    ;
    }
    """
    ##########################################################################
    return None
##############################################################################
