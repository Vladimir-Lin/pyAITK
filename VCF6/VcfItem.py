# -*- coding: utf-8 -*-
##############################################################################
## VcfItem
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
##############################################################################
import PySide6
from   PySide6                     import QtCore
from   PySide6                     import QtGui
from   PySide6                     import QtWidgets
##############################################################################
from   PySide6 . QtCore            import *
from   PySide6 . QtGui             import *
from   PySide6 . QtWidgets         import *
##############################################################################
from   AITK    . Qt6 . AbstractGui import AbstractGui as AbstractGui
##############################################################################
from                 . VcfOptions  import VcfOptions  as VcfOptions
from                 . VcfPainter  import VcfPainter  as VcfPainter
##############################################################################
class VcfItem                   ( QGraphicsItem                            , \
                                  AbstractGui                              ) :
  ############################################################################
  def __init__                  ( self                                     , \
                                  parent = None                            , \
                                  item   = None                            , \
                                  plan   = None                            ) :
    ##########################################################################
    super ( ) . __init__        ( item                                       )
    self . Initialize           ( self                                       )
    self . setPlanFunction      ( plan                                       )
    self . setVcfItemDefaults   (                                            )
    ##########################################################################
    return
  ############################################################################
  def __del__         ( self                                               ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def setVcfItemDefaults                 ( self                            ) :
    ##########################################################################
    self . Options          = VcfOptions (                                   )
    self . Painter          = VcfPainter (                                   )
    self . Printable        = True
    self . Editable         = True
    self . Modified         = False
    self . Overlay          = False
    self . Lockup           = False
    self . logFunc          = None
    self . Related          =            [                                   ]
    self . Relations        =            {                                   }
    self . pens             =            [                                   ]
    self . brushes          =            [                                   ]
    self . fonts            =            [                                   ]
    self . transforms       =            [                                   ]
    self . WritingPaper     = QRectF     (                                   )
    self . PaperDPI         = 300
    self . emitMenuCall     = None
    self . JsonCaller       = None
    self . ZLevelSpin       = None
    self . TransparencySpin = None
    ##########################################################################
    self . setAcceptHoverEvents          ( True                              )
    self . setAcceptDrops                ( True                              )
    ##########################################################################
    self . setFlag ( QGraphicsItem . ItemAcceptsInputMethod , True           )
    ##########################################################################
    return
  ############################################################################
  def GraphicsView    ( self                                               ) :
    ##########################################################################
    gs = self . scene (                                                      )
    if                ( gs in [ False , None ]                             ) :
      return None
    ##########################################################################
    vs = gs . views   (                                                      )
    if                ( len ( vs ) <= 0                                    ) :
      return None
    ##########################################################################
    return vs         [ 0                                                    ]
  ############################################################################
  def focusInEvent            ( self , event                               ) :
    ##########################################################################
    super ( ) . focusInEvent  (        event                                 )
    self      . FocusIn       (                                              )
    ##########################################################################
    return
  ############################################################################
  def focusOutEvent           ( self , event                               ) :
    ##########################################################################
    super ( ) . focusOutEvent (        event                                 )
    self      . FocusOut      (                                              )
    ##########################################################################
    return
  ############################################################################
  def FocusIn  ( self                                                      ) :
    return True
  ############################################################################
  def FocusOut ( self                                                      ) :
    return True
  ############################################################################
  def contextMenuEvent             ( self , event                          ) :
    ##########################################################################
    if                             ( self . isFunction ( 32001 )           ) :
      super ( ) . contextMenuEvent ( event                                   )
      return
    ##########################################################################
    if                             ( self . isFunction ( 32002 )           ) :
      self      . CallMenu         ( self , event . pos ( )                  )
    ##########################################################################
    event       . accept           (                                         )
    ##########################################################################
    return
  ############################################################################
  def pushPainters          ( self , p                                     ) :
    ##########################################################################
    self . pens    . append ( p . pen   ( )                                  )
    self . brushes . append ( p . brush ( )                                  )
    self . fonts   . append ( p . font  ( )                                  )
    ##########################################################################
    return
  ############################################################################
  def popPainters      ( self , p                                          ) :
    ##########################################################################
    AT = len           ( self . pens                                         )
    AT = AT - 1
    ##########################################################################
    if                 ( AT < 0                                            ) :
      return
    ##########################################################################
    p  . setPen        ( self . pens    [ AT ]                               )
    p  . setBrush      ( self . brushes [ AT ]                               )
    p  . setFont       ( self . fonts   [ AT ]                               )
    ##########################################################################
    del self . pens    [ AT                                                  ]
    del self . brushes [ AT                                                  ]
    del self . fonts   [ AT                                                  ]
    ##########################################################################
    return
  ############################################################################
  def setPenStyle                           ( self , Id , style            ) :
    self . Painter . pens [ Id ] . setStyle (             style              )
    return
  ############################################################################
  def setPenColor           ( self , Id , color                            ) :
    self . Painter . addPen (        Id , color                              )
    return
  ############################################################################
  def setBrushStyle                            ( self , Id , style         ) :
    self . Painter . brushes [ Id ] . setStyle (             style           )
    return
  ############################################################################
  def setBrushColor           ( self , Id , color                          ) :
    self . Painter . addBrush (        Id , color                            )
    return
  ############################################################################
  def pushTransform            ( self                                      ) :
    self . transforms . append ( self . transform ( )                        )
    return
  ############################################################################
  def PaperTransform ( self , DPI , Paper                                  ) :
    self . PaperDPI     = DPI
    self . WritingPaper = Paper
    return
  ############################################################################
  def clipRect ( self                                                      ) :
    return self . WritingPaper
  ############################################################################
  def visibleRect              ( self                                      ) :
    ##########################################################################
    gv = self . GraphicsView   (                                             )
    if                         ( gv in [ False , None ]                    ) :
      return QRectF            ( 0 , 0 , 1 , 1                               )
    ##########################################################################
    GS = gv . size             (                                             )
    GR = QRect                 ( 0 , 0 , GS . width ( ) , GS . height ( )    )
    SR = gv     . mapToScene   ( GR ) . boundingRect (                       )
    ##########################################################################
    return self . mapFromScene ( SR ) . boundingRect (                       )
  ############################################################################
  def popTransform        ( self                                           ) :
    ##########################################################################
    AT   = len            ( self . transforms                                )
    AT   = AT - 1
    if                    ( AT < 0                                         ) :
      return
    ##########################################################################
    self . setTransform   ( self . transforms [ AT ]                         )
    del self . transforms [ AT                                               ]
    ##########################################################################
    return
  ############################################################################
  def EnablePath                ( self , Id , enable                       ) :
    self . Painter . switches [ Id ] = enable
    return
  ############################################################################
  def ClearPathes               ( self                                     ) :
    self . Painter . switches = {                                            }
    self . Painter . pathes   = {                                            }
    return
  ############################################################################
  def PaintPath                      ( self , p , Id                       ) :
    ##########################################################################
    if                               ( Id not in self . Painter . pathes   ) :
      return
    ##########################################################################
    self . pushPainters              ( p                                     )
    ##########################################################################
    self . Painter . assignPainterId ( p , Id                                )
    p    . drawPath                  ( self . Painter . pathes [ Id ]        )
    ##########################################################################
    self . popPainters               ( p                                     )
    ##########################################################################
    return
  ############################################################################
  def PaintPathes                  ( self , p                              ) :
    ##########################################################################
    if                             ( len ( self.Painter.switches ) <= 0    ) :
      return
    ##########################################################################
    self . pushPainters            ( p                                       )
    self . Painter . drawAllPathes ( p                                       )
    self . popPainters             ( p                                       )
    ##########################################################################
    return
  ############################################################################
  def PaintLines                        ( self , p , Id , Lines            ) :
    ##########################################################################
    if                                  ( len ( Lines ) <= 0               ) :
      return
    ##########################################################################
    self . pushPainters                 ( p                                  )
    ##########################################################################
    self . Painter . assignPainterPenId ( p , Id                             )
    p    . drawPolyline                 ( Lines                              )
    ##########################################################################
    self . popPainters                  ( p                                  )
    ##########################################################################
    return
  ############################################################################
  def IsMask         ( self , values , mask                                ) :
    return           ( ( values & mask ) == mask                             )
  ############################################################################
  def Bustle         ( self                                                ) :
    ##########################################################################
    self . LockGui   (                                                       )
    self . setCursor ( Qt . WaitCursor                                       )
    ##########################################################################
    return True
  ############################################################################
  def Vacancy        ( self                                                ) :
    ##########################################################################
    self . setCursor ( Qt . ArrowCursor                                      )
    self . UnlockGui (                                                       )
    ##########################################################################
    return True
  ############################################################################
  def addLog       ( self , msg                                            ) :
    ##########################################################################
    if             ( self . logFunc in [ False , None ]                    ) :
      return
    ##########################################################################
    self . logFunc (        msg                                              )
    ##########################################################################
    return
  ############################################################################
  def setOptions ( self , options , privated                               ) :
    ##########################################################################
    if           ( not privated                                            ) :
      self . Options = options
      return
    ##########################################################################
    """
      Options  = new VcfOptions()             ;
    (*Options) = options                      ;
      Options -> Private = true               ;
    """
    self . Options . Private = True
    ##########################################################################
    return
  ############################################################################
  def adjustTransform ( self                                               ) :
    ##########################################################################
    """
    nDropOut ( IsNull ( Options )   ) ;
    nDropOut ( ! Options -> Private ) ;
    """
    ##########################################################################
    return
  ############################################################################
  def ItemMarriage            ( self , item , relationship                 ) :
    ##########################################################################
    if                        ( item not in self . Related                 ) :
      self . Related . append ( item                                         )
    ##########################################################################
    self . Relations [ item ] = relationship
    ##########################################################################
    return
  ############################################################################
  def ItemDivorce               ( self , item                              ) :
    ##########################################################################
    if                          ( item not in self . Related               ) :
      return
    ##########################################################################
    AT = self . Related . index ( item                                       )
    if                          ( AT < 0                                   ) :
      return
    ##########################################################################
    del self . Relations        [ item                                       ]
    del self . Related          [ AT                                         ]
    ##########################################################################
    return
  ############################################################################
  def Relationship          ( self , item                                  ) :
    ##########################################################################
    if                      ( item not in self . Related                   ) :
      return 0
    ##########################################################################
    if                      ( item not in self . Relations                 ) :
      return 0
    ##########################################################################
    return self . Relations [ item                                           ]
  ############################################################################
  def settings ( self , item                                               ) :
    return
  ############################################################################
  def mousePosition            ( self                                      ) :
    ##########################################################################
    pos = QCursor . pos        (                                             )
    gv  = self . GraphicsView  (                                             )
    if                         ( gv in [ False , None ]                    ) :
      return pos
    ##########################################################################
    pos = gv . mapFromGlobal   ( pos                                         )
    pfs = gv . mapToScene      ( pos                                         )
    ##########################################################################
    return self . mapFromScene ( pfs                                         )
  ############################################################################
  def MergePathes                ( self , TargetId                         ) :
    self . Painter . MergePathes (        TargetId                           )
    return
  ############################################################################
  def paperToPoint                 ( self , cm                             ) :
    ##########################################################################
    x = self . Options . cmToPixel ( cm . x ( ) , self . Options . PaperDPI  )
    y = self . Options . cmToPixel ( cm . y ( ) , self . Options . PaperDPI  )
    ##########################################################################
    return QPointF                 ( x , y                                   )
  ############################################################################
  def paperToRect           ( self , region                                ) :
    ##########################################################################
    S = QPointF             ( region . left  ( ) , region . top    ( )       )
    W = QPointF             ( region . width ( ) , region . height ( )       )
    S = self . paperToPoint ( S                                              )
    W = self . paperToPoint ( W                                              )
    ##########################################################################
    return QRectF           ( S . x ( ) , S . y ( ) , W . x ( ) , W . y ( )  )
  ############################################################################
  def paperToPolygon          ( self , polygon                             ) :
    ##########################################################################
    R   = QPolygonF           (                                              )
    ##########################################################################
    for v in polygon                                                         :
      ########################################################################
      z = self . paperToPoint ( v                                            )
      R . append              ( z                                            )
    ##########################################################################
    return R
  ############################################################################
  def pointToPaper                 ( self , pt                             ) :
    ##########################################################################
    x = self . Options . pixelToCm ( pt . x ( ) , self . Options . PaperDPI  )
    y = self . Options . pixelToCm ( pt . y ( ) , self . Options . PaperDPI  )
    ##########################################################################
    return QPointF                 ( x , y                                   )
  ############################################################################
  def rectToPaper           ( self , rect                                  ) :
    ##########################################################################
    S = QPointF             ( rect . left  ( ) , rect . top    ( )           )
    W = QPointF             ( rect . width ( ) , rect . height ( )           )
    S = self . pointToPaper ( S                                              )
    W = self . pointToPaper ( W                                              )
    ##########################################################################
    return QRectF           ( S . x ( ) , S . y ( ) , W . x ( ) , W . y ( )  )
  ############################################################################
  def pointToView            ( self , pos                                  ) :
    ##########################################################################
    gv = self . GraphicsView (                                               )
    if                       ( gv in [ False , None ]                      ) :
      return QPointF         ( 0.0 , 0.0                                     )
    ##########################################################################
    return gv . mapFromScene ( self . mapToScene ( pos )                     )
  ############################################################################
  def pointFromView            ( self , pos                                ) :
    ##########################################################################
    gv = self . GraphicsView   (                                             )
    if                         ( gv in [ False , None ]                    ) :
      return QPointF           ( 0.0 , 0.0                                   )
    ##########################################################################
    return self . mapFromScene ( gv . mapToScene ( pos )                     )
  ############################################################################
  def pointToGlobal          ( self , pos                                  ) :
    ##########################################################################
    gv = self . GraphicsView (                                               )
    if                       ( gv in [ False , None ]                      ) :
      return QPointF         ( 0.0 , 0.0                                     )
    ##########################################################################
    s = self  . mapToScene   ( pos                                           )
    w = gv    . mapFromScene ( s                                             )
    ##########################################################################
    return gv . mapToGlobal  ( w                                             )
  ############################################################################
  def Quadratic ( self , t , P1 , P2 , P3                                  ) :
    ##########################################################################
    mt = 1.0 - t
    tt = t
    ##########################################################################
    A  = mt * mt
    B  = mt * tt * 2
    C  = tt * tt
    ##########################################################################
    return      ( ( P1 * A ) + ( P2 * B ) + ( P3 * C )                       )
  ############################################################################
  def Cubic ( self , t , index , polygon                                   ) :
    ##########################################################################
    mt = 1.0 - t
    tt = t
    at = mt * tt * 3
    ##########################################################################
    A  = mt * mt * mt
    B  = at * mt
    C  = at * tt
    D  = tt * tt * tt
    ##########################################################################
    return  ( ( polygon [ index     ] * A )                                + \
              ( polygon [ index + 1 ] * B )                                + \
              ( polygon [ index + 2 ] * C )                                + \
              ( polygon [ index + 3 ] * D )                                  )
  ############################################################################
  def setPoints                  ( self , Id , radius , dots               ) :
    ##########################################################################
    path = QPainterPath          (                                           )
    R    = QPointF               ( radius . width ( ) , radius . height ( )  )
    R    = self . paperToPoint   ( R                                         )
    P    = self . polygonToPaper ( dots                                      )
    ##########################################################################
    for V in P                                                               :
      ########################################################################
      path . addEllipse          ( V , R . x ( ) , R . y ( )                 )
    ##########################################################################
    self . Painter . pathes [ Id ] = path
    self . update                (                                           )
    ##########################################################################
    return
  ############################################################################
  def setWideLine ( self , Id , width , Line                               ) :
    ##########################################################################
    """
    VcfShape     vs                               ;
    QPolygonF    G = vs.WideLine ( width , Line ) ;
    QPolygonF    P = toPaper     ( G            ) ;
    QPainterPath path                             ;
    path . addPolygon ( P )                       ;
    Painter . pathes [Id] = path                  ;
    update ( )                                    ;
    """
    ##########################################################################
    return
  ############################################################################
  def setFoldLines ( self , Id , width , Lines                             ) :
    ##########################################################################
    """
    VcfShape     vs                                 ;
    QPolygonF    G = vs.FoldLines ( width , Lines ) ;
    QPolygonF    P = toPaper      ( G             ) ;
    QPainterPath path                               ;
    path . addPolygon ( P )                         ;
    Painter . pathes [Id] = path                    ;
    update ( )                                      ;
    """
    ##########################################################################
    return
  ############################################################################
  def setQuadratic                 ( self , Id , polygon                   ) :
    ##########################################################################
    Total  = len                   ( polygon                                 )
    if                             ( Total < 3                             ) :
      return
    ##########################################################################
    P      = self . polygonToPaper ( polygon                                 )
    C      = QPolygonF             (                                         )
    R      = QPolygonF             (                                         )
    P0     = QPointF               (                                         )
    P1     = QPointF               (                                         )
    P2     = QPointF               (                                         )
    P3     = QPointF               (                                         )
    path   = QPainterPath          (                                         )
    ##########################################################################
    for a in range                 ( 0 , Total                             ) :
      ########################################################################
      b    = a + 1
      b    = b % Total
      c    = a + 2
      c    = c % Total
      ########################################################################
      P1   = P                     [ a                                       ]
      P2   = P                     [ b                                       ]
      P3   = P                     [ c                                       ]
      ########################################################################
      P0   = ( P1 + P2 ) / 2
      C    . append                ( P0                                      )
      P0   = self . Quadratic      ( 0.5 , P1 , P2 , P3                      )
      R    . append                ( P0                                      )
    ##########################################################################
    path   . moveTo                ( R [ 0 ]                                 )
    ##########################################################################
    for i in range                 ( 1 , Total                             ) :
      ########################################################################
      path . quadTo                ( C [ i ] , R [ i ]                       )
    ##########################################################################
    path   . quadTo                ( C [ 0 ] , R [ 0 ]                       )
    ##########################################################################
    self   . Painter . pathes [ Id ] = path
    self   . update                (                                         )
    ##########################################################################
    return
  ############################################################################
  def RectangleToQRect ( self , RT                                         ) :
    ##########################################################################
    X = RT             [ "X"                                                 ]
    Y = RT             [ "Y"                                                 ]
    W = RT             [ "W"                                                 ]
    H = RT             [ "H"                                                 ]
    ##########################################################################
    return QRect       ( X , Y , W , H                                       )
  ############################################################################
  def setMenuCaller     ( self , MenuCaller                                ) :
    ##########################################################################
    self . emitMenuCall = MenuCaller
    ##########################################################################
    return
  ############################################################################
  def CallMenu          ( self , item , pos                                ) :
    ##########################################################################
    if                  ( self . emitMenuCall in [ False , None ]          ) :
      return
    ##########################################################################
    self . emitMenuCall ( item , pos                                         )
    ##########################################################################
    return
  ############################################################################
  def LayerMenu               ( self , mm                                  ) :
    ##########################################################################
    msg  = self . getMenuItem ( "LayerProperties"                            )
    LOM  = mm   . addMenu     ( msg                                          )
    ##########################################################################
    Z    = self . zValue      (                                              )
    msg  = self . getMenuItem ( "ZLevel:"                                    )
    DSB  = QDoubleSpinBox     (                                              )
    DSB  . setPrefix          ( msg                                          )
    DSB  . setSingleStep      ( 0.01                                         )
    DSB  . setMinimum         ( -100000000.0                                 )
    DSB  . setMaximum         (  100000000.0                                 )
    DSB  . setValue           ( Z                                            )
    mm   . addWidgetWithMenu  ( LOM , 56731001 , DSB                         )
    self . ZLevelSpin       = DSB
    ##########################################################################
    T    = self . opacity     (                                              )
    T    = float              ( T * 10000.0                                  )
    msg  = self . getMenuItem ( "Transparency:"                              )
    DSB  = QDoubleSpinBox     (                                              )
    DSB  . setPrefix          ( msg                                          )
    DSB  . setSingleStep      ( 0.01                                         )
    DSB  . setMinimum         ( 0.0                                          )
    DSB  . setMaximum         ( 10000.0                                      )
    DSB  . setValue           ( T                                            )
    mm   . addWidgetWithMenu  ( LOM , 56731002 , DSB                         )
    self . TransparencySpin = DSB
    ##########################################################################
    return mm
  ############################################################################
  def RunLayerMenu                         ( self , at                     ) :
    ##########################################################################
    Z    = self . ZLevelSpin       . value (                                 )
    T    = self . TransparencySpin . value (                                 )
    ##########################################################################
    self . setZValue                       ( Z                               )
    self . setOpacity                      ( T / 10000.0                     )
    ##########################################################################
    return False
  ############################################################################
  def StatesMenu               ( self , mm                                 ) :
    ##########################################################################
    FLAGS = self . flags       (                                             )
    ##########################################################################
    MSG   = self . getMenuItem ( "ElementFlags"                              )
    LOM   = mm   . addMenu     ( MSG                                         )
    ##########################################################################
    CHECK = self . IsMask      ( FLAGS , QGraphicsItem . ItemIsMovable       )
    MSG   = self . getMenuItem ( "Movable"                                   )
    mm    . addActionFromMenu  ( LOM , 45821201 , MSG , True , CHECK         )
    ##########################################################################
    CHECK = self . IsMask      ( FLAGS , QGraphicsItem . ItemIsSelectable    )
    MSG   = self . getMenuItem ( "Selectable"                                )
    mm    . addActionFromMenu  ( LOM , 45821202 , MSG , True , CHECK         )
    ##########################################################################
    CHECK = self . IsMask      ( FLAGS , QGraphicsItem . ItemIsFocusable     )
    MSG   = self . getMenuItem ( "Focusable"                                 )
    mm    . addActionFromMenu  ( LOM , 45821203 , MSG , True , CHECK         )
    ##########################################################################
    return
  ############################################################################
  def RunStatesMenu            ( self , at                                 ) :
    ##########################################################################
    FLAGS   = self . flags     (                                             )
    ##########################################################################
    if                         ( at == 45821201                            ) :
      ########################################################################
      ITEM  = QGraphicsItem . ItemIsMovable
      CHECK = self . IsMask    ( FLAGS , ITEM                                )
      self  . setFlag          ( ITEM  , not CHECK                           )
      ########################################################################
      return True
    ##########################################################################
    if                         ( at == 45821202                            ) :
      ########################################################################
      ITEM  = QGraphicsItem . ItemIsSelectable
      CHECK = self . IsMask    ( FLAGS , ITEM                                )
      self  . setFlag          ( ITEM  , not CHECK                           )
      ########################################################################
      return True
    ##########################################################################
    if                         ( at == 45821203                            ) :
      ########################################################################
      ITEM  = QGraphicsItem . ItemIsFocusable
      CHECK = self . IsMask    ( FLAGS , ITEM                                )
      self  . setFlag          ( ITEM  , not CHECK                           )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def DoJsonCaller      ( self , JSON                                      ) :
    ##########################################################################
    if                  ( self . JsonCaller not in [ False , None ]        ) :
      self . JsonCaller ( JSON                                               )
    ##########################################################################
    return
  ############################################################################
  def DeleteItem        ( self                                             ) :
    ##########################################################################
    JSON =              { "Function" : "DeleteItem"                        , \
                          "Item"     : self                                  }
    self . DoJsonCaller ( JSON                                               )
    ##########################################################################
    return
  ############################################################################
  def AppendItem        ( self , ITEM                                      ) :
    ##########################################################################
    JSON =              { "Function" : "AppendItem"                        , \
                          "Item"     : ITEM                                , \
                          "Parent"   : self                                  }
    self . DoJsonCaller ( JSON                                               )
    ##########################################################################
    return
  ############################################################################
  def CallGeometryChange ( self                                            ) :
    ##########################################################################
    JSON =               { "Function" : "GeometryChange"                   , \
                           "Item"     : self                                 }
    self . DoJsonCaller  ( JSON                                              )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
"""
class Q_COMPONENTS_EXPORT VcfItem : public QObject
                                  , public QGraphicsItem
                                  , public AbstractGui
{
  Q_OBJECT
  Q_INTERFACES(QGraphicsItem)
  public:

    VcfOptions        * Options   ;
    VcfPainter          Painter   ;
    bool                Printable ;
    bool                Editable  ;
    bool                Modified  ;
    bool                Overlay   ;
    bool                Lockup    ;
    VcfItems            Related   ;
    QMap<VcfItem *,int> Relations ;

    explicit VcfItem                 (QObject       * parent       ,
                                      QGraphicsItem * item         ,
                                      Plan          * plan = NULL) ;
    virtual ~VcfItem                 (void);

    void ItemMarriage                (VcfItem * item,int relationship);
    void ItemDivorce                 (VcfItem * item);
    int  Relationship                (VcfItem * item);

    void setOptions                  (VcfOptions & options,bool privated = false) ;
    void setPenStyle                 (int Id,Qt::PenStyle style) ;
    void setPenColor                 (int Id,QColor color) ;
    void setBrushStyle               (int Id,Qt::BrushStyle style) ;
    void setBrushColor               (int Id,QColor color) ;

    QPointF         toPaper          (QPointF cm) ;
    QRectF          toPaper          (QRectF region) ;
    QPolygonF       toPaper          (QPolygonF & polygon) ;

    QPoint          toView           (QPointF pos) ;
    QPoint          toGlobal         (QPointF pos) ;

    QPointF         FromView         (QPoint pos) ;

    QGraphicsView * GraphicsView     (void) ;

    QPointF Quadratic                (double t,QPointF & P1,QPointF & P2,QPointF & P3) ;
    QPointF Quadratic                (double t,int index,QPolygonF & polygon) ;
    QPointF Cubic                    (double t,int index,QPolygonF & polygon) ;

    QPainterPath UnitedPathes        (void) ;

    bool FetchFont                   (int Id,SUID uuid) ;
    bool FetchPen                    (int Id,SUID uuid) ;
    bool FetchBrush                  (int Id,SUID uuid) ;
    bool FetchGradient               (int Id,SUID uuid) ;

    bool FetchFont                   (int Id,QString name) ;
    bool FetchPen                    (int Id,QString name) ;
    bool FetchBrush                  (int Id,QString name) ;
    bool FetchGradient               (int Id,QString name) ;

    virtual void   settings          (int item) ;

    void           pushTransform     (void) ;
    void           popTransform      (void) ;
    void           adjustTransform   (void) ;
    virtual void   PaperTransform    (int DPI,QRectF Paper) ;

    virtual QRectF clipRect          (void) ;
    virtual QRectF visibleRect       (void) ;

    virtual QPointF mousePosition    (void) ;

  protected:

    QList<QPen      > pens         ;
    QList<QBrush    > brushes      ;
    QList<QFont     > fonts        ;
    QList<QTransform> transforms   ;
    QRectF            WritingPaper ;
    int               PaperDPI     ;

    void           pushPainters      (QPainter * p) ;
    void           popPainters       (QPainter * p) ;

    virtual bool Bustle              (void) ;
    virtual bool Vacancy             (void) ;

    virtual void focusInEvent        (QFocusEvent * event);
    virtual void focusOutEvent       (QFocusEvent * event);

    virtual void dragEnterEvent      (QGraphicsSceneDragDropEvent * event);
    virtual void dragLeaveEvent      (QGraphicsSceneDragDropEvent * event);
    virtual void dragMoveEvent       (QGraphicsSceneDragDropEvent * event);
    virtual void dropEvent           (QGraphicsSceneDragDropEvent * event);

    bool allowDrop                   (void);

    virtual bool        acceptDrop   (nDeclWidget,const QMimeData * mime);
    virtual bool        dropNew      (nDeclWidget,const QMimeData * mime,QPointF pos);
    virtual bool        dropMoving   (nDeclWidget,const QMimeData * mime,QPointF pos);
    virtual bool        dropAppend   (nDeclWidget,const QMimeData * mime,QPointF pos);
    virtual bool        removeDrop   (void);

    virtual bool        dragEnter    (QGraphicsSceneDragDropEvent * event) ;
    virtual bool        dragMove     (QGraphicsSceneDragDropEvent * event) ;
    virtual bool        drop         (QGraphicsSceneDragDropEvent * event) ;

  private:

  public slots:

    virtual void Paint               (QPainter * painter,QRectF Region,bool clip,bool color) = 0 ;

    virtual void PaintPath           (QPainter * painter,int Id) ;
    virtual void PaintPathes         (QPainter * painter) ;
    virtual void PaintLines          (QPainter * painter,int Id,QPolygonF & Lines);

    virtual void setPoints           (int Id,QSizeF radius,QPolygonF & dots) ;
    virtual void setWideLine         (int Id,double width,QLineF & Line) ;
    virtual void setFoldLines        (int Id,double width,QPolygonF & Lines) ;
    virtual void setQuadratic        (int Id,QPolygonF & polygon);

    virtual bool FocusIn             (void) ;
    virtual bool FocusOut            (void) ;

    virtual void ClearPathes         (void) ;
    virtual void MergePathes         (int TargetId) ;
    virtual void EnablePath          (int Id,bool enable) ;

  protected slots:

  private slots:

  signals:

    void FocusIn                     (VcfItem * item);
    void FocusOut                    (VcfItem * item);
    void contentModified             (VcfItem * item);
    void Canvas                      (VcfItem * item,QRectF Screen);
    void Selection                   (VcfItem * item,QRectF Screen);

};

N::VcfItem:: VcfItem       ( QObject * parent,QGraphicsItem * item,Plan * p )
           : QObject       (           parent                               )
           , QGraphicsItem (                                  item          )
           , AbstractGui   ( (QGraphicsItem *) this               ,       p )
           , Options       ( NULL                                           )
           , Printable     ( true                                           )
           , Editable      ( true                                           )
           , Overlay       ( false                                          )
           , Lockup        ( false                                          )
{
  setAcceptHoverEvents ( true                          ) ;
  setAcceptDrops       ( true                          ) ;
  setFlag              ( ItemAcceptsInputMethod , true ) ;
}

N::VcfItem::~VcfItem (void)
{
  nDropOut    ( IsNull(Options)   ) ;
  nDropOut    ( !Options->Private ) ;
  nEnsureNull ( Options           ) ;
}

void N::VcfItem::dragEnterEvent(QGraphicsSceneDragDropEvent * event)
{
  if (allowDrop() && dragEnter(event)) event->acceptProposedAction() ; else {
    if (PassDragDrop) QGraphicsItem::dragEnterEvent(event);
    else event->ignore() ;
  };
}

void N::VcfItem::dragLeaveEvent(QGraphicsSceneDragDropEvent * event)
{
  if (removeDrop()) event->accept() ; else {
    if (PassDragDrop) QGraphicsItem::dragLeaveEvent(event);
    else event->ignore() ;
  };
}

void N::VcfItem::dragMoveEvent(QGraphicsSceneDragDropEvent * event)
{
  if (allowDrop() && dragMove(event)) event->acceptProposedAction() ; else {
    if (PassDragDrop) QGraphicsItem::dragMoveEvent(event);
    else event->ignore() ;
  };
}

void N::VcfItem::dropEvent(QGraphicsSceneDragDropEvent * event)
{
  if (allowDrop() && drop(event)) event->acceptProposedAction() ; else {
    if (PassDragDrop) QGraphicsItem::dropEvent(event);
    else event->ignore() ;
  };
}

bool N::VcfItem::allowDrop(void)
{
  return acceptDrops () ;
}

bool N::VcfItem::acceptDrop(QWidget * source,const QMimeData * mime)
{
  return dropHandler(mime) ;
}

bool N::VcfItem::dropNew(QWidget * source,const QMimeData * mime,QPointF pos)
{
  return true ;
}

bool N::VcfItem::dropMoving(QWidget * source,const QMimeData * mime,QPointF pos)
{
  return true ;
}

bool N::VcfItem::dropAppend(QWidget * source,const QMimeData * mime,QPointF pos)
{
  return dropItems(source,mime,pos) ;
}

bool N::VcfItem::removeDrop(void)
{
  return false ;
}

bool N::VcfItem::dragEnter(QGraphicsSceneDragDropEvent * event)
{
  nKickOut(!acceptDrop(event->source(),event->mimeData()             ),false) ;
  nKickOut(!dropNew   (event->source(),event->mimeData(),event->pos()),false) ;
  return true                                                                 ;
}

bool N::VcfItem::dragMove(QGraphicsSceneDragDropEvent  * event)
{
  nKickOut(!acceptDrop(event->source(),event->mimeData()             ),false) ;
  nKickOut(!dropMoving(event->source(),event->mimeData(),event->pos()),false) ;
  return true                                                                 ;
}

bool N::VcfItem::drop(QGraphicsSceneDragDropEvent * event)
{
  nKickOut(!acceptDrop(event->source(),event->mimeData()             ),false) ;
  nKickOut(!dropAppend(event->source(),event->mimeData(),event->pos()),false) ;
  return true                                                                 ;
}

bool N::VcfItem::FetchFont(int Id,SUID uuid)
{
  GraphicsManager GM (plan )                              ;
  EnterSQL ( SC , plan->sql )                             ;
    Painter . fonts     [Id] = GM . GetFont ( SC , uuid ) ;
  LeaveSQL ( SC , plan->sql )                             ;
  return true                                             ;
}

bool N::VcfItem::FetchPen(int Id,SUID uuid)
{
  GraphicsManager GM (plan )                             ;
  EnterSQL ( SC , plan->sql )                            ;
    Painter . pens      [Id] = GM . GetPen ( SC , uuid ) ;
  LeaveSQL ( SC , plan->sql )                            ;
  return true                                            ;
}

bool N::VcfItem::FetchBrush(int Id,SUID uuid)
{
  GraphicsManager GM (plan )                               ;
  EnterSQL ( SC , plan->sql )                              ;
    Painter . brushes   [Id] = GM . GetBrush ( SC , uuid ) ;
  LeaveSQL ( SC , plan->sql )                              ;
  return true ;
}

bool N::VcfItem::FetchGradient(int Id,SUID uuid)
{
  GraphicsManager GM (plan )                                  ;
  EnterSQL ( SC , plan->sql )                                 ;
    Painter . gradients [Id] = GM . GetGradient ( SC , uuid ) ;
  LeaveSQL ( SC , plan->sql )                                 ;
  return true ;
}

bool N::VcfItem::FetchFont(int Id,QString name)
{
  GraphicsManager GM (plan )                              ;
  EnterSQL ( SC , plan->sql )                             ;
    Painter . fonts     [Id] = GM . GetFont ( SC , name ) ;
  LeaveSQL ( SC , plan->sql )                             ;
  return true                                             ;
}

bool N::VcfItem::FetchPen(int Id,QString name)
{
  GraphicsManager GM (plan )                             ;
  EnterSQL ( SC , plan->sql )                            ;
    Painter . pens      [Id] = GM . GetPen ( SC , name ) ;
  LeaveSQL ( SC , plan->sql )                            ;
  return true                                            ;
}

bool N::VcfItem::FetchBrush(int Id,QString name)
{
  GraphicsManager GM (plan )                               ;
  EnterSQL ( SC , plan->sql )                              ;
    Painter . brushes   [Id] = GM . GetBrush ( SC , name ) ;
  LeaveSQL ( SC , plan->sql )                              ;
  return true                                              ;
}

bool N::VcfItem::FetchGradient(int Id,QString name)
{
  GraphicsManager GM (plan )                                  ;
  EnterSQL ( SC , plan->sql )                                 ;
    Painter . gradients [Id] = GM . GetGradient ( SC , name ) ;
  LeaveSQL ( SC , plan->sql )                                 ;
  return true                                                 ;
}
"""
