# -*- coding: utf-8 -*-
##############################################################################
## RGBi
## RGB顏色模型 0~255整數值域
##############################################################################
import cv2
import numpy as np
import colour
from . CommonColor import CommonColor
##############################################################################
class RGBi                  ( CommonColor                                  ) :
  ############################################################################
  def __init__              ( self                                         ) :
    ##########################################################################
    self . ColorModel = "RGB"
    self . ValueType  = "UInt8"
    ##########################################################################
    self . R          = int ( 0                                              )
    self . G          = int ( 0                                              )
    self . B          = int ( 0                                              )
    ##########################################################################
    return
  ############################################################################
  def __init__              ( self , R , G , B                             ) :
    ##########################################################################
    self . ColorModel = "RGB"
    self . ValueType  = "UInt8"
    ##########################################################################
    self . R          = int ( R                                              )
    self . G          = int ( G                                              )
    self . B          = int ( B                                              )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ## 轉成JSON格式
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Model" : "RGB"                                             , \
               "Value" : "UInt8"                                           , \
               "R"     : self . R                                          , \
               "G"     : self . G                                          , \
               "B"     : self . B                                            }
  ############################################################################
  ## 從JSON格式轉換顏色模型
  ############################################################################
  def fromJson     ( self , JSON                                           ) :
    ##########################################################################
    KEYs =         [ "Model" , "Value" , "R" , "G" , "B"                     ]
    ##########################################################################
    for K in KEYs                                                            :
      if           ( K not in JSON                                         ) :
        return False
    ##########################################################################
    if             ( "RGB"   != JSON [ "Model" ]                           ) :
      return   False
    ##########################################################################
    if             ( "UInt8" != JSON [ "Value" ]                           ) :
      return   False
    ##########################################################################
    self . R = int ( JSON [ "R" ]                                            )
    self . G = int ( JSON [ "G" ]                                            )
    self . B = int ( JSON [ "B" ]                                            )
    ##########################################################################
    return     True
  ############################################################################
  def fromRGBf                   ( self , fRGB                             ) :
    ##########################################################################
    self . R = self . ScaleUInt8 (        fRGB . R                           )
    self . G = self . ScaleUInt8 (        fRGB . G                           )
    self . B = self . ScaleUInt8 (        fRGB . B                           )
    ##########################################################################
    return True
  ############################################################################
  def fromRGBAi    ( self , iRGBA                                          ) :
    ##########################################################################
    self . R = int ( iRGBA . R                                               )
    self . G = int ( iRGBA . G                                               )
    self . B = int ( iRGBA . B                                               )
    ##########################################################################
    return True
  ############################################################################
  def toRGB ( self                                                         ) :
    return  [ self . R , self . G , self . B                                 ]
  ############################################################################
  def toBGR ( self                                                         ) :
    return  [ self . B , self . G , self . R                                 ]
  ############################################################################
  def toNpBGR         ( self                                               ) :
    return np . array ( [ [ self . toBGR ( ) ] ] , dtype = np . uint8        )
  ############################################################################
  def toNpRGB         ( self                                               ) :
    return np . array ( [ [ self . toRGB ( ) ] ] , dtype = np . uint8        )
  ############################################################################
  def fromCvRGB    ( self , RGB                                            ) :
    ##########################################################################
    self . R = int ( RGB [ 0 ]                                               )
    self . G = int ( RGB [ 1 ]                                               )
    self . B = int ( RGB [ 2 ]                                               )
    ##########################################################################
    return
  ############################################################################
  def fromCvBGR    ( self , BGR                                            ) :
    ##########################################################################
    self . B = int ( BGR [ 0 ]                                               )
    self . G = int ( BGR [ 1 ]                                               )
    self . R = int ( BGR [ 2 ]                                               )
    ##########################################################################
    return
  ############################################################################
  def Distance          ( self ,                       C                   ) :
    ##########################################################################
    NP = self . toNpRGB (                                                    )
    ##########################################################################
    return np . sqrt    ( np . sum ( ( NP [ 0 ][ 0 ] - C ) ** 2            ) )
##############################################################################
