# -*- coding: utf-8 -*-
##############################################################################
## RGBf
## RGB顏色模型 0~1浮點值域
##############################################################################
import cv2
import numpy as np
import colour
from . CommonColor import CommonColor
##############################################################################
class RGBf                    ( CommonColor                                ) :
  ############################################################################
  def __init__                ( self                                       ) :
    ##########################################################################
    self . ColorModel = "RGB"
    self . ValueType  = "Double"
    ##########################################################################
    self . R          = float ( 0.0                                          )
    self . G          = float ( 0.0                                          )
    self . B          = float ( 0.0                                          )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ## 轉成JSON格式
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Model" : "RGB"                                             , \
               "Value" : "Float"                                           , \
               "R"     : self . R                                          , \
               "G"     : self . G                                          , \
               "B"     : self . B                                            }
  ############################################################################
  ## 從JSON格式轉換顏色模型
  ############################################################################
  def fromJson       ( self , JSON                                         ) :
    ##########################################################################
    KEYs =           [ "Model" , "Value" , "R" , "G" , "B"                   ]
    ##########################################################################
    for K in KEYs                                                            :
      if             ( K not in JSON                                       ) :
        return False
    ##########################################################################
    if               ( "RGB"   != JSON [ "Model" ]                         ) :
      return   False
    ##########################################################################
    if               ( "Float" != JSON [ "Value" ]                         ) :
      return   False
    ##########################################################################
    self . R = float ( JSON [ "R" ]                                          )
    self . G = float ( JSON [ "G" ]                                          )
    self . B = float ( JSON [ "B" ]                                          )
    ##########################################################################
    return     True
  ############################################################################
  def fromRGBi                   ( self , iRGB                             ) :
    ##########################################################################
    self . R = self . ScaleFloat (        iRGB . R                           )
    self . G = self . ScaleFloat (        iRGB . G                           )
    self . B = self . ScaleFloat (        iRGB . B                           )
    ##########################################################################
    return
  ############################################################################
  def toRGB ( self                                                         ) :
    return  [ self . R , self . G , self . B                                 ]
  ############################################################################
  def toBGR ( self                                                         ) :
    return  [ self . B , self . G , self . R                                 ]
  ############################################################################
  def toNpBGR         ( self                                               ) :
    return np . array ( [ [ self . toBGR ( ) ] ] , dtype = np . float64      )
  ############################################################################
  def toNpRGB         ( self                                               ) :
    return np . array ( [ [ self . toRGB ( ) ] ] , dtype = np . float64      )
  ############################################################################
  def fromCvRGB      ( self , RGB                                          ) :
    ##########################################################################
    self . R = float ( RGB [ 0 ]                                             )
    self . G = float ( RGB [ 1 ]                                             )
    self . B = float ( RGB [ 2 ]                                             )
    ##########################################################################
    return
  ############################################################################
  def fromCvBGR      ( self , BGR                                          ) :
    ##########################################################################
    self . B = float ( BGR [ 0 ]                                             )
    self . G = float ( BGR [ 1 ]                                             )
    self . R = float ( BGR [ 2 ]                                             )
    ##########################################################################
    return
  ############################################################################
  def Distance          ( self ,                       C                   ) :
    ##########################################################################
    NP = self . toNpRGB (                                                    )
    ##########################################################################
    return np . sqrt    ( np . sum ( ( NP [ 0 ][ 0 ] - C ) ** 2            ) )
##############################################################################
