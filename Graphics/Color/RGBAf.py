# -*- coding: utf-8 -*-
##############################################################################
## RGBAf
## RGBA顏色模型 0~1浮點值域
##############################################################################
import cv2
import numpy as np
import colour
from . CommonColor import CommonColor
##############################################################################
class RGBAf                   ( CommonColor                                ) :
  ############################################################################
  def __init__                ( self                                       ) :
    ##########################################################################
    self . ColorModel = "RGBA"
    self . ValueType  = "Double"
    ##########################################################################
    self . R          = float ( 0.0                                          )
    self . G          = float ( 0.0                                          )
    self . B          = float ( 0.0                                          )
    self . A          = float ( 1.0                                          )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ## 轉成JSON格式
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Model" : "RGBA"                                            , \
               "Value" : "Float"                                           , \
               "R"     : self . R                                          , \
               "G"     : self . G                                          , \
               "B"     : self . B                                          , \
               "A"     : self . A                                            }
  ############################################################################
  ## 從JSON格式轉換顏色模型
  ############################################################################
  def fromJson       ( self , JSON                                         ) :
    ##########################################################################
    KEYs =           [ "Model" , "Value" , "R" , "G" , "B" , "A"             ]
    ##########################################################################
    for K in KEYs                                                            :
      if             ( K not in JSON                                       ) :
        return False
    ##########################################################################
    if               ( "RGB"   != JSON [ "Model" ]                         ) :
      return   False
    ##########################################################################
    if               ( "Float" != JSON [ "Value" ]                         ) :
      return   False
    ##########################################################################
    self . R = float ( JSON [ "R" ]                                          )
    self . G = float ( JSON [ "G" ]                                          )
    self . B = float ( JSON [ "B" ]                                          )
    self . A = float ( JSON [ "A" ]                                          )
    ##########################################################################
    return     True
  ############################################################################
  def fromRGBAi                  ( self , iRGBA                            ) :
    ##########################################################################
    self . R = self . ScaleFloat (        iRGBA . R                          )
    self . G = self . ScaleFloat (        iRGBA . G                          )
    self . B = self . ScaleFloat (        iRGBA . B                          )
    self . A = self . ScaleFloat (        iRGBA . A                          )
    ##########################################################################
    return
  ############################################################################
  def toRGBA ( self                                                        ) :
    return   [ self . R , self . G , self . B , self . A                     ]
  ############################################################################
  def toABGR ( self                                                        ) :
    return   [ self . A , self . B , self . G , self . R                     ]
  ############################################################################
  def toNpABGR        ( self                                               ) :
    return np . array ( [ [ self . toABGR ( ) ] ] , dtype = np . float64     )
  ############################################################################
  def toNpRGBA        ( self                                               ) :
    return np . array ( [ [ self . toRGBA ( ) ] ] , dtype = np . float64     )
  ############################################################################
  def fromCvRGBA     ( self , RGBA                                         ) :
    ##########################################################################
    self . R = float ( RGBA [ 0 ]                                            )
    self . G = float ( RGBA [ 1 ]                                            )
    self . B = float ( RGBA [ 2 ]                                            )
    self . A = float ( RGBA [ 3 ]                                            )
    ##########################################################################
    return
  ############################################################################
  def fromCvABGR     ( self , ABGR                                         ) :
    ##########################################################################
    self . A = float ( ABGR [ 0 ]                                            )
    self . B = float ( ABGR [ 1 ]                                            )
    self . G = float ( ABGR [ 2 ]                                            )
    self . R = float ( ABGR [ 3 ]                                            )
    ##########################################################################
    return
  ############################################################################
  def Distance           ( self ,                       C                  ) :
    ##########################################################################
    NP = self . toNpRGBA (                                                   )
    ##########################################################################
    return np . sqrt     ( np . sum ( ( NP [ 0 ][ 0 ] - C ) ** 2           ) )
##############################################################################
