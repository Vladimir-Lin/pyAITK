# -*- coding: utf-8 -*-
##############################################################################
## RGBAf
## RGBA顏色模型 0~1浮點值域
##############################################################################
import cv2
import numpy as np
import colour
from . CommonColor import CommonColor
##############################################################################
class RGBAf                   ( CommonColor                                ) :
  ############################################################################
  def __init__                ( self                                       ) :
    ##########################################################################
    self . ColorModel = "RGBA"
    self . ValueType  = "Float"
    ##########################################################################
    self . R          = float ( 0.0                                          )
    self . G          = float ( 0.0                                          )
    self . B          = float ( 0.0                                          )
    self . A          = float ( 1.0                                          )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ## 轉成JSON格式
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Model" : "RGBA"                                            , \
               "Value" : "Float"                                           , \
               "R"     : self . R                                          , \
               "G"     : self . G                                          , \
               "B"     : self . B                                          , \
               "A"     : self . A                                            }
  ############################################################################
  ## 從JSON格式轉換顏色模型
  ############################################################################
  def fromJson       ( self , JSON                                         ) :
    ##########################################################################
    KEYs =           [ "Model" , "Value" , "R" , "G" , "B" , "A"             ]
    ##########################################################################
    for K in KEYs                                                            :
      if             ( K not in JSON                                       ) :
        return False
    ##########################################################################
    if               ( "RGB"   != JSON [ "Model" ]                         ) :
      return   False
    ##########################################################################
    if               ( "Float" != JSON [ "Value" ]                         ) :
      return   False
    ##########################################################################
    self . R = float ( JSON [ "R" ]                                          )
    self . G = float ( JSON [ "G" ]                                          )
    self . B = float ( JSON [ "B" ]                                          )
    self . A = float ( JSON [ "A" ]                                          )
    ##########################################################################
    return     True
  ############################################################################
  def fromRGBAi                       ( self , iRGBA                       ) :
    ##########################################################################
    self . R = self . ConstraintFloat ( float ( iRGBA . R ) / 255.0          )
    self . G = self . ConstraintFloat ( float ( iRGBA . G ) / 255.0          )
    self . B = self . ConstraintFloat ( float ( iRGBA . B ) / 255.0          )
    self . A = self . ConstraintFloat ( float ( iRGBA . A ) / 255.0          )
    ##########################################################################
    return
##############################################################################
