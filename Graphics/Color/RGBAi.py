# -*- coding: utf-8 -*-
##############################################################################
## RGBAi
## RGBA顏色模型 0~255整數值域
##############################################################################
import cv2
import numpy as np
import colour
from . CommonColor import CommonColor
##############################################################################
class RGBAi                 ( CommonColor                                  ) :
  ############################################################################
  def __init__              ( self                                         ) :
    ##########################################################################
    self . ColorModel = "RGBA"
    self . ValueType  = "UInt8"
    ##########################################################################
    self . R          = int ( 0                                              )
    self . G          = int ( 0                                              )
    self . B          = int ( 0                                              )
    self . A          = int ( 255                                            )
    ##########################################################################
    return
  ############################################################################
  def __init__              ( self , R , G , B , A                         ) :
    ##########################################################################
    self . ColorModel = "RGBA"
    self . ValueType  = "UInt8"
    ##########################################################################
    self . R          = int ( R                                              )
    self . G          = int ( G                                              )
    self . B          = int ( B                                              )
    self . A          = int ( A                                              )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  ## 轉成JSON格式
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Model" : "RGBA"                                            , \
               "Value" : "UInt8"                                           , \
               "R"     : self . R                                          , \
               "G"     : self . G                                          , \
               "B"     : self . B                                          , \
               "A"     : self . A                                            }
  ############################################################################
  ## 從JSON格式轉換顏色模型
  ############################################################################
  def fromJson     ( self , JSON                                           ) :
    ##########################################################################
    KEYs =         [ "Model" , "Value" , "R" , "G" , "B" , "A"               ]
    ##########################################################################
    for K in KEYs                                                            :
      if           ( K not in JSON                                         ) :
        return False
    ##########################################################################
    if             ( "RGBA"  != JSON [ "Model" ]                           ) :
      return   False
    ##########################################################################
    if             ( "UInt8" != JSON [ "Value" ]                           ) :
      return   False
    ##########################################################################
    self . R = int ( JSON [ "R" ]                                            )
    self . G = int ( JSON [ "G" ]                                            )
    self . B = int ( JSON [ "B" ]                                            )
    self . A = int ( JSON [ "A" ]                                            )
    ##########################################################################
    return     True
  ############################################################################
  def fromRGBAf                  ( self , fRGB                             ) :
    ##########################################################################
    self . R = self . ScaleUInt8 (        fRGB . R                           )
    self . G = self . ScaleUInt8 (        fRGB . G                           )
    self . B = self . ScaleUInt8 (        fRGB . B                           )
    self . A = self . ScaleUInt8 (        fRGB . A                           )
    ##########################################################################
    return
  ############################################################################
  def fromRGBi     ( self , iRGB                                           ) :
    ##########################################################################
    self . R = int (        iRGB . R                                         )
    self . G = int (        iRGB . G                                         )
    self . B = int (        iRGB . B                                         )
    ##########################################################################
    return
  ############################################################################
  def toRGBA ( self                                                        ) :
    return   [ self . R , self . G , self . B , self . A                     ]
  ############################################################################
  def toABGR ( self                                                        ) :
    return   [ self . A , self . B , self . G , self . R                     ]
  ############################################################################
  def toNpABGR        ( self                                               ) :
    return np . array ( [ [ self . toABGR ( ) ] ] , dtype = np . uint8       )
  ############################################################################
  def toNpRGBA        ( self                                               ) :
    return np . array ( [ [ self . toRGBA ( ) ] ] , dtype = np . uint8       )
  ############################################################################
  def fromCvRGBA   ( self , RGBA                                           ) :
    ##########################################################################
    self . R = int ( RGBA [ 0 ]                                              )
    self . G = int ( RGBA [ 1 ]                                              )
    self . B = int ( RGBA [ 2 ]                                              )
    self . A = int ( RGBA [ 3 ]                                              )
    ##########################################################################
    return
  ############################################################################
  def fromCvABGR   ( self , ABGR                                           ) :
    ##########################################################################
    self . A = int ( ABGR [ 0 ]                                              )
    self . B = int ( ABGR [ 1 ]                                              )
    self . G = int ( ABGR [ 2 ]                                              )
    self . R = int ( ABGR [ 3 ]                                              )
    ##########################################################################
    return
  ############################################################################
  def Distance           ( self ,                       C                  ) :
    ##########################################################################
    NP = self . toNpRGBA (                                                   )
    ##########################################################################
    return np . sqrt     ( np . sum ( ( NP [ 0 ][ 0 ] - C ) ** 2           ) )
##############################################################################
