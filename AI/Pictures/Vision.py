# -*- coding: utf-8 -*-
##############################################################################
## 行事曆處理回應程序
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import mediapipe
from   mediapipe . tasks               import python
from   mediapipe . tasks . python      import vision
##############################################################################
class Vision   (                                                           ) :
  ############################################################################
  def __init__ ( self                                                      ) :
    ##########################################################################
    self . Catalog    = None
    self . Classifier = ""
    self . BaseOpts   = None
    ##########################################################################
    self . Tron       = None
    self . Detection  = ""
    self . TronOpts   = None
    ##########################################################################
    return
  ############################################################################
  ## 取得Mediapipe影像
  ############################################################################
  def Image ( self , FILENAME                                              ) :
    return mediapipe . Image . create_from_file ( FILENAME                   )
  ############################################################################
  ## 指定物件偵測參數
  ############################################################################
  def setObjectronPath ( self                                              , \
                         detection                                         , \
                         MAXITEMS  = 5000                                  , \
                         THRESHOLD = 0.5                                   ) :
    ##########################################################################
    ObjectDetector        = mediapipe . tasks . vision . ObjectDetector
    ObjectDetectorOptions = mediapipe . tasks . vision . ObjectDetectorOptions
    VisionRunningMode     = mediapipe . tasks . vision . RunningMode
    ##########################################################################
    self . Tron      = None
    self . Detection = detection
    self . TronOpts  = mediapipe . tasks . BaseOptions ( model_asset_path = detection )
    ##########################################################################
    OPTS             = ObjectDetectorOptions                               ( \
                          base_options    = self . TronOpts                , \
                          max_results     = MAXITEMS                       , \
                          score_threshold = THRESHOLD                      , \
                          running_mode    = VisionRunningMode . IMAGE        )
    ##########################################################################
    self . Tron      = ObjectDetector . create_from_options ( OPTS           )
    ##########################################################################
    return
  ############################################################################
  ## 執行物件偵測
  ############################################################################
  def ObjectDetection ( self                                               , \
                        IMAGE                                              , \
                        Probability = 0.1                                  ) :
    ##########################################################################
    ITEMs  =          [                                                      ]
    RESULT = self . Tron . detect ( IMAGE                                    )
    ##########################################################################
    for OBJ in RESULT . detections                                           :
      ########################################################################
      F = False
      J = { "Box"        : { }                                             , \
            "Categories" : [ ]                                               }
      ########################################################################
      J [ "Box" ] [ "X" ] = OBJ . bounding_box . origin_x
      J [ "Box" ] [ "Y" ] = OBJ . bounding_box . origin_y
      J [ "Box" ] [ "W" ] = OBJ . bounding_box . width
      J [ "Box" ] [ "H" ] = OBJ . bounding_box . height
      ########################################################################
      for item in OBJ . categories                                           :
        ######################################################################
        IDX = -1
        NAM = ""
        PRT = 0.0
        CAX = ""
        ######################################################################
        if ( item . index         not in [ False , None                  ] ) :
          ####################################################################
          IDX = item . index
        ######################################################################
        if ( item . display_name  not in [ False , None                  ] ) :
          ####################################################################
          NAM = item . display_name
        ######################################################################
        if ( item . score         not in [ False , None                  ] ) :
          ####################################################################
          PRT = item . score
        ######################################################################
        if ( item . category_name not in [ False , None                  ] ) :
          ####################################################################
          CAX = item . category_name
        ######################################################################
        K = { "Id"          : IDX                                          , \
              "Name"        : NAM                                          , \
              "Probability" : PRT                                          , \
              "Category"    : CAX                                            }
        ######################################################################
        J [ "Categories" ] . append ( K                                      )
        ######################################################################
        if ( PRT >= Probability                                            ) :
          ####################################################################
          F = True
      ########################################################################
      if               ( F                                                 ) :
        ######################################################################
        ITEMs . append ( J                                                   )
    ##########################################################################
    return ITEMs
  ############################################################################
  ## 指定圖像分類參數
  ############################################################################
  def setClassifierPath ( self , classifier , MAXITEMS = 5000              ) :
    ##########################################################################
    ImageClassifier        = mediapipe . tasks . vision . ImageClassifier
    ImageClassifierOptions = mediapipe . tasks . vision . ImageClassifierOptions
    VisionRunningMode      = mediapipe . tasks . vision . RunningMode
    ##########################################################################
    self . Catalog    = None
    self . Classifier = classifier
    self . BaseOpts   = mediapipe . tasks . BaseOptions ( model_asset_path = classifier )
    ##########################################################################
    OPTS              = ImageClassifierOptions                             ( \
                          base_options = self . BaseOpts                   , \
                          max_results  = MAXITEMS                          , \
                          running_mode = VisionRunningMode . IMAGE           )
    ##########################################################################
    self . Catalog = ImageClassifier . create_from_options ( OPTS            )
    ##########################################################################
    return
  ############################################################################
  ## 執行圖像分類
  ############################################################################
  def Classification ( self                                                , \
                       IMAGE                                               , \
                       Probability = 0.00001                               ) :
    ##########################################################################
    if               ( self . Catalog in [ False , None                  ] ) :
      return         [                                                       ]
    ##########################################################################
    ITEMs  =         [                                                       ]
    ##########################################################################
    RESULT = self . Catalog . classify ( IMAGE                               )
    ##########################################################################
    for Scope in RESULT . classifications                                    :
      ########################################################################
      for item in Scope . categories                                         :
        ######################################################################
        if ( item . score < Probability                                    ) :
          continue
        ######################################################################
        J = { "Id"          : item . index                                   ,
              "Name"        : item . display_name                            ,
              "Probability" : item . score                                   ,
              "Category"    : item . category_name                           }
        ######################################################################
        ITEMs . append ( J                                                   )
    ##########################################################################
    return ITEMs
  ############################################################################
  ## 集中分類名稱
  ############################################################################
  def toCategories   ( self , ITEMs                                        ) :
    ##########################################################################
    NAMEs   =        [                                                       ]
    ##########################################################################
    for item in ITEMs                                                        :
      ########################################################################
      NAMEs . append ( item [ "Category"                                   ] )
    ##########################################################################
    return NAMEs
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
