# -*- coding: utf-8 -*-
##############################################################################
## 行事曆處理回應程序
##############################################################################
import os
import sys
import getopt
import time
import requests
import threading
import gettext
import json
import mediapipe
from   mediapipe . tasks               import python
from   mediapipe . tasks . python      import vision
##############################################################################
class Vision   (                                                           ) :
  ############################################################################
  def __init__ ( self                                                      ) :
    ##########################################################################
    self . Classifier = ""
    self . BaseOpts   = None
    ##########################################################################
    return
  ############################################################################
  def setClassifierPath ( self , classifier , MAXITEMS = 5000              ) :
    ##########################################################################
    ImageClassifier        = mediapipe . tasks . vision . ImageClassifier
    ImageClassifierOptions = mediapipe . tasks . vision . ImageClassifierOptions
    VisionRunningMode      = mediapipe . tasks . vision . RunningMode
    ##########################################################################
    self . Catalog    = None
    self . Classifier = classifier
    self . BaseOpts   = mediapipe . tasks . BaseOptions ( model_asset_path = classifier )
    ##########################################################################
    OPTS              = ImageClassifierOptions                             ( \
                          base_options = self . BaseOpts                   , \
                          max_results  = MAXITEMS                          , \
                          running_mode = VisionRunningMode . IMAGE           )
    ##########################################################################
    self . Catalog = ImageClassifier . create_from_options ( OPTS )
    ##########################################################################
    return
  ############################################################################
  def Image ( self , FILENAME                                              ) :
    return mediapipe . Image . create_from_file ( FILENAME                   )
  ############################################################################
  def Classification ( self                                                , \
                       IMAGE                                               , \
                       Probability = 0.00001                               ) :
    ##########################################################################
    if               ( self . Catalog in [ False , None                  ] ) :
      return         [                                                       ]
    ##########################################################################
    ITEMs                  = [                                               ]
    ##########################################################################
    RESULT = self . Catalog . classify ( IMAGE                               )
    ##########################################################################
    for Scope in RESULT . classifications                                    :
      ########################################################################
      for item in Scope . categories                                         :
        ######################################################################
        if ( item . score < Probability                                    ) :
          continue
        ######################################################################
        J = { "Id"          : item . index                                   ,
              "Name"        : item . display_name                            ,
              "Probability" : item . score                                   ,
              "Category"    : item . category_name                           }
        ######################################################################
        ITEMs . append ( J                                                   )
    ##########################################################################
    return ITEMs
  ############################################################################
  def toCategories   ( self , ITEMs                                        ) :
    ##########################################################################
    NAMEs   =        [                                                       ]
    ##########################################################################
    for item in ITEMs                                                        :
      ########################################################################
      NAMEs . append ( item [ "Category"                                   ] )
    ##########################################################################
    return NAMEs
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
