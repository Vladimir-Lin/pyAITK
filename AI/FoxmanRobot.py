# -*- coding: utf-8 -*-
##############################################################################
## Foxman代理人
##############################################################################
import os
import sys
import subprocess
import getopt
import time
import datetime
import logging
import requests
import threading
import gettext
import shutil
import json
##############################################################################
## Foxman智能回應程式
##############################################################################
class FoxmanRobot (                                                        ) :
  ############################################################################
  def __init__         ( self , jsonFile = ""                              ) :
    ##########################################################################
    self . DebugLogger = None
    self . Talk        = None
    self . Reboot      = None
    self . StopIt      = None
    self . State       = 0
    self . CurrentDir  = ""
    self . Beau        = "Foxman"
    self . PullCommand = ""
    self . PushCommand = ""
    self . Configure   (        jsonFile                                     )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    return
  ############################################################################
  def Configure  ( self , jsonFile = ""                                    ) :
    ##########################################################################
    self . JsonFile    = f"{jsonFile}"
    self . JSON        = { }
    ##########################################################################
    if           ( len ( self . JsonFile ) <= 0                            ) :
      return False
    ##########################################################################
    ##########################################################################
    return True
  ############################################################################
  def StoreJSON  ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return True
  ############################################################################
  def debug                        ( self , message , way = "info"         ) :
    ##########################################################################
    Logger   = self . DebugLogger
    ##########################################################################
    if                             ( Logger == None                        ) :
      return
    ##########################################################################
    if                             ( way == "debug"                        ) :
      Logger . debug               ( message                                 )
    elif                           ( way == "info"                         ) :
      Logger . info                ( message                                 )
    ##########################################################################
    return
  ############################################################################
  def HttpParser                   ( self , Path , Headers , JSON          ) :
    return                         { "Process" : False                       }
  ############################################################################
  def ActualTalkTo                 ( self , beau , message                 ) :
    ##########################################################################
    if                             ( self . Talk == None                   ) :
      return False
    ##########################################################################
    time . sleep                   ( 1.0                                     )
    self . Talk                    ( beau , message                          )
    ##########################################################################
    return True
  ############################################################################
  def TalkTo                       ( self , beau , message                 ) :
    threading . Thread             ( target = self . ActualTalkTo          , \
                                     args = ( beau , message , ) ) . start ( )
    return True
  ############################################################################
  def Reply                        ( self , beau , message                 ) :
    ##########################################################################
    if                             ( self . State == 0                     ) :
      self . IdleState             (        beau , message                   )
    ##########################################################################
    elif                           ( self . State == 1                     ) :
      self . BasicMode             (        beau , message                   )
    ##########################################################################
    return True
  ############################################################################
  def IdleState                    ( self , beau , message                 ) :
    ##########################################################################
    s    = message . lower         (                                         )
    s    = s       . rstrip        (                                         )
    beau = "Idle"
    ##########################################################################
    if                             ( s == "interactive"                    ) :
      self . State = 1
      MSG          = "I am here to serve you, Sir!"
      self . TalkTo                ( self . Beau , MSG                       )
    ##########################################################################
    return True
  ############################################################################
  def BasicMode                    ( self , beau , message                 ) :
    ##########################################################################
    s    = message . lower         (                                         )
    s    = s       . rstrip        (                                         )
    L    = s       . split         ( ' '                                     )
    CNT  = len                     ( L                                       )
    beau = "Basic"
    ##########################################################################
    if                             ( s == "reboot"                         ) :
      self . Reboot                (                                         )
      return True
    ##########################################################################
    if                             ( s == "stop" ) and ( CNT == 1          ) :
      self . StopIt                (                                         )
      return True
    ##########################################################################
    if                             ( s == "finish"                         ) :
      self . State = 0
      MSG          = "I will be waiting for you"
      self . TalkTo                ( beau , MSG                              )
      return True
    ##########################################################################
    if                             ( CNT <= 0                              ) :
      return True
    ##########################################################################
    if                             ( L [ 0 ] == "current"                  ) :
      ########################################################################
      if                           ( CNT > 1                               ) :
        ######################################################################
        if                         ( L [ 1 ] == "directory"                ) :
          self . OsGetCWD          (                                         )
    ##########################################################################
    elif                           ( L [ 0 ] == "cwd"                      ) :
      self     . OsGetCWD          (                                         )
    elif                           ( L [ 0 ] == "pwd"                      ) :
      self     . OsGetCWD          (                                         )
    ##########################################################################
    elif                           ( L [ 0 ] == "chdir"                    ) :
      self . OsChdir               ( message [ 6 : ]                         )
    elif                           ( L [ 0 ] == "cd"                       ) :
      self . OsChdir               ( message [ 3 : ]                         )
    ##########################################################################
    elif                           ( L [ 0 ] == "dir"                      ) :
      threading . Thread           ( target = self . ListFiles   ) . start ( )
    elif                           ( L [ 0 ] == "ls"                       ) :
      threading . Thread           ( target = self . ListFiles   ) . start ( )
    elif                           ( L [ 0 ] == "files"                    ) :
      threading . Thread           ( target = self . ListFiles   ) . start ( )
    ##########################################################################
    elif                           ( L [ 0 ] == "push"                     ) :
      threading . Thread           ( target = self . PushSystem  ) . start ( )
    elif                           ( L [ 0 ] == "commit"                   ) :
      threading . Thread           ( target = self . PushSystem  ) . start ( )
    ##########################################################################
    elif                           ( L [ 0 ] == "pull"                     ) :
      threading . Thread           ( target = self . PullSystem  ) . start ( )
    elif                           ( L [ 0 ] == "upgrade"                  ) :
      threading . Thread           ( target = self . PullSystem  ) . start ( )
    ##########################################################################
    elif                           ( L [ 0 ] == "sync"                     ) :
      threading . Thread           ( target = self . SyncSystem  ) . start ( )
    ##########################################################################
    elif                           ( L [ 0 ] == "dos"                      ) :
      cmd       = message          [ 4:                                      ]
      threading . Thread           ( target = self . RunCommand            , \
                                     args = ( cmd , )            ) . start ( )
    elif                           ( L [ 0 ] == "run"                      ) :
      cmd       = message          [ 4:                                      ]
      threading . Thread           ( target = self . RunCommand            , \
                                     args = ( cmd , )            ) . start ( )
    elif                           ( L [ 0 ] == "command"                  ) :
      cmd       = message          [ 8:                                      ]
      threading . Thread           ( target = self . RunCommand            , \
                                     args = ( cmd , )            ) . start ( )
    ##########################################################################
    return True
  ############################################################################
  def OsGetCWD                      ( self                                 ) :
    ##########################################################################
    self . CurrentDir = os . getcwd (                                        )
    self . TalkTo                   ( self . Beau , self . CurrentDir        )
    ##########################################################################
    return
  ############################################################################
  def OsChdir                       ( self , directory                     ) :
    ##########################################################################
    os   . chdir                    (        directory                       )
    self . OsGetCWD                 (                                        )
    ##########################################################################
    return
  ############################################################################
  def ListFiles                     ( self                                 ) :
    ##########################################################################
    L     = "\n" . join ( [ f for f in os . listdir ( ) ] )
    ## T     = L . decode              ( "utf-8"                                )
    T     = L
    self . TalkTo                   ( "files" , T                            )
    ##########################################################################
    return
  ############################################################################
  def PullSystem                    ( self                                 ) :
    return self . RunCommand        ( PullCommand                            )
  ############################################################################
  def PushSystem                    ( self                                 ) :
    ##########################################################################
    return self . RunCommand        ( PushCommand                            )
  ############################################################################
  def SyncSystem                    ( self                                 ) :
    ##########################################################################
    self . RunCommand               ( PushCommand                            )
    self . RunCommand               ( PullCommand                            )
    ##########################################################################
    return
  ############################################################################
  def RunCommand                       ( self , command                    ) :
    ##########################################################################
    if                                 ( len ( command ) <= 0              ) :
      return
    ##########################################################################
    r = subprocess . Popen             ( command                           , \
                                        shell  = True                      , \
                                        stdout = subprocess . PIPE         , \
                                        stderr = subprocess . STDOUT         )
    L = r . stdout . readlines         (                                     )
    r . stdout . close                 (                                     )
    ##########################################################################
    X     = [ ]
    for S in L                                                               :
      X   . append                     ( S . decode ( "utf-8" )              )
    T     = "\n" . join                ( X                                   )
    ##########################################################################
    self  . TalkTo                     ( "command" , T                       )
    ##########################################################################
    return
##############################################################################
