# -*- coding: utf-8 -*-
##############################################################################
## Binary
##############################################################################
from . Node  import Node  as Node
from . Nexus import Nexus as Nexus
##############################################################################
class Binary              (                                                ) :
  ############################################################################
  def __init__            ( self                                           ) :
    ##########################################################################
    self . setBinaryEmpty (                                                  )
    ##########################################################################
    return
  ############################################################################
  def __del__     ( self                                                   ) :
    ##########################################################################
    self . Purify (                                                          )
    ##########################################################################
    return
  ############################################################################
  def setBinaryEmpty        ( self                                         ) :
    ##########################################################################
    self . nodes    =       [                                                ]
    self . relation = Nexus (                                                )
    ##########################################################################
    self . nodes . append   ( Node ( )                                       )
    self . nodes . append   ( Node ( )                                       )
    ##########################################################################
    return
  ############################################################################
  def Purify       ( self                                                  ) :
    ##########################################################################
    self . nodes = [                                                         ]
    ##########################################################################
    return
  ############################################################################
  def Relate                  ( self , first , second , relate             ) :
    ##########################################################################
    self . relation . linkType = relate
    self . nodes [ 0 ] . node = first
    self . nodes [ 1 ] . node = second
    self . relation . connect ( self . nodes [ 0 ] , self . nodes [ 1 ]      )
    ##########################################################################
    return
  ############################################################################
  ## A=B => O(A) R O(B) in functional expression , where R = Neutrino::Groups::Equivalent
  ## A@B => O(A) R O(B) in functional expression , where R = Neutrino::Groups::Contains
  ## A>B => O(A) R O(B) in functional expression , where R = Neutrino::Groups::Greater
  ## A<B => O(A) R O(B) in functional expression , where R = Neutrino::Groups::Less
  ############################################################################
  def ParseKey                   ( self , syntax , op , relate             ) :
    ##########################################################################
    self . relation . linkType = relate
    L    = self . syntax . split ( op                                        )
    ##########################################################################
    if                           ( len ( L ) != 2                          ) :
      return False
    ##########################################################################
    self . nodes [ 0 ] . setName ( L [ 0 ] . strip ( )                       )
    self . nodes [ 1 ] . setName ( L [ 1 ] . strip ( )                       )
    self . Relate                ( 1 , 2 , relate                            )
    ##########################################################################
    return True
  ############################################################################
  def Pair                   ( self , syntax                               ) :
    ##########################################################################
    self . relation . linkType = 0
    ##########################################################################
    if                       ( "=" in syntax                               ) :
      return self . ParseKey ( syntax , "=" , 10                             )
    ##########################################################################
    if                       ( "@" in syntax                               ) :
      return self . ParseKey ( syntax , "=" , 11                             )
    ##########################################################################
    if                       ( ">" in syntax                               ) :
      return self . ParseKey ( syntax , "=" , 21                             )
    ##########################################################################
    if                       ( "<" in syntax                               ) :
      return self . ParseKey ( syntax , "=" , 22                             )
    ##########################################################################
    return False
  ############################################################################
  def SqlWhere                        ( self , Keys , Maps , Options       ) :
    ##########################################################################
    if                                ( len ( self . nodes ) < 2           ) :
      return False , "" , Keys , Maps
    ##########################################################################
    AA      = self . nodes [ 0 ] . name
    BB      = self . nodes [ 1 ] . name
    aa      = AA . lower ( )
    UU      = aa . upper ( )
    J       = ""
    R       = self . relation . linkType
    Pairs   =                         [                                      ]
    ##########################################################################
    if                                ( R == 22                            ) :
      J     = "="
    elif                              ( R == 11                            ) :
      ########################################################################
      J     = "like"
      if                              ( "%" not in BB                      ) :
        B   = "%" + B + "%"
      ########################################################################
    else                                                                     :
      return False , "" , Keys , Maps
    ##########################################################################
    if                                ( len ( J ) <= 0                     ) :
      return False , "" , Keys , Maps
    ##########################################################################
    Maps [ aa ] = BB
    Keys    . append                  ( aa                                   )
    ##########################################################################
    ST      = f"{0} {1} {2}" . format ( aa , J , UU                          )
    Pairs   . append                  ( ST                                   )
    ##########################################################################
    if                                ( len ( Options ) > 0                ) :
      Pairs . append                  ( Options                              )
    ##########################################################################
    Where   = "where {0}" . format    ( " and " . join ( Pairs )             )
    ##########################################################################
    return True , Where , Keys , Maps
##############################################################################
