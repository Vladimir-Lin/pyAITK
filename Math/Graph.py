# -*- coding: utf-8 -*-
##############################################################################
## Graph
##############################################################################
class Graph              (                                                 ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    self . setGraphEmpty (                                                   )
    ##########################################################################
    return
  ############################################################################
  def __del__       ( self                                                 ) :
    ##########################################################################
    if              ( self . destruct                                      ) :
      self . Purify (                                                        )
    ##########################################################################
    return
  ############################################################################
  def setGraphEmpty   ( self                                               ) :
    ##########################################################################
    self . nodes    = [                                                      ]
    self . linkers  = [                                                      ]
    self . destruct = False
    ##########################################################################
    return
  ############################################################################
  def Purify          ( self                                               ) :
    ##########################################################################
    self . nodes    = [                                                      ]
    self . linkers  = [                                                      ]
    ##########################################################################
    return
  ############################################################################
  def addRelation           ( self , relate                                ) :
    ##########################################################################
    if                      ( relate in self . linkers                     ) :
      return False
    ##########################################################################
    self . linkers . append ( relate                                         )
    ##########################################################################
    return True
  ############################################################################
  def removeRelation            ( self , relate                            ) :
    ##########################################################################
    if                          ( relate not in self . linkers             ) :
      return False
    ##########################################################################
    AT = self . linkers . index ( relate                                     )
    if                          ( AT < 0                                   ) :
      return False
    ##########################################################################
    del self . linkers          [ AT                                         ]
    ##########################################################################
    return True
  ############################################################################
  def addNode             ( self , node                                    ) :
    ##########################################################################
    if                    ( node in self . nodes                           ) :
      return False
    ##########################################################################
    self . nodes . append ( node                                             )
    ##########################################################################
    return True
  ############################################################################
  def removeNode                ( self , node                              ) :
    ##########################################################################
    if                          ( node not in self . nodes                 ) :
      return False
    ##########################################################################
    AT   = self . nodes . index ( node                                       )
    if                          ( AT < 0                                   ) :
      return False
    ##########################################################################
    self . detachNode           ( node                                       )
    del self . nodes            [ AT                                         ]
    ##########################################################################
    return True
  ############################################################################
  def detachNode ( self , node                                             ) :
    return
  ############################################################################
  def Mount              ( self , relate , first , second                  ) :
    ##########################################################################
    self   . addRelation (        relate                                     )
    self   . addNode     (                 first                             )
    self   . addNode     (                         second                    )
    relate . connect     (                 first , second                    )
    ##########################################################################
    return
  ############################################################################
  def Members  ( self                                                      ) :
    return len ( self . nodes                                                )
  ############################################################################
  def Member            ( self , AT                                        ) :
    ##########################################################################
    if                  ( len ( self . nodes ) <= AT                       ) :
      return None
    ##########################################################################
    return self . nodes [ AT                                                 ]
  ############################################################################
  def contains ( self , node                                               ) :
    return     ( node in self . nodes                                        )
##############################################################################
