# -*- coding: utf-8 -*-
##############################################################################
## Node
##############################################################################
class Node              (                                                  ) :
  ############################################################################
  def __init__          ( self                                             ) :
    self . setNodeEmpty (                                                    )
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    return
  ############################################################################
  def setNodeEmpty      ( self                                             ) :
    ##########################################################################
    self . node       = 0
    self . nodeType   = 0
    self . flags      = 0
    self . name       = ""
    self . data       = None
    self . parameters = [                                                    ]
    self . relations  = [                                                    ]
    ##########################################################################
    return
  ############################################################################
  def setOwner ( self , Uuid , Type                                        ) :
    ##########################################################################
    self . node     = Uuid
    self . nodeType = Type
    ##########################################################################
    return
  ############################################################################
  def setName ( self , name                                                ) :
    self . name = name
    return
  ############################################################################
  def setFlag ( self , flags                                               ) :
    self . flags = flags
    return
  ############################################################################
  def Flag ( self , Mask                                                   ) :
    return ( ( self . flags & Mask ) == Mask                                 )
  ############################################################################
  def equalTo ( self , node                                                ) :
    ##########################################################################
    self . node       = node . node
    self . nodeType   = node . nodeType
    self . flags      = node . flags
    self . name       = node . name
    self . data       = node . data
    self . parameters = node . parameters
    self . relations  = node . relations
    ##########################################################################
    return
  ############################################################################
  def isolate          ( self                                              ) :
    ##########################################################################
    self . relations = [                                                     ]
    ##########################################################################
    return
  ############################################################################
  def Marriage                ( self , relation                            ) :
    ##########################################################################
    if                        ( relation in self . relations               ) :
      return
    ##########################################################################
    self . relations . append ( relation                                     )
    ##########################################################################
    return
  ############################################################################
  def Divorce                     ( self , relation                        ) :
    ##########################################################################
    if                            ( relation not in self . relations       ) :
      return
    ##########################################################################
    AT = self . relations . index ( relation                                 )
    if                            ( AT < 0                                 ) :
      return
    ##########################################################################
    del self  . relations         [ AT                                       ]
    ##########################################################################
    return
  ############################################################################
  def isFirst                 ( self , relation                            ) :
    return relation . isFirst ( self                                         )
  ############################################################################
  def isEnd                   ( self , relation                            ) :
    return relation . isEnd   ( self                                         )
  ############################################################################
  def Connectors ( self                                                    ) :
    return len   ( self . relations                                          )
  ############################################################################
  def Connector             ( self , AT                                    ) :
    ##########################################################################
    if                      ( AT < 0                                       ) :
      return None
    ##########################################################################
    if                      ( len ( self . relations ) <= AT               ) :
      return None
    ##########################################################################
    return self . relations [ AT                                             ]
##############################################################################
