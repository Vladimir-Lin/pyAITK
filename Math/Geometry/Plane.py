# -*- coding: utf-8 -*-
##############################################################################
## Plane
##############################################################################
import math
##############################################################################
from . ControlPoint import ControlPoint as ControlPoint
##############################################################################
class Plane      (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def clear                 ( self                                         ) :
    ##########################################################################
    self . O = ControlPoint (                                                )  ## Base point
    self . X = ControlPoint (                                                )  ## X Axis
    self . Y = ControlPoint (                                                )  ## Y Axis
    self . T = ControlPoint (                                                )  ## Thickness
    self . N = ControlPoint (                                                )  ## Normal
    ##########################################################################
    self . W = 0                                                                ## Width segments
    self . H = 0                                                                ## Height segments
    self . A = False                                                            ## Activation
    ##########################################################################
    return
  ############################################################################
  def assign ( self , plane                                                ) :
    ##########################################################################
    self . O = plane . O
    self . X = plane . X
    self . Y = plane . Y
    self . T = plane . T
    self . N = plane . N
    ##########################################################################
    self . W = plane . W
    self . H = plane . H
    self . A = plane . A
    ##########################################################################
    return
  ############################################################################
  def Upon ( self , At , Base , Vector , detail = 0.0000000000000000000001 ) :
    ##########################################################################
    d   = self . O . dotProduct ( self . N , Vector                          )
    vn  = d
    ##########################################################################
    if                          ( d < 0.0                                  ) :
      d = -d
    ##########################################################################
    if                          ( d < detail                               ) :
      return False , At
    ##########################################################################
    s   = 0
    obn = 0
    ##########################################################################
    OB  = ControlPoint          (                                            )
    OB  . assign                ( self . O                                   )
    OB  . VectorMinus           ( Base                                       )
    obn = self . O . dotProduct ( OB , self . N                              )
    ##########################################################################
    s   = obn / vn
    ##########################################################################
    OB  . assign                ( Vector                                     )
    OB  . multiply              ( s                                          )
    ##########################################################################
    At  . assign                ( Base                                       )
    At  . VectorPlus            ( OB                                         )
    ##########################################################################
    return True , At
  ############################################################################
  ## For acceleration, this function will not divided X.length and Y.length
  ############################################################################
  def Axis           ( self , At                                           ) :
    ##########################################################################
    D = ControlPoint (                                                       )
    P = QPointF      (                                                       )
    D . assign       ( At                                                    )
    D . VectorMinus  ( self . O                                              )
    P . setX         ( self . O . dotProduct ( D , self . X )                )
    P . setY         ( self . O . dotProduct ( D , self . Y )                )
    ##########################################################################
    return P
##############################################################################
