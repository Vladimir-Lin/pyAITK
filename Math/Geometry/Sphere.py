# -*- coding: utf-8 -*-
##############################################################################
## Sphere
##############################################################################
import math
##############################################################################
from . ControlPoint import ControlPoint as ControlPoint
from . Circle       import Circle       as Circle
##############################################################################
class Sphere     (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def clear                 ( self                                         ) :
    ##########################################################################
    self . O = ControlPoint (                                                ) ## Center
    self . X = ControlPoint (                                                ) ## X Vector
    self . Y = ControlPoint (                                                ) ## Y Vector
    self . Z = ControlPoint (                                                ) ## Z Vector
    self . N =              { "Horizontal" : 360 , "Vertical" : 180          } ## Sectors
    ##########################################################################
    return
  ############################################################################
  def assign ( self , sphere                                               ) :
    ##########################################################################
    self . O = sphere . O
    self . X = sphere . X
    self . Y = sphere . Y
    self . Z = sphere . Z
    self . N = sphere . N
    ##########################################################################
    return
  ############################################################################
  def setCenter       ( self , P                                           ) :
    ##########################################################################
    self . O . assign (        P                                             )
    ##########################################################################
    return P
  ############################################################################
  def setX            ( self , V                                           ) :
    ##########################################################################
    self . X . assign (        V                                             )
    ##########################################################################
    return V
  ############################################################################
  def setY            ( self , V                                           ) :
    ##########################################################################
    self . Y . assign (        V                                             )
    ##########################################################################
    return V
  ############################################################################
  def setZ            ( self , V                                           ) :
    ##########################################################################
    self . Z . assign (        V                                             )
    ##########################################################################
    return V
  ############################################################################
  def setSectors ( self , hSectors , vSectors                              ) :
    ##########################################################################
    self . N [ "Horizontal" ] = hSectors
    self . N [ "Vertical"   ] = vSectors
    ##########################################################################
    return
  ############################################################################
  def IndexLatitude ( self , Index                                         ) :
    ##########################################################################
    V = self . N    [ "Vertical"                                             ]
    F = float       ( float ( Index ) / float ( V )                          )
    ##########################################################################
    return float    ( 0.5 - F                                                )
  ############################################################################
  def GeneratePoints                ( self , StartId , JSON                ) :
    ##########################################################################
    PID      = StartId
    H        = self . N             [ "Horizontal"                           ]
    V        = self . N             [ "Vertical"                             ]
    Z        = self . Z
    O        = self . O
    OP       = ControlPoint         (                                        )
    PP       = ControlPoint         (                                        )
    XP       = ControlPoint         (                                        )
    YP       = ControlPoint         (                                        )
    ZP       = ControlPoint         (                                        )
    ##########################################################################
    JSON [ "Sectors"  ] [ "Horizontal" ] = H
    JSON [ "Sectors"  ] [ "Vertical"   ] = V
    ##########################################################################
    JSON [ "Points"   ] [ PID     ] = Z
    JSON [ "Vertices" ] . append    ( PID                                    )
    JSON [ "Poles"    ] [ "North" ] = PID
    PID      = PID + 1
    ##########################################################################
    for id in range                 ( 1 , V                                ) :
      ########################################################################
      DEGREE = self . IndexLatitude ( id                                     )
      A      = float                ( math . pi * DEGREE                     )
      C      = Circle               (                                        )
      sinv   = math . sin           ( A                                      )
      cosv   = math . cos           ( A                                      )
      ########################################################################
      PP     . assign               ( Z                                      )
      PP     . multiply             ( cosv                                   )
      ########################################################################
      ZP     . assign               ( Z                                      )
      ZP     . multiply             ( sinv                                   )
      ########################################################################
      XP     . assign               ( self . X                               )
      XP     . multiply             ( cosv                                   )
      ########################################################################
      YP     . assign               ( self . Y                               )
      YP     . multiply             ( cosv                                   )
      ########################################################################
      OP     . assign               ( O                                      )
      OP     . VectorPlus           ( ZP                                     )
      ########################################################################
      C      . setCenter            ( OP                                     )
      C      . setX                 ( XP                                     )
      C      . setY                 ( YP                                     )
      C      . setSectors           ( H                                      )
      C      . GeneratePoints       ( PID , JSON                             )
      ########################################################################
      PID    = PID + H
    ##########################################################################
    ZP       . assign               ( Z                                      )
    ZP       . multiply             ( -1.0                                   )
    ##########################################################################
    JSON [ "Points"   ] [ PID     ] = ZP
    JSON [ "Vertices" ] . append    ( PID                                    )
    JSON [ "Poles"    ] [ "South" ] = PID
    ##########################################################################
    return JSON
##############################################################################
