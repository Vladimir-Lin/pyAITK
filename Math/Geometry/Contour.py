# -*- coding: utf-8 -*-
##############################################################################
## Contour
##############################################################################
import math
import json
##############################################################################
from   PyQt5 . QtCore import QPointF
from   PyQt5 . QtCore import QRectF
##############################################################################
from   PyQt5 . QtGui  import QColor
from   PyQt5 . QtGui  import QVector3D
from   PyQt5 . QtGui  import QPolygonF
##############################################################################
from . ControlPoint   import ControlPoint as ControlPoint
##############################################################################
class Contour    (                                                         ) :
  ############################################################################
  def __init__   ( self                                                    ) :
    ##########################################################################
    self . clear (                                                           )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def clear                           ( self                               ) :
    ##########################################################################
    self . Uuid        = 0
    self . Name        = ""
    self . Type        = ControlPoint . ContourLinear
    self . Closed      = False
    self . Substract   = False
    self . Index       =              [                                      ]
    self . Thickness   = ControlPoint (                                      )
    self . Points      =              {                                      }
    self . Properties  =              {                                      }
    self . Selected    =              [                                      ]
    self . PathUpdater = None
    ##########################################################################
    self . Thickness   . setXYZ       ( 0.05 , 0.05 , 0.05                   )
    ##########################################################################
    return
  ############################################################################
  def assign ( self , contour                                              ) :
    ##########################################################################
    self . Uuid        = contour . Uuid
    self . Name        = contour . Name
    self . Type        = contour . Type
    self . Closed      = contour . Closed
    self . Substract   = contour . Substract
    self . Index       = contour . Index
    self . Thickness   . assign ( contour . Thickness                        )
    self . Points      = contour . Points
    self . Properties  = contour . Properties
    self . Selected    = contour . Selected
    self . PathUpdater = contour . PathUpdater
    ##########################################################################
    return
  ############################################################################
  def setClosed ( self , closed                                            ) :
    ##########################################################################
    self . Closed = closed
    ##########################################################################
    return closed
  ############################################################################
  def setInvert ( self , inverted                                          ) :
    ##########################################################################
    self . Substract = inverted
    ##########################################################################
    return inverted
  ############################################################################
  def setProperty ( self , item , value                                    ) :
    ##########################################################################
    self . Properties [ item ] = value
    ##########################################################################
    return
  ############################################################################
  def getProperty            ( self , item                                 ) :
    return self . Properties [        item                                   ]
  ############################################################################
  def toJson ( self                                                        ) :
    ##########################################################################
    JSON =   { "Uuid"       : self . Uuid                                  , \
               "Name"       : self . Name                                  , \
               "Type"       : self . Type                                  , \
               "Closed"     : self . Closed                                , \
               "Substract"  : self . Substract                             , \
               "Index"      : self . Index                                 , \
               "Thickness"  : self . Thickness . toJson ( )                , \
               "Points"     : {                                          } , \
               "Properties" : self . Properties                              }
    ##########################################################################
    KEYs = self . Points . keys (                                            )
    for Id in KEYs                                                           :
      ########################################################################
      JSON [ "Points" ] [ Id ] = self . Points [ Id ] . toJson (             )
    ##########################################################################
    return JSON
  ############################################################################
  def fromJson                        ( self , JSON                        ) :
    ##########################################################################
    self   . Uuid       = JSON        [ "Uuid"                               ]
    self   . Name       = JSON        [ "Name"                               ]
    self   . Type       = JSON        [ "Type"                               ]
    self   . Closed     = JSON        [ "Closed"                             ]
    self   . Substract  = JSON        [ "Substract"                          ]
    self   . Index      = JSON        [ "Index"                              ]
    self   . Thickness  . fromJson    ( JSON [ "Thickness" ]                 )
    self   . Points     =             {                                      }
    self   . Properties = JSON        [ "Properties"                         ]
    ##########################################################################
    KEYs   = JSON [ "Points" ] . keys (                                      )
    ##########################################################################
    for Id in KEYs                                                           :
      ########################################################################
      P    = ControlPoint             (                                      )
      P    . fromJson                 ( JSON [ "Points" ] [ Id ]             )
      ########################################################################
      self . Points [ Id ] = P
    ##########################################################################
    return
  ############################################################################
  def count    ( self                                                      ) :
    return len ( self . Index                                                )
  ############################################################################
  def getPoint           ( self , Id                                       ) :
    return self . Points [        Id                                         ]
  ############################################################################
  def begin         ( self                                                 ) :
    ##########################################################################
    self . Index  = [                                                        ]
    self . Points = {                                                        }
    ##########################################################################
    return
  ############################################################################
  def add                 ( self , Id , point                              ) :
    ##########################################################################
    self . Index . append ( Id                                               )
    self . Points [ Id ] = point
    ##########################################################################
    return self . count   (                                                  )
  ############################################################################
  def remove                ( self , Id                                    ) :
    ##########################################################################
    if                      ( Id in self . Index                           ) :
      self . Index . remove ( Id                                             )
    ##########################################################################
    if                      ( Id in self . Points                          ) :
      del self . Points     [ Id                                             ]
    ##########################################################################
    return self . count     (                                                )
  ############################################################################
  def end                   ( self                                         ) :
    ##########################################################################
    self . Closed = False
    if                      ( self . count ( ) < 1                         ) :
      return
    ##########################################################################
    a    = self . Index     [ 0                                              ]
    ##########################################################################
    self . Points [ a ] . Type = self . Type | ControlPoint . Start
    ##########################################################################
    if                      ( self . count ( ) < 2                         ) :
      return
    ##########################################################################
    b    = self . Index     [ self . count ( ) - 1                           ]
    self . Points [ b ] . Type = Type | ControlPoint . ContourEnd
    ##########################################################################
    return
  ############################################################################
  def close              ( self , t                                        ) :
    ##########################################################################
    TOTAL = self . count (                                                   )
    self  . Closed = False
    ##########################################################################
    if                   ( TOTAL < 1                                       ) :
      return
    ##########################################################################
    Flags = self . Type | t
    a     = self . Index [ 0                                                 ]
    self  . Points [ a ] . Type = Flags
    ##########################################################################
    if                   ( TOTAL < 2                                       ) :
      return
    ##########################################################################
    b    = self . Index  [ self . count ( ) - 1                              ]
    self . Points [ b ] . Type = Flags
    self . Closed = True
    ##########################################################################
    return
  ############################################################################
  def find ( self , point , R                                              ) :
    ##########################################################################
    R2 = R * R
    ##########################################################################
    for Id in self . Index                                                   :
      ########################################################################
      if   ( self . Points [ Id ] . Within ( point , R2 )                  ) :
        return Id
    ##########################################################################
    return ""
  ############################################################################
  def boundingRect     ( self                                              ) :
    ##########################################################################
    if                 ( len ( self . Points ) <=0                         ) :
      return QRectF    ( 0 , 0 , 0 , 0                                       )
    ##########################################################################
    i      = self . Index  [ 0 ]
    left   = self . points [ i ] . x
    right  = self . points [ i ] . x
    top    = self . points [ i ] . y
    bottom = self . points [ i ] . y
    ##########################################################################
    if                 ( len ( self . Points ) > 1                         ) :
      ########################################################################
      for j in self . Index                                                  :
        ######################################################################
        if             ( i != j                                            ) :
          ####################################################################
          x = self . Points [ j ] . x
          y = self . Points [ j ] . y
          ####################################################################
          if           ( x < left                                          ) :
            left   = x
          ####################################################################
          if           ( x > right                                         ) :
            right  = x
          ####################################################################
          if           ( y < top                                           ) :
            top    = y
          ####################################################################
          if           ( y > bottom                                        ) :
            bottom = y
    ##########################################################################
    R      = QRectF    (                                                     )
    R      . setLeft   ( left                                                )
    R      . setRight  ( right                                               )
    R      . setTop    ( top                                                 )
    R      . setBottom ( bottom                                              )
    ##########################################################################
    return R
  ############################################################################
  def plus         ( self , center                                         ) :
    ##########################################################################
    x = center . x (                                                         )
    y = center . y (                                                         )
    ##########################################################################
    for Id in self . Index                                                   :
      ########################################################################
      self . Points [ Id ] . x = self . Points [ Id ] . x + x
      self . Points [ Id ] . y = self . Points [ Id ] . y + y
    ##########################################################################
    return self
  ############################################################################
  def minus        ( self , center                                         ) :
    ##########################################################################
    x = center . x (                                                         )
    y = center . y (                                                         )
    ##########################################################################
    for Id in self . Index                                                   :
      ########################################################################
      self . Points [ Id ] . x = self . Points [ Id ] . x - x
      self . Points [ Id ] . y = self . Points [ Id ] . y - y
    ##########################################################################
    return self
  ############################################################################
  def multiply                        ( self , factor                      ) :
    ##########################################################################
    for Id in self . Index                                                   :
      ########################################################################
      self . Points [ Id ] . multiply (        factor                        )
    ##########################################################################
    return self
  ############################################################################
  def Dot               ( self , s                                         ) :
    ##########################################################################
    w      = s . width  (                                                    )
    h      = s . height (                                                    )
    ##########################################################################
    for Id in self . Index                                                   :
      ########################################################################
      self . Points [ Id ] . x = self . Points [ Id ] . x * w
      self . Points [ Id ] . y = self . Points [ Id ] . y * h
    ##########################################################################
    return self
  ############################################################################
  def divide                        ( self , divisor                       ) :
    ##########################################################################
    for Id in self . Index                                                   :
      ########################################################################
      self . Points [ Id ] . divide (        divisor                         )
    ##########################################################################
    return self
  ############################################################################
  def GetPlanePoint            ( self , x , y                              ) :
    ##########################################################################
    z      = self . Properties [ "Z"                                         ]
    ##########################################################################
    P      = ControlPoint      (                                             )
    P      . setXYZ            ( x , y , z                                   )
    ##########################################################################
    CNT    = self . count      (                                             )
    ##########################################################################
    AF     = self . Type | ControlPoint . ContourStart
    BF     = self . Type | ControlPoint . ContourFlat
    CF     = self . Type | ControlPoint . ContourEnd
    ##########################################################################
    if                         ( CNT <= 0                                  ) :
      ########################################################################
      P    . Type = AF
      ########################################################################
    if                         ( CNT >  1                                  ) :
      ########################################################################
      P    . Type = CF
      K    = self . Index      [ -1                                          ]
      self . Points [ K ] . Type = BF
      ########################################################################
    else                                                                     :
      ########################################################################
      P    . Type = CF
    ##########################################################################
    return P
  ############################################################################
  def AppendPlanePoint          ( self , x , y                             ) :
    ##########################################################################
    B    = self . Properties    [ "Base"                                     ]
    while                       ( f"{B}" in self . Index                   ) :
      B  = B + 1
    ##########################################################################
    P    = self . GetPlanePoint ( x , y                                      )
    ##########################################################################
    return self . add           ( f"{B}" , P                                 )
  ############################################################################
  def InsertPlanePoint               ( self , x , y                        ) :
    ##########################################################################
    if                               ( len ( self . Selected ) <= 0        ) :
      return self . AppendPlanePoint ( x , y                                 )
    ##########################################################################
    B      = self . Properties       [ "Base"                                ]
    while                            ( f"{B}" in self . Index              ) :
      B    = B + 1
    ##########################################################################
    B      = f"{B}"
    P      = self . GetPlanePoint    ( x , y                                 )
    self   . Points [ B ] = P
    ##########################################################################
    ID     = self  . Selected        [ -1                                    ]
    try                                                                      :
      AT   = self  . Index . index   ( ID                                    )
      self . Index . insert          ( AT + 1 , B                            )
    except                                                                   :
      self . Index . append          ( B                                     )
    ##########################################################################
    return self . count              (                                       )
  ############################################################################
  def ModifyPlanePoint ( self , Id , x , y                                 ) :
    ##########################################################################
    if                 ( Id not in self . Points                           ) :
      return
    ##########################################################################
    self . Points [ Id ] . x = x
    self . Points [ Id ] . y = y
    ##########################################################################
    return
  ############################################################################
  def DoPathUpdater      ( self , action , Updating = True                 ) :
    ##########################################################################
    if                   ( self . PathUpdater not in [ False , None ]      ) :
      self . setProperty ( "Cursor" , action                                 )
      self . PathUpdater ( self     , action , Updating                      )
    ##########################################################################
    return
  ############################################################################
  def AssignQPoint          ( self , pos                                   ) :
    ##########################################################################
    self . AppendPlanePoint ( pos . x ( ) , pos . y ( )                      )
    self . DoPathUpdater    ( 0                                              )
    ##########################################################################
    return True
  ############################################################################
  def InsertQPoint          ( self , pos                                   ) :
    ##########################################################################
    self . InsertPlanePoint ( pos . x ( ) , pos . y ( )                      )
    self . DoPathUpdater    ( 0                                              )
    ##########################################################################
    return True
  ############################################################################
  def SpotQPoint              ( self , pos                                 ) :
    ##########################################################################
    RX   = self . getProperty ( "RX"                                         )
    Id   = self . find        ( pos      , RX                                )
    self . setProperty        ( "Picked" , Id                                )
    ##########################################################################
    if                        ( len ( Id ) <= 0                            ) :
      return False
    ##########################################################################
    self . setProperty        ( "State" , 1                                  )
    ##########################################################################
    self . DoPathUpdater      ( 2                                            )
    ##########################################################################
    return True
  ############################################################################
  def MoveQPoint              ( self , pos                                 ) :
    ##########################################################################
    Id   = self . getProperty ( "Picked"                                     )
    ##########################################################################
    if                        ( len ( Id ) <= 0                            ) :
      return False
    ##########################################################################
    self . setProperty        ( "State" , 2                                  )
    self . ModifyPlanePoint   ( Id , pos . x ( ) , pos . y ( )               )
    self . DoPathUpdater      ( 0                                            )
    ##########################################################################
    return True
  ############################################################################
  def FinishQPoint            ( self , pos                                 ) :
    ##########################################################################
    Id   = self . getProperty ( "Picked"                                     )
    ##########################################################################
    if                        ( len ( Id ) <= 0                            ) :
      return
    ##########################################################################
    self . setProperty        ( "Picked" , ""                                )
    self . setProperty        ( "State" , 0                                  )
    self . ModifyPlanePoint   ( Id , pos . x ( ) , pos . y ( )               )
    self . DoPathUpdater      ( 1                                            )
    ##########################################################################
    return
  ############################################################################
  def HoverQPoint                 ( self , pos                             ) :
    ##########################################################################
    State    = self . getProperty ( "State"                                  )
    ##########################################################################
    if                            ( State != 0                             ) :
      return False
    ##########################################################################
    CS       = self . getProperty ( "Cursor"                                 )
    RX       = self . getProperty ( "RX"                                     )
    Id       = self . find        ( pos      , RX                            )
    ##########################################################################
    if                            ( len ( Id ) <= 0                        ) :
      if                          ( CS != 1                                ) :
        self . DoPathUpdater      ( 1 , False                                )
      return False
    ##########################################################################
    if                            ( CS != 3                                ) :
      self   . DoPathUpdater      ( 3 , False                                )
    ##########################################################################
    return True
  ############################################################################
  def PickQPoint                ( self , pos                               ) :
    ##########################################################################
    RX     = self . getProperty ( "RX"                                       )
    Id     = self . find        ( pos      , RX                              )
    self   . setProperty        ( "Picked" , Id                              )
    ##########################################################################
    if                          ( len ( Id ) <= 0                          ) :
      return False
    ##########################################################################
    if                          ( Id not in self . Selected                ) :
      self . Selected . append  ( Id                                         )
    ##########################################################################
    self   . DoPathUpdater      ( 0                                          )
    ##########################################################################
    return True
  ############################################################################
  def HandleQPoint                 ( self , pos , action                   ) :
    ##########################################################################
    mode = self . getProperty      ( "Mode"                                  )
    ##########################################################################
    if                             ( mode   == 1                           ) :
      ########################################################################
      if                           ( action == 0                           ) :
        return self . AssignQPoint ( pos                                     )
      ########################################################################
      return False
    ##########################################################################
    if                             ( mode   == 2                           ) :
      ########################################################################
      if                           ( action == 0                           ) :
        return self . SpotQPoint   ( pos                                     )
      ########################################################################
      if                           ( action == 1                           ) :
        return self . MoveQPoint   ( pos                                     )
      ########################################################################
      if                           ( action == 2                           ) :
        return self . FinishQPoint ( pos                                     )
      ########################################################################
      if                           ( action == 3                           ) :
        return self . HoverQPoint  ( pos                                     )
      ########################################################################
      return False
    ##########################################################################
    if                             ( mode   == 3                           ) :
      ########################################################################
      if                           ( action == 0                           ) :
        return self . InsertQPoint ( pos                                     )
      ########################################################################
      return False
    ##########################################################################
    if                             ( mode   == 4                           ) :
      ########################################################################
      if                           ( action == 0                           ) :
        return self . PickQPoint   ( pos                                     )
      ########################################################################
      if                           ( action == 3                           ) :
        return self . HoverQPoint  ( pos                                     )
      ########################################################################
      return False
    ##########################################################################
    ##########################################################################
    ##########################################################################
    ##########################################################################
    return False
  ############################################################################
  def ClearSelections    ( self                                            ) :
    ##########################################################################
    self . Selected =    [                                                   ]
    self . DoPathUpdater ( 1                                                 )
    ##########################################################################
    return
  ############################################################################
  def DeleteSelected          ( self                                       ) :
    ##########################################################################
    for Id in self . Selected                                                :
      ########################################################################
      if                      ( Id in self . Points                        ) :
        del self . Points     [ Id                                           ]
      ########################################################################
      if                      ( Id in self . Index                         ) :
        self . Index . remove ( Id                                           )
    ##########################################################################
    self . ClearSelections    (                                              )
    ##########################################################################
    return
  ############################################################################
  def ClearPoints        ( self                                            ) :
    ##########################################################################
    self . begin         (                                                   )
    self . DoPathUpdater ( 1                                                 )
    ##########################################################################
    return
  ############################################################################
  def PointsToQPainterPath                    ( self , path                ) :
    ##########################################################################
    RX     = self . Properties                [ "RX"                         ]
    RY     = self . Properties                [ "RY"                         ]
    ##########################################################################
    for id in self . Index                                                   :
      ########################################################################
      C    = self . Points [ id ] . toQPointF (                              )
      path . addEllipse                       ( C , RX , RY                  )
    ##########################################################################
    return path
  ############################################################################
  def SelectedToQPainterPath                  ( self , path                ) :
    ##########################################################################
    RX     = self . Properties                [ "RX"                         ]
    RY     = self . Properties                [ "RY"                         ]
    ##########################################################################
    for id in self . Selected                                                :
      ########################################################################
      C    = self . Points [ id ] . toQPointF (                              )
      path . addEllipse                       ( C , RX , RY                  )
    ##########################################################################
    return path
  ############################################################################
  def ContourToQPainterPath                   ( self , path                ) :
    ##########################################################################
    PL     = QPolygonF                        (                              )
    for id in self . Index                                                   :
      ########################################################################
      P    = self . Points [ id ] . toQPointF (                              )
      PL   . append                           ( P                            )
    ##########################################################################
    if                                        ( len ( PL ) <= 2            ) :
      return path
    ##########################################################################
    path   . addPolygon                       ( PL                           )
    if                                        ( self . Closed              ) :
      path . closeSubpath                     (                              )
    ##########################################################################
    return   path
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  def ExecuteMenuCommand          ( self , at                              ) :
    ##########################################################################
    VEX      = self . getProperty ( "Mode"                                   )
    ##########################################################################
    if                            ( at  == 1                               ) :
      ########################################################################
      if                          ( VEX == 1                               ) :
        VEX  = 0
      else                                                                   :
        VEX  = 1
      self   . setProperty        ( "Mode" , VEX                             )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 2                               ) :
      ########################################################################
      if                          ( VEX == 2                               ) :
        VEX  = 0
      else                                                                   :
        VEX  = 2
      self   . setProperty        ( "Mode" , VEX                             )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 3                               ) :
      ########################################################################
      if                          ( VEX == 3                               ) :
        VEX  = 0
      else                                                                   :
        VEX  = 3
      self   . setProperty        ( "Mode" , VEX                             )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 4                               ) :
      ########################################################################
      self   . setProperty        ( "Mode" , 4                               )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 101                             ) :
      ########################################################################
      self   . ClearSelections    (                                          )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 102                             ) :
      ########################################################################
      self   . DeleteSelected     (                                          )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 103                             ) :
      ########################################################################
      self   . ClearPoints        (                                          )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 201                             ) :
      ########################################################################
      if                          ( self . Closed                          ) :
        self . Closed = False
      else                                                                   :
        self . Closed = True
      ########################################################################
      self   . DoPathUpdater      ( 0 , True                                 )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 202                             ) :
      ########################################################################
      if                          ( self . Substract                       ) :
        self . Substract = False
      else                                                                   :
        self . Substract = True
      ########################################################################
      self   . DoPathUpdater      ( 0 , True                                 )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 301                             ) :
      ########################################################################
      VM     = self . getProperty ( "ShowPoints"                             )
      if                          ( VM                                     ) :
        self . setProperty        ( "ShowPoints" , False                     )
      else                                                                   :
        self . setProperty        ( "ShowPoints" , True                      )
      ########################################################################
      self   . DoPathUpdater      ( 0 , True                                 )
      ########################################################################
      return True
    ##########################################################################
    if                            ( at  == 302                             ) :
      ########################################################################
      VM     = self . getProperty ( "ShowLines"                              )
      if                          ( VM                                     ) :
        self . setProperty        ( "ShowLines" , False                      )
      else                                                                   :
        self . setProperty        ( "ShowLines" , True                       )
      ########################################################################
      self   . DoPathUpdater      ( 0 , True                                 )
      ########################################################################
      return True
    ##########################################################################
    return False
##############################################################################
