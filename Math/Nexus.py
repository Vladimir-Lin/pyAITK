# -*- coding: utf-8 -*-
##############################################################################
## Nexus
##############################################################################
class Nexus              (                                                 ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    self . setNexusEmpty (                                                   )
    ##########################################################################
    return
  ############################################################################
  def __del__          ( self                                              ) :
    return
  ############################################################################
  def setNexusEmpty    ( self                                              ) :
    ##########################################################################
    self . relation  = 0
    self . linkType  = 0
    self . flags     = 0
    self . name      = ""
    self . data      = None
    self . arguments = [                                                     ]
    self . nodes     = [                                                     ]
    ##########################################################################
    return
  ############################################################################
  def setConnexion     ( self , relate , linkType                          ) :
    ##########################################################################
    self . relation  = relate
    self . linkType  = linkType
    ##########################################################################
    return
  ############################################################################
  def setFlags         ( self , flags                                      ) :
    ##########################################################################
    self . flags = flags
    ##########################################################################
    return
  ############################################################################
  def setName          ( self , name                                       ) :
    ##########################################################################
    self . name = name
    ##########################################################################
    return
  ############################################################################
  def equalTo          ( self , relate                                     ) :
    ##########################################################################
    self . relation  = relate . relation
    self . linkType  = relate . linkType
    self . flags     = relate . flags
    self . name      = relate . name
    self . data      = relate . data
    self . arguments = relate . arguments
    self . nodes     = relate . nodes
    ##########################################################################
    return
  ############################################################################
  def connect         ( self , first , second                              ) :
    ##########################################################################
    self . disconnect (                                                      )
    ##########################################################################
    self . nodes =    [ first , second                                       ]
    ##########################################################################
    for node in self . nodes                                                 :
      ########################################################################
      node . Marriage ( self                                                 )
    ##########################################################################
    return
  ############################################################################
  def disconnect     ( self                                                ) :
    ##########################################################################
    for node in self . nodes                                                 :
      node . Divorce ( self                                                  )
    ##########################################################################
    self . nodes =   [                                                       ]
    ##########################################################################
    return
  ############################################################################
  def join                ( self , node                                    ) :
    ##########################################################################
    if                    ( node in self . nodes                           ) :
      return len          ( nodes . count ( )                                )
    ##########################################################################
    self . nodes . append ( node                                             )
    node . Marriage       ( self                                             )
    ##########################################################################
    return len            ( nodes . count ( )                                )
  ############################################################################
  def Indexing                  ( self , node                              ) :
    return self . nodes . index (        node                                )
  ############################################################################
  def isFirst            ( self , node                                     ) :
    ##########################################################################
    if                   ( len ( self . nodes ) <= 0                       ) :
      return False
    ##########################################################################
    AT = self . Indexing ( node                                              )
    if                   ( AT < 0                                          ) :
      return False
    ##########################################################################
    return               ( AT == 0                                           )
  ############################################################################
  def isEnd                 ( self , node                                  ) :
    ##########################################################################
    TOTAL = len             ( self . nodes                                   )
    if                      ( TOTAL <= 1                                   ) :
      return False
    ##########################################################################
    AT    = self . Indexing ( node                                           )
    if                      ( AT < 0                                       ) :
      return False
    ##########################################################################
    AT    = AT + 1
    ##########################################################################
    return                  ( AT == TOTAL                                    )
  ############################################################################
  def isDating ( self                                                      ) :
    return     ( len ( self . nodes ) == 1                                   )
  ############################################################################
  def Is   ( self , relate                                                 ) :
    return ( self . linkType == relate                                       )
  ############################################################################
  def connexion ( self                                                     ) :
    return self . relation
##############################################################################
