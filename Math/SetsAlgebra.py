# -*- coding: utf-8 -*-
##############################################################################
## SetsAlgebra
##############################################################################
from . SetOperator import SetOperator as SetOperator
##############################################################################
class SetsAlgebra              (                                           ) :
  ############################################################################
  def __init__                 ( self                                      ) :
    ##########################################################################
    self . setSetsAlgebraEmpty (                                             )
    ##########################################################################
    return
  ############################################################################
  def __del__    ( self                                                    ) :
    return
  ############################################################################
  def setSetsAlgebraEmpty ( self                                           ) :
    ##########################################################################
    self . Uuid          = 0
    self . Fault         = False
    self . Error         = ""
    self . Fettle        = ""
    self . Identifier    = ""
    self . Expression    = ""
    self . Result        = ""
    self . Inputs        = [ ]
    self . Elements      = [ ]
    self . Sequences     = [ ]
    self . Operations    = [ ]
    self . OpMaps        = { }
    self . Uuids         = { }
    self . Intermediates = 1000000
    ##########################################################################
    return
  ############################################################################
  def clear ( self                                                         ) :
    ##########################################################################
    self . Uuid          = 0
    self . Fault         = False
    self . Error         = ""
    self . Fettle        = ""
    self . Identifier    = ""
    self . Expression    = ""
    self . Result        = ""
    self . Inputs        = [ ]
    self . Elements      = [ ]
    self . Sequences     = [ ]
    self . OpMaps        = { }
    self . Uuids         = { }
    self . Intermediates = 1000000
    ##########################################################################
    if      ( len ( self . Operations ) > 0                                ) :
      ########################################################################
      for O in self . Operations                                             :
        pass
        """
        delete Operations[i]                 ;
        """
    ##########################################################################
    self . Operations    = [ ]
    ##########################################################################
    return
  ############################################################################
  def isFault              ( self                                          ) :
    return self . Fault
  ############################################################################
  def EmptyUuids           ( self                                          ) :
    ##########################################################################
    for n in self . Elements                                                 :
      self . Uuids [ n ] = [                                                 ]
    ##########################################################################
    return
  ############################################################################
  def Total    ( self                                                      ) :
    return len ( self . Sequences                                            )
  ############################################################################
  def RegulateSyntax  ( self , syntax                                      ) :
    ##########################################################################
    E   = syntax
    ##########################################################################
    E   = E . replace ( "("  , "( "                                          )
    E   = E . replace ( ")"  , " )"                                          )
    E   = E . replace ( "&"  , " & "                                         )
    E   = E . replace ( "|"  , " | "                                         )
    E   = E . replace ( "+"  , " + "                                         )
    E   = E . replace ( "-"  , " - "                                         )
    E   = E . replace ( "\\" , " \\ "                                        )
    E   = E . replace ( "^"  , " ^ "                                         )
    E   = E . replace ( "\r" , " "                                           )
    E   = E . replace ( "\n" , " "                                           )
    ##########################################################################
    E   = E . strip   (                                                      )
    ##########################################################################
    while "  " in E                                                          :
      E = E . replace ( "  " , " "                                           )
    ##########################################################################
    return E
  ############################################################################
  def isPure          ( self , token                                       ) :
    ##########################################################################
    if                ( len ( token ) <= 0                                 ) :
      return False
    ##########################################################################
    L = token . count ( "("                                                  )
    R = token . count ( ")"                                                  )
    W = token . count ( " "                                                  )
    ##########################################################################
    if                ( W != 2                                             ) :
      return False
    ##########################################################################
    if                ( L != 1                                             ) :
      return False
    ##########################################################################
    if                ( R != 1                                             ) :
      return False
    ##########################################################################
    L = token . find  ( "("                                                  )
    R = token . find  ( ")"                                                  )
    ##########################################################################
    if                ( L < 0                                              ) :
      return False
    ##########################################################################
    if                ( R < 0                                              ) :
      return False
    ##########################################################################
    if                ( L > R                                              ) :
      return False
    ##########################################################################
    return True
  ############################################################################
  def toArgumentsByName      ( self , name                                 ) :
    ##########################################################################
    if                       ( name not in self . OpMaps                   ) :
      return                 [                                               ]
    ##########################################################################
    AT  = self . OpMaps      [ name                                          ]
    if                       ( AT < 0                                      ) :
      return                 [                                               ]
    ##########################################################################
    NSO = self . Operations  [ AT                                            ]
    ##########################################################################
    return NSO . toArguments (                                               )
  ############################################################################
  def toArgumentsBySequence         ( self , AT                            ) :
    ##########################################################################
    if                              ( AT >= self . Total ( )               ) :
      return                        [                                        ]
    ##########################################################################
    return self . toArgumentsByName ( self . Sequences [ AT ]                )
  ############################################################################
  def addElement             ( self , name                                 ) :
    ##########################################################################
    if                       ( name in self . Elements                     ) :
      return False
    ##########################################################################
    self . Elements . append ( name                                          )
    self . Uuids [ name ] =  [                                               ]
    ##########################################################################
    return True
  ############################################################################
  def addInput               ( self , name                                 ) :
    ##########################################################################
    if                       ( not self . addElement ( name )              ) :
      return False
    ##########################################################################
    if                       ( name not in self . Inputs                   ) :
      self . Inputs . append ( name                                          )
    ##########################################################################
    return   True
  ############################################################################
  def assignUuids              ( self , name , uuids                       ) :
    ##########################################################################
    if                         ( name not in self . Elements               ) :
      self . Elements . append ( name                                        )
    ##########################################################################
    self . Uuids [ name ] = uuids
    ##########################################################################
    return True
  ############################################################################
  ## 依據集合運算元素找到位置
  ############################################################################
  def FindOperator ( self , SOP                                            ) :
    ##########################################################################
    AT   = 0
    ##########################################################################
    for OP in self . Operations                                              :
      ########################################################################
      if           ( OP == SOP                                             ) :
        return AT
      ########################################################################
      AT = AT + 1
    ##########################################################################
    return -1
  ############################################################################
  ## 依據名稱找到集合運算元素
  ############################################################################
  def LocateOperator ( self , Name                                         ) :
    ##########################################################################
    for OP in self . Operations                                              :
      ########################################################################
      if             ( OP . Name == Name                                   ) :
        return OP
    ##########################################################################
    return None
  ############################################################################
  ## 分解組合集合運算元件
  ############################################################################
  def Companion           ( self , token                                   ) :
    ##########################################################################
    s      = ""
    LEN    = len          ( token                                            )
    ##########################################################################
    if                    ( LEN <= 0                                       ) :
      return s
    ##########################################################################
    AT     = token . find ( "("                                              )
    if                    ( AT < 0                                         ) :
      return s
    ##########################################################################
    if                    ( AT > 0                                         ) :
      s    = token        [ : AT                                             ]
    ##########################################################################
    s      = s + "("
    AT     = AT + 1
    ##########################################################################
    while                 ( AT < LEN                                       ) :
      ########################################################################
      c    = token        [ AT                                               ]
      ########################################################################
      if                  ( c == ")"                                       ) :
        s  = s + ")"
        return s
      ########################################################################
      if                  ( c == "("                                       ) :
        ######################################################################
        companion = token [ AT : LEN                                         ]
        companion = self . Companion ( companion                             )
        if                ( len ( companion ) <= 0                         ) :
          return ""
        ######################################################################
        s  = s + companion
        AT = len          ( s                                                )
        ######################################################################
      else                                                                   :
        ######################################################################
        s  = s  + c
      ########################################################################
      AT   = AT + 1
    ##########################################################################
    return ""
  ############################################################################
  ## 不做檢查新增集合運算元件
  ############################################################################
  def appendOperator           ( self , SOP                                ) :
    ##########################################################################
    self . Intermediates = self . Intermediates + 1
    ID   = self . Intermediates
    Name = f"`{ID}`"
    ##########################################################################
    SOP  . setName             ( Name                                        )
    AT   = len                 ( self . Operations                           )
    self . Operations . append ( SOP                                         )
    self . OpMaps [ Name ] = AT
    ##########################################################################
    self . addInput            ( SOP . A                                     )
    self . addInput            ( SOP . B                                     )
    self . addElement          ( SOP . Name                                  )
    ##########################################################################
    return Name
  ############################################################################
  ## 新增集合運算元素
  ############################################################################
  def addOperator                ( self , token                            ) :
    ##########################################################################
    SOP   = SetOperator          (                                           )
    if                           ( not SOP . assign ( token )              ) :
      ########################################################################
      self . Fault  = True
      self . Error  = token
      self . Fettle = "Set Operator Syntax Error"
      ########################################################################
      return False , ""
    ##########################################################################
    AT   = self . FindOperator   ( SOP                                       )
    if                           ( AT >= 0                                 ) :
      return True , self . Operations [ AT ] . Name
    ##########################################################################
    Name = self . appendOperator ( SOP                                       )
    ##########################################################################
    return True , Name
  ############################################################################
  ## 解譯組合集合運算語法
  ############################################################################
  def addCompose                       ( self , expression                 ) :
    ##########################################################################
    if                                 ( self . isPure ( expression )      ) :
      ########################################################################
      OKAY , Name = self . addOperator ( expression                          )
      if                               ( OKAY                              ) :
        if                             ( Name not in self . Sequences      ) :
          self . Sequences . append    ( Name                                )
        return True , Name
      ########################################################################
      return False , ""
    ##########################################################################
    L      = expression . find         ( "("                                 )
    R      = expression . rfind        ( ")"                                 )
    ##########################################################################
    if                                 ( L < 0                             ) :
      ########################################################################
      self . Fault  = True
      self . Error  = expression
      self . Fettle = "Can not find left bracket"
      ########################################################################
      return False , ""
    ##########################################################################
    if                                 ( R < 0                             ) :
      ########################################################################
      self . Fault  = True
      self . Error  = expression
      self . Fettle = "Can not find right bracket"
      ########################################################################
      return False , ""
    ##########################################################################
    if                                 ( L >= R                            ) :
      ########################################################################
      self . Fault  = True
      self . Error  = expression
      self . Fettle = "Left and right bracket position confused"
      ########################################################################
      return False , ""
    ##########################################################################
    token  = expression                [ L + 1 : R                           ]
    E      = self . RegulateSyntax     ( token                               )
    L      = len                       ( E                                   )
    R      = 0
    ##########################################################################
    if                                 ( L <= 0                            ) :
      ########################################################################
      self . Fault  = True
      self . Error  = expression
      self . Fettle = "Empty expression"
      ########################################################################
      return False , ""
    ##########################################################################
    PureA  = True
    PureB  = True
    SOP    = SetOperator               (                                     )
    ##########################################################################
    while                              ( R < L                             ) :
      ########################################################################
      c    = E                         [ R                                   ]
      ########################################################################
      if                               ( c == "&"                          ) :
        SOP . asIntersection           (                                     )
      elif                             ( c == "|"                          ) :
        SOP . asUnion                  (                                     )
      elif                             ( c == "+"                          ) :
        SOP . asUnion                  (                                     )
      elif                             ( c == "-"                          ) :
        SOP . asComplement             (                                     )
      elif                             ( c == "\\"                         ) :
        SOP . asComplement             (                                     )
      elif                             ( c == "^"                          ) :
        SOP . asSymmetric              (                                     )
      elif                             ( c == "("                          ) :
        ######################################################################
        companion = E                  [ R : L                               ]
        ######################################################################
        if                             ( len ( companion ) <= 0            ) :
          ####################################################################
          self . Fault  = True
          self . Error  = expression
          self . Fettle = "Empty Companion Syntax"
          ####################################################################
          return False , ""
        ######################################################################
        companion = self . Companion   ( companion                           )
        ######################################################################
        if                             ( len ( companion ) <= 0            ) :
          ####################################################################
          self . Fault  = True
          self . Error  = expression
          self . Fettle = "Unable to decode Companion Syntax"
          ####################################################################
          return False , ""
        ######################################################################
        if                             ( SOP . isNothing ( )               ) :
          ####################################################################
          cn   = companion
          cn   = cn . strip            (                                     )
          OKAY , Name = self . addCompose ( cn                               )
          ####################################################################
          if                           ( OKAY                              ) :
            ##################################################################
            SOP . A = Name
            if                         ( Name not in self . Sequences      ) :
              self . Sequences . append ( Name                               )
            PureA = False
            ##################################################################
          else                                                               :
            return False , Name
          ####################################################################
          R    = R + len               ( companion                           )
          ####################################################################
        else                                                                 :
          ####################################################################
          cn   = companion
          cn   = cn . strip            (                                     )
          OKAY , Name = self . addCompose ( cn                               )
          ####################################################################
          if                           ( OKAY                              ) :
            ##################################################################
            SOP . B = Name
            if                         ( Name not in self . Sequences      ) :
              self . Sequences . append ( Name                               )
            PureB = False
            ##################################################################
          else                                                               :
            return False , Name
          ####################################################################
          R = L
      ########################################################################
      elif                             ( c == ")"                          ) :
        ######################################################################
        if                             ( len ( SOP . B ) <= 0              ) :
          ####################################################################
          self . Fault = True
          self . Error  = expression
          self . Fettle = "Unexpected right bracket"
          ####################################################################
          return False , ""
        ######################################################################
        R = L
      ########################################################################
      elif                             ( c == " "                          ) :
        pass
      ########################################################################
      else                                                                   :
        ######################################################################
        if                             ( SOP . isNothing ( )               ) :
          SOP . A = SOP . A + c
        else                                                                 :
          SOP . B = SOP . B + c
      ########################################################################
      R = R + 1
    ##########################################################################
    if                                 ( SOP . isNothing ( )               ) :
      ########################################################################
      self . Fault = True
      self . Error  = expression
      self . Fettle = "Incompleted syntax"
      ########################################################################
      return False , ""
    ##########################################################################
    AT     = self . FindOperator       ( SOP                                 )
    if                                 ( AT >= 0                           ) :
      return True , self . Operations [ AT ] . Name
    ##########################################################################
    Name   = self . appendOperator     ( SOP                                 )
    ##########################################################################
    if ( ( PureA ) and ( SOP . A not in self . Inputs ) )                    :
      self . Inputs . append ( SOP . A )
    ##########################################################################
    if ( ( PureB ) and ( SOP . B not in self . Inputs ) )                    :
      self . Inputs . append ( SOP . B )
    ##########################################################################
    if                                 ( Name not in self . Sequences      ) :
      self . Sequences . append        ( Name                                )
    ##########################################################################
    return True , Name
  ############################################################################
  ## 解譯運算語法
  ############################################################################
  def Decode                           ( self , expression                 ) :
    ##########################################################################
    self       . clear                 (                                     )
    self       . Expression = expression
    ##########################################################################
    if                                 ( len ( self . Expression ) <= 0    ) :
      return False
    ##########################################################################
    E          = self . Expression
    L          = E . count             ( "("                                 )
    R          = E . count             ( ")"                                 )
    ##########################################################################
    if                                 ( L <= 0                            ) :
      return False
    ##########################################################################
    if                                 ( R <= 0                            ) :
      return False
    ##########################################################################
    if                                 ( L != R                            ) :
      return False
    ##########################################################################
    E          = self . RegulateSyntax ( E                                   )
    ##########################################################################
    if                                 ( L == 1                            ) :
      ########################################################################
      if                               ( not self . isPure ( E )           ) :
        return False
      ########################################################################
      OKAY , Name = self . addOperator ( E                                   )
      if                               ( OKAY                              ) :
        self . Sequences . append      ( Name                                )
        self . Result = Name
        return True
      ########################################################################
      return False
    ##########################################################################
    OKAY , Name = self . addCompose    ( E                                   )
    if                                 ( OKAY                              ) :
      self . Result = Name
      return True
    ##########################################################################
    return False
  ############################################################################
  def Execute                      ( self                                  ) :
    ##########################################################################
    if                             ( len ( self . Result ) <= 0            ) :
      return False ,               [                                         ]
    ##########################################################################
    if                             ( len ( self . Sequences ) <= 0         ) :
      return False ,               [                                         ]
    ##########################################################################
    for S in self . Sequences                                                :
      ########################################################################
      AT = self . OpMaps           [ S                                       ]
      if                           ( AT < 0                                ) :
        continue
      ########################################################################
      NSO      = self . Operations [ AT                                      ]
      OKAY , R = NSO . execute     ( self . Uuids [ NSO . A ]              , \
                                     self . Uuids [ NSO . B ]                )
      if                           ( not OKAY                              ) :
        return False ,             [                                         ]
      ########################################################################
      self . Uuids [ NSO . Name ] = R
    ##########################################################################
    return True , self . Uuids     [ self . Result                           ]
  ############################################################################
  def Expanding                       ( self , level , startId , op        ) :
    ##########################################################################
    if                                ( level < 2                          ) :
      return ""
    ##########################################################################
    if                                ( level == 2                         ) :
      ########################################################################
      A = startId
      B = startId + 1
      A = f"#{A}"
      B = f"#{B}"
      ########################################################################
      return "({0} {1} {2})" . format ( A , op , B                           )
    ##########################################################################
    A   = startId
    A   = f"#{A}"
    B   = self . Expanding            ( level - 1 , startId + 1 , op         )
    ##########################################################################
    return "({0} {1} {2})"   . format ( A , op , B                           )
  ############################################################################
  def Construct                       ( self , element                     ) :
    ##########################################################################
    if                                ( element not in self . OpMaps       ) :
      return ""
    ##########################################################################
    AT  = self . OpMaps               [ element                              ]
    NSO = self . Operations           [ AT                                   ]
    ##########################################################################
    CA  =                             ( NSO . A in self . Inputs             )
    CB  =                             ( NSO . B in self . Inputs             )
    ##########################################################################
    if                                ( CA and CB                          ) :
      return NSO . Syntax             (                                      )
    ##########################################################################
    if                                ( CA                                 ) :
      ########################################################################
      A = NSO . A
      B = self . Construct            ( NSO . B                              )
      ########################################################################
    elif                              ( CB                                 ) :
      ########################################################################
      A = self . Construct            ( NSO . A                              )
      B = NSO . B
      ########################################################################
    else                                                                     :
      ########################################################################
      A = self . Construct            ( NSO . A                              )
      B = self . Construct            ( NSO . B                              )
    ##########################################################################
    O   = NSO . OperatorSyntax        (                                      )
    ##########################################################################
    if                                ( len ( A ) <= 0                     ) :
      return ""
    ##########################################################################
    if                                ( len ( B ) <= 0                     ) :
      return ""
    ##########################################################################
    if                                ( len ( O ) <= 0                     ) :
      return ""
    ##########################################################################
    return "( {0} {1} {2} )" . format ( A , O , B                            )
  ############################################################################
  def Reconstruct           ( self                                         ) :
    ##########################################################################
    AT = len                ( self . Sequences                               )
    if                      ( AT <= 0                                      ) :
      return ""
    ##########################################################################
    AT = AT - 1
    ##########################################################################
    return self . Construct ( self . Sequences [ AT ]                        )
##############################################################################
