# -*- coding: utf-8 -*-
##############################################################################
## SetOperator
##############################################################################
## typedef enum       {
##   Nothing      = 0 , // Actually, this is invalid operator
##   Intersection = 1 , // A & B , And       , with operator &
##   Union        = 2 , // A | B , Or        , with operator |
##   Complement   = 3 , // A - B , Substract , with operator / or -
##                      // as a formal notation A - B should be written as
##                      // A \ B , read ISO 31-11 standard for details
##   Symmetric    = 4   // Symmetric difference , with operator ^
##                      // ( A - B ) | ( B - A )
## } Operators        ;
## if (o=="&" ) O = Intersection ; else
## if (o=="|" ) O = Union        ; else
## if (o=="-" ) O = Complement   ; else
## if (o=="\\") O = Complement   ; else
## if (o=="^" ) O = Symmetric    ;
##############################################################################
class SetOperator           (                                              ) :
  ############################################################################
  Nothing      = 0
  Intersection = 1
  Union        = 2
  Complement   = 3
  Symmetric    = 4
  ############################################################################
  def __init__              ( self                                         ) :
    ##########################################################################
    self . setOperatorEmpty (                                                )
    ##########################################################################
    return
  ############################################################################
  def __del__               ( self                                         ) :
    return
  ############################################################################
  ## 檢查是否相同的集合運算元素
  ############################################################################
  def __eq__              ( self , another                                 ) :
    return self . isEqual (        another                                   )
  ############################################################################
  ## 檢查是否相同的集合運算元素
  ############################################################################
  def isEqual ( self , another                                             ) :
    ##########################################################################
    if        ( self . O != another . O                                    ) :
      return False
    ##########################################################################
    if        ( self . O == self . Nothing                                 ) :
      return False
    ##########################################################################
    if        ( self . O == self . Complement                              ) :
      if      ( self . A != another . A                                    ) :
        return False
      if      ( self . B != another . B                                    ) :
        return False
      return True
    ##########################################################################
    if        ( self . A != another . A                                    ) :
      if      ( self . A != another . B                                    ) :
        return False
      if      ( self . B != another . A                                    ) :
        return False
    else                                                                     :
      if      ( self . B != another . B                                    ) :
        return False
    ##########################################################################
    return True
  ############################################################################
  def setOperatorEmpty ( self                                              ) :
    ##########################################################################
    self . Name = ""
    self . A    = ""
    self . B    = ""
    self . O    = self . Nothing
    ##########################################################################
    return
  ############################################################################
  def setFrom ( self , another                                             ) :
    ##########################################################################
    self . Name = another . Name
    self . A    = another . A
    self . B    = another . B
    self . O    = another . O
    ##########################################################################
    return
  ############################################################################
  def setName                          ( self , name                       ) :
    ##########################################################################
    self . Name = name
    ##########################################################################
    return
  ############################################################################
  def isNothing      ( self                                                ) :
    return           ( self . O == self . Nothing                            )
  ############################################################################
  def asNothing      ( self                                                ) :
    self . O = self . Nothing
    return
  ############################################################################
  def asIntersection ( self                                                ) :
    self . O = self . Intersection
    return
  ############################################################################
  def asUnion        ( self                                                ) :
    self . O = self . Union
    return
  ############################################################################
  def asComplement   ( self                                                ) :
    self . O = self . Complement
    return
  ############################################################################
  def asSymmetric    ( self                                                ) :
    self . O = self . Symmetric
    return
  ############################################################################
  def OperatorSyntax ( self                                                ) :
    ##########################################################################
    if               ( self . O == self . Nothing                          ) :
      return ""
    ##########################################################################
    if               ( self . O == self . Intersection                     ) :
      return "&"
    ##########################################################################
    if               ( self . O == self . Union                            ) :
      return "|"
    ##########################################################################
    if               ( self . O == self . Complement                       ) :
      return "\\"
    ##########################################################################
    if               ( self . O == self . Symmetric                        ) :
      return "^"
    ##########################################################################
    return ""
  ############################################################################
  def Syntax                           ( self                              ) :
    ##########################################################################
    if                                 ( self . O == self . Nothing        ) :
      return ""
    ##########################################################################
    if                                 ( self . O == self . Intersection   ) :
      return "( {0} & {1} )"  . format ( self . A , self . B                 )
    ##########################################################################
    if                                 ( self . O == self . Union          ) :
      return "( {0} | {1} )"  . format ( self . A , self . B                 )
    ##########################################################################
    if                                 ( self . O == self . Complement     ) :
      return "( {0} \\ {1} )" . format ( self . A , self . B                 )
    ##########################################################################
    if                                 ( self . O == self . Symmetric      ) :
      return "( {0} ^ {1} )"  . format ( self . A , self . B                 )
    ##########################################################################
    return ""
  ############################################################################
  def toJSON ( self                                                        ) :
    return   { "Name"     : self . Name                                      ,
               "Operator" : self . O                                         ,
               "Syntax"   : self . OperatorSyntax ( )                        ,
               "A"        : self . A                                         ,
               "B"        : self . B                                         }
  ############################################################################
  def toArguments ( self                                                   ) :
    return        [ "Sets" , self . Name , self . O , self . A , self . B    ]
  ############################################################################
  def RegulateSyntax  ( self , syntax                                      ) :
    ##########################################################################
    s   = syntax
    ##########################################################################
    s   = s . replace ( "("  , ""                                            )
    s   = s . replace ( ")"  , ""                                            )
    s   = s . replace ( "&"  , " & "                                         )
    s   = s . replace ( "|"  , " | "                                         )
    s   = s . replace ( "-"  , " - "                                         )
    s   = s . replace ( "\\" , " \\ "                                        )
    s   = s . replace ( "^"  , " ^ "                                         )
    ##########################################################################
    s   = s . strip   (                                                      )
    ##########################################################################
    while "  " in s                                                          :
      s = s . replace ( "  " , " "                                           )
    ##########################################################################
    return s
  ############################################################################
  def assign                 ( self , syntax                               ) :
    ##########################################################################
    self . A   = ""
    self . B   = ""
    self . O   = self . Nothing
    ##########################################################################
    if                       ( "(" not in syntax                           ) :
      return False
    ##########################################################################
    if                       ( ")" not in syntax                           ) :
      return False
    ##########################################################################
    s          = self . RegulateSyntax ( syntax                              )
    ##########################################################################
    R          = s . split   (                                               )
    L          =             [                                               ]
    for v in R                                                               :
      ########################################################################
      if                     ( len ( v ) > 0                               ) :
        L      . append      ( v                                             )
    ##########################################################################
    if                       ( len ( L ) != 3                              ) :
      return False
    ##########################################################################
    if                       ( L [ 1 ] == "&"                              ) :
      self . O = self . Intersection
    elif                     ( L [ 1 ] == "|"                              ) :
      self . O = self . Union
    elif                     ( L [ 1 ] == "-"                              ) :
      self . O = self . Complement
    elif                     ( L [ 1 ] == "\\"                             ) :
      self . O = self . Complement
    elif                     ( L [ 1 ] == "^"                              ) :
      self . O = self . Symmetric
    else                                                                     :
      return False
    ##########################################################################
    self . A   = L           [ 0                                             ]
    self . B   = L           [ 2                                             ]
    ##########################################################################
    return True
  ############################################################################
  def DoIntersection               ( self , A , B                          ) :
    ##########################################################################
    if                             ( len ( A ) <= 0                        ) :
      return True ,                [                                         ]
    ##########################################################################
    if                             ( len ( B ) <= 0                        ) :
      return True ,                [                                         ]
    ##########################################################################
    return   True , list           ( set ( A ) & set ( B )                   )
  ############################################################################
  def DoUnion                      ( self , A , B                          ) :
    ##########################################################################
    if                             ( len ( A ) <= 0                        ) :
      return True , B
    ##########################################################################
    if                             ( len ( B ) <= 0                        ) :
      return True , A
    ##########################################################################
    return   True , A + list       ( set ( B ) - set ( A )                   )
  ############################################################################
  def DoComplement                 ( self , A , B                          ) :
    ##########################################################################
    if                             ( len ( A ) <= 0                        ) :
      return True ,                [                                         ]
    ##########################################################################
    if                             ( len ( B ) <= 0                        ) :
      return True , A
    ##########################################################################
    return True , A - B
  ############################################################################
  def DoSymmetric                  ( self , A , B                          ) :
    ##########################################################################
    if                             ( len ( A ) <= 0                        ) :
      return True ,                [                                         ]
    ##########################################################################
    if                             ( len ( B ) <= 0                        ) :
      return True ,                [                                         ]
    ##########################################################################
    C = self . DoComplement        ( A , B                                   )
    D = self . DoComplement        ( B , A                                   )
    return   True , self . DoUnion ( C , D                                   )
  ############################################################################
  def execute                      ( self , A , B                          ) :
    ##########################################################################
    if                             ( self . O == self . Nothing            ) :
      return False ,               [                                         ]
    ##########################################################################
    if                             ( self . O == self . Intersection       ) :
      return self . DoIntersection (        A , B                            )
    ##########################################################################
    if                             ( self . O == self . Union              ) :
      return self . DoUnion        (        A , B                            )
    ##########################################################################
    if                             ( self . O == self . Complement         ) :
      return self . DoComplement   (        A , B                            )
    ##########################################################################
    if                             ( self . O == self . Symmetric          ) :
      return self . DoSymmetric    (        A , B                            )
    ##########################################################################
    return   False ,               [                                         ]
##############################################################################
