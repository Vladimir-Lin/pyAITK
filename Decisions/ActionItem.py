# -*- coding: utf-8 -*-
##############################################################################
## 決策行動項目
##############################################################################
import os
import sys
import json
##############################################################################
import mysql . connector
from   mysql . connector              import Error
##############################################################################
import AITK
from   AITK  . Database . Query       import Query
from   AITK  . Database . Connection  import Connection
from   AITK  . Database . Pair        import Pair
from   AITK  . Database . Columns     import Columns
##############################################################################
from                    . MappingItem import MappingItem as MappingItem
##############################################################################
class ActionItem         ( Columns                                         ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    self      . Clear    (                                                   )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear             ( self                                             ) :
    ##########################################################################
    self . Columns    = [                                                    ]
    self . Id         = -1
    self . Uuid       =  0
    self . Used       =  1
    self . ActionType =  1
    self . States     =  0
    self . Trigger    =  0
    self . Name       =  ""
    self . Properties = {                                                    }
    self . Groups     = [                                                    ]
    self . Conditions = [                                                    ]
    self . Mappings   = {                                                    }
    self . Status     = {                                                    }
    self . ltime      =  0
    ##########################################################################
    return
  ############################################################################
  def assign ( self , item                                                 ) :
    ##########################################################################
    self . Columns    = item . Columns
    self . Id         = item . Id
    self . Uuid       = item . Uuid
    self . Used       = item . Used
    self . ActionType = item . ActionType
    self . States     = item . States
    self . Trigger    = item . Trigger
    self . Name       = item . Name
    self . Properties = item . Properties
    self . Groups     = item . Groups
    self . Conditions = item . Conditions
    self . Mappings   = item . Mappings
    self . Status     = item . Status
    self . ltime      = item . ltime
    ##########################################################################
    return
  ############################################################################
  def set            ( self , item , value                                 ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"         == a                                   ) :
      self . Id           = int ( value                                      )
    ##########################################################################
    elif             ( "uuid"       == a                                   ) :
      self . Uuid         = int ( value                                      )
    ##########################################################################
    elif             ( "used"       == a                                   ) :
      self . Used         = int ( value                                      )
    ##########################################################################
    elif             ( "type"       == a                                   ) :
      self . ActionType   = int ( value                                      )
    ##########################################################################
    elif             ( "states"     == a                                   ) :
      self . States       = int ( value                                      )
    ##########################################################################
    elif             ( "trigger"    == a                                   ) :
      self . Trigger      = int ( value                                      )
    ##########################################################################
    elif             ( "name"       == a                                   ) :
      self . Name         = value . decode ( "utf-8"                         )
    ##########################################################################
    elif             ( "json"       == a                                   ) :
      ########################################################################
      try                                                                    :
        ######################################################################
        S                 = value . decode ( "utf-8"                         )
        self . Properties = json  . loads  ( S                               )
        ######################################################################
      except                                                                 :
        ######################################################################
        self . Properties = {                                                }
    ##########################################################################
    elif             ( "groups"     == a                                   ) :
      ########################################################################
      self . Groups       = value
    ##########################################################################
    elif             ( "conditions" == a                                   ) :
      ########################################################################
      self . Conditions   = value
    ##########################################################################
    elif             ( "mappings"   == a                                   ) :
      ########################################################################
      self . Mappings     = value
    ##########################################################################
    elif             ( "status"     == a                                   ) :
      ########################################################################
      self . Status       = value
    ##########################################################################
    elif             ( "ltime"      == a                                   ) :
      self . ltime        = value
    ##########################################################################
    return
  ############################################################################
  def get            ( self , item                                         ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"         == a                                   ) :
      return self . Id
    ##########################################################################
    if               ( "uuid"       == a                                   ) :
      return self . Uuid
    ##########################################################################
    if               ( "used"       == a                                   ) :
      return self . Used
    ##########################################################################
    if               ( "type"       == a                                   ) :
      return self . ActionType
    ##########################################################################
    if               ( "states"     == a                                   ) :
      return self . States
    ##########################################################################
    if               ( "trigger"    == a                                   ) :
      return self . Trigger
    ##########################################################################
    if               ( "name"       == a                                   ) :
      return self . Name
    ##########################################################################
    if               ( "json"       == a                                   ) :
      return self . Properties
    ##########################################################################
    if               ( "groups"     == a                                   ) :
      return self . Groups
    ##########################################################################
    if               ( "conditions" == a                                   ) :
      return self . Conditions
    ##########################################################################
    if               ( "mappings"   == a                                   ) :
      return self . Mappings
    ##########################################################################
    if               ( "status"     == a                                   ) :
      return self . Status
    ##########################################################################
    if               ( "ltime"      == a                                   ) :
      return self . ltime
    ##########################################################################
    return ""
  ############################################################################
  def tableItems        ( self                                             ) :
    return [ "id"                                                            ,
             "uuid"                                                          ,
             "used"                                                          ,
             "type"                                                          ,
             "states"                                                        ,
             "trigger"                                                       ,
             "name"                                                          ,
             "json"                                                          ,
             "ltime"                                                         ]
  ############################################################################
  def pair              ( self , item                                      ) :
    v = self . get      (        item                                        )
    return f"`{item}` = {v}"
  ############################################################################
  def valueItems        ( self                                             ) :
    return [ "used"                                                          ,
             "type"                                                          ,
             "states"                                                        ,
             "trigger"                                                       ,
             "name"                                                          ,
             "json"                                                          ]
  ############################################################################
  def toJson                     ( self                                    ) :
    ##########################################################################
    M =                          {                                           }
    ##########################################################################
    for G in self . Groups                                                   :
      ########################################################################
      M [ G ] =                  [                                           ]
      ########################################################################
      if                         ( G in self . Mappings                    ) :
        ######################################################################
        for X in self . Mappings [ G                                       ] :
          ####################################################################
          M [ G ] . append       ( X . toJson (                            ) )
    ##########################################################################
    return                       { "Id"         : self . Id                , \
                                   "Uuid"       : self . Uuid              , \
                                   "Used"       : self . Used              , \
                                   "Type"       : self . ActionType        , \
                                   "States"     : self . States            , \
                                   "Trigger"    : self . Trigger           , \
                                   "Name"       : self . Name              , \
                                   "Properties" : self . Properties        , \
                                   "Groups"     : self . Groups            , \
                                   "Conditions" : self . Conditions        , \
                                   "Mappings"   : M                        , \
                                   "Status"     : self . Status              }
  ############################################################################
  def fromJson                ( self , JS                                  ) :
    ##########################################################################
    self   . Id         = int ( JS [ "Id"                                  ] )
    self   . Uuid       = int ( JS [ "Uuid"                                ] )
    self   . Used       = int ( JS [ "Used"                                ] )
    self   . ActionType = int ( JS [ "Type"                                ] )
    self   . States     = int ( JS [ "States"                              ] )
    self   . Trigger    = int ( JS [ "Trigger"                             ] )
    self   . Name       =       JS [ "Name"                                  ]
    self   . Properties =       JS [ "Properties"                            ]
    self   . Groups     =       JS [ "Groups"                                ]
    self   . Conditions =       JS [ "Conditions"                            ]
    self   . Status     =       JS [ "Status"                                ]
    ##########################################################################
    self   . Mappings   =     {                                              }
    ##########################################################################
    for G in self . Groups                                                   :
      ########################################################################
      self . Mappings [ G ] = [                                              ]
      ########################################################################
      if                      ( G in JS [ "Mappings" ]                     ) :
        ######################################################################
        for M in JS [ "Mappings" ] [ G ]                                     :
          ####################################################################
          MAPI = MappingItem  (                                              )
          MAPI . fromJson     ( M                                            )
          ####################################################################
          self . Mappings [ G ] . append ( MAPI                              )
    ##########################################################################
    return
  ############################################################################
  def FromHistory ( self , History                                         ) :
    ##########################################################################
    ## self . Conditions = [                                                    ]
    ## self . Status     = {                                                    }
    ##########################################################################
    return
  ############################################################################
  def FetchGroups                      ( self , DB , TABLE                 ) :
    ##########################################################################
    UUID            = self . Uuid
    QQ              = f"""select `group` from {TABLE}
                          where ( `action` = {UUID} )
                          group by `group` asc ;"""
    QQ              = " " . join       ( QQ . split (                      ) )
    self . Groups   = DB . ObtainUuids ( QQ                                  )
    ##########################################################################
    self . Mappings =                  {                                     }
    ##########################################################################
    for G in self . Groups                                                   :
      ########################################################################
      self . Mappings [ G ] =          [                                     ]
    ##########################################################################
    return
  ############################################################################
  def FetchMappings                      ( self , DB , TABLE , MITEMs      ) :
    ##########################################################################
    MAPI              = MappingItem      (                                   )
    ##########################################################################
    UUID              = self . Uuid
    QQ                = f"""select `condition` from {TABLE}
                            where ( `action` = {UUID} )
                              and ( `adopt` > 0 )
                            group by `condition` asc ;"""
    QQ                = " " . join       ( QQ . split (                    ) )
    self . Conditions = DB . ObtainUuids ( QQ                                )
    ##########################################################################
    ITS               = MAPI . items     (                                   )
    QQ                = f"""select {ITS} from {TABLE}
                            where ( `adopt` > 0 )
                            order by `group`,`id` asc ;"""
    QQ                = " " . join       ( QQ . split (                    ) )
    DB                . Execute          ( QQ                                )
    ALLs              = DB . FetchAll    (                                   )
    ##########################################################################
    if                                   ( ALLs in [ False , None ]        ) :
      return
    ##########################################################################
    if                                   ( len ( ALLs ) <= 0               ) :
      return
    ##########################################################################
    for RR in ALLs                                                           :
      ########################################################################
      MAPI            = MappingItem      (                                   )
      MAPI            . obtain           ( RR                                )
      MAPI            . AssignForm       ( MITEMs                            )
      ########################################################################
      if                                 ( MAPI . Group in self . Mappings ) :
        ######################################################################
        self . Mappings [ MAPI . Group ] . append ( MAPI                     )
    ##########################################################################
    return
  ############################################################################
  def ObtainsAll                     ( self                                , \
                                       DB                                  , \
                                       TABLE                               , \
                                       MAPPING                             , \
                                       GROUP                               , \
                                       MITEMs                              ) :
    ##########################################################################
    ITEMs     =                      [                                       ]
    QQ        = f"select `uuid` from {TABLE} order by `id` asc ;"
    QQ        = " " . join           ( QQ . split (                        ) )
    AUIDs     = DB  . ObtainUuids    ( QQ                                    )
    ##########################################################################
    for AUID in AUIDs                                                        :
      ########################################################################
      ACTI    = ActionItem           (                                       )
      ACTI    . Uuid = AUID
      OKAY    = ACTI . ObtainsByUuid ( DB , TABLE                            )
      ########################################################################
      if                             ( OKAY                                ) :
        ######################################################################
        ACTI  . FetchGroups          ( DB , GROUP                            )
        ACTI  . FetchMappings        ( DB , MAPPING , MITEMs                 )
        ITEMs . append               ( ACTI                                  )
    ##########################################################################
    return ITEMs
  ############################################################################
  def ToMappers ( self , ALLs                                              ) :
    ##########################################################################
    M =         {                                                            }
    ##########################################################################
    for A in ALLs                                                            :
      ########################################################################
      M [ A . Uuid ] = A
    ##########################################################################
    return M
  ############################################################################
  def AllToUuids ( self , ALLs                                             ) :
    ##########################################################################
    U   =        [                                                           ]
    ##########################################################################
    for A in ALLs                                                            :
      ########################################################################
      U . append ( A . Uuid                                                  )
    ##########################################################################
    return U
  ############################################################################
  def isConditionGroup ( self , Group , CONDITIONs                         ) :
    ##########################################################################
    if                 ( Group not in self . Mappings                      ) :
      return   False
    ##########################################################################
    if                 ( len ( self . Mappings [ Group ] ) <= 0            ) :
      return   False
    ##########################################################################
    for G in self . Mappings [ Group ]                                       :
      ########################################################################
      if               ( not G . Comparsion ( CONDITIONs )                 ) :
        return False
    ##########################################################################
    return     True
  ############################################################################
  def shallRun ( self , CONDITIONs                                         ) :
    ##########################################################################
    if         ( len ( self . Groups ) <= 0                                ) :
      return   False
    ##########################################################################
    for G in self . Groups                                                   :
      ########################################################################
      if       ( self . isConditionGroup ( G , CONDITIONs )                ) :
        return True
    ##########################################################################
    return     False
##############################################################################
