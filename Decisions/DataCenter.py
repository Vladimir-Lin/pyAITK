# -*- coding: utf-8 -*-
##############################################################################
## 決策行動數據中心
##############################################################################
import os
import sys
import time
import datetime
import threading
import json
##############################################################################
import mysql . connector
from   mysql . connector                 import Error
##############################################################################
import AITK
##############################################################################
from   AITK  . Calendars . StarDate      import StarDate
##############################################################################
from   AITK  . Database  . Query         import Query
from   AITK  . Database  . Connection    import Connection
from   AITK  . Database  . Pair          import Pair
from   AITK  . Database  . Columns       import Columns
##############################################################################
from                     . ActionItem    import ActionItem    as ActionItem
from                     . ConditionItem import ConditionItem as ConditionItem
from                     . MappingItem   import MappingItem   as MappingItem
##############################################################################
class DataCenter         (                                                 ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    self . ConditionListings = [                                             ]
    self . CONDITIONs        = {                                             }
    self . ActionListings    = [                                             ]
    self . ACTIONs           = {                                             }
    ##########################################################################
    self . ConditionItems    = [                                             ]
    self . ConditionMaps     = {                                             }
    self . ConditionUuids    = [                                             ]
    self . ActionItems       = [                                             ]
    self . ActionMaps        = {                                             }
    self . ActionUuids       = [                                             ]
    ##########################################################################
    self . Settings          = {                                             }
    self . Tables            = {                                             }
    self . DbConf            = {                                             }
    ##########################################################################
    self . Handler           = None
    self . SendMessage       = None
    self . LOG               = None
    self . DbCheck           = 0
    self . Ready             = False
    ##########################################################################
    self . DB                = Connection       (                            )
    self . DbLocker          = threading . Lock (                            )
    self . QueryLocker       = threading . Lock (                            )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def setSettings ( self , SETTINGS , DBCONF , TABLEs                      ) :
    ##########################################################################
    self . Settings = SETTINGS
    self . Tables   = TABLEs
    self . DbConf   = DBCONF
    ##########################################################################
    return
  ############################################################################
  def ConnectDB                ( self , UsePure = False                    ) :
    ##########################################################################
    OK = self . DB . ConnectTo ( self . DbConf , UsePure                     )
    ##########################################################################
    if                         ( not OK                                    ) :
      return False
    ##########################################################################
    self . DB . Prepare        (                                             )
    ##########################################################################
    return   True
  ############################################################################
  def CloseDB              ( self                                          ) :
    ##########################################################################
    self . DB . Close      (                                                 )
    self . DB = Connection (                                                 )
    ##########################################################################
    return
  ############################################################################
  def isDbConnected                ( self                                  ) :
    return self . DB . isConnected (                                         )
  ############################################################################
  def AssureDB                     ( self                                  ) :
    ##########################################################################
    NOW  = StarDate                (                                         )
    NOW  . Now                     (                                         )
    CDT  = int                     ( NOW . Stardate                          )
    ZDT  = int                     ( CDT - self . DbCheck                    )
    ##########################################################################
    if                             ( ZDT < 60                              ) :
      return True
    ##########################################################################
    self . DbCheck = CDT
    ##########################################################################
    OK   = self . DB . isConnected (                                         )
    ##########################################################################
    if                             ( OK                                    ) :
      return True
    ##########################################################################
    return self . ConnectDB        (                                         )
  ############################################################################
  def Prepare                            ( self                            ) :
    ##########################################################################
    OK         = self . DB . isConnected (                                   )
    ##########################################################################
    if                                   ( not OK                          ) :
      return
    ##########################################################################
    ACTTAB     = "`cios`.`decisionactions`"
    CNDTAB     = "`cios`.`decisionconditions`"
    GRPTAB     = "`cios`.`decisionconditiongroups`"
    MAPTAB     = "`cios`.`decisionmappings`"
    ##########################################################################
    NOW        = StarDate                (                                   )
    NOW        . Now                     (                                   )
    CDT        = NOW . Stardate
    ##########################################################################
    self . DbLocker . acquire            (                                   )
    ##########################################################################
    ACTI       = ActionItem              (                                   )
    COND       = ConditionItem           (                                   )
    MAPI       = MappingItem             (                                   )
    ##########################################################################
    CITEMs     = COND . ObtainsAll       ( DB , CNDTAB , MAPTAB              )
    MITEMs     = COND . ToMappers        ( CITEMs                            )
    AITEMs     = ACTI . ObtainsAll       ( DB                              , \
                                           ACTTAB                          , \
                                           MAPTAB                          , \
                                           GRPTAB                          , \
                                           MITEMs                            )
    ##########################################################################
    self . DbLocker . release            (                                   )
    ##########################################################################
    CMaps                 = COND . ToMappers ( CITEMs                        )
    AMaps                 = ACTI . ToMappers ( AITEMs                        )
    ##########################################################################
    for C in CITEMs                                                          :
      ########################################################################
      if                                 ( C . Uuid in CMaps               ) :
        ######################################################################
        C . FromHistory                  ( CMaps [ C . Uuid                ] )
    ##########################################################################
    for A in AITEMs                                                          :
      ########################################################################
      if                                 ( A . Uuid in AMaps               ) :
        ######################################################################
        A . FromHistory                  ( AMaps [ A . Uuid                ] )
    ##########################################################################
    self  . QueryLocker    . acquire     (                                   )
    ##########################################################################
    self  . ConditionItems = CITEMs
    self  . ActionItems    = AITEMs
    ##########################################################################
    self  . ConditionUuids = COND . AllToUuids ( CITEMs                      )
    self  . ActionUuids    = ACTI . AllToUuids ( AITEMs                      )
    ##########################################################################
    self  . ConditionMaps  = COND . ToMappers  ( CITEMs                      )
    self  . ActionMaps     = ACTI . ToMappers  ( AITEMs                      )
    ##########################################################################
    self  . QueryLocker    . release     (                                   )
    ##########################################################################
    self  . Ready          = True
    ##########################################################################
    CNT   = len                          ( self . ConditionUuids             )
    ANT   = len                          ( self . ActionUuids                )
    ##########################################################################
    MSG   = f"Decision Center - {CNT} conditions, {ANT} actions loaded"
    self  . LOG                          ( MSG                               )
    ##########################################################################
    return
  ############################################################################
  def Sync                           ( self , CONDs                        ) :
    ##########################################################################
    if                               ( len ( CONDs ) <= 0                  ) :
      return
    ##########################################################################
    OK     = self . DB . isConnected (                                       )
    ##########################################################################
    if                               ( not OK                              ) :
      return
    ##########################################################################
    self   . DbLocker . acquire      (                                       )
    ##########################################################################
    CNDTAB = "`cios`.`decisionconditions`"
    ##########################################################################
    for CUID in CONDs                                                        :
      ########################################################################
      if                             ( CUID in self . ConditionUuids       ) :
        ######################################################################
        self . ConditionMaps [ CUID ] . SyncSQL ( DB , CNDTAB                )
    ##########################################################################
    self  . DbLocker . release      (                                        )
    ##########################################################################
    return
  ############################################################################
  def Flush                       ( self                                   ) :
    ##########################################################################
    CONDs =                       [                                          ]
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    for C in self . ConditionItems                                           :
      ########################################################################
      if                          ( C . shouldSync (                     ) ) :
        ######################################################################
        CONDs . append            ( C . Uuid                                 )
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    self  . Sync                  ( CONDs                                    )
    ##########################################################################
    return
  ############################################################################
  def FlushCaching                ( self                                   ) :
    ##########################################################################
    CONDs =                       [                                          ]
    VALs  =                       {                                          }
    ##########################################################################
    NOW   = StarDate              (                                          )
    NOW   . Now                   (                                          )
    CDT   = NOW . Stardate
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    for CUID in self . ConditionListings                                     :
      ########################################################################
      UD  = self . CONDITIONs     [ CUID ] [ "update"                        ]
      CT  = self . CONDITIONs     [ CUID ] [ "type"                          ]
      SY  = self . CONDITIONs     [ CUID ] [ "sync"                          ]
      ST  = self . CONDITIONs     [ CUID ] [ "states"                        ]
      ########################################################################
      if                          ( SY and ( CT in [ 2 , 3 ] )             ) :
        ######################################################################
        D = int                   ( CDT - UD                                 )
        ######################################################################
        if                        ( D >= 5                                 ) :
          ####################################################################
          CONDs . append          ( CUID                                     )
          VALs [ CUID ] = ST
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    self  . Sync                  ( CONDs                                    )
    ##########################################################################
    return
  ############################################################################
  def DoTasks                     ( self                                   ) :
    ##########################################################################
    CONDs =                       [                                          ]
    ACTs  =                       [                                          ]
    ACTz  =                       {                                          }
    ##########################################################################
    NOW   = StarDate              (                                          )
    NOW   . Now                   (                                          )
    CDT   = NOW . Stardate
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    for CUID in self . ConditionListings                                     :
      ########################################################################
      PD  = self . CONDITIONs     [ CUID ] [ "pending"                       ]
      ########################################################################
      if                          ( PD                                     ) :
        ######################################################################
        CONDs . append            ( CUID                                     )
        ACTX  = self . CONDITIONs [ CUID ] [ "actions"                       ]
        ######################################################################
        for ACT in ACTX                                                      :
          ####################################################################
          if                      ( ACT not in ACTs                        ) :
            ##################################################################
            ACTs . append         ( ACT                                      )
    ##########################################################################
    for AUID in ACTs                                                         :
      ########################################################################
      CJ =                        {                                          }
      ########################################################################
      for CUID in self . ACTIONs [ AUID ] [ "conditions" ]                   :
        ######################################################################
        CJ [ CUID ] = self . CONDITIONs [ CUID                               ]
      ########################################################################
      ACTz [ AUID ] = CJ
    ##########################################################################
    for CUID in CONDs                                                        :
      ########################################################################
      PD  = self . CONDITIONs     [ CUID ] [ "pending"                       ]
      ########################################################################
      if                          ( PD                                     ) :
        ######################################################################
        self . CONDITIONs [ CUID ] [ "pending" ] = False
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    if                            ( self . Handler in [ False , None     ] ) :
      return
    ##########################################################################
    if                            ( len ( ACTs ) <= 0                      ) :
      return
    ##########################################################################
    for ACT in ACTs                                                          :
      ########################################################################
      self . Handler              ( ACT , ACTz [ AUID                      ] )
    ##########################################################################
    return
  ############################################################################
  def Reload       ( self                                                  ) :
    ##########################################################################
    self . Flush   (                                                         )
    self . Prepare (                                                         )
    ##########################################################################
    return
  ############################################################################
  def Process           ( self                                             ) :
    ##########################################################################
    self . DoTasks      (                                                    )
    self . FlushCaching (                                                    )
    ##########################################################################
    return
  ############################################################################
  def ConditionJson               ( self , CUID                            ) :
    ##########################################################################
    if                            ( CUID not in self . ConditionUuids      ) :
      return                      { "Condition" : CUID                     , \
                                    "Exists"    : False                    , \
                                    "State"     : -1                         }
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    STATE = self . ConditionMaps  [ CUID ] . States
    VALUE = self . ConditionMaps  [ CUID ] . Value
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    return                        { "Condition" : CUID                     , \
                                    "Exists"    : True                     , \
                                    "State"     : STATE                    , \
                                    "Value"     : VALUE                      }
  ############################################################################
  def UpdateCondition              ( self , CUID , STATE , VALUE           ) :
    ##########################################################################
    if                             ( not self . Ready                      ) :
      return
    ##########################################################################
    if                             ( CUID not in self . ConditionUuids     ) :
      return
    ##########################################################################
    NOW    = StarDate              (                                         )
    NOW    . Now                   (                                         )
    CDT    = NOW . Stardate
    ##########################################################################
    self   . QueryLocker . acquire (                                         )
    ##########################################################################
    V      = STATE
    FORM   = self   . ConditionMaps [ CUID ] . Form
    ##########################################################################
    if                             ( 1 == FORM                             ) :
      ########################################################################
      V    = VALUE
    ##########################################################################
    self   . ConditionMaps [ CUID ] . setSync     ( True                     )
    self   . ConditionMaps [ CUID ] . setPending  ( True                     )
    self   . ConditionMaps [ CUID ] . setLastest  ( CDT                      )
    self   . ConditionMaps [ CUID ] . valueChange ( V                        )
    ##########################################################################
    self   . QueryLocker . release (                                         )
    ##########################################################################
    return
  ############################################################################
  def RpcQueryCondition ( self , J , ADDR                                  ) :
    ##########################################################################
    ANSWER          =   { "Answer" : "Yes" , "IP"       : ADDR               }
    RESP            =   { "Answer" : 202   , "Response" : ANSWER             }
    ##########################################################################
    if                  ( "Condition" in J                                 ) :
      ########################################################################
      CUID          = J [ "Condition"                                        ]
      JSOX          = self . ConditionJson ( CUID                            )
      JSOX [ "Answer" ] = "Yes"
      JSOX [ "IP"     ] = ADDR
      ########################################################################
      return            { "Answer" : 202   , "Response" : JSOX               }
    ##########################################################################
    return RESP
  ############################################################################
  def RpcQuery            ( self , J , ADDR                                ) :
    ##########################################################################
    ANSWER            =   { "Answer" : "Yes" , "IP"       : ADDR             }
    RESP              =   { "Answer" : 202   , "Response" : ANSWER           }
    ##########################################################################
    if                    ( "Condition" in J                               ) :
      ########################################################################
      CUID            = J [ "Condition"                                      ]
      ########################################################################
    else                                                                     :
      ########################################################################
      return RESP
    ##########################################################################
    if                    ( ( "State" not in J ) and ( "Value" not in J )  ) :
      ########################################################################
      return RESP
    ##########################################################################
    STAT              = 0
    VAL               = 0.0
    TRIGGER           = False
    ##########################################################################
    if                    ( "State"     in J                               ) :
      ########################################################################
      STAT            = J [ "State"                                          ]
    ##########################################################################
    if                    ( "Value"     in J                               ) :
      ########################################################################
      VAL             = J [ "Value"                                          ]
    ##########################################################################
    if                    ( "Trigger"   in J                               ) :
      ########################################################################
      TRIGGER         = J [ "Trigger"                                        ]
    ##########################################################################
    self              . UpdateCondition      ( CUID , STAT , VAL             )
    JSOX              = self . ConditionJson ( CUID                          )
    JSOX [ "Answer" ] = "Yes"
    JSOX [ "IP"     ] = ADDR
    ##########################################################################
    if                    ( TRIGGER                                        ) :
      ########################################################################
      pass
    ##########################################################################
    return                { "Answer" : 202   , "Response" : JSOX             }
  ############################################################################
  def RpcConditions ( self , J , ADDR                                      ) :
    ##########################################################################
    ANSWER    =     { "Answer" : "Yes" , "IP"       : ADDR                   }
    RESP      =     { "Answer" : 202   , "Response" : ANSWER                 }
    ##########################################################################
    if                             ( not self . Ready                      ) :
      return RESP
    ##########################################################################
    if              ( "Conditions" not in J                                ) :
      ########################################################################
      return RESP
    ##########################################################################
    TRIGGER   = False
    ##########################################################################
    if                    ( "Trigger"   in J                               ) :
      ########################################################################
      TRIGGER = J [ "Trigger"                                        ]
    ##########################################################################
    CONDs     = J   [ "Conditions"                                           ]
    ##########################################################################
    if              ( len ( CONDs ) <= 0                                   ) :
      return RESP
    ##########################################################################
    self      . QueryLocker . acquire (                                      )
    ##########################################################################
    CUIDs     =                       [                                      ]
    NOW       = StarDate              (                                      )
    NOW       . Now                   (                                      )
    CDT       = NOW . Stardate
    ##########################################################################
    JSOX      =                       { "Answer"     : "Yes"               , \
                                        "Conditions" : [                 ] , \
                                        "IP"         : ADDR                  }
    ##########################################################################
    for J in CONDs                                                           :
      ########################################################################
      if                              ( "Condition" not in J               ) :
        continue
      ########################################################################
      if                              ( ( "State" not in J             ) and \
                                        ( "Value" not in J             )   ) :
      ########################################################################
      CUID    = J                     [ "Condition"                          ]
      ########################################################################
      if                              ( CUID not in self . ConditionUuids  ) :
        continue
      ########################################################################
      if                              ( CUID in CUIDs                      ) :
        continue
      ########################################################################
      CUIDs   . append                ( CUID                                 )
      ########################################################################
      STAT    = 0
      VAL     = 0.0
      ########################################################################
      if                              ( "State" in J                       ) :
        ######################################################################
        STAT  = J                     [ "State"                              ]
      ########################################################################
      if                              ( "Value" in J                       ) :
        ######################################################################
        VAL   = J                     [ "Value"                              ]
      ########################################################################
      V       = STATE
      FORM    = self   . ConditionMaps [ CUID ] . Form
      ########################################################################
      if                              ( 1 == FORM                          ) :
        ######################################################################
        V     = VALUE
      ########################################################################
      self    . ConditionMaps [ CUID ] . setSync     ( True                  )
      self    . ConditionMaps [ CUID ] . setPending  ( True                  )
      self    . ConditionMaps [ CUID ] . setLastest  ( CDT                   )
      self    . ConditionMaps [ CUID ] . valueChange ( V                     )
      ########################################################################
      JSOZ    = self . ConditionJson  ( CUID                                 )
      JSOX [ "Conditions" ] . append  ( JSOZ                                 )
    ##########################################################################
    self      . QueryLocker . release (                                      )
    ##########################################################################
    if                    ( TRIGGER                                        ) :
      ########################################################################
      pass
    ##########################################################################
    return          { "Answer" : 202   , "Response" : JSOX                   }
  ############################################################################
  def RpcReload        ( self , J , ADDR                                   ) :
    ##########################################################################
    ANSWER    =        { "Answer" : "Yes" , "IP"       : ADDR                }
    RESP      =        { "Answer" : 202   , "Response" : ANSWER              }
    ##########################################################################
    threading . Thread ( target = self . Reload                            ) \
              . start  (                                                     )
    ##########################################################################
    return RESP
  ############################################################################
  def RpcHandler ( self , J , ADDR                                         ) :
    ##########################################################################
    ANSWER =     { "Answer" : "Yes" , "IP"       : ADDR                      }
    RESP   =     { "Answer" : 202   , "Response" : ANSWER                    }
    ##########################################################################
    if           ( "Action" not in J                                       ) :
      return RESP
    ##########################################################################
    ACTION = J   [ "Action"                                                  ]
    ##########################################################################
    if           ( "Query" == ACTION                                       ) :
      ########################################################################
      return self . RpcQueryCondition ( J , ADDR                             )
    ##########################################################################
    if           ( "Update" == ACTION                                      ) :
      ########################################################################
      return self . RpcQuery          ( J , ADDR                             )
    ##########################################################################
    if           ( "Conditions" == ACTION                                  ) :
      ########################################################################
      return self . RpcConditions     ( J , ADDR                             )
    ##########################################################################
    if           ( "Reload" == ACTION                                      ) :
      ########################################################################
      return self . RpcReload         ( J , ADDR                             )
    ##########################################################################
    return RESP
##############################################################################
