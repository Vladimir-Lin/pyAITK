# -*- coding: utf-8 -*-
##############################################################################
## 決策行動數據中心
##############################################################################
import os
import sys
import time
import datetime
import threading
import json
##############################################################################
import mysql . connector
from   mysql . connector                 import Error
##############################################################################
import AITK
##############################################################################
from   AITK  . Calendars . StarDate      import StarDate
##############################################################################
from   AITK  . Database  . Query         import Query
from   AITK  . Database  . Connection    import Connection
from   AITK  . Database  . Pair          import Pair
from   AITK  . Database  . Columns       import Columns
##############################################################################
from                     . ActionItem    import ActionItem    as ActionItem
from                     . ConditionItem import ConditionItem as ConditionItem
from                     . MappingItem   import MappingItem   as MappingItem
##############################################################################
class DataCenter         (                                                 ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    self . ConditionListings = [                                             ]
    self . CONDITIONs        = {                                             }
    self . ActionListings    = [                                             ]
    self . ACTIONs           = {                                             }
    ##########################################################################
    self . Settings          = {                                             }
    self . Tables            = {                                             }
    self . DbConf            = {                                             }
    ##########################################################################
    self . Handler           = None
    self . SendMessage       = None
    self . LOG               = None
    self . DbCheck           = 0
    self . Ready             = False
    ##########################################################################
    self . DB                = Connection       (                            )
    self . DbLocker          = threading . Lock (                            )
    self . QueryLocker       = threading . Lock (                            )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    return
  ############################################################################
  def setSettings ( self , SETTINGS , DBCONF , TABLEs                      ) :
    ##########################################################################
    self . Settings = SETTINGS
    self . Tables   = TABLEs
    self . DbConf   = DBCONF
    ##########################################################################
    return
  ############################################################################
  def ConnectDB                ( self , UsePure = False                    ) :
    ##########################################################################
    OK = self . DB . ConnectTo ( self . DbConf , UsePure                     )
    ##########################################################################
    if                         ( not OK                                    ) :
      return False
    ##########################################################################
    self . DB . Prepare        (                                             )
    ##########################################################################
    return   True
  ############################################################################
  def CloseDB              ( self                                          ) :
    ##########################################################################
    self . DB . Close      (                                                 )
    self . DB = Connection (                                                 )
    ##########################################################################
    return
  ############################################################################
  def isDbConnected                ( self                                  ) :
    return self . DB . isConnected (                                         )
  ############################################################################
  def AssureDB                     ( self                                  ) :
    ##########################################################################
    NOW  = StarDate                (                                         )
    NOW  . Now                     (                                         )
    CDT  = int                     ( NOW . Stardate                          )
    ZDT  = int                     ( CDT - self . DbCheck                    )
    ##########################################################################
    if                             ( ZDT < 60                              ) :
      return True
    ##########################################################################
    self . DbCheck = CDT
    ##########################################################################
    OK   = self . DB . isConnected (                                         )
    ##########################################################################
    if                             ( OK                                    ) :
      return True
    ##########################################################################
    return self . ConnectDB        (                                         )
  ############################################################################
  def Prepare                            ( self                            ) :
    ##########################################################################
    OK         = self . DB . isConnected (                                   )
    ##########################################################################
    if                                   ( not OK                          ) :
      return
    ##########################################################################
    NOW        = StarDate                (                                   )
    NOW        . Now                     (                                   )
    CDT        = NOW . Stardate
    ##########################################################################
    self . DbLocker . acquire            (                                   )
    ##########################################################################
    CONDs      =                         [                                   ]
    MAPPINGs   =                         [                                   ]
    GROUPs     =                         [                                   ]
    ##########################################################################
    QQ         = """select
                    `uuid`,`used`,`type`,`states`,`name`,`json`
                    from `cios`.`decisionconditions`
                    where ( `used` > 0 )
                    order by `id` asc ;"""
    QQ         = QQ  . replace           ( "\r" , " "                        )
    QQ         = QQ  . replace           ( "\n" , " "                        )
    QQ         = " " . join              ( QQ . split (                    ) )
    ##########################################################################
    ALLs       = self . DB . Run         ( QQ                                )
    ##########################################################################
    if                                   ( ALLs not in [ False , None    ] ) :
      ########################################################################
      for ITEM in ALLs                                                       :
        ######################################################################
        J = { "uuid"    : int            ( ITEM [ 0 ]                    ) , \
              "actions" :                [                               ] , \
              "update"  : CDT                                              , \
              "sync"    : False                                            , \
              "pending" : False                                            , \
              "used"    : int            ( ITEM [ 1 ]                    ) , \
              "type"    : int            ( ITEM [ 2 ]                    ) , \
              "states"  : int            ( ITEM [ 3 ]                    ) , \
              "name"    :                  ITEM [ 4 ] . decode ( "utf-8" ) , \
              "json"    :                  ITEM [ 5 ] . decode ( "utf-8" )   }
        ######################################################################
        CONDs . append                   ( J                                 )
    ##########################################################################
    QQ         = """select
                    `action`,`group`
                    from `cios`.`decisionconditiongroups`
                    order by `id` asc ;"""
    QQ         = QQ  . replace           ( "\r" , " "                        )
    QQ         = QQ  . replace           ( "\n" , " "                        )
    QQ         = " " . join              ( QQ . split (                    ) )
    ##########################################################################
    ALLs       = self . DB . Run         ( QQ                                )
    ##########################################################################
    if                                   ( ALLs not in [ False , None    ] ) :
      ########################################################################
      for ITEM in ALLs                                                       :
        ######################################################################
        J = { "action"    : int          ( ITEM [ 0 ]                    ) , \
              "group"     : int          ( ITEM [ 1 ]                    )   }
        ######################################################################
        GROUPs . append                  ( J                                 )
    ##########################################################################
    QQ         = """select
                    `action`,`condition`,`group`,`name`,`adopt`,`compare`,`states`
                    from `cios`.`decisionmappings`
                    order by `id` asc ;"""
    QQ         = QQ  . replace           ( "\r" , " "                        )
    QQ         = QQ  . replace           ( "\n" , " "                        )
    QQ         = " " . join              ( QQ . split (                    ) )
    ##########################################################################
    ALLs       = self . DB . Run         ( QQ                                )
    ##########################################################################
    if                                   ( ALLs not in [ False , None    ] ) :
      ########################################################################
      for ITEM in ALLs                                                       :
        ######################################################################
        J = { "action"    : int          ( ITEM [ 0 ]                    ) , \
              "condition" : int          ( ITEM [ 1 ]                    ) , \
              "group"     : int          ( ITEM [ 2 ]                    ) , \
              "name"      :                ITEM [ 3 ] . decode ( "utf-8" ) , \
              "adopt"     : int          ( ITEM [ 4 ]                    ) , \
              "compare"   : int          ( ITEM [ 5 ]                    ) , \
              "states"    : int          ( ITEM [ 6 ]                    )   }
        ######################################################################
        MAPPINGs . append                ( J                                 )
    ##########################################################################
    self . DbLocker . release            (                                   )
    ##########################################################################
    self . BuildUp                       ( CONDs , MAPPINGs , GROUPs         )
    ##########################################################################
    return
  ############################################################################
  def BuildUp                    ( self , CONDs , MAPPINGs , GROUPs        ) :
    ##########################################################################
    CNDz     =                   [                                           ]
    CNDs     =                   {                                           }
    ACTz     =                   [                                           ]
    ACTs     =                   {                                           }
    ##########################################################################
    for C in CONDs                                                           :
      ########################################################################
      CUID   = C                 [ "uuid"                                    ]
      ########################################################################
      if                         ( CUID not in CNDz                        ) :
        ######################################################################
        CNDz . append            ( CUID                                      )
        CNDs [ CUID ] = C
    ##########################################################################
    for G in GROUPs                                                          :
      ########################################################################
      AUID   = G                 [ "action"                                  ]
      GRP    = G                 [ "group"                                   ]
      ########################################################################
      if                         ( AUID not in ACTz                        ) :
        ######################################################################
        ACTz . append            ( AUID                                      )
        ######################################################################
        ACTs [ AUID ] =          { "groups"     : [                      ] , \
                                   "conditions" : [                      ] , \
                                   "operations" : [                      ]   }
      ########################################################################
      if                         ( GRP not in ACTs [ AUID                ] ) :
        ######################################################################
        ACTs [ AUID ] [ "groups" ] . append ( GRP                            )
    ##########################################################################
    for M in MAPPINGs                                                        :
      ########################################################################
      AUID   = M                 [ "action"                                  ]
      CUID   = M                 [ "condition"                               ]
      GRP    = M                 [ "group"                                   ]
      ########################################################################
      if                         ( CUID in CNDs                            ) :
        ######################################################################
        if                       ( AUID not in CNDs [ CUID ] [ "actions" ] ) :
          ####################################################################
          CNDs [ CUID ] [ "actions" ] . append ( AUID                        )
      ########################################################################
      if                         ( AUID in ACTs                            ) :
        ######################################################################
        if ( CUID not in ACTs [ AUID ] [ "conditions" ]                    ) :
          ####################################################################
          ACTs [ AUID ] [ "conditions" ] . append ( CUID                     )
        ######################################################################
        if ( GRP  not in ACTs [ AUID ] [ "groups"     ]                    ) :
          ####################################################################
          ACTs [ AUID ] [ "groups"     ] . append ( GRP                      )
      ########################################################################
      ACTs     [ AUID ] [ "operations" ] . append ( M                        )
    ##########################################################################
    self . QueryLocker . acquire (                                           )
    ##########################################################################
    self . ConditionListings = CNDz
    self . CONDITIONs        = CNDs
    self . ActionListings    = ACTz
    self . ACTIONs           = ACTs
    ##########################################################################
    self . QueryLocker . release (                                           )
    ##########################################################################
    self . Ready             = True
    ##########################################################################
    CNT  = len                   ( self . ConditionListings                  )
    ANT  = len                   ( self . ActionListings                     )
    ##########################################################################
    MSG  = f"Decision Center - {CNT} conditions, {ANT} actions loaded"
    self . LOG                   ( MSG                                       )
    ##########################################################################
    return
  ############################################################################
  def Sync                          ( self , CONDs , VALs                  ) :
    ##########################################################################
    if                              ( len ( CONDs ) <= 0                   ) :
      return
    ##########################################################################
    OK    = self . DB . isConnected (                                        )
    ##########################################################################
    if                              ( not OK                               ) :
      return
    ##########################################################################
    self  . DbLocker . acquire      (                                        )
    ##########################################################################
    for CUID in CONDs                                                        :
      ########################################################################
      VAL = VALs                    [ CUID                                   ]
      ########################################################################
      QQ  = f"""update `cios`.`decisionconditions`
                set `states` = {VAL}
                where ( `uuid` = {CUID} ) ;"""
      QQ  = QQ  . replace           ( "\r" , " "                             )
      QQ  = QQ  . replace           ( "\n" , " "                             )
      QQ  = " " . join              ( QQ . split (                         ) )
      ########################################################################
      self . DB . Query             ( QQ                                     )
    ##########################################################################
    self  . DbLocker . release      (                                        )
    ##########################################################################
    return
  ############################################################################
  def Flush                       ( self                                   ) :
    ##########################################################################
    CONDs =                       [                                          ]
    VALs  =                       {                                          }
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    for CUID in self . ConditionListings                                     :
      ########################################################################
      CT  = self . CONDITIONs     [ CUID ] [ "type"                          ]
      SY  = self . CONDITIONs     [ CUID ] [ "sync"                          ]
      ST  = self . CONDITIONs     [ CUID ] [ "states"                        ]
      ########################################################################
      if                          ( SY and ( CT in [ 2 , 3 ] )             ) :
        ######################################################################
        CONDs . append            ( CUID                                     )
        VALs [ CUID ] = ST
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    self  . Sync                  ( CONDs , VALs                             )
    ##########################################################################
    return
  ############################################################################
  def FlushCaching                ( self                                   ) :
    ##########################################################################
    CONDs =                       [                                          ]
    VALs  =                       {                                          }
    ##########################################################################
    NOW   = StarDate              (                                          )
    NOW   . Now                   (                                          )
    CDT   = NOW . Stardate
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    for CUID in self . ConditionListings                                     :
      ########################################################################
      UD  = self . CONDITIONs     [ CUID ] [ "update"                        ]
      CT  = self . CONDITIONs     [ CUID ] [ "type"                          ]
      SY  = self . CONDITIONs     [ CUID ] [ "sync"                          ]
      ST  = self . CONDITIONs     [ CUID ] [ "states"                        ]
      ########################################################################
      if                          ( SY and ( CT in [ 2 , 3 ] )             ) :
        ######################################################################
        D = int                   ( CDT - UD                                 )
        ######################################################################
        if                        ( D >= 5                                 ) :
          ####################################################################
          CONDs . append          ( CUID                                     )
          VALs [ CUID ] = ST
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    self  . Sync                  ( CONDs , VALs                             )
    ##########################################################################
    return
  ############################################################################
  def DoTasks                     ( self                                   ) :
    ##########################################################################
    CONDs =                       [                                          ]
    ACTs  =                       [                                          ]
    ACTz  =                       {                                          }
    ##########################################################################
    NOW   = StarDate              (                                          )
    NOW   . Now                   (                                          )
    CDT   = NOW . Stardate
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    ##########################################################################
    for CUID in self . ConditionListings                                     :
      ########################################################################
      PD  = self . CONDITIONs     [ CUID ] [ "pending"                       ]
      ########################################################################
      if                          ( PD                                     ) :
        ######################################################################
        CONDs . append            ( CUID                                     )
        ACTX  = self . CONDITIONs [ CUID ] [ "actions"                       ]
        ######################################################################
        for ACT in ACTX                                                      :
          ####################################################################
          if                      ( ACT not in ACTs                        ) :
            ##################################################################
            ACTs . append         ( ACT                                      )
    ##########################################################################
    for AUID in ACTs                                                         :
      ########################################################################
      CJ =                        {                                          }
      ########################################################################
      for CUID in self . ACTIONs [ AUID ] [ "conditions" ]                   :
        ######################################################################
        CJ [ CUID ] = self . CONDITIONs [ CUID                               ]
      ########################################################################
      ACTz [ AUID ] = CJ
    ##########################################################################
    for CUID in CONDs                                                        :
      ########################################################################
      PD  = self . CONDITIONs     [ CUID ] [ "pending"                       ]
      ########################################################################
      if                          ( PD                                     ) :
        ######################################################################
        self . CONDITIONs [ CUID ] [ "pending" ] = False
    ##########################################################################
    self  . QueryLocker . release (                                          )
    ##########################################################################
    if                            ( self . Handler in [ False , None     ] ) :
      return
    ##########################################################################
    if                            ( len ( ACTs ) <= 0                      ) :
      return
    ##########################################################################
    for ACT in ACTs                                                          :
      ########################################################################
      self . Handler              ( ACT , ACTz [ AUID                      ] )
    ##########################################################################
    return
  ############################################################################
  def Reload       ( self                                                  ) :
    ##########################################################################
    self . Flush   (                                                         )
    self . Prepare (                                                         )
    ##########################################################################
    return
  ############################################################################
  def Process           ( self                                             ) :
    ##########################################################################
    self . DoTasks      (                                                    )
    self . FlushCaching (                                                    )
    ##########################################################################
    return
  ############################################################################
  def ConditionJson               ( self , CUID                            ) :
    ##########################################################################
    if                            ( CUID not in self . ConditionListings   ) :
      return                      { "Condition" : CUID                     , \
                                    "Exists"    : False                    , \
                                    "State"     : -1                         }
    ##########################################################################
    self  . QueryLocker . acquire (                                          )
    State = self . CONDITIONs     [ CUID ] [ "states"                        ]
    self  . QueryLocker . release (                                          )
    ##########################################################################
    return                        { "Condition" : CUID                     , \
                                    "Exists"    : True                     , \
                                    "State"     : State                      }
  ############################################################################
  def UpdateCondition              ( self , CUID , State                   ) :
    ##########################################################################
    if                             ( not self . Ready                      ) :
      return
    ##########################################################################
    if                             ( CUID not in self . ConditionListings  ) :
      return
    ##########################################################################
    NOW    = StarDate              (                                         )
    NOW    . Now                   (                                         )
    CDT    = NOW . Stardate
    ##########################################################################
    self   . QueryLocker . acquire (                                         )
    ##########################################################################
    T      = self . CONDITIONs     [ CUID ] [ "type"                         ]
    ##########################################################################
    if                             ( T in [ 2 , 3                        ] ) :
      ########################################################################
      self . CONDITIONs [ CUID ] [ "sync"    ] = True
    ##########################################################################
    self   . CONDITIONs [ CUID ] [ "pending" ] = True
    self   . CONDITIONs [ CUID ] [ "update"  ] = CDT
    self   . CONDITIONs [ CUID ] [ "states"  ] = State
    ##########################################################################
    self   . QueryLocker . release (                                         )
    ##########################################################################
    return
  ############################################################################
  def RpcHandler ( self , J , ADDR                                         ) :
    ##########################################################################
    ANSWER =     { "Answer" : "Yes" , "IP"       : ADDR                      }
    RESP   =     { "Answer" : 202   , "Response" : ANSWER                    }
    ##########################################################################
    if           ( "Action" not in J                                       ) :
      return RESP
    ##########################################################################
    ACTION = J   [ "Action"                                                  ]
    ##########################################################################
    if           ( "Query" == ACTION                                       ) :
      ########################################################################
      if         ( "Condition" in J                                        ) :
        ######################################################################
        CUID = J [ "Condition"                                               ]
        JSOX = self . ConditionJson ( CUID                                   )
        JSOX [ "IP" ] = ADDR
        ######################################################################
        return   { "Answer" : 202   , "Response" : JSOX                      }
    ##########################################################################
    if           ( "Update" == ACTION                                      ) :
      ########################################################################
      if         ( "Condition" in J                                        ) :
        ######################################################################
        CUID = J [ "Condition"                                               ]
        ######################################################################
      else                                                                   :
        ######################################################################
        return RESP
      ########################################################################
      if         ( "State"     in J                                        ) :
        ######################################################################
        STAT = J [ "State"                                                   ]
        ######################################################################
      else                                                                   :
        ######################################################################
        return RESP
      ########################################################################
      self . UpdateCondition      ( CUID , STAT                              )
      JSOX = self . ConditionJson ( CUID                                     )
      JSOX [ "IP" ] = ADDR
      ########################################################################
      return     { "Answer" : 202   , "Response" : JSOX                      }
    ##########################################################################
    if           ( "Reload" == ACTION                                      ) :
      ########################################################################
      threading . Thread ( target = self . Reload                          ) \
                . start  (                                                   )
      ########################################################################
      return RESP
    ##########################################################################
    return RESP
##############################################################################
