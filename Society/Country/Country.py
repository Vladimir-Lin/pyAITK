# -*- coding: utf-8 -*-
##############################################################################
## 國家
##############################################################################
import os
import sys
import getopt
import time
import datetime
import requests
import threading
##############################################################################
import mysql . connector
from   mysql . connector                   import Error
##############################################################################
import AITK
from   AITK  . Database   . Query          import Query
from   AITK  . Database   . Connection     import Connection
from   AITK  . Database   . Pair           import Pair
from   AITK  . Database   . Columns        import Columns
##############################################################################
from   AITK  . Documents  . ParameterQuery import ParameterQuery as ParameterQuery
from   AITK  . Essentials . Relation       import Relation       as Relation
##############################################################################
CTRYTAB          = "`cios`.`countries`"
CTRYREL          = "`affiliations`.`relations_people_0008`"
CTRYPLACE        = "`affiliations`.`relations_places`"
CTRYNAM          = "`appellations`.`names_commons_0018`"
CTRYNOTE         = "`cios`.`notes_descriptions`"
CTRYPARAM        = "`cios`.`parameters`"
CountryShortType = 43
CountryLongType  = 1100000000000000043
CountryTypeName  = "Nation"
##############################################################################
class Country            ( Columns                                         ) :
  ############################################################################
  def __init__           ( self                                            ) :
    ##########################################################################
    super ( ) . __init__ (                                                   )
    self      . Clear    (                                                   )
    ##########################################################################
    return
  ############################################################################
  def __del__ ( self                                                       ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def Clear             ( self                                             ) :
    ##########################################################################
    self . Columns    = [                                                    ]
    self . Id         = -1
    self . Uuid       =  0
    self . CType      =  0
    self . Used       =  0
    self . Code       =  0
    self . Two        =  ""
    self . Three      =  ""
    self . Four       =  ""
    self . Name       =  ""
    self . ltime      =  0
    ##########################################################################
    self . PeopleUuid =  0
    ##########################################################################
    return
  ############################################################################
  def assign ( self , item                                                 ) :
    ##########################################################################
    self . Columns = item . Columns
    self . Id      = item . Id
    self . Uuid    = item . Uuid
    self . CType   = item . CType
    self . Used    = item . Used
    self . Code    = item . Code
    self . Two     = item . Two
    self . Three   = item . Three
    self . Four    = item . Four
    self . Name    = item . Name
    self . ltime   = item . ltime
    ##########################################################################
    return
  ############################################################################
  def set            ( self , item , value                                 ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"    == a                                        ) :
      self . Id    = value
    ##########################################################################
    elif             ( "uuid"  == a                                        ) :
      self . Uuid  = value
    ##########################################################################
    elif             ( "type"  == a                                        ) :
      self . CType = int ( value )
    ##########################################################################
    elif             ( "used"  == a                                        ) :
      self . Used  = int ( value )
    ##########################################################################
    elif             ( "code"  == a                                        ) :
      self . Code  = int ( value )
    ##########################################################################
    elif             ( "two"   == a                                        ) :
      self . Two   = self . assureString ( value                             )
    ##########################################################################
    elif             ( "three" == a                                        ) :
      self . Three = self . assureString ( value                             )
    ##########################################################################
    elif             ( "four"  == a                                        ) :
      self . Four  = self . assureString ( value                             )
    ##########################################################################
    elif             ( "name"  == a                                        ) :
      self . Name  = self . assureString ( value                             )
    ##########################################################################
    elif             ( "ltime" == a                                        ) :
      self . ltime = value
    ##########################################################################
    return
  ############################################################################
  def get            ( self , item                                         ) :
    ##########################################################################
    a = item . lower (                                                       )
    ##########################################################################
    if               ( "id"    == a                                        ) :
      return self . Id
    ##########################################################################
    if               ( "uuid"  == a                                        ) :
      return self . Uuid
    ##########################################################################
    if               ( "type"  == a                                        ) :
      return self . CType
    ##########################################################################
    if               ( "used"  == a                                        ) :
      return self . Used
    ##########################################################################
    if               ( "code"  == a                                        ) :
      return self . Code
    ##########################################################################
    if               ( "two"   == a                                        ) :
      return self . Two
    ##########################################################################
    if               ( "three" == a                                        ) :
      return self . Three
    ##########################################################################
    if               ( "four"  == a                                        ) :
      return self . Four
    ##########################################################################
    if               ( "name"  == a                                        ) :
      return self . Name
    ##########################################################################
    if               ( "ltime" == a                                        ) :
      return self . ltime
    ##########################################################################
    return ""
  ############################################################################
  def tableItems        ( self                                             ) :
    return [ "id"                                                            ,
             "uuid"                                                          ,
             "type"                                                          ,
             "used"                                                          ,
             "code"                                                          ,
             "two"                                                           ,
             "three"                                                         ,
             "four"                                                          ,
             "name"                                                          ,
             "ltime"                                                         ]
  ############################################################################
  def pair              ( self , item                                      ) :
    v = self . get      (        item                                        )
    return f"`{item}` = {v}"
  ############################################################################
  def valueItems        ( self                                             ) :
    return [ "type"                                                          ,
             "used"                                                          ,
             "code"                                                          ,
             "two"                                                           ,
             "three"                                                         ,
             "four"                                                          ,
             "name"                                                          ]
  ############################################################################
  def toJson ( self                                                        ) :
    return   { "Id"    : self . Id                                         , \
               "Uuid"  : self . Uuid                                       , \
               "Type"  : self . CType                                      , \
               "Used"  : self . Used                                       , \
               "Code"  : self . Code                                       , \
               "Two"   : self . Two                                        , \
               "Three" : self . Three                                      , \
               "Four"  : self . Four                                       , \
               "Name"  : self . Name                                         }
  ############################################################################
  def assureString     ( self , pb                                         ) :
    ##########################################################################
    BB   = pb
    ##########################################################################
    try                                                                      :
      BB = BB . decode ( "utf-8"                                             )
    except                                                                   :
      pass
    ##########################################################################
    return BB
  ############################################################################
  def setPeople ( self , uuid                                              ) :
    ##########################################################################
    self . PeopleUuid = uuid
    ##########################################################################
    return
  ############################################################################
  ## 取得國家種類列表
  ############################################################################
  def GetNationTypes        ( self , DB , TABLE                            ) :
    ##########################################################################
    QQ = f"select `uuid` from {TABLE} order by `id` asc ;"
    ##########################################################################
    return DB . ObtainUuids ( QQ                                             )
  ############################################################################
  ## 查詢語法
  ############################################################################
  def QuerySyntax     ( self                                               , \
                        TABLE                                              , \
                        UsedOptions                                        , \
                        ORDER                                              , \
                        START                                              , \
                        AMOUNT                                             ) :
    ##########################################################################
    UQ = " , " . join ( str(x) for x in UsedOptions                          )
    QQ = f"""select `uuid` from {TABLE}
             where ( `used` in ( {UQ} ) )
             order by `id` {ORDER}
             limit {START} , {AMOUNT} ;"""
    ##########################################################################
    return " " . join ( QQ . split (                                       ) )
  ############################################################################
  def QuerySyntaxAll ( self                                                , \
                       TABLE                                               , \
                       UsedOptions                                         , \
                       ORDER                                               ) :
    ##########################################################################
    UQ = " , " . join ( str(x) for x in UsedOptions                          )
    QQ = f"""select `uuid` from {TABLE}
             where ( `used` in ( {UQ} ) )
             order by `id` {ORDER} ;"""
    ##########################################################################
    return " " . join ( QQ . split (                                       ) )
  ############################################################################
  def CountOptions     ( self , DB , TABLE , UsedOptions                   ) :
    ##########################################################################
    UQ = " , " . join  ( str(x) for x in UsedOptions                         )
    QQ = f"""select count(*) from {TABLE} where ( `used` in ( {UQ} ) ) ;"""
    ##########################################################################
    DB . Query         ( QQ                                                  )
    RR = DB . FetchOne (                                                     )
    ##########################################################################
    if                 ( RR in [ False , None                            ] ) :
      return 0
    ##########################################################################
    if                 ( len ( RR ) <= 0                                   ) :
      return 0
    ##########################################################################
    return int         ( RR [ 0                                            ] )
  ############################################################################
  def FetchUuids            ( self , DB , TABLE , UsedOptions              ) :
    ##########################################################################
    UQ = " , " . join       ( str(x) for x in UsedOptions                    )
    QQ = f"""select `uuid` from {TABLE}
             where ( `used` in ( {UQ} ) )
             order by `id` asc ;"""
    ##########################################################################
    return DB . ObtainUuids ( " " . join ( QQ . split ( ) ) , 0              )
  ############################################################################
  def UpdateValue ( self , DB , TABLE , UUID , ITEM , VALUE                ) :
    ##########################################################################
    QQ = f"update {TABLE} set `{ITEM}` = {VALUE} where ( `uuid` = {UUID} ) ;"
    DB . Query    ( QQ                                                       )
    ##########################################################################
    return
  ############################################################################
  def UpdateBlob           ( self , DB , TABLE , UUID , ITEM , BLOB        ) :
    ##########################################################################
    try                                                                      :
      BLOB = BLOB . encode ( "utf-8"                                         )
    except                                                                   :
      pass
    ##########################################################################
    QQ     = f"update {TABLE} set `{ITEM}` = %s where ( `uuid` = {UUID} ) ;"
    DB     . QueryValues   ( QQ , ( BLOB , )                                 )
    ##########################################################################
    return
  ############################################################################
  def FetchDetails       ( self , DB , TABLE , UUID                        ) :
    ##########################################################################
    QQ = f"""select `uuid`,`type`,`used`,`code`,
             `two`,`three`,`four`,`name` from {TABLE}
             where ( `uuid` = {UUID} ) ;"""
    ##########################################################################
    DB . Query           ( " " . join ( QQ . split (                     ) ) )
    ##########################################################################
    return DB . FetchOne (                                                   )
  ############################################################################
  def ObtainsINFOs              ( self , DB , TABLE , UUIDs                ) :
    ##########################################################################
    INFOs =                     {                                            }
    ##########################################################################
    if                          ( len ( UUIDs ) <= 0                       ) :
      return INFOs
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      RR  = self . FetchDetails ( DB , TABLE , UUID                          )
      ########################################################################
      if                        ( RR in [ None , False ]                   ) :
        continue
      ########################################################################
      if                        ( len ( RR ) <= 0                          ) :
        continue
      ########################################################################
      INFOs [ UUID ] = RR
    ##########################################################################
    return INFOs
  ############################################################################
  ## 種族所擁有的人物族群
  ############################################################################
  def CountCrowds            ( self , DB , TABLE , RELATE , UUID           ) :
    ##########################################################################
    global CountryTypeName
    ##########################################################################
    REL        = Relation    (                                               )
    REL        . set         ( "first" , UUID                                )
    REL        . setT1       ( CountryTypeName                               )
    REL        . setT2       ( "People"                                      )
    REL        . setRelation ( RELATE                                        )
    ##########################################################################
    return REL . CountSecond ( DB , TABLE                                    )
  ############################################################################
  def CountDefaultCrowds      ( self , DB ,           RELATE , UUID        ) :
    ##########################################################################
    global CTRYREL
    ##########################################################################
    return self . CountCrowds (        DB , CTRYREL , RELATE , UUID          )
  ############################################################################
  ## 人物加入種族
  ############################################################################
  def PeopleJoinCountry ( self , DB , TABLE , RELATE , UUID , UUIDs        ) :
    ##########################################################################
    global CountryTypeName
    ##########################################################################
    REL = Relation      (                                                    )
    REL . set           ( "first" , UUID                                     )
    REL . setT1         ( CountryTypeName                                    )
    REL . setT2         ( "People"                                           )
    REL . setRelation   ( RELATE                                             )
    REL . Joins         ( DB , TABLE , UUIDs                                 )
    ##########################################################################
    return
  ############################################################################
  def PeopleJoinDefaultCountry ( self , DB , RELATE , UUID , UUIDs         ) :
    ##########################################################################
    global CTRYREL
    ##########################################################################
    self . PeopleJoinCountry   ( DB , CTRYREL , RELATE , UUID , UUIDs        )
    ##########################################################################
    return
  ############################################################################
  def FetchPeopleCountries   ( self , DB                                   ) :
    ##########################################################################
    global CountryTypeName
    global CTRYREL
    ##########################################################################
    REL        = Relation    (                                               )
    REL        . set         ( "second" , self . PeopleUuid                  )
    REL        . setT1       ( CountryTypeName                               )
    REL        . setT2       ( "People"                                      )
    REL        . setRelation ( "Subordination"                               )
    ##########################################################################
    return REL . GetOwners   ( DB       , CTRYREL                            )
  ############################################################################
  def LockRelationTable ( self , DB                                        ) :
    ##########################################################################
    global CTRYREL
    ##########################################################################
    DB . LockWrites     ( [ CTRYREL                                        ] )
    ##########################################################################
    return
  ############################################################################
  def AssignPeopleCountry ( self , DB , SEID , State                       ) :
    ##########################################################################
    global CountryTypeName
    global CTRYREL
    ##########################################################################
    REL   = Relation      (                                                  )
    REL   . set           ( "first"  , SEID                                  )
    REL   . set           ( "second" , self . PeopleUuid                     )
    REL   . setT1         ( CountryTypeName                                  )
    REL   . setT2         ( "People"                                         )
    REL   . setRelation   ( "Subordination"                                  )
    ##########################################################################
    if                    ( State                                          ) :
      ########################################################################
      REL . Join          ( DB ,           CTRYREL                           )
      ########################################################################
    else                                                                     :
      ########################################################################
      DB  . Query         ( REL . Delete ( CTRYREL                         ) )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
##############################################################################
