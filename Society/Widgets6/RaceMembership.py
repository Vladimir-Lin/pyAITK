# -*- coding: utf-8 -*-
##############################################################################
## RaceMembership
## 種族列表
##############################################################################
import os
import sys
import time
import requests
import threading
import json
##############################################################################
from   PySide6                              import QtCore
from   PySide6                              import QtGui
from   PySide6                              import QtWidgets
from   PySide6 . QtCore                     import *
from   PySide6 . QtGui                      import *
from   PySide6 . QtWidgets                  import *
from   AITK    . Qt6                        import *
##############################################################################
from   AITK    . Essentials . Relation      import Relation
from   AITK    . Calendars  . StarDate      import StarDate
from   AITK    . Calendars  . Periode       import Periode
from   AITK    . People     . People        import People
from   AITK    . Society    . Races . Races import Races
##############################################################################
class RaceMembership     ( TreeDock                                        ) :
  ############################################################################
  HavingMenu    = 1371434312
  ############################################################################
  emitNamesShow = Signal (                                                   )
  emitAllNames  = Signal ( dict                                              )
  emitLog       = Signal ( str                                               )
  ############################################################################
  def __init__           ( self , parent = None , plan = None              ) :
    ##########################################################################
    super ( ) . __init__ (        parent        , plan                       )
    ##########################################################################
    self . EditAllNames       = None
    ##########################################################################
    self . ClassTag           = "RaceMembership"
    self . FetchTableKey      = self . ClassTag
    self . GType              = 34
    self . SortOrder          = "asc"
    self . Method             = "Original"
    self . JoinRelate         = "Subordination"
    self . UsedOptions        = [ 1                                          ]
    self . PeopleRaces        = [                                            ]
    ##########################################################################
    self . RACES              = Races  (                                     )
    ##########################################################################
    self . dockingOrientation = Qt . Vertical
    self . dockingPlace       = Qt . LeftDockWidgetArea
    self . dockingPlaces      = Qt . TopDockWidgetArea                     | \
                                Qt . BottomDockWidgetArea                  | \
                                Qt . LeftDockWidgetArea                    | \
                                Qt . RightDockWidgetArea
    ##########################################################################
    self . setColumnCount          ( 3                                       )
    self . setColumnHidden         ( 1 , True                                )
    self . setColumnHidden         ( 2 , True                                )
    ##########################################################################
    self . setRootIsDecorated      ( False                                   )
    self . setAlternatingRowColors ( True                                    )
    ##########################################################################
    self . MountClicked            ( 1                                       )
    self . MountClicked            ( 9                                       )
    ##########################################################################
    self . assignSelectionMode     ( "ExtendedSelection"                     )
    ##########################################################################
    self . emitNamesShow . connect ( self . show                             )
    self . emitAllNames  . connect ( self . refresh                          )
    ##########################################################################
    self . setFunction             ( self . FunctionDocking , True           )
    self . setFunction             ( self . HavingMenu      , True           )
    ##########################################################################
    self . setAcceptDrops          ( False                                   )
    self . setDragEnabled          ( False                                   )
    self . setDragDropMode         ( QAbstractItemView . NoDragDrop          )
    ##########################################################################
    self . setMinimumSize          ( 80 , 80                             )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 280 , 640 )                       )
  ############################################################################
  def AttachActions   ( self      ,                  Enabled               ) :
    ##########################################################################
    self . LinkAction ( "Refresh" , self . startup , Enabled                 )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                     ( self                                   ) :
    return self . defaultFocusIn  (                                          )
  ############################################################################
  def FocusOut                    ( self                                   ) :
    return self . defaultFocusOut (                                          )
  ############################################################################
  def Shutdown               ( self                                        ) :
    ##########################################################################
    self . StayAlive   = False
    self . LoopRunning = False
    ##########################################################################
    if                       ( self . isThreadRunning (                  ) ) :
      return False
    ##########################################################################
    self . AttachActions     ( False                                         )
    self . detachActionsTool (                                               )
    self . LinkVoice         ( None                                          )
    ##########################################################################
    self . Leave . emit      ( self                                          )
    ##########################################################################
    return True
  ############################################################################
  def singleClicked             ( self , item , column                     ) :
    ##########################################################################
    self . defaultSingleClicked (        item , column                       )
    ##########################################################################
    return
  ############################################################################
  def stateChanged            ( self , item , column                       ) :
    ##########################################################################
    if                        ( column not in [ 0                        ] ) :
      return
    ##########################################################################
    CHK   = item . checkState ( 0                                            )
    state =                   ( CHK == Qt . Checked                          )
    uuid  = item . data       ( 0 , Qt . UserRole                            )
    uuid  = int               ( uuid                                         )
    VAL   =                   ( uuid , state ,                               )
    ##########################################################################
    self  . Go                ( self . UpdateRace , VAL                      )
    ##########################################################################
    return
  ############################################################################
  def ObtainUuidsQuery                   ( self                            ) :
    return self . RACES . QuerySyntaxAll ( self . Tables [ "Races"       ] , \
                                           self . UsedOptions              , \
                                           self . getSortingOrder (        ) )
  ############################################################################
  def ObtainsInformation                    ( self , DB                    ) :
    ##########################################################################
    self  . ReloadLocality                  ( DB                             )
    RACEz = self . RACES . FetchPeopleRaces ( DB , self . JoinRelate         )
    self  . PeopleRaces = RACEz
    ##########################################################################
    return
  ############################################################################
  def PrepareItem           ( self , UUID , NAME , ID , BRUSH              ) :
    ##########################################################################
    ST   = Qt . Unchecked
    ##########################################################################
    if                      ( UUID in self . PeopleRaces                   ) :
      ST = Qt . Checked
    ##########################################################################
    UXID = str              ( UUID                                           )
    IT   = QTreeWidgetItem  (                                                )
    IT   . setText          ( 0 , NAME                                       )
    IT   . setToolTip       ( 0 , UXID                                       )
    IT   . setCheckState    ( 0 , ST                                         )
    IT   . setData          ( 0 , Qt . UserRole , UUID                       )
    ##########################################################################
    IT   . setText          ( 1 , ID                                         )
    ##########################################################################
    for COL in              [ 0 , 1 , 2                                    ] :
      ########################################################################
      IT . setBackground    ( COL , BRUSH                                    )
    ##########################################################################
    return IT
  ############################################################################
  def RefreshToolTip          ( self , Total                               ) :
    ##########################################################################
    FMT  = self . getMenuItem ( "DisplayTotal"                               )
    MSG  = FMT  . format      ( Total                                        )
    self . setToolTip         ( MSG                                          )
    ##########################################################################
    return
  ############################################################################
  def refresh                     ( self , JSON                            ) :
    ##########################################################################
    self   . clear                (                                          )
    self   . setEnabled           ( False                                    )
    ##########################################################################
    CNT    = 0
    MOD    = len                  ( self . TreeBrushes                       )
    ##########################################################################
    UUIDs  = JSON                 [ "UUIDs"                                  ]
    IDFs   = JSON                 [ "Identifiers"                            ]
    NAMEs  = JSON                 [ "NAMEs"                                  ]
    ##########################################################################
    for U in UUIDs                                                           :
      ########################################################################
      IT   = self . PrepareItem   ( U                                      , \
                                    NAMEs [ U ]                            , \
                                    IDFs  [ U ]                            , \
                                    self . TreeBrushes [ CNT ]               )
      self . addTopLevelItem      ( IT                                       )
      ########################################################################
      CNT  = int                  ( int ( CNT + 1 ) % MOD                    )
    ##########################################################################
    self   . RefreshToolTip       ( len ( UUIDs )                            )
    self   . setEnabled           ( True                                     )
    self   . emitNamesShow . emit (                                          )
    ##########################################################################
    return
  ############################################################################
  def ObtainsItemUuids                ( self , DB                          ) :
    ##########################################################################
    QQ      = self . ObtainUuidsQuery (                                      )
    UUIDs   =                         [                                      ]
    if                                ( len ( QQ ) > 0                     ) :
      UUIDs = DB   . ObtainUuids      ( QQ                                   )
    ##########################################################################
    return UUIDs
  ############################################################################
  def ObtainsUuidNames                ( self , DB , UUIDs                  ) :
    ##########################################################################
    NAMEs   =                         {                                      }
    ##########################################################################
    if                                ( len ( UUIDs ) > 0                  ) :
      TABLE = self . Tables           [ "Names"                              ]
      NAMEs = self . GetNames         ( DB , TABLE , UUIDs                   )
    ##########################################################################
    return NAMEs
  ############################################################################
  def loading                          ( self                              ) :
    ##########################################################################
    DB       = self . ConnectDB        (                                     )
    if                                 ( DB == None                        ) :
      self   . emitNamesShow . emit    (                                     )
      return
    ##########################################################################
    self     . Notify                  ( 3                                   )
    ##########################################################################
    FMT      = self . Translations     [ "UI::StartLoading"                  ]
    MSG      = FMT . format            ( self . windowTitle ( )              )
    self     . ShowStatus              ( MSG                                 )
    self     . OnBusy  . emit          (                                     )
    self     . setBustle               (                                     )
    ##########################################################################
    self     . ObtainsInformation      ( DB                                  )
    UUIDs    = self . ObtainsItemUuids ( DB                                  )
    ##########################################################################
    NAMEs    =                         {                                     }
    IDFs     =                         {                                     }
    ##########################################################################
    if                                 ( len ( UUIDs ) > 0                 ) :
      ########################################################################
      RACTAB = self . Tables           [ "Races"                             ]
      NAMEs  = self . ObtainsUuidNames ( DB , UUIDs                          )
      IDFs   = self . RACES . GetIdentifiers ( DB , RACTAB , UUIDs           )
    ##########################################################################
    self     . setVacancy              (                                     )
    self     . GoRelax . emit          (                                     )
    self     . ShowStatus              ( ""                                  )
    DB       . Close                   (                                     )
    ##########################################################################
    if                                 ( len ( UUIDs ) <= 0                ) :
      self   . emitNamesShow . emit    (                                     )
      return
    ##########################################################################
    JSON     =                         { "UUIDs"       : UUIDs             , \
                                         "Identifiers" : IDFs              , \
                                         "NAMEs"       : NAMEs               }
    ##########################################################################
    self     . emitAllNames . emit     ( JSON                                )
    self     . Notify                  ( 5                                   )
    ##########################################################################
    return
  ############################################################################
  def StartupMembership       ( self , title , uuid                        ) :
    ##########################################################################
    FMT  = self . getMenuItem ( "Title"                                      )
    self . setWindowTitle     ( FMT . format ( title                       ) )
    ##########################################################################
    self . RACES . setPeople  (                uuid                          )
    self . startup            (                                              )
    ##########################################################################
    return
  ############################################################################
  def Prepare             ( self                                           ) :
    ##########################################################################
    self . defaultPrepare ( self . ClassTag , 2                              )
    ##########################################################################
    self . LoopRunning = False
    ##########################################################################
    return
  ############################################################################
  def UpdateRace                ( self , uuid , state                      ) :
    ##########################################################################
    if                          ( state                                    ) :
      ########################################################################
      if                        ( uuid not in self . PeopleRaces           ) :
        ######################################################################
        self . PeopleRaces . append ( uuid                                   )
      ########################################################################
    else                                                                     :
      ########################################################################
      if                        ( uuid     in self . PeopleRaces           ) :
        ######################################################################
        self . PeopleRaces . remove ( uuid                                   )
    ##########################################################################
    DB       = self . ConnectDB (                                            )
    if                          ( self . NotOkay ( DB )                    ) :
      return False
    ##########################################################################
    self     . RACES . LockRelationTable ( DB                                )
    self     . RACES . AssignPeopleRace  ( DB                              , \
                                           uuid                            , \
                                           state                           , \
                                           self . JoinRelate                 )
    ##########################################################################
    DB       . UnlockTables     (                                            )
    DB       . Close            (                                            )
    ##########################################################################
    self     . Notify           ( 5                                          )
    ##########################################################################
    return
  ############################################################################
  def UpdateLocalityUsage       ( self                                     ) :
    ##########################################################################
    DB     = self . ConnectDB   (                                            )
    if                          ( self . NotOkay ( DB )                    ) :
      return False
    ##########################################################################
    PAMTAB = self . Tables      [ "Parameters"                               ]
    DB     . LockWrites         ( [ PAMTAB                                 ] )
    ##########################################################################
    self   . SetLocalityByUuid  ( DB                                       , \
                                  PAMTAB                                   , \
                                  0                                        , \
                                  self . GType                             , \
                                  self . ClassTag                            )
    ##########################################################################
    DB     . UnlockTables       (                                            )
    DB     . Close              (                                            )
    self   . emitRestart . emit (                                            )
    ##########################################################################
    return True
  ############################################################################
  def ReloadLocality           ( self , DB                                 ) :
    ##########################################################################
    PAMTAB = self . Tables     [ "Parameters"                                ]
    self   . GetLocalityByUuid ( DB                                        , \
                                 PAMTAB                                    , \
                                 0                                         , \
                                 self . GType                              , \
                                 self . ClassTag                             )
    ##########################################################################
    return
  ############################################################################
  def ColumnsMenu                    ( self , mm                           ) :
    return self . DefaultColumnsMenu (        mm , 1                         )
  ############################################################################
  def RunColumnsMenu               ( self , at                             ) :
    ##########################################################################
    if                             ( at >= 9001 ) and ( at <= 9002 )         :
      ########################################################################
      col  = at - 9000
      hid  = self . isColumnHidden ( col                                     )
      self . setColumnHidden       ( col , not hid                           )
      ########################################################################
      return True
    ##########################################################################
    return False
  ############################################################################
  def JoinsMenu              ( self , mm                                   ) :
    ##########################################################################
    msg = self . getMenuItem ( "BelongTypes"                                 )
    LOM = mm   . addMenu     ( msg                                           )
    ##########################################################################
    CK  =                    ( "Subordination" == self . JoinRelate          )
    msg = self . getMenuItem ( "ConfirmRace"                                 )
    mm  . addActionFromMenu  ( LOM , 66471301 , msg , True , CK              )
    ##########################################################################
    CK  =                    ( "Possible"      == self . JoinRelate          )
    msg = self . getMenuItem ( "PossibleRace"                                )
    mm  . addActionFromMenu  ( LOM , 66471302 , msg , True , CK              )
    ##########################################################################
    return mm
  ############################################################################
  def RunJoinsMenu ( self , at                                             ) :
    ##########################################################################
    if             ( at == 66471301                                        ) :
      ########################################################################
      self . JoinRelate = "Subordination"
      ########################################################################
      return True
    ##########################################################################
    if             ( at == 66471302                                        ) :
      ########################################################################
      self . JoinRelate = "Possible"
      ########################################################################
      return True
    ##########################################################################
    return   False
  ############################################################################
  def Menu                       ( self , pos                              ) :
    ##########################################################################
    if                           ( not self . isPrepared (               ) ) :
      return False
    ##########################################################################
    doMenu = self . isFunction   ( self . HavingMenu                         )
    if                           ( not doMenu                              ) :
      return False
    ##########################################################################
    self   . Notify              ( 0                                         )
    ##########################################################################
    items  , atItem , uuid = self . GetMenuDetails ( 0                       )
    ##########################################################################
    mm     = MenuManager         ( self                                      )
    ##########################################################################
    TRX    = self . Translations
    ##########################################################################
    self   . AppendRefreshAction ( mm , 1001                                 )
    mm     . addSeparator        (                                           )
    self   . JoinsMenu           ( mm                                        )
    self   . ColumnsMenu         ( mm                                        )
    self   . SortingMenu         ( mm                                        )
    self   . LocalityMenu        ( mm                                        )
    self   . DockingMenu         ( mm                                        )
    ##########################################################################
    self   . AtMenu = True
    ##########################################################################
    mm     . setFont             ( self    . menuFont ( )                    )
    aa     = mm . exec_          ( QCursor . pos      ( )                    )
    at     = mm . at             ( aa                                        )
    ##########################################################################
    self   . AtMenu = False
    ##########################################################################
    if                           ( self . RunDocking   ( mm , aa )         ) :
      return True
    ##########################################################################
    if                           ( self . HandleLocalityMenu ( at )        ) :
      ########################################################################
      self . restart             (                                           )
      ########################################################################
      return True
    ##########################################################################
    if                           ( self . RunColumnsMenu     ( at )        ) :
      return True
    ##########################################################################
    if                           ( self . RunSortingMenu     ( at )        ) :
      ########################################################################
      self . restart             (                                           )
      ########################################################################
      return True
    ##########################################################################
    OKAY   = self . RunJoinsMenu ( at                                        )
    if                           ( OKAY                                    ) :
      ########################################################################
      self . restart             (                                           )
      ########################################################################
      return True
    ##########################################################################
    if                           ( at == 1001                              ) :
      ########################################################################
      self . restart             (                                           )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
