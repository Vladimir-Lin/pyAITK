# -*- coding: utf-8 -*-
##############################################################################
## 網頁位址分析器
##############################################################################
import os
import sys
##############################################################################
import urllib
import urllib   . parse
from   urllib                        import parse
from   pathlib                       import Path
##############################################################################
import mysql . connector
from   mysql . connector             import Error
##############################################################################
from   ..      Database . Query      import Query      as Query
from   ..      Database . Connection import Connection as Connection
##############################################################################
class WebPage         (                                                    ) :
  ############################################################################
  def __init__        ( self , page = "" , tables = { }                    ) :
    ##########################################################################
    self . Uuid       = 0
    self . Protocol   = "http"
    self . Port       = 80
    self . Hostname   = ""
    self . TLD        = 0
    self . SLD        = 0
    self . DomainUuid = 0
    self . HostUuid   = 0
    self . UrlUuid    = 0
    self . Path       = ""
    self . Reverse    = ""
    self . Page       = ""
    self . Tables     = tables
    self . setPage    ( page                                                 )
    ##########################################################################
    return
  ############################################################################
  def __del__         ( self                                               ) :
    return
  ############################################################################
  def setPage                ( self , page                                 ) :
    ##########################################################################
    self . Page       = page
    self . Reverse    = page [ ::-1                                          ]
    self . Path       = ""
    self . Protocol   = "http"
    self . Port       = 80
    self . Hostname   = ""
    ##########################################################################
    if                       ( len ( page ) <= 0                           ) :
      return False
    ##########################################################################
    r    = parse . urlparse  ( page                                          )
    ##########################################################################
    p    = r . path
    i    = page . index      ( p                                             )
    z    = page
    if                       ( i >= 0                                      ) :
      x  = z
      z  = x                 [ i :                                           ]
      v  = x                 [   : i                                         ]
      self . Page    = v . lower ( ) + z
      self . Reverse = self . Page [ ::-1                                    ]
    ##########################################################################
    self . Protocol   = r . scheme
    self . Port       = r . port
    self . Hostname   = r . hostname
    self . Path       = z
    self . DecidePort        (                                               )
    ##########################################################################
    return True
  ############################################################################
  def DecidePort ( self                                                    ) :
    ##########################################################################
    if           ( self . Port != None                                     ) :
      return
    ##########################################################################
    if           ( self . Protocol == "http"                               ) :
      self . Port =  80
    elif         ( self . Protocol == "https"                              ) :
      self . Port = 443
    elif         ( self . Protocol == "ftp"                                ) :
      self . Port =  21
    else                                                                     :
      self . Port =   0
    ##########################################################################
    return
  ############################################################################
  def isProtocol ( self                                                    ) :
    return       ( len ( self . Protocol ) > 0                               )
  ############################################################################
  def LookForTLD             ( self , DB                                   ) :
    ##########################################################################
    h        = self . Hostname
    if                       ( len ( h ) <= 0                              ) :
      return None
    ##########################################################################
    r        = h             [ ::-1                                          ]
    t        = r . split     ( "."                                           )
    ##########################################################################
    if                       ( len ( t ) <= 0                              ) :
      return None
    ##########################################################################
    w        = t             [ 0                                             ]
    ##########################################################################
    TLDTAB   = self . Tables [ "TLD"                                         ]
    QQ       = f"select `id`,`type` from {TLDTAB} where ( `reverse` = '{w}' ) ;"
    DB       . Query         ( QQ                                            )
    K        = DB . FetchOne (                                               )
    ##########################################################################
    if                       ( K == None                                   ) :
      return None
    ##########################################################################
    if                       ( len ( K ) < 2                               ) :
      return None
    ##########################################################################
    return                   { "Id" : K [ 0 ] , "Type" : K [ 1 ]             }
  ############################################################################
  def LookForSLD             ( self , DB                                   ) :
    ##########################################################################
    h        = self . Hostname
    if                       ( len ( h ) <= 0                              ) :
      return 0
    ##########################################################################
    r        = h             [ ::-1                                          ]
    t        = r . split     ( "."                                           )
    ##########################################################################
    if                       ( len ( t ) <= 1                              ) :
      return 0
    ##########################################################################
    w        = t             [ 0                                             ]
    x        = t             [ 1                                             ]
    c        = f"{w}.{x}"
    ##########################################################################
    SLDTAB   = self . Tables [ "SLD"                                         ]
    QQ       = f"select `id` from {SLDTAB} where ( `reverse` = '{c}' ) ;"
    DB       . Query         ( QQ                                            )
    K        = DB . FetchOne (                                               )
    ##########################################################################
    if                       ( K == None                                   ) :
      return 0
    ##########################################################################
    if                       ( len ( K ) < 1                               ) :
      return 0
    ##########################################################################
    return K                 [ 0                                             ]
  ############################################################################
  def LookForDomain          ( self , DB                                   ) :
    ##########################################################################
    CNT      = 2
    ##########################################################################
    if                       ( self . SLD > 0                              ) :
      CNT    = 3
    ##########################################################################
    h        = self . Hostname
    if                       ( len ( h ) <= 0                              ) :
      return 0
    ##########################################################################
    r        = h             [ ::-1                                          ]
    t        = r . split     ( "."                                           )
    ##########################################################################
    if                       ( len ( t ) < CNT                             ) :
      return 0
    ##########################################################################
    z        =               [                                               ]
    LI       = 0
    for s in t                                                               :
      ########################################################################
      if                     ( LI < CNT                                    ) :
        z    . append        ( s                                             )
      ########################################################################
      LI     = LI + 1
    ##########################################################################
    W        = "." . join    ( z                                             )
    ##########################################################################
    DOMTAB   = self . Tables [ "Domains"                                     ]
    QQ       = f"select `uuid` from {DOMTAB} where ( `reverse` = '{W}' ) ;"
    DB       . Query         ( QQ                                            )
    K        = DB . FetchOne (                                               )
    ##########################################################################
    if                       ( K == None                                   ) :
      return 0
    ##########################################################################
    if                       ( len ( K ) < 1                               ) :
      return 0
    ##########################################################################
    return K                 [ 0                                             ]
  ############################################################################
  def AppendDomain           ( self , DB                                   ) :
    ##########################################################################
    CNT      = 2
    ##########################################################################
    if                       ( self . SLD > 0                              ) :
      CNT    = 3
    ##########################################################################
    h        = self . Hostname
    if                       ( len ( h ) <= 0                              ) :
      return 0
    ##########################################################################
    r        = h             [ ::-1                                          ]
    t        = r . split     ( "."                                           )
    ##########################################################################
    if                       ( len ( t ) < CNT                             ) :
      return 0
    ##########################################################################
    z        =               [                                               ]
    LI       = 0
    for s in t                                                               :
      ########################################################################
      if                     ( LI < CNT                                    ) :
        z    . append        ( s                                             )
      ########################################################################
      LI     = LI + 1
    ##########################################################################
    W        = "." . join    ( z                                             )
    ##########################################################################
    DOMTAB   = self . Tables [ "Domains"                                     ]
    DUID     = DB . LastUuid ( DOMTAB , "uuid" , 8310000000000000000         )
    ##########################################################################
    QQ       = f"insert into {DOMTAB} ( `uuid`,`name` ) values ( %s , %s ) ;"
    DB       . QueryValues   ( QQ , ( DUID , W [ ::-1 ] , )                  )
    ##########################################################################
    return DUID
  ############################################################################
  def LookForHost            ( self , DB                                   ) :
    ##########################################################################
    p       =                ( self . Hostname ,                             )
    HSTTAB  = self . Tables  [ "Hosts"                                       ]
    QQ      = f"select `uuid` from {HSTTAB} where ( `name` = %s ) ;"
    DB . QueryValues         ( QQ , p                                        )
    ##########################################################################
    K        = DB . FetchOne (                                               )
    ##########################################################################
    if                       ( K == None                                   ) :
      return 0
    ##########################################################################
    if                       ( len ( K ) < 1                               ) :
      return 0
    ##########################################################################
    return K                 [ 0                                             ]
  ############################################################################
  def AppendHost             ( self , DB                                   ) :
    ##########################################################################
    HSTTAB   = self . Tables [ "Hosts"                                       ]
    HUID     = DB . LastUuid ( HSTTAB , "uuid" , 8370000000000000000         )
    DUID     = self . DomainUuid
    NAME     = self . Hostname
    REVERSE  = NAME [ ::-1 ]
    W        =               ( HUID , DUID , NAME , REVERSE ,                )
    ##########################################################################
    QQ       = f"""insert into {HSTTAB}
                   ( `uuid` , `domain` , `name` , `reverse` )
                   values
                   ( %s , %s , %s , %s ) ;"""
    DB       . QueryValues   ( QQ , W                                        )
    ##########################################################################
    return HUID
  ############################################################################
  def LookForURL             ( self , DB                                   ) :
    ##########################################################################
    p       =                ( self . HostUuid                             , \
                               self . Protocol                             , \
                               self . Port                                 , \
                               self . Hostname                             , )
    URLTAB  = self . Tables  [ "URLs"                                        ]
    QQ      = f"""select `uuid` from {URLTAB}
                  where ( `host` = %s )
                  and ( `protocol` = %s )
                  and ( `port` = %s )
                  and ( `name` = %s ) ;"""
    DB . QueryValues         ( QQ , p                                        )
    ##########################################################################
    K        = DB . FetchOne (                                               )
    ##########################################################################
    if                       ( K == None                                   ) :
      return 0
    ##########################################################################
    if                       ( len ( K ) < 1                               ) :
      return 0
    ##########################################################################
    return K                 [ 0                                             ]
  ############################################################################
  def AppendURL              ( self , DB                                   ) :
    ##########################################################################
    URLTAB   = self . Tables [ "URLs"                                        ]
    UUID     = DB . LastUuid ( URLTAB , "uuid" , 8320000000000000000         )
    HUID     = self . HostUuid
    PROTOCOL = self . Protocol
    PORT     = self . Port
    NAME     = self . Hostname
    REVERSE  = NAME [ ::-1 ]
    W        =               ( UUID                                        , \
                               HUID                                        , \
                               PROTOCOL                                    , \
                               PORT                                        , \
                               NAME                                        , \
                               REVERSE                                     , )
    ##########################################################################
    QQ       = f"""insert into {URLTAB}
                   ( `uuid` , `host` , `protocol` , `port` , `name` , `reverse` )
                   values
                   ( %s , %s , %s , %s , %s , %s ) ;"""
    DB       . QueryValues   ( QQ , W                                        )
    ##########################################################################
    return UUID
  ############################################################################
  def LookForPage            ( self , DB                                   ) :
    ##########################################################################
    p       =                ( self . Page                                 , )
    PAGTAB  = self . Tables  [ "Webpages"                                    ]
    QQ      = f"select `uuid` from {PAGTAB} where ( `name` = %s ) ;"
    DB . QueryValues         ( QQ , p                                        )
    ##########################################################################
    K        = DB . FetchOne (                                               )
    ##########################################################################
    if                       ( K == None                                   ) :
      return 0
    ##########################################################################
    if                       ( len ( K ) < 1                               ) :
      return 0
    ##########################################################################
    return int               ( K [ 0                                       ] )
  ############################################################################
  def AppendPage              ( self , DB                                  ) :
    ##########################################################################
    WPGTAB  = self . Tables   [ "Webpages"                                   ]
    UUID    = DB   . LastUuid ( WPGTAB , "uuid" , 8380000000000000000        )
    URID    = self . UrlUuid
    NAME    = self . Page
    REVERSE = self . Reverse
    PATH    = self . Path
    W       =                 ( UUID , URID , NAME , REVERSE , PATH ,        )
    ##########################################################################
    QQ      = f"""insert into {WPGTAB}
                   ( `uuid` , `url` , `name` , `reverse` , `path` )
                   values
                   ( %s , %s , %s , %s , %s ) ;"""
    ##########################################################################
    try                                                                      :
      DB    . QueryValues     ( QQ , W                                       )
    except                                                                   :
      return 0
    ##########################################################################
    return UUID
  ############################################################################
  def UpdatePage            ( self , DB , UUID                             ) :
    ##########################################################################
    WPGTAB  = self . Tables [ "Webpages"                                     ]
    URID    = self . UrlUuid
    NAME    = self . Page
    REVERSE = self . Reverse
    PATH    = self . Path
    W       =               ( URID , NAME , REVERSE , PATH ,                 )
    ##########################################################################
    QQ      = f"""update {WPGTAB}
                   set `url` = %s ,
                      `name` = %s ,
                   `reverse` = %s ,
                      `path` = %s
                   where ( `uuid` = {UUID} ) ;"""
    DB      . QueryValues   ( QQ , W                                         )
    ##########################################################################
    return UUID
  ############################################################################
  def UpdatePageContent   ( self , DB , TABLE , UUID                       ) :
    ##########################################################################
    NAME    = self . Page
    REVERSE = self . Reverse
    PATH    = self . Path
    ##########################################################################
    W       =             ( NAME , REVERSE , PATH ,                          )
    ##########################################################################
    QQ      = f"""update {TABLE}
                   set `name` = %s ,
                    `reverse` = %s ,
                       `path` = %s
                   where ( `uuid` = {UUID} ) ;"""
    DB      . QueryValues ( QQ , W                                           )
    ##########################################################################
    return
  ############################################################################
  def Update                         ( self , DB                           ) :
    ##########################################################################
    Answer = False
    ##########################################################################
    TLDTAB      = self . Tables      [ "TLD"                                 ]
    SLDTAB      = self . Tables      [ "SLD"                                 ]
    DOMTAB      = self . Tables      [ "Domains"                             ]
    HSTTAB      = self . Tables      [ "Hosts"                               ]
    URLTAB      = self . Tables      [ "URLs"                                ]
    WPGTAB      = self . Tables      [ "Webpages"                            ]
    ##########################################################################
    DB          . LockWrites         ( [ TLDTAB                            , \
                                         SLDTAB                            , \
                                         DOMTAB                            , \
                                         HSTTAB                            , \
                                         URLTAB                            , \
                                         WPGTAB                            ] )
    ##########################################################################
    R           = self . LookForTLD  ( DB                                    )
    if                               ( R != None                           ) :
      self      . TLD = R            [ "Id"                                  ]
      if                             ( R [ "Type" ] == 7                   ) :
        self . SLD = self . LookForSLD ( DB                                  )
    ##########################################################################
    D   = self . LookForDomain       ( DB                                    )
    if                               ( D > 0                               ) :
      self . DomainUuid = D
    else                                                                     :
      self . DomainUuid = self . AppendDomain ( DB                           )
    ##########################################################################
    if                               ( self . DomainUuid > 0               ) :
      ########################################################################
      H = self . LookForHost         ( DB                                    )
      if                             ( H > 0                               ) :
        self . HostUuid = H
      else                                                                   :
        self . HostUuid = self . AppendHost ( DB                             )
    ##########################################################################
    if                               ( self . HostUuid > 0                 ) :
      ########################################################################
      U = self . LookForURL          ( DB                                    )
      if                             ( U > 0                               ) :
        self . UrlUuid = U
      else                                                                   :
        self . UrlUuid = self . AppendURL ( DB                               )
    ##########################################################################
    if                               ( self . UrlUuid > 0                  ) :
      ########################################################################
      self . UpdatePage              ( DB , self . Uuid                      )
      Answer = True
    ##########################################################################
    DB          . UnlockTables       (                                       )
    ##########################################################################
    return Answer
  ############################################################################
  def Assure                          ( self , DB                          ) :
    ##########################################################################
    Answer = False
    self . Uuid = self . LookForPage  ( DB                                   )
    ##########################################################################
    if                                ( self . Uuid > 0                    ) :
      return True
    ##########################################################################
    TLDTAB      = self . Tables       [ "TLD"                                ]
    SLDTAB      = self . Tables       [ "SLD"                                ]
    DOMTAB      = self . Tables       [ "Domains"                            ]
    HSTTAB      = self . Tables       [ "Hosts"                              ]
    URLTAB      = self . Tables       [ "URLs"                               ]
    WPGTAB      = self . Tables       [ "Webpages"                           ]
    ##########################################################################
    DB          . LockWrites          ( [ TLDTAB                           , \
                                          SLDTAB                           , \
                                          DOMTAB                           , \
                                          HSTTAB                           , \
                                          URLTAB                           , \
                                          WPGTAB                           ] )
    ##########################################################################
    R           = self . LookForTLD   ( DB                                   )
    if                                ( R != None                          ) :
      self      . TLD = R             [ "Id"                                 ]
      if                              ( R [ "Type" ] == 7                  ) :
        self . SLD = self . LookForSLD ( DB                                  )
    ##########################################################################
    D   = self . LookForDomain        ( DB                                   )
    if                                ( D > 0                              ) :
      self . DomainUuid = D
    else                                                                     :
      self . DomainUuid = self . AppendDomain ( DB                           )
    ##########################################################################
    if                                ( self . DomainUuid > 0              ) :
      ########################################################################
      H = self . LookForHost          ( DB                                   )
      if                              ( H > 0                              ) :
        self . HostUuid = H
      else                                                                   :
        self . HostUuid = self . AppendHost ( DB                             )
    ##########################################################################
    if                                ( self . HostUuid > 0                ) :
      ########################################################################
      U = self . LookForURL           ( DB                                   )
      if                              ( U > 0                              ) :
        self . UrlUuid = U
      else                                                                   :
        self . UrlUuid = self . AppendURL ( DB                               )
    ##########################################################################
    if                                ( self . UrlUuid > 0                 ) :
      ########################################################################
      self . Uuid = self . AppendPage ( DB                                   )
      if                              ( self . Uuid > 0                    ) :
        Answer = True
    ##########################################################################
    DB          . UnlockTables       (                                       )
    ##########################################################################
    return Answer
  ############################################################################
  def GetWebPage          ( self , DB , TABLE , WPID                       ) :
    ##########################################################################
    QQ    = f"select `name` from {TABLE} where ( `uuid` = {WPID} ) ;"
    DB    . Query         ( QQ                                               )
    RR    = DB . FetchOne (                                                  )
    ##########################################################################
    if                    ( RR in [ False , None ]                         ) :
      return ""
    ##########################################################################
    if                    ( len ( RR ) < 1                                 ) :
      return ""
    ##########################################################################
    URL   = RR            [ 0                                                ]
    ##########################################################################
    try                                                                      :
      URL = URL . decode  ( "utf-8"                                          )
    except                                                                   :
      pass
    ##########################################################################
    return URL
  ############################################################################
  def ObtainsWebPageUuid ( self , DB                                       ) :
    ##########################################################################
    if                   ( not self . isProtocol (                       ) ) :
      return 0
    ##########################################################################
    if                   ( not self . Assure     ( DB                    ) ) :
      return 0
    ##########################################################################
    return self . Uuid
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
def FindWebPageUuid       ( DB , URL , TABLEs                              ) :
  ############################################################################
  WP        = WebPage     (      URL , TABLEs                                )
  ############################################################################
  return WP . LookForPage ( DB                                               )
##############################################################################
def AssureWebPageUuid            ( DB , URL , TABLEs                       ) :
  ############################################################################
  WP        = WebPage            (      URL , TABLEs                         )
  ############################################################################
  return WP . ObtainsWebPageUuid ( DB                                        )
##############################################################################
