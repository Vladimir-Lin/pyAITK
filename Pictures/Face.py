# -*- coding: utf-8 -*-
##############################################################################
## 人臉
##############################################################################
import os
import sys
import time
import datetime
import logging
import requests
import threading
import gettext
import binascii
import hashlib
import base64
##############################################################################
from   io           import BytesIO
from   wand . image import Image
from   PIL          import Image as Pillow
##############################################################################
import cv2
import dlib
import numpy as np
##############################################################################
class Face        (                                                        ) :
  ############################################################################
  def __init__    ( self                                                   ) :
    ##########################################################################
    self . Full       = self . CreateRectangle ( 0 , 0 , 0 , 0               )
    self . Rectangle  = self . CreateRectangle ( 0 , 0 , 0 , 0               )
    self . EmptyLandmarks (                                                  )
    ##########################################################################
    return
  ############################################################################
  def __del__     ( self                                                   ) :
    pass
  ############################################################################
  def EmptyLandmarks   ( self                                              ) :
    ##########################################################################
    self . Landmarks = { "Points"   : [ ]                                    ,
                         "Shape"    : [ ]                                    ,
                         "Eyes"     : { "Right"   : [ ]                      ,
                                        "Left"    : [ ]                    } ,
                         "Eyebrow"  : { "Right"   : [ ]                      ,
                                        "Left"    : [ ]                    } ,
                         "Nose"     : { "Bridge"  : [ ]                      ,
                                        "Nostril" : [ ]                    } ,
                         "Mouth"    : { "Outer"   : [ ]                      ,
                                        "Inner"   : [ ]                    } }
    ##########################################################################
    return
  ############################################################################
  def CreateRectangle ( self , x , y , w , h                               ) :
    ##########################################################################
    B    = y + h - 1
    R    = x + w - 1
    CX   = x + int ( w / 2 )
    CY   = y + int ( h / 2 )
    ##########################################################################
    RECT =            { "X"  : x                                             ,
                        "Y"  : y                                             ,
                        "W"  : w                                             ,
                        "H"  : h                                             ,
                        "B"  : B                                             ,
                        "R"  : R                                             ,
                        "CX" : CX                                            ,
                        "CY" : CY                                            }
    ##########################################################################
    return RECT
  ############################################################################
  def RectangleFromOpenCV         ( self , rect                            ) :
    ##########################################################################
    x = rect [ 0 ]
    y = rect [ 1 ]
    w = rect [ 2 ]
    h = rect [ 3 ]
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ScaleRectangle              ( self , rect , ratio                    ) :
    ##########################################################################
    x   = rect [ "X"  ]
    y   = rect [ "Y"  ]
    w   = rect [ "W"  ]
    h   = rect [ "H"  ]
    CX  = rect [ "CX" ]
    CY  = rect [ "CY" ]
    ##########################################################################
    WW  = int ( w * ratio )
    HH  = int ( h * ratio )
    ##########################################################################
    x   = CX - int ( WW / 2 )
    y   = CY - int ( HH / 2 )
    w   = WW
    h   = HH
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def RestraintRectangle          ( self , Outer , Inner                   ) :
    ##########################################################################
    X1   = Outer                  [ "X"                                      ]
    Y1   = Outer                  [ "Y"                                      ]
    R1   = Outer                  [ "R"                                      ]
    B1   = Outer                  [ "B"                                      ]
    ##########################################################################
    X2   = Inner                  [ "X"                                      ]
    Y2   = Inner                  [ "Y"                                      ]
    R2   = Inner                  [ "R"                                      ]
    B2   = Inner                  [ "B"                                      ]
    ##########################################################################
    if                            ( X2 < X1                                ) :
      X2 = X1
    if                            ( Y2 < Y1                                ) :
      Y2 = Y1
    if                            ( R2 > R1                                ) :
      R2 = R1
    if                            ( B2 > B1                                ) :
      B2 = B1
    ##########################################################################
    x    = X2
    y    = Y2
    w    = int                    ( R2 - X2 + 1                              )
    h    = int                    ( B2 - Y2 + 1                              )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToSquareRectangle           ( self , rect                            ) :
    ##########################################################################
    CX   = rect [ "CX" ]
    CY   = rect [ "CY" ]
    WW   = rect [ "W"  ]
    HH   = rect [ "H"  ]
    ##########################################################################
    if                            ( WW > HH                                ) :
      HH = WW
    else                                                                     :
      WW = HH
    ##########################################################################
    x    = CX - int ( WW / 2 )
    y    = CY - int ( HH / 2 )
    w    = WW
    h    = HH
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def MultiplyRectangle           ( self , rect , ratio                    ) :
    ##########################################################################
    XX   = rect [ "X" ]
    YY   = rect [ "Y" ]
    WW   = rect [ "W" ]
    HH   = rect [ "H" ]
    ##########################################################################
    x    = int ( XX * ratio )
    y    = int ( YY * ratio )
    w    = int ( WW * ratio )
    h    = int ( HH * ratio )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToDlibRectangle       ( self , rect                                  ) :
    ##########################################################################
    x = rect                [ "X"                                            ]
    y = rect                [ "Y"                                            ]
    r = rect                [ "R"                                            ]
    b = rect                [ "B"                                            ]
    ##########################################################################
    return dlib . rectangle ( left = x , top = y , right = r , bottom = b    )
  ############################################################################
  def setFull                            ( self  , width , height          ) :
    ##########################################################################
    self . Full = self . CreateRectangle ( 0 , 0 , width , height            )
    ##########################################################################
    return self . Full
  ############################################################################
  def setRectangle          ( self , rect                                  ) :
    ##########################################################################
    self . Rectangle = rect
    ##########################################################################
    return self . Rectangle
  ############################################################################
  def setRectangleFromOpenCV ( self , rect                                 ) :
    ##########################################################################
    self . Rectangle = self . RectangleFromOpenCV ( rect )
    ##########################################################################
    return self . Rectangle
  ############################################################################
  def CollectLandmarkParts ( self                                          ) :
    ##########################################################################
    ## 臉型
    ##########################################################################
    for i in range         ( 0 , 17                                        ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Shape" ] . append ( p                              )
    ##########################################################################
    ## 右眉(在左邊)
    ##########################################################################
    for i in range         ( 17 , 22                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyebrow" ] [ "Right" ] . append ( p                )
    ##########################################################################
    ## 左眉(在右邊)
    ##########################################################################
    for i in range         ( 22 , 27                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyebrow" ] [ "Left"  ] . append ( p                )
    ##########################################################################
    ## 鼻樑
    ##########################################################################
    for i in range         ( 27 , 31                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Nose" ] [ "Bridge"  ] . append ( p                 )
    ##########################################################################
    ## 鼻孔部
    ##########################################################################
    for i in range         ( 31 , 36                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Nose" ] [ "Nostril" ] . append ( p                 )
    ##########################################################################
    ## 右眼(在左邊)
    ##########################################################################
    for i in range         ( 36 , 42                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyes" ] [ "Right" ] . append ( p                   )
    ##########################################################################
    ## 左眼(在右邊)
    ##########################################################################
    for i in range         ( 42 , 48                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyes" ] [ "Left"  ] . append ( p                   )
    ##########################################################################
    ## 外嘴唇
    ##########################################################################
    for i in range         ( 48 , 60                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Mouth" ] [ "Outer" ] . append ( p                  )
    ##########################################################################
    ## 內嘴唇
    ##########################################################################
    for i in range         ( 60 , 68                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Mouth" ] [ "Inner" ] . append ( p                  )
    ##########################################################################
    return
  ############################################################################
  def ImportDlibLandmarks  ( self , shape , points = 68                    ) :
    ##########################################################################
    self . EmptyLandmarks  (                                                 )
    ##########################################################################
    if                     ( points ==  5                                  ) :
      return
    ##########################################################################
    if                     ( points != 68                                  ) :
      return
    ##########################################################################
    for i in range         ( 0 , 68                                        ) :
      p    =               [ shape . part ( i ) . x , shape . part ( i ) . y ]
      self . Landmarks [ "Points" ] . append ( p                             )
    ##########################################################################
    self . CollectLandmarkParts (                                            )
    ##########################################################################
    return
  ############################################################################
  def AssignLandmarks           ( self , base , points                     ) :
    ##########################################################################
    XB     = base               [ 0                                          ]
    YB     = base               [ 1                                          ]
    ##########################################################################
    self   . EmptyLandmarks     (                                            )
    ##########################################################################
    for v in points                                                          :
      ########################################################################
      p    =                    [ XB + v [ 0 ] , YB + v [ 1 ]                ]
      ########################################################################
      self . Landmarks [ "Points" ] . append ( p                             )
    ##########################################################################
    self . CollectLandmarkParts (                                            )
    ##########################################################################
    return
  ############################################################################
  def GetLandmark ( self , major , minor = ""                              ) :
    ##########################################################################
    if            ( len ( major ) <= 0                                     ) :
      return      [                                                          ]
    ##########################################################################
    if            ( len ( minor ) <= 0                                     ) :
      return self . Landmarks [ major ]
    ##########################################################################
    return self   . Landmarks [ major ] [ minor ]
  ############################################################################
  def LandmarkToNpArray     ( self , major , minor = ""                    ) :
    F =  self . GetLandmark (        major , minor                           )
    return np . array       ( F , dtype = np.int32                           )
  ############################################################################
  def LandmarksToFace             ( self                                   ) :
    ##########################################################################
    x = -1
    y = -1
    r = -1
    b = -1
    ##########################################################################
    for p in self . Landmarks [ "Points" ]                                   :
      ########################################################################
      XX = p [ 0 ]
      YY = p [ 1 ]
      ########################################################################
      if ( x < 0 ) :
        x = XX
      elif ( x > XX ) :
        x = XX
      ########################################################################
      if ( y < 0 ) :
        y = YY
      elif ( y > YY ) :
        y = YY
      ########################################################################
      if ( r < 0 ) :
        r = XX
      elif ( r < XX ) :
        r = XX
      ########################################################################
      if ( b < 0 ) :
        b = YY
      elif ( b < YY ) :
        b = YY
    ##########################################################################
    WW  = ( r - x + 1 )
    HH  = ( b - y + 1 )
    ##########################################################################
    cx  = x + int ( WW / 2 )
    WW  = int ( WW * 11 / 10 )
    x   = cx - int ( WW / 2 )
    r   = x + WW
    ##########################################################################
    ZZ  = int ( HH * 11 / 10 )
    b   = y + ZZ
    y   = y - HH
    ##########################################################################
    WX  = self . Full [ "W" ]
    HX  = self . Full [ "H" ]
    ##########################################################################
    if ( x < 0 ) :
      x = 0
    ##########################################################################
    if ( r >= WX ) :
      r = WX - 1
    ##########################################################################
    if ( y < 0 ) :
      y = 0
    ##########################################################################
    if ( b >= HX ) :
      b = HX - 1
    ##########################################################################
    w   = int ( r - x + 1 )
    h   = int ( b - y + 1 )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
