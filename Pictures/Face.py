# -*- coding: utf-8 -*-
##############################################################################
## 人臉
##############################################################################
import os
import sys
import time
import datetime
import logging
import requests
import threading
import gettext
import binascii
import hashlib
import base64
import glob
##############################################################################
from   io           import BytesIO
from   wand . image import Image
from   PIL          import Image as Pillow
##############################################################################
import cv2
import dlib
import skimage
import numpy as np
##############################################################################
class Face        (                                                        ) :
  ############################################################################
  def __init__    ( self                                                   ) :
    ##########################################################################
    self . Full       = self . CreateRectangle ( 0 , 0 , 0 , 0               )
    self . Rectangle  = self . CreateRectangle ( 0 , 0 , 0 , 0               )
    self . Degree     = 0.0
    self . Weights    = 0.0
    self . NoseBridge = 0.0
    self . Features   = [ ]
    self . EmptyLandmarks (                                                  )
    ##########################################################################
    self . Classifier    = None
    self . EyesDetector  = None
    self . MouthDetector = None
    self . DlibDetector  = None
    self . CnnDetector   = None
    self . Fivemarks     = None
    self . Predictor     = None
    self . Facial        = None
    ##########################################################################
    return
  ############################################################################
  def __del__     ( self                                                   ) :
    pass
  ############################################################################
  def FromAnother      ( self , face                                       ) :
    ##########################################################################
    self . Classifier    = face . Classifier
    self . EyesDetector  = face . EyesDetector
    self . MouthDetector = face . MouthDetector
    self . DlibDetector  = face . DlibDetector
    self . CnnDetector   = face . CnnDetector
    self . Fivemarks     = face . Fivemarks
    self . Predictor     = face . Predictor
    self . Facial        = face . Facial
    ##########################################################################
    return
  ############################################################################
  def EmptyLandmarks   ( self                                              ) :
    ##########################################################################
    self . FaceBrief = { "Points"     : [ ]                                , \
                         "Nose"       : [ ]                                , \
                         "Center"     : [ ]                                , \
                         "Eyes"       : { "Right" : { "Left"   : [ ]       , \
                                                      "Center" : [ ]       , \
                                                      "Right"  : [ ]     } , \
                                          "Left"  : { "Left"   : [ ]       , \
                                                      "Center" : [ ]       , \
                                                      "Right"  : [ ]     } } }
    self . Landmarks = { "Points"   : [ ]                                  , \
                         "Shape"    : [ ]                                  , \
                         "Eyes"     : { "Right"   : [ ]                    , \
                                        "Left"    : [ ]                  } , \
                         "Eyebrow"  : { "Right"   : [ ]                    , \
                                        "Left"    : [ ]                  } , \
                         "Nose"     : { "Bridge"  : [ ]                    , \
                                        "Nostril" : [ ]                  } , \
                         "Mouth"    : { "Outer"   : [ ]                    , \
                                        "Inner"   : [ ]                    } }
    ##########################################################################
    return
  ############################################################################
  def setDegree       ( self , degree                                      ) :
    self . Degree = degree
    return
  ############################################################################
  def CreateRectangle ( self , x , y , w , h                               ) :
    ##########################################################################
    R    = x + w - 1
    B    = y + h - 1
    CX   = x + int ( w / 2 )
    CY   = y + int ( h / 2 )
    ##########################################################################
    RECT =            { "X"     : x                                          ,
                        "Y"     : y                                          ,
                        "W"     : w                                          ,
                        "H"     : h                                          ,
                        "R"     : R                                          ,
                        "B"     : B                                          ,
                        "CX"    : CX                                         ,
                        "CY"    : CY                                         ,
                        "Angle" : 0.0                                        }
    ##########################################################################
    return RECT
  ############################################################################
  def RectangleToXYWH             ( self , rect                            ) :
    ##########################################################################
    x = rect                      [ "X"                                      ]
    y = rect                      [ "Y"                                      ]
    w = rect                      [ "W"                                      ]
    h = rect                      [ "H"                                      ]
    ##########################################################################
    return x , y , w , h
  ############################################################################
  def RectangleFromOpenCV         ( self , rect                            ) :
    ##########################################################################
    x = rect                      [ 0                                        ]
    y = rect                      [ 1                                        ]
    w = rect                      [ 2                                        ]
    h = rect                      [ 3                                        ]
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ScaleRectangle              ( self , rect , ratio                    ) :
    ##########################################################################
    x  = rect                     [ "X"                                      ]
    y  = rect                     [ "Y"                                      ]
    w  = rect                     [ "W"                                      ]
    h  = rect                     [ "H"                                      ]
    CX = rect                     [ "CX"                                     ]
    CY = rect                     [ "CY"                                     ]
    ##########################################################################
    WW = int                      ( w * ratio                                )
    HH = int                      ( h * ratio                                )
    ##########################################################################
    x  = CX - int                 ( WW / 2                                   )
    y  = CY - int                 ( HH / 2                                   )
    w  = WW
    h  = HH
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def RestraintRectangle          ( self , Outer , Inner                   ) :
    ##########################################################################
    X1   = Outer                  [ "X"                                      ]
    Y1   = Outer                  [ "Y"                                      ]
    R1   = Outer                  [ "R"                                      ]
    B1   = Outer                  [ "B"                                      ]
    ##########################################################################
    X2   = Inner                  [ "X"                                      ]
    Y2   = Inner                  [ "Y"                                      ]
    R2   = Inner                  [ "R"                                      ]
    B2   = Inner                  [ "B"                                      ]
    ##########################################################################
    if                            ( X2 < X1                                ) :
      X2 = X1
    if                            ( Y2 < Y1                                ) :
      Y2 = Y1
    if                            ( R2 > R1                                ) :
      R2 = R1
    if                            ( B2 > B1                                ) :
      B2 = B1
    ##########################################################################
    x    = X2
    y    = Y2
    w    = int                    ( R2 - X2 + 1                              )
    h    = int                    ( B2 - Y2 + 1                              )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToSquareRectangle           ( self , rect                            ) :
    ##########################################################################
    CX   = rect                   [ "CX"                                     ]
    CY   = rect                   [ "CY"                                     ]
    WW   = rect                   [ "W"                                      ]
    HH   = rect                   [ "H"                                      ]
    ##########################################################################
    if                            ( WW > HH                                ) :
      HH = WW
    else                                                                     :
      WW = HH
    ##########################################################################
    x    = CX - int               ( WW / 2                                   )
    y    = CY - int               ( HH / 2                                   )
    w    = WW
    h    = HH
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def MultiplyRectangle           ( self , rect , ratio                    ) :
    ##########################################################################
    XX = rect                     [ "X"                                      ]
    YY = rect                     [ "Y"                                      ]
    WW = rect                     [ "W"                                      ]
    HH = rect                     [ "H"                                      ]
    ##########################################################################
    x  = int                      ( XX * ratio                               )
    y  = int                      ( YY * ratio                               )
    w  = int                      ( WW * ratio                               )
    h  = int                      ( HH * ratio                               )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToDlibRectangle       ( self , rect                                  ) :
    ##########################################################################
    x = rect                [ "X"                                            ]
    y = rect                [ "Y"                                            ]
    r = rect                [ "R"                                            ]
    b = rect                [ "B"                                            ]
    ##########################################################################
    return dlib . rectangle ( left = x , top = y , right = r , bottom = b    )
  ############################################################################
  def setFull                            ( self  , width , height          ) :
    ##########################################################################
    self . Full = self . CreateRectangle ( 0 , 0 , width , height            )
    ##########################################################################
    return self . Full
  ############################################################################
  def setRectangle          ( self , rect                                  ) :
    ##########################################################################
    self . Rectangle = rect
    ##########################################################################
    return self . Rectangle
  ############################################################################
  def setRectangleFromOpenCV ( self , rect                                 ) :
    ##########################################################################
    self . Rectangle = self . RectangleFromOpenCV ( rect                     )
    ##########################################################################
    return self . Rectangle
  ############################################################################
  def WithinRadius          ( self , A , B , Radius                        ) :
    ##########################################################################
    R2 = Radius * Radius
    dX = A [ "CX" ] - B [ "CX" ]
    dY = A [ "CY" ] - B [ "CY" ]
    D2 = ( dX * dX ) + ( dY * dY )
    ##########################################################################
    return                  ( D2 < R2                                        )
  ############################################################################
  def CollectFaceBrief      ( self                                         ) :
    ##########################################################################
    PTS  = self . FaceBrief [ "Points"                                       ]
    if                      ( len ( PTS ) != 5                             ) :
      return
    ##########################################################################
    self . FaceBrief [ "Nose" ] = PTS [ 4 ]
    ##########################################################################
    self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Left"   ] = PTS [ 0 ]
    self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Right"  ] = PTS [ 1 ]
    ##########################################################################
    X    = int ( int ( PTS [ 0 ] [ 0 ] + PTS [ 1 ] [ 0 ] ) / 2 )
    Y    = int ( int ( PTS [ 0 ] [ 1 ] + PTS [ 1 ] [ 1 ] ) / 2 )
    L    = [ X , Y ]
    self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Center" ] = L
    ##########################################################################
    self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Left"   ] = PTS [ 3 ]
    self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Right"  ] = PTS [ 2 ]
    ##########################################################################
    X    = int ( int ( PTS [ 2 ] [ 0 ] + PTS [ 3 ] [ 0 ] ) / 2 )
    Y    = int ( int ( PTS [ 2 ] [ 1 ] + PTS [ 3 ] [ 1 ] ) / 2 )
    R    = [ X , Y ]
    self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Center" ] = R
    ##########################################################################
    X    = int ( int ( L [ 0 ] + R [ 0 ] ) / 2 )
    Y    = int ( int ( L [ 1 ] + R [ 1 ] ) / 2 )
    C    = [ X , Y ]
    self . FaceBrief [ "Center" ] = C
    ##########################################################################
    return
  ############################################################################
  def CollectLandmarkParts ( self                                          ) :
    ##########################################################################
    ## 臉型
    ##########################################################################
    for i in range         ( 0 , 17                                        ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Shape" ] . append ( p                              )
    ##########################################################################
    ## 右眉(在左邊)
    ##########################################################################
    for i in range         ( 17 , 22                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyebrow" ] [ "Right" ] . append ( p                )
    ##########################################################################
    ## 左眉(在右邊)
    ##########################################################################
    for i in range         ( 22 , 27                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyebrow" ] [ "Left"  ] . append ( p                )
    ##########################################################################
    ## 鼻樑
    ##########################################################################
    for i in range         ( 27 , 31                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Nose" ] [ "Bridge"  ] . append ( p                 )
    ##########################################################################
    ## 鼻孔部
    ##########################################################################
    for i in range         ( 31 , 36                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Nose" ] [ "Nostril" ] . append ( p                 )
    ##########################################################################
    ## 右眼(在左邊)
    ##########################################################################
    for i in range         ( 36 , 42                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyes" ] [ "Right" ] . append ( p                   )
    ##########################################################################
    ## 左眼(在右邊)
    ##########################################################################
    for i in range         ( 42 , 48                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Eyes" ] [ "Left"  ] . append ( p                   )
    ##########################################################################
    ## 外嘴唇
    ##########################################################################
    for i in range         ( 48 , 60                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Mouth" ] [ "Outer" ] . append ( p                  )
    ##########################################################################
    ## 內嘴唇
    ##########################################################################
    for i in range         ( 60 , 68                                       ) :
      p    = self . Landmarks [ "Points" ] [ i ]
      self . Landmarks [ "Mouth" ] [ "Inner" ] . append ( p                  )
    ##########################################################################
    return
  ############################################################################
  def ImportDlibLandmarks  ( self , shape , points = 68                    ) :
    ##########################################################################
    self . EmptyLandmarks  (                                                 )
    ##########################################################################
    if                     ( points ==  5                                  ) :
      ########################################################################
      for i in range       ( 0 , 5                                        ) :
        ######################################################################
        p    =             [ shape . part ( i ) . x , shape . part ( i ) . y ]
        self . FaceBrief [ "Points" ] . append ( p                           )
      ########################################################################
      self   . CollectFaceBrief (                                            )
      ########################################################################
      return
    ##########################################################################
    if                     ( points != 68                                  ) :
      return
    ##########################################################################
    for i in range         ( 0 , 68                                        ) :
      ######################################################################
      p    =               [ shape . part ( i ) . x , shape . part ( i ) . y ]
      self . Landmarks [ "Points" ] . append ( p                             )
    ##########################################################################
    self . CollectLandmarkParts (                                            )
    ##########################################################################
    return
  ############################################################################
  def AssignLandmarks           ( self , base , points                     ) :
    ##########################################################################
    XB     = base               [ 0                                          ]
    YB     = base               [ 1                                          ]
    ##########################################################################
    self   . EmptyLandmarks     (                                            )
    ##########################################################################
    for v in points                                                          :
      ########################################################################
      p    =                    [ XB + v [ 0 ] , YB + v [ 1 ]                ]
      ########################################################################
      self . Landmarks [ "Points" ] . append ( p                             )
    ##########################################################################
    self . CollectLandmarkParts (                                            )
    ##########################################################################
    return
  ############################################################################
  def GetLandmark ( self , major , minor = ""                              ) :
    ##########################################################################
    if            ( len ( major ) <= 0                                     ) :
      return      [                                                          ]
    ##########################################################################
    if            ( len ( minor ) <= 0                                     ) :
      return self . Landmarks [ major ]
    ##########################################################################
    return self   . Landmarks [ major ] [ minor ]
  ############################################################################
  def LandmarkToNpArray     ( self , major , minor = ""                    ) :
    F =  self . GetLandmark (        major , minor                           )
    return np . array       ( F , dtype = np.int32                           )
  ############################################################################
  def LandmarksToFace             ( self                                   ) :
    ##########################################################################
    x = -1
    y = -1
    r = -1
    b = -1
    ##########################################################################
    for p in self . Landmarks [ "Points" ]                                   :
      ########################################################################
      XX = p [ 0 ]
      YY = p [ 1 ]
      ########################################################################
      if ( x < 0 ) :
        x = XX
      elif ( x > XX ) :
        x = XX
      ########################################################################
      if ( y < 0 ) :
        y = YY
      elif ( y > YY ) :
        y = YY
      ########################################################################
      if ( r < 0 ) :
        r = XX
      elif ( r < XX ) :
        r = XX
      ########################################################################
      if ( b < 0 ) :
        b = YY
      elif ( b < YY ) :
        b = YY
    ##########################################################################
    WW  = ( r - x + 1 )
    HH  = ( b - y + 1 )
    ##########################################################################
    cx  = x + int ( WW / 2 )
    WW  = int ( WW * 11 / 10 )
    x   = cx - int ( WW / 2 )
    r   = x + WW
    ##########################################################################
    ZZ  = int ( HH * 11 / 10 )
    b   = y + ZZ
    y   = y - HH
    ##########################################################################
    WX  = self . Full [ "W" ]
    HX  = self . Full [ "H" ]
    ##########################################################################
    if ( x < 0 ) :
      x = 0
    ##########################################################################
    if ( r >= WX ) :
      r = WX - 1
    ##########################################################################
    if ( y < 0 ) :
      y = 0
    ##########################################################################
    if ( b >= HX ) :
      b = HX - 1
    ##########################################################################
    w   = int ( r - x + 1 )
    h   = int ( b - y + 1 )
    ##########################################################################
    return self . CreateRectangle ( x , y , w , h                            )
  ############################################################################
  def ToFullFaceRectangle          ( self                                  ) :
    ##########################################################################
    SS = self . LandmarksToFace    (                                         )
    QQ = self . ToSquareRectangle  ( SS                                      )
    SS = self . RestraintRectangle ( self . Full , QQ                        )
    ##########################################################################
    return SS
  ############################################################################
  def ToEnhanceFaceRectangle       ( self , rect , ratio                   ) :
    ##########################################################################
    R = self . ScaleRectangle      (        rect , ratio                     )
    Q = self . ToSquareRectangle   ( R                                       )
    S = self . RestraintRectangle  ( self . Full , Q                         )
    ##########################################################################
    return S
  ############################################################################
  def ToFaceDescriptor              ( self , image , rectangle             ) :
    ##########################################################################
    try                                                                      :
      shape      = self . Predictor ( image , rectangle                      )
      descriptor = self . Facial . compute_face_descriptor ( image , shape   )
    except                                                                   :
      return                        [                                        ]
    return np . array               ( descriptor                             )
  ############################################################################
  def FaceAlignDegree               ( self                                 ) :
    ##########################################################################
    LEC = self . FaceBrief [ "Eyes" ] [ "Left"  ] [ "Center" ]
    REC = self . FaceBrief [ "Eyes" ] [ "Right" ] [ "Center" ]
    ##########################################################################
    dX  = int                       ( REC [ 0 ] - LEC [ 0 ]                  )
    dY  = int                       ( REC [ 1 ] - LEC [ 1 ]                  )
    ##########################################################################
    r   = np . degrees             ( np . arctan2 ( dY , dX ) ) + 540
    k   = int                      ( r / 360                                 )
    r   = r -                      ( k * 360                                 )
    ##########################################################################
    return                         ( 360.0 - r                               )
  ############################################################################
  def GetRotationDegree            ( self , gray                           ) :
    ##########################################################################
    rect  = self . ToDlibRectangle ( self  . Rectangle                       )
    shape = self . Fivemarks       ( gray  , rect                            )
    self  . ImportDlibLandmarks    ( shape , 5                               )
    ##########################################################################
    return self. FaceAlignDegree   (                                         )
  ############################################################################
  def GetNoseAngle                 ( self                                  ) :
    ##########################################################################
    T   = self . Landmarks [ "Nose" ] [ "Bridge" ] [ 0 ]
    B   = self . Landmarks [ "Nose" ] [ "Bridge" ] [ 1 ]
    dX  = int                      ( T [ 0 ] - B [ 0 ]                       )
    dY  = int                      ( T [ 1 ] - B [ 1 ]                       )
    ##########################################################################
    r   = np . degrees             ( np . arctan2 ( dY , dX ) ) + 540
    k   = int                      ( r / 360                                 )
    r   = r -                      ( k * 360                                 )
    ##########################################################################
    return                         ( 360.0 - r                               )
  ############################################################################
  def ToFaces                      ( self                                  , \
                                     gray                                  , \
                                     scale     = 1.05                      , \
                                     neighbors = 5                         , \
                                     minsize   = ( 32 , 32 )               ) :
    return self . Classifier . detectMultiScale                              (
             gray                                                          , \
             scaleFactor  = scale                                          , \
             minNeighbors = neighbors                                      , \
             minSize      = minsize                                          )
  ############################################################################
  def ToEyes                       ( self                                  , \
                                     gray                                  , \
                                     scale     = 1.1                       , \
                                     neighbors = 10                        , \
                                     minsize   = ( 15 , 10 )               ) :
    return self . EyesDetector . detectMultiScale                            (
             gray                                                          , \
             scaleFactor  = scale                                          , \
             minNeighbors = neighbors                                      , \
             minSize      = minsize                                          )
  ############################################################################
  def ToMouthes                    ( self                                  , \
                                     gray                                  , \
                                     scale     = 1.1                       , \
                                     neighbors = 10                        , \
                                     minsize   = ( 15 , 10 )               ) :
    return self . MouthDetector . detectMultiScale                           (
             gray                                                          , \
             scaleFactor  = scale                                          , \
             minNeighbors = neighbors                                      , \
             minSize      = minsize                                          )
  ############################################################################
  def FilterAccurateFaces              ( self                              , \
                                         gray                              , \
                                         minRect = ( 48 , 48 )             ) :
    ##########################################################################
    Faces     =                        [                                     ]
    ##########################################################################
    F         = self . ToFaces         ( gray                                )
    if                                 ( len ( F ) <= 0                    ) :
      return Faces
    ##########################################################################
    for ( x , y , w , h ) in F                                               :
      ########################################################################
      if                               ( w < minRect [ 0 ]                 ) :
        continue
      ########################################################################
      if                               ( h < minRect [ 1 ]                 ) :
        continue
      ########################################################################
      ROI     = gray                   [ y:y+h , x:x+w                       ]
      ########################################################################
      eyes    = self . ToEyes          ( ROI                                 )
      if                               ( len ( eyes    ) < 2               ) :
        continue
      ########################################################################
      mouthes = self . ToMouthes       ( ROI                                 )
      if                               ( len ( mouthes ) < 1               ) :
        continue
      ########################################################################
      R       = self . CreateRectangle ( x , y , w , h                       )
      Faces   . append                 ( R                                   )
    ##########################################################################
    return Faces
  ############################################################################
  def FeatureWeights                ( self                                 ) :
    ##########################################################################
    t    = 0
    for i in range ( 0 , 128 ) :
      v  = self  . Features [ i ]
      t += ( v * v )
    ##########################################################################
    self . Weights = t
    ##########################################################################
    return
  ############################################################################
  def ToFeatures                    ( self , image , gray                  ) :
    ##########################################################################
    FR    = self . Rectangle
    ##########################################################################
    DR    = self . ToDlibRectangle  ( FR                                     )
    shape = self . Predictor        ( gray  , DR                             )
    self  . ImportDlibLandmarks     ( shape , 68                             )
    v     = self . ToFaceDescriptor ( image , DR                             )
    ##########################################################################
    self  . Features = v
    ##########################################################################
    return v
  ############################################################################
  def AppendFaceRegion      ( self , DB , TABLE , Region , PICTURE , OWNER ) :
    ##########################################################################
    x        = Region       [ "X"                                            ]
    y        = Region       [ "Y"                                            ]
    width    = Region       [ "W"                                            ]
    height   = Region       [ "H"                                            ]
    right    = Region       [ "R"                                            ]
    bottom   = Region       [ "B"                                            ]
    cx       = Region       [ "CX"                                           ]
    cy       = Region       [ "CY"                                           ]
    angle    = Region       [ "Angle"                                        ]
    ##########################################################################
    HEAD     = 5100000000000000000
    UUID     = DB . LastUuid ( TABLE , "uuid" , HEAD                         )
    QQ       = f"""insert into {TABLE}
                   ( `uuid` ,
                     `picture` ,
                     `owner` ,
                     `x` ,
                     `y` ,
                     `width` ,
                     `height` ,
                     `right` ,
                     `bottom` ,
                     `cx` ,
                     `cy` ,
                     `rotation` )
                     values
                     ( {UUID} ,
                       {PICTURE} ,
                       {OWNER} ,
                       {x} ,
                       {y} ,
                       {width} ,
                       {height} ,
                       {right} ,
                       {bottom} ,
                       {cx} ,
                       {cy} ,
                       {angle} ) ;"""
    QQ = " " . join ( QQ . split ( ) )
    DB       . Query         ( QQ                                            )
    ##########################################################################
    return UUID
  ############################################################################
  def AppendFaceFeatures ( self , DB , TABLE , PICTURE , OWNER , FACE      ) :
    ##########################################################################
    weights = self . Weights
    nose    = self . NoseBridge
    FS      = " , " . join ( str(x) for x in self . Features )
    ##########################################################################
    KU      = [ ]
    for i in range ( 1 , 129 ) :
      V     = "{:03d}".format(i)
      K     = f"`f{V}`"
      KU    . append ( K )
    KS      = " , " . join ( KU )
    ##########################################################################
    HEAD     = 8100000000000000000
    UUID     = DB . LastUuid ( TABLE , "uuid" , HEAD                         )
    ##########################################################################
    QQ       = f"""insert into {TABLE}
                   ( `uuid` ,
                     `picture` ,
                     `owner` ,
                     `face` ,
                     `weights` ,
                     `nose` ,
                     {KS} )
                     values
                     ( {UUID} ,
                       {PICTURE} ,
                       {OWNER} ,
                       {FACE} ,
                       {weights} ,
                       {nose} ,
                       {FS} ) ;"""
    QQ = " " . join ( QQ . split ( ) )
    DB       . Query ( QQ )
    ##########################################################################
    return UUID
  ############################################################################
  def AssurePictureAnalyzLevel ( DB , TABLE , PICTURE , LEVEL              ) :
    ##########################################################################
    QQ = f"""insert into {TABLE}
             ( `uuid` , `type` ,`name` , `value` )
             values
             ( {PICTURE} , 52 , 'Face-Features' , {LEVEL} ) ;"""
    QQ = " " . join            ( QQ . split ( )                              )
    DB . Query                 ( QQ                                          )
    ##########################################################################
    return
  ############################################################################
  ############################################################################
  ############################################################################
##############################################################################
