# -*- coding: utf-8 -*-
##############################################################################
## PictureViewer
##############################################################################
import os
import sys
import time
import requests
import threading
import json
import binascii
import hashlib
import base64
##############################################################################
from   io                              import BytesIO
from   wand . image                    import Image
from   PIL                             import Image   as Pillow
##############################################################################
from   PySide6                         import QtCore
from   PySide6                         import QtGui
from   PySide6                         import QtWidgets
from   PySide6 . QtCore                import *
from   PySide6 . QtGui                 import *
from   PySide6 . QtWidgets             import *
from   AITK    . Qt6                   import *
##############################################################################
from   AITK    . Essentials . Relation import Relation
from   AITK    . Calendars  . StarDate import StarDate
from   AITK    . Calendars  . Periode  import Periode
from   AITK    . Pictures   . Picture6 import Picture as Picture
from   AITK    . Pictures   . Gallery  import Gallery as GalleryItem
##############################################################################
class PictureViewer      ( QScrollArea , VirtualGui                        ) :
  ############################################################################
  AssignImage   = Signal ( QImage                                            )
  AssignGallery = Signal ( list                                              )
  emitProgress  = Signal ( int , int                                         )
  emitComplete  = Signal (                                                   )
  PlaceMdi      = Signal ( QWidget                                           )
  PlaceStack    = Signal ( QWidget                                           )
  emitBustle    = Signal (                                                   )
  emitVacancy   = Signal (                                                   )
  OnBusy        = Signal (                                                   )
  GoRelax       = Signal (                                                   )
  ############################################################################
  def __init__           ( self , parent = None , plan = None              ) :
    ##########################################################################
    super (                    ) . __init__ ( parent                         )
    super ( VirtualGui  , self ) . __init__ (                                )
    ##########################################################################
    self . Initialize                       ( self                           )
    self . setPlanFunction                  ( plan                           )
    ##########################################################################
    self . Image         = None
    self . Pictures      =         [                                         ]
    self . LABELs        =         [                                         ]
    self . SOLO          = None
    self . Ratio         = QSize   ( 100 , 100                               )
    self . ZoomLevel     = 10
    self . MaxWidth      = 0
    self . AtPlace       = 0
    self . AtMenu        = False
    self . LoadingPB     = None
    self . FetchTableKey = "PicturesView"
    ##########################################################################
    self . setPrepared             ( True                                    )
    ##########################################################################
    self . AssignImage   . connect ( self . setImage                         )
    self . AssignGallery . connect ( self . setGallery                       )
    self . emitProgress  . connect ( self . assignProgress                   )
    self . emitComplete  . connect ( self . completeProgress                 )
    self . emitBustle    . connect ( self . DoBustle                         )
    self . emitVacancy   . connect ( self . DoVacancy                        )
    self . OnBusy        . connect ( self . AtBusy                           )
    self . GoRelax       . connect ( self . OnRelax                          )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 640 , 480 )                       )
  ############################################################################
  def focusInEvent            ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusIn ( event )                   ) :
      return
    ##########################################################################
    super ( ) . focusInEvent  ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def focusOutEvent           ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusOut ( event )                  ) :
      return
    ##########################################################################
    super ( ) . focusOutEvent ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def contextMenuEvent           ( self , event                            ) :
    ##########################################################################
    if                           ( self . Menu ( event . pos ( ) )         ) :
      event . accept             (                                           )
      return
    ##########################################################################
    super ( ) . contextMenuEvent ( event                                     )
    ##########################################################################
    return
  ############################################################################
  def resizeEvent           ( self , event                                 ) :
    ##########################################################################
    if                      ( self . Relocation ( )                        ) :
      event . accept        (                                                )
      return
    ##########################################################################
    super ( ) . resizeEvent ( event                                          )
    ##########################################################################
    return
  ############################################################################
  def showEvent           ( self , event                                   ) :
    ##########################################################################
    super ( ) . showEvent ( event                                            )
    self . Relocation     (                                                  )
    ##########################################################################
    return
  ############################################################################
  def PrepareForActions ( self                                             ) :
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def AttachActions   ( self      ,                  Enabled               ) :
    ##########################################################################
    self . LinkAction ( "ZoomIn"  , self . ZoomIn  , Enabled                 )
    self . LinkAction ( "ZoomOut" , self . ZoomOut , Enabled                 )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared (                   ) ) :
      return False
    ##########################################################################
    self . setActionLabel    ( "Label" , self . windowTitle ( )              )
    self . AttachActions     ( True                                          )
    self . attachActionsTool (                                               )
    self . statusMessage     ( self . windowTitle (                        ) )
    ##########################################################################
    return True
  ############################################################################
  def FocusOut                 ( self                                      ) :
    ##########################################################################
    if                         ( not self . isPrepared (                 ) ) :
      return True
    ##########################################################################
    if                         ( not self . AtMenu                         ) :
      ########################################################################
      self . setActionLabel    ( "Label" , ""                                )
      self . AttachActions     ( False                                       )
      self . detachActionsTool (                                             )
    ##########################################################################
    return False
  ############################################################################
  def closeEvent     ( self , event                                        ) :
    ##########################################################################
    if               ( self . Shutdown ( )                                 ) :
      event . accept (                                                       )
    else                                                                     :
      event . ignore (                                                       )
    ##########################################################################
    return
  ############################################################################
  def Shutdown               ( self                                        ) :
    ##########################################################################
    self . setActionLabel    ( "Label" , ""                                  )
    self . AttachActions     ( False                                         )
    self . detachActionsTool (                                               )
    self . Leave . emit      ( self                                          )
    ##########################################################################
    return True
  ############################################################################
  def DoBustle    ( self                                                   ) :
    self . Bustle (                                                          )
    return
  ############################################################################
  def setBustle               ( self                                       ) :
    self . emitBustle  . emit (                                              )
    return
  ############################################################################
  def DoVacancy    ( self                                                  ) :
    self . Vacancy (                                                         )
    return
  ############################################################################
  def setVacancy              ( self                                       ) :
    self . emitVacancy . emit (                                              )
    return
  ############################################################################
  def AtBusy           ( self                                              ) :
    ##########################################################################
    self . doStartBusy (                                                     )
    ##########################################################################
    return
  ############################################################################
  def DoBusy             ( self                                            ) :
    ##########################################################################
    self . OnBusy . emit (                                                   )
    ##########################################################################
    return
  ############################################################################
  def OnRelax          ( self                                              ) :
    ##########################################################################
    self . doStopBusy  (                                                     )
    ##########################################################################
    return
  ############################################################################
  def DoRelax              ( self                                          ) :
    ##########################################################################
    self . GoRelax . emit  (                                                 )
    ##########################################################################
    return
  ############################################################################
  def DoMdi                ( self                                          ) :
    ##########################################################################
    self . AtPlace = 1
    self . PlaceMdi . emit ( self                                            )
    ##########################################################################
    return
  ############################################################################
  def DoStack                ( self                                        ) :
    ##########################################################################
    self . AtPlace = 0
    self . PlaceStack . emit ( self                                          )
    ##########################################################################
    return
  ############################################################################
  def PrepareProgress      ( self                                          ) :
    ##########################################################################
    if                     ( self . LoadingPB not in self . EmptySet       ) :
      return
    ##########################################################################
    WPLAN = self . GetPlan (                                                 )
    ##########################################################################
    if                     ( self . NotOkay ( WPLAN )                      ) :
      return
    ##########################################################################
    self  . LoadingPB = QProgressBar       (                                 )
    self  . LoadingPB . setFormat          ( "%v / %m"                       )
    self  . LoadingPB . setMinimumWidth    ( 320                             )
    self  . LoadingPB . setMaximumWidth    ( 320                             )
    self  . LoadingPB . setRange           ( 0 , 1                           )
    self  . LoadingPB . setValue           ( 0                               )
    ##########################################################################
    WPLAN . statusBar . addPermanentWidget ( self . LoadingPB                )
    ##########################################################################
    return
  ############################################################################
  def completeProgress ( self                                              ) :
    ##########################################################################
    if                 ( self . NotOkay ( self  . LoadingPB )              ) :
      return
    ##########################################################################
    M    = self . LoadingPB
    self . LoadingPB = None
    ##########################################################################
    M    . deleteLater (                                                     )
    ##########################################################################
    return
  ############################################################################
  def stopProgress             ( self                                      ) :
    ##########################################################################
    self . emitComplete . emit (                                             )
    ##########################################################################
    return
  ############################################################################
  def assignProgress            ( self , Index , Total                     ) :
    ##########################################################################
    if                          ( self . NotOkay ( self  . LoadingPB )     ) :
      return
    ##########################################################################
    self . LoadingPB . setRange ( 0 , Total                                  )
    self . LoadingPB . setValue (     Index                                  )
    ##########################################################################
    return
  ############################################################################
  def setProgress              ( self , Index , Total                      ) :
    ##########################################################################
    self . emitProgress . emit (        Index , Total                        )
    ##########################################################################
    return
  ############################################################################
  def isScaling ( self                                                     ) :
    ##########################################################################
    if          ( 100 != self . Ratio . width  (                         ) ) :
      return True
    ##########################################################################
    if          ( 100 != self . Ratio . height (                         ) ) :
      return True
    ##########################################################################
    return   False
  ############################################################################
  def toPixmap                  ( self , image                             ) :
    ##########################################################################
    PIX = QPixmap . fromImage   (        image                               )
    ##########################################################################
    if                          ( not self . isScaling (                 ) ) :
      return PIX
    ##########################################################################
    WS  = image        . size   (                                            )
    SW  = ws           . width  (                                            )
    SH  = ws           . height (                                            )
    RW  = self . Ratio . width  (                                            )
    RH  = self . Ratio . height (                                            )
    WW  = int                   ( int ( SW * RW ) / 100                      )
    HH  = int                   ( int ( SH * RH ) / 100                      )
    PIX = PIX . scaled          ( QSize ( WW , HH )                          )
    ##########################################################################
    return PIX
  ############################################################################
  def AssignPixmap          ( self                                         ) :
    ##########################################################################
    if                      ( self . Image in self . EmptySet              ) :
      return
    ##########################################################################
    PIX   = self . toPixmap ( self . Image                                   )
    ##########################################################################
    label = QLabel          (                                                )
    label . setAlignment    ( Qt . AlignCenter                               )
    label . setPixmap       ( PIX                                            )
    self  . setWidget       ( label                                          )
    ##########################################################################
    return
  ############################################################################
  def setImage          ( self , image                                     ) :
    ##########################################################################
    self . Image = image
    self . AssignPixmap (                                                    )
    ##########################################################################
    return
  ############################################################################
  def setGallery              ( self , Pictures                            ) :
    ##########################################################################
    WW      = 0
    HH      = 0
    G       = 8
    GW      = G * int         ( len ( Pictures ) + 1                         )
    PIXs    =                 [                                              ]
    ##########################################################################
    for IMAGE in Pictures                                                    :
      ########################################################################
      PIX   = self . toPixmap ( IMAGE                                        )
      ########################################################################
      if                      ( PIX in self . EmptySet                     ) :
        continue
      ########################################################################
      PIXs  . append          ( PIX                                          )
      WX    = PIX  . width    (                                              )
      WY    = PIX  . height   (                                              )
      ########################################################################
      if                      ( WX > WW                                    ) :
       WW   = WX
      ########################################################################
      HH    = HH   + WY
    ##########################################################################
    WIDGET  = QWidget         (                                              )
    WIDGET  . resize          ( WW , HH + GW                                 )
    ##########################################################################
    YY      = 0
    self . MaxWidth  = WW
    self . LABELs = [ ]
    for PIX in PIXs                                                          :
      ########################################################################
      WY    = PIX  . height   (                                              )
      YY    = YY + G
      ########################################################################
      label = QLabel          ( WIDGET                                       )
      label . setAlignment    ( Qt . AlignCenter                             )
      label . setPixmap       ( PIX                                          )
      ########################################################################
      label . setGeometry     ( 0 , YY , WW , WY                             )
      self . LABELs . append  ( label                                        )
      ########################################################################
      YY    = YY + WY
    ##########################################################################
    self    . setWidget       ( WIDGET                                       )
    ##########################################################################
    return
  ############################################################################
  def BackgroundLoadFile      ( self , filename                            ) :
    ##########################################################################
    IMG  = QImage             ( filename                                     )
    self . AssignImage . emit ( IMG                                          )
    ##########################################################################
    return
  ############################################################################
  def doZoom              ( self                                           ) :
    ##########################################################################
    S            = int    ( 10 * int ( self . ZoomLevel                    ) )
    self . Ratio = QSize  ( S , S                                            )
    ##########################################################################
    if                    ( self . Image != None                           ) :
      self . AssignPixmap (                                                  )
      return
    ##########################################################################
    if                    ( len ( self . Pictures ) > 0                    ) :
      self . setGallery   ( self . Pictures                                  )
      return
    ##########################################################################
    return
  ############################################################################
  def ZoomIn            ( self                                             ) :
    ##########################################################################
    self . ZoomLevel = self . ZoomLevel + 1
    ##########################################################################
    self . doZoom       (                                                    )
    ##########################################################################
    return
  ############################################################################
  def ZoomOut           ( self                                             ) :
    ##########################################################################
    if                  ( self . ZoomLevel <= 1                            ) :
      return
    ##########################################################################
    self . ZoomLevel = self . ZoomLevel - 1
    ##########################################################################
    self . doZoom       (                                                    )
    ##########################################################################
    return
  ############################################################################
  def SoloResize ( self                                                    ) :
    ##########################################################################
    if           ( self . Image in self . EmptySet                         ) :
      return
    ##########################################################################
    ##########################################################################
    return
  ############################################################################
  def MultipleResize ( self ) :
    ##########################################################################
    if ( len ( self . Pictures ) <= 0 ) :
      return
    ##########################################################################
    if                         ( len ( self . LABELs   ) <= 0              ) :
      return
    ##########################################################################
    return
    ##########################################################################
    WIDGET   = self . widget   (                                             )
    VSW      = self . verticalScrollBar (                                    )
    ##########################################################################
    DW       = 0
    if                         ( VSW not in self . EmptySet                ) :
      DW     = VSW . width     (                                             )
    ##########################################################################
    MX       = self . MaxWidth + DW + 2
    WX       = self   . width  (                                             )
    WY       = self   . height (                                             )
    WW       = WIDGET . width  (                                             )
    HH       = WIDGET . height (                                             )
    LW       = WW
    ##########################################################################
    if                         ( MX >= WX                                  ) :
      LW     = self . MaxWidth
    else                                                                     :
      LW     = WX - DW - 2
    ##########################################################################
    WIDGET   . resize          ( LW , HH                                     )
    ##########################################################################
    for LABEL in self . LABELs                                               :
      ########################################################################
      H      = LABEL . height  (                                             )
      LABEL  . resize          ( LW , H                                      )
    ##########################################################################
    return
  ############################################################################
  def Relocation            ( self                                         ) :
    ##########################################################################
    if                      ( self . Image not in self . EmptySet          ) :
      ########################################################################
      self . SoloResize     (                                                )
      ########################################################################
      return False
    ##########################################################################
    if                      ( len ( self . Pictures ) <= 0                 ) :
      return False
    ##########################################################################
    self   . MultipleResize (                                                )
    ##########################################################################
    return   False
  ############################################################################
  def FetchImage                ( self , Uuid                              ) :
    ##########################################################################
    DB       = self . ConnectDB ( UsePure = True                             )
    if                          ( self . NotOkay ( DB )                    ) :
      return
    ##########################################################################
    self     . DoBusy           (                                            )
    self     . setBustle        (                                            )
    ##########################################################################
    FOUND    = False
    SUFFIX   = ""
    BLOB     = None
    PICTAB   = self . Tables    [ "Information"                              ]
    DPTTAB   = self . Tables    [ "Depot"                                    ]
    ##########################################################################
    QQ       = f"select `suffix` from {PICTAB} where ( `uuid` = {Uuid} ) ;"
    DB       . Query            ( QQ                                         )
    INF      = DB . FetchOne    (                                            )
    if                          ( ( INF != None ) and ( len ( INF ) > 0 )  ) :
      SUFFIX = INF              [ 0                                          ]
      FOUND  = True
    ##########################################################################
    if                          ( FOUND                                    ) :
      QQ     = f"select `file` from {DPTTAB} where ( `uuid` = {Uuid} ) ;"
      DB     . Query            ( QQ                                         )
      BLOBs  = DB . FetchOne    (                                            )
      if ( ( BLOBs != None ) and ( len ( BLOBs ) > 0 )                     ) :
        BLOB = BLOBs            [ 0                                          ]
      else                                                                   :
        FOUND  = False
    ##########################################################################
    self    . setVacancy        (                                            )
    self    . DoRelax           (                                            )
    DB      . Close             (                                            )
    ##########################################################################
    if                          ( not FOUND                                ) :
      return
    ##########################################################################
    if                          ( len ( SUFFIX ) <= 0                      ) :
      return
    ##########################################################################
    if                          ( BLOB == None                             ) :
      return
    ##########################################################################
    SS        = SUFFIX
    SS        = SS . lower      (                                            )
    ALLOWED   =                 [ "jpeg" , "jpg" , "png"                     ]
    if                          ( SS in ALLOWED                            ) :
      IMG     = QImage          (                                            )
      IMG     . loadFromData    ( BLOB , SUFFIX                              )
    else                                                                     :
      INTL    = Image           ( blob = bytes ( BLOB )                      )
      INTL    . format = "png"
      DAT     = BytesIO         (                                            )
      INTL    . save            ( file = DAT                                 )
      BLOB    = DAT . getvalue  (                                            )
      IMG     = QImage          (                                            )
      IMG     . loadFromData    ( BLOB , "png"                               )
    ##########################################################################
    self . AssignImage . emit   ( IMG                                        )
    ##########################################################################
    return
  ############################################################################
  def FetchGallery                   ( self , T1 , UUID , RELATED          ) :
    ##########################################################################
    DB          = self . ConnectDB   ( UsePure = True                        )
    if                               ( self . NotOkay ( DB )               ) :
      return
    ##########################################################################
    self        . DoBusy             (                                       )
    self        . setBustle          (                                       )
    ##########################################################################
    self        . Tables = self . ObtainsOwnerVariantTables                ( \
                                       DB                                  , \
                                       str ( UUID )                        , \
                                       int ( T1 )                          , \
                                       "PicturesView"                      , \
                                       self . Tables                         )
    ##########################################################################
    PICTAB      = self . Tables      [ "Information"                         ]
    DPTTAB      = self . Tables      [ "Depot"                               ]
    RELTAB      = self . Tables      [ "Relation"                            ]
    ##########################################################################
    Pictures    =                    [                                       ]
    GALM        = GalleryItem        (                                       )
    UUIDs       = GALM . GetPictures ( DB , RELTAB , UUID , T1 , RELATED     )
    ##########################################################################
    TOTAL       = len                ( UUIDs                                 )
    INDEX       = 0
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      INDEX     = int                ( INDEX + 1                             )
      self      . setProgress        ( INDEX , TOTAL                         )
      ########################################################################
      FOUND     = False
      SUFFIX    = ""
      BLOB      = None
      ########################################################################
      QQ        = f"select `suffix` from {PICTAB} where ( `uuid` = {UUID} ) ;"
      DB        . Query              ( QQ                                    )
      INF       = DB . FetchOne      (                                       )
      ########################################################################
      if ( ( INF != None ) and ( len ( INF ) > 0 ) )                         :
        SUFFIX  = INF                [ 0                                     ]
        FOUND   = True
      ########################################################################
      if                             ( FOUND                               ) :
        QQ      = f"select `file` from {DPTTAB} where ( `uuid` = {UUID} ) ;"
        DB      . Query              ( QQ                                    )
        BLOBs   = DB . FetchOne      (                                       )
        if ( ( BLOBs != None ) and ( len ( BLOBs ) > 0 )                   ) :
          BLOB  = BLOBs              [ 0                                     ]
        else                                                                 :
          FOUND = False
      ########################################################################
      if                             ( not FOUND                           ) :
        continue
      ########################################################################
      if                             ( len ( SUFFIX ) <= 0                 ) :
        continue
      ########################################################################
      if                             ( BLOB == None                        ) :
        continue
      ########################################################################
      SS        = SUFFIX
      SS        = SS . lower         (                                       )
      ALLOWED   =                    [ "jpeg" , "jpg" , "png"                ]
      ########################################################################
      if                             ( SS in ALLOWED                       ) :
        IMG     = QImage             (                                       )
        IMG     . loadFromData       ( BLOB , SUFFIX                         )
      else                                                                   :
        INTL    = Image              ( blob = bytes ( BLOB )                 )
        INTL    . format = "png"
        DAT     = BytesIO            (                                       )
        INTL    . save               ( file = DAT                            )
        BLOB    = DAT . getvalue     (                                       )
        IMG     = QImage             (                                       )
        IMG     . loadFromData       ( BLOB , "png"                          )
      ########################################################################
      if                             ( IMG not in self . EmptySet          ) :
        Pictures . append            ( IMG                                   )
      else                                                                   :
        print ( "Missing : " , UUID )
    ##########################################################################
    self        . stopProgress       (                                       )
    self        . setVacancy         (                                       )
    self        . DoRelax            (                                       )
    ##########################################################################
    DB          . Close              (                                       )
    ##########################################################################
    self . Pictures = Pictures
    ##########################################################################
    self . AssignGallery . emit      ( Pictures                              )
    ##########################################################################
    return
  ############################################################################
  def loadFile ( self , filename                                           ) :
    ##########################################################################
    self . Go  ( self . BackgroundLoadFile , ( filename , )                  )
    ##########################################################################
    return
  ############################################################################
  def loadUuid ( self , Uuid                                               ) :
    ##########################################################################
    self . Go  ( self . FetchImage , ( Uuid , )                              )
    ##########################################################################
    return
  ############################################################################
  def loadGallery          ( self , T1 , UUID , RELATED                    ) :
    ##########################################################################
    self . PrepareProgress (                                                 )
    ARGS =                 ( T1 , UUID , RELATED ,                           )
    self . Go              ( self . FetchGallery , ARGS                      )
    ##########################################################################
    return
  ############################################################################
  def Menu                            ( self , pos                         ) :
    ##########################################################################
    ##########################################################################
    return True
##############################################################################
