# -*- coding: utf-8 -*-
##############################################################################
## PictureViewer
##############################################################################
import os
import sys
import time
import requests
import threading
import json
import binascii
import hashlib
import base64
##############################################################################
from   io                              import BytesIO
from   wand . image                    import Image
from   PIL                             import Image   as Pillow
##############################################################################
from   PySide6                         import QtCore
from   PySide6                         import QtGui
from   PySide6                         import QtWidgets
from   PySide6 . QtCore                import *
from   PySide6 . QtGui                 import *
from   PySide6 . QtWidgets             import *
from   AITK    . Qt6                   import *
##############################################################################
from   AITK    . Essentials . Relation import Relation
from   AITK    . Calendars  . StarDate import StarDate
from   AITK    . Calendars  . Periode  import Periode
from   AITK    . Pictures   . Picture6 import Picture as PictureItem
from   AITK    . Pictures   . Gallery  import Gallery as GalleryItem
##############################################################################
class pvLabel            ( QLabel                                          ) :
  ############################################################################
  emitClicked = Signal   ( int                                               )
  ############################################################################
  def __init__           ( self , parent = None                            ) :
    ##########################################################################
    super ( ) . __init__ (        parent                                     )
    ##########################################################################
    self      . ID = -1
    ##########################################################################
    return
  ############################################################################
  def mouseDoubleClickEvent           ( self , event                       ) :
    ##########################################################################
    self      . emitClicked . emit    ( self . ID                            )
    ##########################################################################
    super ( ) . mouseDoubleClickEvent ( event                                )
    ##########################################################################
    return
##############################################################################
class PictureViewer         ( QScrollArea , VirtualGui                     ) :
  ############################################################################
  AssignImage      = Signal ( QImage                                         )
  AssignGallery    = Signal ( list                                           )
  emitProgress     = Signal ( int , int                                      )
  emitComplete     = Signal (                                                )
  emitEditUuid     = Signal ( str , dict                                     )
  emitEditFile     = Signal ( str                                            )
  PlaceMdi         = Signal ( QWidget                                        )
  PlaceStack       = Signal ( QWidget                                        )
  emitFullScreen   = Signal (                                                )
  emitNormalWindow = Signal (                                                )
  emitBustle       = Signal (                                                )
  emitVacancy      = Signal (                                                )
  OnBusy           = Signal (                                                )
  GoRelax          = Signal (                                                )
  CloseViewer      = Signal ( QWidget                                        )
  Leave            = Signal ( QWidget                                        )
  ############################################################################
  def __init__              ( self , parent = None , plan = None           ) :
    ##########################################################################
    super (                    ) . __init__ ( parent                         )
    super ( VirtualGui  , self ) . __init__ (                                )
    ##########################################################################
    self . Initialize                       ( self                           )
    self . setPlanFunction                  ( plan                           )
    ##########################################################################
    self . Image         = None
    self . Pictures      = [                                                 ]
    self . PCIDs         = [                                                 ]
    self . FILEs         = [                                                 ]
    self . LABELs        = [                                                 ]
    self . Ratio         = QSize   ( 100 , 100                               )
    self . SOLO          = None
    self . Method        = ""
    self . Filename      = ""
    self . PictureUuid   = 0
    self . PickedUuid    = 0
    self . ZoomLevel     = 10
    self . MaxWidth      = 0
    self . Border        = 10
    self . AtPlace       = 0
    self . imageIndex    = -1
    self . isFullScreen  = False
    self . AtMenu        = False
    self . LoadingPB     = None
    self . FetchTableKey = "PicturesView"
    ##########################################################################
    self . setPrepared             ( True                                    )
    ##########################################################################
    self . AssignImage   . connect ( self . setImage                         )
    self . AssignGallery . connect ( self . setGallery                       )
    self . emitProgress  . connect ( self . assignProgress                   )
    self . emitComplete  . connect ( self . completeProgress                 )
    self . emitBustle    . connect ( self . DoBustle                         )
    self . emitVacancy   . connect ( self . DoVacancy                        )
    self . OnBusy        . connect ( self . AtBusy                           )
    self . GoRelax       . connect ( self . OnRelax                          )
    ##########################################################################
    return
  ############################################################################
  def sizeHint                   ( self                                    ) :
    return self . SizeSuggestion ( QSize ( 640 , 480 )                       )
  ############################################################################
  def focusInEvent            ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusIn ( event )                   ) :
      return
    ##########################################################################
    super ( ) . focusInEvent  ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def focusOutEvent           ( self , event                               ) :
    ##########################################################################
    if                        ( self . focusOut ( event )                  ) :
      return
    ##########################################################################
    super ( ) . focusOutEvent ( event                                        )
    ##########################################################################
    return
  ############################################################################
  def contextMenuEvent           ( self , event                            ) :
    ##########################################################################
    if                           ( self . Menu ( event . pos ( ) )         ) :
      event . accept             (                                           )
      return
    ##########################################################################
    super ( ) . contextMenuEvent ( event                                     )
    ##########################################################################
    return
  ############################################################################
  def resizeEvent           ( self , event                                 ) :
    ##########################################################################
    if                      ( self . Relocation ( )                        ) :
      event . accept        (                                                )
      return
    ##########################################################################
    super ( ) . resizeEvent ( event                                          )
    ##########################################################################
    return
  ############################################################################
  def showEvent           ( self , event                                   ) :
    ##########################################################################
    super ( ) . showEvent ( event                                            )
    self . Relocation     (                                                  )
    ##########################################################################
    return
  ############################################################################
  def PrepareForActions             ( self                                 ) :
    ##########################################################################
    self . AppendSideActionWithIcon ( "EditPicture"                        , \
                                      ":/images/edit.png"                  , \
                                      self . EditPicture                     )
    self . AppendSideActionWithIcon ( "FullScreen"                         , \
                                      ":/images/fullscreen.png"            , \
                                      self . GoFullScreen                    )
    self . AppendSideActionWithIcon ( "NormalWindow"                       , \
                                      ":/images/GUI.png"                   , \
                                      self . GoNormalWindow                  )
    self . AppendSideActionWithIcon ( "MDI"                                , \
                                      ":/images/hidespeech.png"            , \
                                      self . DoMdi                           )
    self . AppendSideActionWithIcon ( "Stack"                              , \
                                      ":/images/computer.png"              , \
                                      self . DoStack                         )
    self . AppendSideActionWithIcon ( "CloseView"                          , \
                                      ":/images/delete.png"                , \
                                      self . CloseView                       )
    ##########################################################################
    self . SwitchSideTools          ( True                                   )
    ##########################################################################
    return
  ############################################################################
  def FitZoomRatio                ( self , r                               ) :
    ##########################################################################
    ATID     = -1
    CNT      = 0
    ZV       = int                ( self . ZoomLevel * 10                    )
    TOTAL    = r . count          (                                          )
    ##########################################################################
    while                         ( ( ATID < 0 ) and ( CNT < TOTAL )       ) :
      ########################################################################
      Z      = r . itemData       ( CNT                                      )
      ########################################################################
      if                          ( Z == ZV                                ) :
        ATID = CNT
      ########################################################################
      CNT    = CNT + 1
    ##########################################################################
    if                            ( ATID >= 0                              ) :
      ########################################################################
      r      . blockSignals       ( True                                     )
      r      . setCurrentIndex    ( ATID                                     )
      r      . blockSignals       ( False                                    )
    ##########################################################################
    TT       = self . windowTitle (                                          )
    TT       = f"{ZV}%\n\n{TT}"
    r        . setToolTip         ( TT                                       )
    ##########################################################################
    return
  ############################################################################
  def TryFitZoomRatio         ( self                                       ) :
    ##########################################################################
    r    = self . GetRatioBox (                                              )
    ##########################################################################
    if                        ( r in self . EmptySet                       ) :
      return
    ##########################################################################
    self . FitZoomRatio       ( r                                            )
    ##########################################################################
    return
  ############################################################################
  def HandleZoomRatio             ( self , Enabled                         ) :
    ##########################################################################
    r        = self . GetRatioBox (                                          )
    ##########################################################################
    if                            ( r in self . EmptySet                   ) :
      return
    ##########################################################################
    if                            ( not Enabled                            ) :
      return
    ##########################################################################
    ics      = QMetaMethod . fromSignal         ( r . currentIndexChanged    )
    ##########################################################################
    if                            ( r . isSignalConnected ( ics )          ) :
      ########################################################################
      r      . currentIndexChanged . disconnect (                            )

    ##########################################################################
    r        . currentIndexChanged . connect    ( self . ratioChanged        )
    ##########################################################################
    self     . FitZoomRatio       ( r                                        )
    ##########################################################################
    r        . setEditable        ( False                                    )
    r        . setEnabled         ( True                                     )
    ##########################################################################
    return
  ############################################################################
  def ToggleSideTools                         ( self , Enabled             ) :
    ##########################################################################
    if                                        ( self . isFullScreen        ) :
      ########################################################################
      self . HandleActions [ 1 ] . setVisible ( False                        )
      self . HandleActions [ 2 ] . setVisible ( True                         )
      ########################################################################
    else                                                                     :
      ########################################################################
      self . HandleActions [ 1 ] . setVisible ( True                         )
      self . HandleActions [ 2 ] . setVisible ( False                        )
    ##########################################################################
    if                                        ( 0 == self . AtPlace        ) :
      ########################################################################
      self . HandleActions [ 3 ] . setVisible ( True                         )
      self . HandleActions [ 4 ] . setVisible ( False                        )
      ########################################################################
    elif                                      ( 1 == self . AtPlace        ) :
      ########################################################################
      self . HandleActions [ 3 ] . setVisible ( False                        )
      self . HandleActions [ 4 ] . setVisible ( True                         )
    ##########################################################################
    self   . HandleActions [ 0 ] . setEnabled ( self . isEditable (        ) )
    ##########################################################################
    self   . HandleZoomRatio                  ( Enabled                      )
    ##########################################################################
    return
  ############################################################################
  def AttachActions        ( self      ,                  Enabled          ) :
    ##########################################################################
    self . LinkAction      ( "ZoomIn"  , self . ZoomIn  , Enabled            )
    self . LinkAction      ( "ZoomOut" , self . ZoomOut , Enabled            )
    self . ToggleSideTools (                              Enabled            )
    ##########################################################################
    return
  ############################################################################
  def FocusIn                ( self                                        ) :
    ##########################################################################
    if                       ( not self . isPrepared (                   ) ) :
      return False
    ##########################################################################
    self . setActionLabel    ( "Label" , self . windowTitle ( )              )
    self . AttachActions     ( True                                          )
    self . attachActionsTool (                                               )
    self . statusMessage     ( self . windowTitle (                        ) )
    ##########################################################################
    return True
  ############################################################################
  def FocusOut                 ( self                                      ) :
    ##########################################################################
    if                         ( not self . isPrepared (                 ) ) :
      return True
    ##########################################################################
    if                         ( not self . AtMenu                         ) :
      ########################################################################
      self . setActionLabel    ( "Label" , ""                                )
      self . AttachActions     ( False                                       )
      self . detachActionsTool (                                             )
    ##########################################################################
    return False
  ############################################################################
  def closeEvent     ( self , event                                        ) :
    ##########################################################################
    if               ( self . Shutdown ( )                                 ) :
      event . accept (                                                       )
    else                                                                     :
      event . ignore (                                                       )
    ##########################################################################
    return
  ############################################################################
  def Shutdown                              ( self                         ) :
    ##########################################################################
    r    = self . GetRatioBox               (                                )
    ##########################################################################
    if                                      ( r not in self . EmptySet     ) :
      ########################################################################
      r  . setToolTip                       ( ""                             )
      r  . currentIndexChanged . disconnect (                                )
      r  . setEditable                      ( True                           )
      r  . setEnabled                       ( False                          )
    ##########################################################################
    self . setActionLabel                   ( "Label" , ""                   )
    self . AttachActions                    ( False                          )
    self . detachActionsTool                (                                )
    self . Leave . emit                     ( self                           )
    ##########################################################################
    return True
  ############################################################################
  def DoBustle    ( self                                                   ) :
    self . Bustle (                                                          )
    return
  ############################################################################
  def setBustle               ( self                                       ) :
    self . emitBustle  . emit (                                              )
    return
  ############################################################################
  def DoVacancy    ( self                                                  ) :
    self . Vacancy (                                                         )
    return
  ############################################################################
  def setVacancy              ( self                                       ) :
    self . emitVacancy . emit (                                              )
    return
  ############################################################################
  def AtBusy           ( self                                              ) :
    ##########################################################################
    self . doStartBusy (                                                     )
    ##########################################################################
    return
  ############################################################################
  def DoBusy             ( self                                            ) :
    ##########################################################################
    self . OnBusy . emit (                                                   )
    ##########################################################################
    return
  ############################################################################
  def OnRelax          ( self                                              ) :
    ##########################################################################
    self . doStopBusy  (                                                     )
    ##########################################################################
    return
  ############################################################################
  def DoRelax              ( self                                          ) :
    ##########################################################################
    self . GoRelax . emit  (                                                 )
    ##########################################################################
    return
  ############################################################################
  def DoMdi                ( self                                          ) :
    ##########################################################################
    self . AtPlace = 1
    self . PlaceMdi . emit ( self                                            )
    ##########################################################################
    return
  ############################################################################
  def DoStack                ( self                                        ) :
    ##########################################################################
    self . AtPlace = 0
    self . PlaceStack . emit ( self                                          )
    ##########################################################################
    return
  ############################################################################
  def GoFullScreen               ( self                                    ) :
    ##########################################################################
    self . emitFullScreen . emit (                                           )
    ##########################################################################
    return
  ############################################################################
  def GoNormalWindow               ( self                                  ) :
    ##########################################################################
    self . emitNormalWindow . emit (                                         )
    ##########################################################################
    return
  ############################################################################
  def setFullScreen ( self , FULL                                          ) :
    ##########################################################################
    self . isFullScreen = FULL
    ##########################################################################
    return
  ############################################################################
  def ratioChanged            ( self , ID                                  ) :
    ##########################################################################
    if                        ( ID < 0                                     ) :
      return
    ##########################################################################
    r    = self . GetRatioBox (                                              )
    ##########################################################################
    if                        ( r in self . EmptySet                       ) :
      return
    ##########################################################################
    zv   = r . itemData       ( ID                                           )
    self . ZoomLevel = int    ( zv / 10                                      )
    self . doZoom             (                                              )
    ##########################################################################
    return
  ############################################################################
  def PrepareProgress      ( self                                          ) :
    ##########################################################################
    if                     ( self . LoadingPB not in self . EmptySet       ) :
      return
    ##########################################################################
    WPLAN = self . GetPlan (                                                 )
    ##########################################################################
    if                     ( self . NotOkay ( WPLAN )                      ) :
      return
    ##########################################################################
    self  . LoadingPB = QProgressBar       (                                 )
    self  . LoadingPB . setFormat          ( "%v / %m"                       )
    self  . LoadingPB . setMinimumWidth    ( 320                             )
    self  . LoadingPB . setMaximumWidth    ( 320                             )
    self  . LoadingPB . setRange           ( 0 , 1                           )
    self  . LoadingPB . setValue           ( 0                               )
    ##########################################################################
    WPLAN . statusBar . addPermanentWidget ( self . LoadingPB                )
    self  . LoadingPB . hide               (                                 )
    ##########################################################################
    return
  ############################################################################
  def completeProgress ( self                                              ) :
    ##########################################################################
    if                 ( self . NotOkay ( self  . LoadingPB )              ) :
      return
    ##########################################################################
    M    = self . LoadingPB
    self . LoadingPB = None
    ##########################################################################
    M    . hide        (                                                     )
    M    . deleteLater (                                                     )
    ##########################################################################
    return
  ############################################################################
  def stopProgress             ( self                                      ) :
    ##########################################################################
    self . emitComplete . emit (                                             )
    ##########################################################################
    return
  ############################################################################
  def assignProgress            ( self , Index , Total                     ) :
    ##########################################################################
    if                          ( self . NotOkay ( self  . LoadingPB )     ) :
      return
    ##########################################################################
    self . LoadingPB . show     (                                            )
    self . LoadingPB . setRange ( 0 , Total                                  )
    self . LoadingPB . setValue (     Index                                  )
    ##########################################################################
    return
  ############################################################################
  def setProgress              ( self , Index , Total                      ) :
    ##########################################################################
    self . emitProgress . emit (        Index , Total                        )
    ##########################################################################
    return
  ############################################################################
  def isScaling ( self                                                     ) :
    ##########################################################################
    if          ( 100 != self . Ratio . width  (                         ) ) :
      return True
    ##########################################################################
    if          ( 100 != self . Ratio . height (                         ) ) :
      return True
    ##########################################################################
    return   False
  ############################################################################
  def labelClicked           ( self , ID                                   ) :
    ##########################################################################
    if                       ( self . Method not in [ "Files","Gallery"  ] ) :
      return
    ##########################################################################
    if                       ( self . Method     in [ "Files"            ] ) :
      ########################################################################
      L = len                ( self . FILEs                                  )
      ########################################################################
      if                     ( ID >= L                                     ) :
        return
      ########################################################################
      self . imageIndex = ID
      ########################################################################
      M = self . FILEs       [ ID                                            ]
      self . statusMessage   ( f"{M}"                                        )
      self . ToggleSideTools ( True                                          )
      ########################################################################
      return
    ##########################################################################
    if                       ( self . Method     in [         "Gallery"  ] ) :
      ########################################################################
      L = len                ( self . PCIDs                                  )
      ########################################################################
      if                     ( ID >= L                                     ) :
        return
      ########################################################################
      self . imageIndex = ID
      ########################################################################
      U = self . PCIDs       [ ID                                            ]
      self . statusMessage   ( f"{U}"                                        )
      self . ToggleSideTools ( True                                          )
      ########################################################################
      return
    ##########################################################################
    return
  ############################################################################
  def toPixmap                  ( self , image                             ) :
    ##########################################################################
    PIX = QPixmap . fromImage   (        image                               )
    ##########################################################################
    if                          ( not self . isScaling (                 ) ) :
      return PIX
    ##########################################################################
    WS  = image        . size   (                                            )
    SW  = WS           . width  (                                            )
    SH  = WS           . height (                                            )
    RW  = self . Ratio . width  (                                            )
    RH  = self . Ratio . height (                                            )
    WW  = int                   ( int ( SW * RW ) / 100                      )
    HH  = int                   ( int ( SH * RH ) / 100                      )
    PIX = PIX . scaled          ( QSize ( WW , HH )                          )
    ##########################################################################
    return PIX
  ############################################################################
  def AssignPixmap                ( self                                   ) :
    ##########################################################################
    if                            ( self . Image in self . EmptySet        ) :
      return
    ##########################################################################
    WS    = self . Image . size   (                                          )
    SW    = WS           . width  (                                          )
    SH    = WS           . height (                                          )
    ##########################################################################
    PIX   = self . toPixmap       ( self . Image                             )
    ##########################################################################
    CPIX  = QWidget               (                                          )
    label = pvLabel               ( CPIX                                     )
    label . setAlignment          ( Qt . AlignCenter                         )
    label . setPixmap             ( PIX                                      )
    ##########################################################################
    self  . SOLO = label
    ##########################################################################
    TT    = ""
    ##########################################################################
    if                            ( self . PictureUuid > 0                 ) :
      ########################################################################
      FMT = self . getMenuItem    ( "PictureUuid"                            )
      TT  = FMT  . format         ( self . PictureUuid , SW , SH             )
      ########################################################################
    else                                                                     :
      ########################################################################
      FMT = self . getMenuItem    ( "PictureSize"                            )
      TT  = FMT  . format         (                      SW , SH             )
    ##########################################################################
    label . setToolTip            ( TT                                       )
    ##########################################################################
    self  . setWidget             ( CPIX                                     )
    self  . SoloResize            (                                          )
    ##########################################################################
    return
  ############################################################################
  def setImage          ( self , image                                     ) :
    ##########################################################################
    self . Image = image
    self . AssignPixmap (                                                    )
    ##########################################################################
    return
  ############################################################################
  def setGallery                 ( self , Pictures                         ) :
    ##########################################################################
    FMT1    = self . getMenuItem ( "PictureUuid"                             )
    FMT2    = self . getMenuItem ( "PictureSize"                             )
    WW      = 0
    HH      = 0
    B1      = self . Border
    B2      = int                ( B1 + B1                                   )
    PLEN    = len                ( Pictures                                  )
    GW      = B1 * int           ( PLEN + 1                                  )
    PIXs    =                    [                                           ]
    ##########################################################################
    for IMAGE in Pictures                                                    :
      ########################################################################
      PIX   = self . toPixmap    ( IMAGE                                     )
      ########################################################################
      if                         ( PIX in self . EmptySet                  ) :
        continue
      ########################################################################
      PIXs  . append             ( PIX                                       )
      WX    = PIX  . width       (                                           )
      WY    = PIX  . height      (                                           )
      ########################################################################
      if                         ( WX > WW                                 ) :
       WW   = WX
      ########################################################################
      HH    = HH   + WY
    ##########################################################################
    WIDGET  = QWidget            (                                           )
    WIDGET  . resize             ( WW + B2 , HH + GW                         )
    ##########################################################################
    YY      = B1
    CNT     = 0
    self    . MaxWidth = WW
    self    . LABELs   =         [                                           ]
    ##########################################################################
    for PIX in PIXs                                                          :
      ########################################################################
      WY    = PIX  . height      (                                           )
      ########################################################################
      label = pvLabel            ( WIDGET                                    )
      label . ID = CNT
      label . emitClicked . connect ( self . labelClicked                    )
      label . setAlignment       ( Qt . AlignCenter                          )
      label . setPixmap          ( PIX                                       )
      ########################################################################
      label . setGeometry        ( 0 , YY , WW , WY                          )
      ########################################################################
      TT    = ""
      PIMG  = Pictures           [ CNT                                       ]
      WS    = PIMG . size        (                                           )
      SW    = WS   . width       (                                           )
      SH    = WS   . height      (                                           )
      ########################################################################
      if                         ( "Gallery" == self . Method              ) :
        ######################################################################
        PID = self . PCIDs       [ CNT                                       ]
        TT  = FMT1 . format      ( PID , SW , SH                             )
        ######################################################################
      else                                                                   :
        ######################################################################
        TT  = FMT2 . format      (       SW , SH                             )
      ########################################################################
      label . setToolTip         ( TT                                        )
      self  . LABELs . append    ( label                                     )
      ########################################################################
      YY    = int                ( YY + WY + B1                              )
      CNT   = int                ( CNT + 1                                   )
    ##########################################################################
    self    . setWidget          ( WIDGET                                    )
    self    . MultipleResize     (                                           )
    ##########################################################################
    return
  ############################################################################
  def doZoom              ( self                                           ) :
    ##########################################################################
    S            = int    ( 10 * int ( self . ZoomLevel                    ) )
    self . Ratio = QSize  ( S , S                                            )
    ##########################################################################
    if                    ( self . Image != None                           ) :
      self . AssignPixmap (                                                  )
      return
    ##########################################################################
    if                    ( len ( self . Pictures ) > 0                    ) :
      self . setGallery   ( self . Pictures                                  )
      return
    ##########################################################################
    return
  ############################################################################
  def ZoomIn               ( self                                          ) :
    ##########################################################################
    self . ZoomLevel = self . ZoomLevel + 1
    ##########################################################################
    self . TryFitZoomRatio (                                                 )
    self . doZoom          (                                                 )
    ##########################################################################
    return
  ############################################################################
  def ZoomOut              ( self                                          ) :
    ##########################################################################
    if                     ( self . ZoomLevel <= 1                         ) :
      return
    ##########################################################################
    self . ZoomLevel = self . ZoomLevel - 1
    ##########################################################################
    self . TryFitZoomRatio (                                                 )
    self . doZoom          (                                                 )
    ##########################################################################
    return
  ############################################################################
  def SoloResize                  ( self                                   ) :
    ##########################################################################
    if                            ( self . Image in self . EmptySet        ) :
      return
    ##########################################################################
    WX     = self . width         (                                          )
    WY     = self . height        (                                          )
    WIDGET = self . widget        (                                          )
    PIX    = self . SOLO . pixmap (                                          )
    WW     = PIX  . width         (                                          )
    HH     = PIX  . height        (                                          )
    ##########################################################################
    XX     = 0
    B1     = int                  ( self . Border                            )
    B2     = int                  ( B1 + B1                                  )
    WX     = int                  ( WX - 20 - B2                             )
    ##########################################################################
    if                            ( WW > WX                                ) :
      ########################################################################
      WX   = WW
      ########################################################################
    else                                                                     :
      ########################################################################
      XX   = int                  ( int ( WX - WW ) / 2                      )
    ##########################################################################
    WIDGET .        setGeometry   (       0 ,  0 , WX + B2 , HH + B2         )
    self   . SOLO . setGeometry   ( XX + B1 , B1 , WW      , HH              )
    ##########################################################################
    return
  ############################################################################
  def MultipleResize         ( self                                        ) :
    ##########################################################################
    if                       ( len ( self . Pictures ) <= 0                ) :
      return
    ##########################################################################
    if                       ( len ( self . LABELs   ) <= 0                ) :
      return
    ##########################################################################
    B1      = int            ( self . Border                                 )
    B2      = int            ( B1 + B1                                       )
    WX      = self . width   (                                               )
    WY      = self . height  (                                               )
    WX      = int            ( WX - 20 - B2                                  )
    WIDGET  = self . widget  (                                               )
    ##########################################################################
    MW      = 0
    MH      = B1
    ##########################################################################
    for LABEL in self . LABELs                                               :
      ########################################################################
      WW    = LABEL . width  (                                               )
      HH    = LABEL . height (                                               )
      ########################################################################
      if                     ( WW > MW                                     ) :
        MW  = WW
      ########################################################################
      MH    = int            ( MH + HH + B1                                  )
    ##########################################################################
    if                       ( MW > WX                                     ) :
      ########################################################################
      WX    = MW
    ##########################################################################
    WIDGET  . setGeometry    ( 0 , 0 , WX + B2 , MH                          )
    ##########################################################################
    YY      = B1
    ##########################################################################
    for LABEL in self . LABELs                                               :
      ########################################################################
      WW    = LABEL . width  (                                               )
      HH    = LABEL . height (                                               )
      XX    = int            ( int ( WX - WW ) / 2                           )
      ########################################################################
      LABEL . setGeometry    ( XX + B1 , YY , WW , HH                        )
      ########################################################################
      YY    = int            ( YY + HH + B1                                  )
    ##########################################################################
    return
  ############################################################################
  def Relocation            ( self                                         ) :
    ##########################################################################
    if                      ( self . Image not in self . EmptySet          ) :
      ########################################################################
      self . SoloResize     (                                                )
      ########################################################################
      return False
    ##########################################################################
    if                      ( len ( self . Pictures ) <= 0                 ) :
      return False
    ##########################################################################
    self   . MultipleResize (                                                )
    ##########################################################################
    return   False
  ############################################################################
  def FetchImage                ( self , Uuid                              ) :
    ##########################################################################
    DB       = self . ConnectDB ( UsePure = True                             )
    if                          ( self . NotOkay ( DB )                    ) :
      return
    ##########################################################################
    self     . DoBusy           (                                            )
    self     . setBustle        (                                            )
    ##########################################################################
    FOUND    = False
    SUFFIX   = ""
    IMG      = None
    PICTAB   = self . Tables    [ "Information"                              ]
    DOPTAB   = self . Tables    [ "Depot"                                    ]
    PICOP    = PictureItem      (                                            )
    ##########################################################################
    INFO     = PICOP . GetInformation ( DB , PICTAB , Uuid                   )
    ##########################################################################
    if                          ( INFO not in [ False , None ]             ) :
      ########################################################################
      QQ     = f"select `file` from {DOPTAB} where ( `uuid` = {Uuid} ) ;"
      OKAY   = PICOP . FromDB   ( DB , QQ                                    )
      ########################################################################
      if                        ( OKAY                                     ) :
        ######################################################################
        IMG  = PICOP . toQImage (                                            )
        FOUND = True
    ##########################################################################
    self    . setVacancy        (                                            )
    self    . DoRelax           (                                            )
    DB      . Close             (                                            )
    ##########################################################################
    if                          ( not FOUND                                ) :
      return
    ##########################################################################
    if                          ( IMG in self . EmptySet                   ) :
      return
    ##########################################################################
    self . AssignImage . emit   ( IMG                                        )
    ##########################################################################
    return
  ############################################################################
  def FetchGallery                 ( self , T1 , UUID , RELATED            ) :
    ##########################################################################
    DB        = self . ConnectDB   ( UsePure = True                          )
    if                             ( self . NotOkay ( DB )                 ) :
      return
    ##########################################################################
    self      . DoBusy             (                                         )
    self      . setBustle          (                                         )
    ##########################################################################
    self      . Tables = self . ObtainsOwnerVariantTables                  ( \
                                     DB                                    , \
                                     str ( UUID )                          , \
                                     int ( T1 )                            , \
                                     "PicturesView"                        , \
                                     self . Tables                           )
    ##########################################################################
    PICTAB    = self . Tables      [ "Information"                           ]
    DOPTAB    = self . Tables      [ "Depot"                                 ]
    RELTAB    = self . Tables      [ "Relation"                              ]
    ##########################################################################
    Pictures  =                    [                                         ]
    GALM      = GalleryItem        (                                         )
    UUIDs     = GALM . GetPictures ( DB , RELTAB , UUID , T1 , RELATED       )
    ##########################################################################
    TOTAL     = len                ( UUIDs                                   )
    INDEX     = 0
    ##########################################################################
    self . PCIDs = UUIDs
    ##########################################################################
    for UUID in UUIDs                                                        :
      ########################################################################
      INDEX   = int                ( INDEX + 1                               )
      self    . setProgress        ( INDEX , TOTAL                           )
      ########################################################################
      PICOP   = PictureItem        (                                         )
      INFO    = PICOP . GetInformation ( DB , PICTAB , UUID                  )
      ########################################################################
      if                           ( INFO not in [ False , None ]          ) :
        ######################################################################
        QQ    = f"select `file` from {DOPTAB} where ( `uuid` = {UUID} ) ;"
        OKAY  = PICOP . FromDB     ( DB , QQ                                 )
        ######################################################################
        if                         ( OKAY                                  ) :
          ####################################################################
          IMG = PICOP . toQImage   (                                         )
          ####################################################################
          if                       ( IMG not in self . EmptySet            ) :
            Pictures . append      ( IMG                                     )
    ##########################################################################
    self      . stopProgress       (                                         )
    self      . setVacancy         (                                         )
    self      . DoRelax            (                                         )
    ##########################################################################
    DB        . Close              (                                         )
    ##########################################################################
    self . Pictures = Pictures
    ##########################################################################
    self . AssignGallery . emit    ( Pictures                                )
    ##########################################################################
    return
  ############################################################################
  def BackgroundLoadFile      ( self , filename                            ) :
    ##########################################################################
    IMG  = QImage             ( filename                                     )
    self . AssignImage . emit ( IMG                                          )
    ##########################################################################
    return
  ############################################################################
  def BackgroundLoadFiles           ( self , FILEs                         ) :
    ##########################################################################
    self     . DoBusy               (                                        )
    self     . setBustle            (                                        )
    ##########################################################################
    TOTAL    = len                  ( FILEs                                  )
    INDEX    = 0
    PICs     =                      [                                        ]
    ##########################################################################
    for F in FILEs                                                           :
      ########################################################################
      INDEX  = int                  ( INDEX + 1                              )
      self   . setProgress          ( INDEX , TOTAL                          )
      ########################################################################
      IMG    = QImage               ( F                                      )
      ########################################################################
      if                            ( IMG not in self . EmptySet           ) :
        PICs . append               ( IMG                                    )
    ##########################################################################
    self     . stopProgress         (                                        )
    self     . setVacancy           (                                        )
    self     . DoRelax              (                                        )
    ##########################################################################
    self     . Pictures = PICs
    ##########################################################################
    self     . AssignGallery . emit ( PICs                                   )
    ##########################################################################
    return
  ############################################################################
  def CloseView               ( self                                       ) :
    ##########################################################################
    self . CloseViewer . emit ( self                                         )
    ##########################################################################
    return
  ############################################################################
  def EditPicture                ( self                                    ) :
    ##########################################################################
    if                           ( self . PictureUuid > 0                  ) :
      ########################################################################
      PCID = self . PictureUuid
      PXID = f"{PCID}"
      self . emitEditUuid . emit ( PXID , self . Tables                      )
      ########################################################################
      return
    ##########################################################################
    if                           ( len ( self . Filename ) > 0             ) :
      ########################################################################
      self . emitEditFile . emit ( self . Filename                           )
      ########################################################################
      return
    ##########################################################################
    if                           ( self . imageIndex < 0                   ) :
      return
    ##########################################################################
    if                           ( self . Method in [ "Files"            ] ) :
      ########################################################################
      L    = len                 ( self . FILEs                              )
      ########################################################################
      if                         ( self . imageIndex >= L                  ) :
        return
      ########################################################################
      F    = self . FILEs        [ self . imageIndex                         ]
      self . emitEditFile . emit ( F                                         )
      ########################################################################
      return
    ##########################################################################
    if                           ( self . Method in [ "Gallery"          ] ) :
      ########################################################################
      L = len                    ( self . PCIDs                              )
      ########################################################################
      if                         ( self . imageIndex >= L                  ) :
        return
      ########################################################################
      U    = self . PCIDs        [ self . imageIndex                         ]
      self . emitEditUuid . emit ( str ( U ) , self . Tables                 )
      ########################################################################
      return
    ##########################################################################
    return
  ############################################################################
  def isEditable ( self                                                    ) :
    ##########################################################################
    if           ( self . PictureUuid > 0                                  ) :
      return   True
    ##########################################################################
    FLEN = len   ( self . Filename                                           )
    ##########################################################################
    if           ( FLEN > 0                                                ) :
      return   True
    ##########################################################################
    PLEN = len   ( self . PCIDs                                              )
    ##########################################################################
    if           ( PLEN > 0                                                ) :
      if         ( self . PickedUuid > 0                                   ) :
        return True
    ##########################################################################
    if           ( self . imageIndex < 0                                   ) :
      return False
    ##########################################################################
    if           ( self . Method in [ "Files"                            ] ) :
      ########################################################################
      L  = len   ( self . FILEs                                              )
      ########################################################################
      if         ( self . imageIndex >= L                                  ) :
        return False
      ########################################################################
      return   True
    ##########################################################################
    if           ( self . Method in [ "Gallery"                          ] ) :
      ########################################################################
      L  = len   ( self . PCIDs                                              )
      ########################################################################
      if         ( self . imageIndex >= L                                  ) :
        return False
      ########################################################################
      return   True
    ##########################################################################
    return     False
  ############################################################################
  def loadFile ( self , filename                                           ) :
    ##########################################################################
    self . Method   = "File"
    self . Filename = filename
    ##########################################################################
    self . Go  ( self . BackgroundLoadFile , ( filename , )                  )
    ##########################################################################
    return
  ############################################################################
  def loadFiles            ( self , FILEs                                  ) :
    ##########################################################################
    self . Method = "Files"
    self . FILEs  = FILEs
    ##########################################################################
    self . PrepareProgress (                                                 )
    self . Go              ( self . BackgroundLoadFiles , ( FILEs , )        )
    ##########################################################################
    return
  ############################################################################
  def loadUuid               ( self , Uuid                                 ) :
    ##########################################################################
    self . Method      = "Uuid"
    ##########################################################################
    self . PictureUuid = int ( Uuid                                          )
    ##########################################################################
    self . Go                ( self . FetchImage , ( Uuid , )                )
    ##########################################################################
    return
  ############################################################################
  def loadGallery          ( self , T1 , UUID , RELATED                    ) :
    ##########################################################################
    self . Method = "Gallery"
    ##########################################################################
    self . PrepareProgress (                                                 )
    ARGS =                 ( T1 , UUID , RELATED ,                           )
    self . Go              ( self . FetchGallery , ARGS                      )
    ##########################################################################
    return
  ############################################################################
  def Menu                      ( self , pos                               ) :
    ##########################################################################
    mm     = MenuManager        ( self                                       )
    ##########################################################################
    if                          ( self . isEditable (                    ) ) :
      ########################################################################
      MSG  = self . getMenuItem ( "EditPicture"                              )
      ICON = QIcon              ( ":/images/edit.png"                        )
      mm   . addActionWithIcon  ( 1001 , ICON , MSG                          )
    ##########################################################################
    if                          ( self . isFullScreen                      ) :
      ########################################################################
      MSG  = self . getMenuItem ( "NormalWindow"                             )
      ICON = QIcon              ( ":/images/GUI.png"                         )
      mm   . addActionWithIcon  ( 1102 , ICON , MSG                          )
      ########################################################################
    else                                                                     :
      ########################################################################
      MSG  = self . getMenuItem ( "FullScreen"                               )
      ICON = QIcon              ( ":/images/fullscreen.png"                  )
      mm   . addActionWithIcon  ( 1101 , ICON , MSG                          )
    ##########################################################################
    if                          ( 0 == self . AtPlace                      ) :
      ########################################################################
      MSG  = self . getMenuItem ( "MDI"                                      )
      ICON = QIcon              ( ":/images/hidespeech.png"                  )
      mm   . addActionWithIcon  ( 1202 , ICON , MSG                          )
      ########################################################################
    elif                        ( 1 == self . AtPlace                      ) :
      ########################################################################
      MSG  = self . getMenuItem ( "Stack"                                    )
      ICON = QIcon              ( ":/images/computer.png"                    )
      mm   . addActionWithIcon  ( 1201 , ICON , MSG                          )
    ##########################################################################
    MSG    = self . getMenuItem ( "CloseView"                                )
    ICON   = QIcon              ( ":/images/delete.png"                      )
    mm     . addActionWithIcon  ( 2001 , ICON , MSG                          )
    ##########################################################################
    self   . AtMenu = True
    ##########################################################################
    mm     . setFont            ( self    . menuFont ( )                     )
    aa     = mm . exec_         ( QCursor . pos      ( )                     )
    at     = mm . at            ( aa                                         )
    ##########################################################################
    self   . AtMenu = False
    ##########################################################################
    if                          ( at == 1001                               ) :
      ########################################################################
      self . EditPicture        (                                            )
      ########################################################################
      return True
    ##########################################################################
    if                          ( at == 1101                               ) :
      ########################################################################
      self . GoFullScreen       (                                            )
      ########################################################################
      return True
    ##########################################################################
    if                          ( at == 1102                               ) :
      ########################################################################
      self . GoNormalWindow     (                                            )
      ########################################################################
      return True
    ##########################################################################
    if                          ( at == 1201                               ) :
      ########################################################################
      self . DoStack            (                                            )
      ########################################################################
      return True
    ##########################################################################
    if                          ( at == 1202                               ) :
      ########################################################################
      self . DoMdi              (                                            )
      ########################################################################
      return True
    ##########################################################################
    if                          ( at == 2001                               ) :
      ########################################################################
      self . CloseView          (                                            )
      ########################################################################
      return True
    ##########################################################################
    return True
##############################################################################
